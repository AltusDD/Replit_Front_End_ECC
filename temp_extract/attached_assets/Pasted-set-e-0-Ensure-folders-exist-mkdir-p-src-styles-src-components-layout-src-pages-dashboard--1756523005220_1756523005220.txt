set -e

# 0) Ensure folders exist
mkdir -p src/styles src/components/layout src/pages/{dashboard,tools} src/pages/portfolio/{properties,units,leases,tenants,owners}

# 1) Authoritative theme tokens + base styling (NO other global CSS allowed)
cat > src/styles/theme.css <<'CSS'
:root{
  /* Brand */
  --gold:#F7C948;         /* accent */
  --gold-600:#D6AE2F;
  --gold-700:#B8921F;

  /* Surface + text */
  --bg:#0B0E12;
  --panel:#10151C;
  --panel-2:#121923;
  --panel-3:#0E1420;
  --text:#E7ECF2;
  --muted:#A5B0BD;
  --border:#223043;
  --success:#16A34A;
  --warn:#F59E0B;
  --danger:#EF4444;
  --link:#5CA7FF;

  /* Layout */
  --sidebar-w: 248px;
  --radius:12px;
  --shadow: 0 6px 22px rgba(0,0,0,.35);
}

*{box-sizing:border-box}
html,body,#root{height:100%}
body{margin:0;background:var(--bg);color:var(--text);font:14px/1.45 ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Inter,Arial}
h1,h2,h3{margin:0 0 12px}
a{color:var(--link);text-decoration:none}
a:hover{text-decoration:underline}

.btn{display:inline-flex;align-items:center;gap:8px;background:var(--gold);color:#111;padding:9px 14px;border-radius:10px;border:1px solid var(--gold-700);cursor:pointer}
.btn.ghost{background:transparent;color:var(--text);border:1px solid var(--border)}
.badge{display:inline-flex;gap:8px;align-items:center;border:1px solid var(--border);border-radius:999px;padding:4px 9px;color:var(--muted);font-size:12px}

.layout{display:grid;grid-template-columns:var(--sidebar-w) 1fr;height:100%}
.main{padding:24px 28px;min-width:0}

.sidebar{background:var(--panel-3);border-right:1px solid var(--border);padding:16px 10px;position:sticky;top:0;height:100vh;overflow:auto}
.brand{display:flex;align-items:center;gap:10px;padding:6px 8px 18px 8px;border-bottom:1px solid var(--border);margin-bottom:10px}
.brand .logo{width:28px;height:28px;display:grid;place-items:center;background:var(--gold);color:#111;border-radius:8px;font-weight:800}
.brand .title{font-weight:700;letter-spacing:.3px}

.navSec{margin-top:14px}
.navSec .secH{display:flex;justify-content:space-between;align-items:center;color:var(--muted);font-size:12px;padding:8px 12px}
ul.nav{list-style:none;margin:6px 0 0 0;padding:0}
.nav a{display:flex;align-items:center;gap:10px;color:var(--text);padding:9px 12px;border-radius:10px;border:1px solid transparent}
.nav a:hover{background:var(--panel-2);border-color:var(--border)}
.nav a.active{background:linear-gradient(180deg, rgba(247,201,72,.12), rgba(247,201,72,.06));border-color:var(--gold-700)}
.nav .group{margin-top:8px}
.nav .group .gH{color:var(--muted);font-size:12px;padding:6px 12px}
.nav .leaf{padding-left:8px}
.nav .leaf a{padding-left:18px}

.panel{background:var(--panel);border:1px solid var(--border);border-radius:var(--radius);box-shadow:var(--shadow)}
.cards{display:grid;grid-template-columns:repeat(5,minmax(220px,1fr));gap:16px}
.card{padding:16px;border-radius:var(--radius);border:1px solid var(--border);background:var(--panel-2)}
.card h6{color:var(--muted);font-weight:600;margin-bottom:12px}
.card .n{font-size:30px;font-weight:800}

.table{width:100%;border-collapse:collapse;border:1px solid var(--border)}
.table th,.table td{padding:10px 12px;border-bottom:1px solid var(--border)}
.table thead th{background:var(--panel-3);text-align:left;color:var(--muted)}
CSS

cat > src/styles/app.css <<'CSS'
.pageTitle{font-size:26px;font-weight:800;margin-bottom:16px}
.kv{display:flex;gap:10px;flex-wrap:wrap}
.kv .kvp{border:1px solid var(--border);padding:8px 10px;border-radius:999px;color:var(--muted)}
.grid{display:grid;gap:16px}
.grid.cols-2{grid-template-columns:repeat(2,minmax(0,1fr))}
.grid.cols-3{grid-template-columns:repeat(3,minmax(0,1fr))}
.grid.cols-4{grid-template-columns:repeat(4,minmax(0,1fr))}
CSS

# 2) Authoritative nav config (single source of truth)
cat > src/components/layout/navConfig.ts <<'TS'
export type Leaf = { label:string; path:string };
export type Group = { label:string; children:Leaf[] };
export type Section = { label:string; items:(Leaf|Group)[] };

export const NAV: Section[] = [
  { label: "Primary", items: [ {label:"Dashboard", path:"/dashboard"} ] },
  { label: "Portfolio V3", items: [
      {label:"Properties", path:"/portfolio/properties"},
      {label:"Units",      path:"/portfolio/units"},
      {label:"Leases",     path:"/portfolio/leases"},
      {label:"Tenants",    path:"/portfolio/tenants"},
      {label:"Owners",     path:"/portfolio/owners"},
  ]},
  { label: "Cards", items: [
      {label:"Inbox", path:"/cards/inbox"},
      {label:"Tasks", path:"/cards/tasks"},
      {label:"Opportunities", path:"/cards/opportunities"},
      {label:"Anomalies", path:"/cards/anomalies"},
      {label:"Next Best Action", path:"/cards/next-best-action"},
  ]},
  { label: "Operations", items: [
      {label:"Accounting", children:[
        {label:"AR", path:"/ops/accounting/ar"},
        {label:"AP", path:"/ops/accounting/ap"},
        {label:"GL", path:"/ops/accounting/gl"},
        {label:"Banking", path:"/ops/accounting/banking"},
        {label:"Close", path:"/ops/accounting/close"},
        {label:"Reporting", path:"/ops/accounting/reporting"},
        {label:"Budgets", path:"/ops/accounting/budgets"},
        {label:"Taxes", path:"/ops/accounting/taxes"},
        {label:"Vendors", path:"/ops/accounting/vendors"},
        {label:"Receipts", path:"/ops/accounting/receipts"},
        {label:"Allocations", path:"/ops/accounting/allocations"},
        {label:"Audit Trail", path:"/ops/accounting/audit"}
      ]},
      {label:"Leasing", children:[
        {label:"Applications", path:"/ops/leasing/apps"},
        {label:"Screening", path:"/ops/leasing/screening"},
        {label:"Renewals", path:"/ops/leasing/renewals"},
        {label:"Move-in/Move-out", path:"/ops/leasing/mimo"},
        {label:"Delinquencies", path:"/ops/leasing/delinquencies"}
      ]},
      {label:"Maintenance", children:[
        {label:"Work Orders", path:"/ops/maint/work-orders"},
        {label:"Turns", path:"/ops/maint/turns"},
        {label:"CapEx", path:"/ops/maint/capex"},
        {label:"Vendors", path:"/ops/maint/vendors"}
      ]},
      {label:"Compliance", children:[
        {label:"Docs", path:"/ops/compliance/docs"},
        {label:"Inspections", path:"/ops/compliance/inspections"},
        {label:"Insurance", path:"/ops/compliance/insurance"},
        {label:"Licenses", path:"/ops/compliance/licenses"}
      ]},
      {label:"Vendors", children:[
        {label:"Directory", path:"/ops/vendors/directory"},
        {label:"Onboarding", path:"/ops/vendors/onboarding"},
        {label:"Scorecards", path:"/ops/vendors/scorecards"}
      ]},
  ]},
  { label: "Growth", items: [
      {label:"Acquisitions", path:"/growth/acquisitions"},
      {label:"Marketing", path:"/growth/marketing"},
  ]},
  { label: "System", items: [
      {label:"Settings", path:"/system/settings"},
      {label:"Users & Roles", path:"/system/users"},
  ]},
  { label: "Data Management", items: [
      {label:"Imports", path:"/data/imports"},
      {label:"Exports", path:"/data/exports"},
      {label:"Dedupe", path:"/data/dedupe"},
      {label:"Archives", path:"/data/archives"},
      {label:"Audit Logs", path:"/data/audit"},
  ]},
  { label: "Investor Portal", items: [
      {label:"Overview", path:"/investor/overview"},
      {label:"Distributions", path:"/investor/distributions"},
      {label:"Statements", path:"/investor/statements"},
  ]},
  { label: "Integrations", items: [
      {label:"DoorLoop", path:"/integrations/doorloop"},
      {label:"QuickBooks", path:"/integrations/quickbooks"},
      {label:"Azure", path:"/integrations/azure"},
      {label:"Webhooks", path:"/integrations/webhooks"},
  ]},
  { label: "Tools", items: [ {label:"API Probe", path:"/tools/probe"} ] }
];

export function flattenLeaves() {
  const leaves: Leaf[] = [];
  for (const sec of NAV) for (const it of sec.items) {
    if ("path" in it) leaves.push(it as Leaf);
    else (it as Group).children.forEach(c => leaves.push(c));
  }
  return leaves;
}
TS

# 3) Sidebar + Layout + Logo
cat > src/components/layout/Nav.tsx <<'TSX'
import { Link, useLocation } from "wouter";
import { NAV, Section, Group, Leaf } from "./navConfig";

function LeafLink({leaf}:{leaf:Leaf}) {
  const [loc] = useLocation();
  const active = loc === leaf.path;
  return (
    <li className="leaf">
      <Link href={leaf.path} className={active ? "active" : ""}>{leaf.label}</Link>
    </li>
  );
}

function RenderItem(it: Leaf | Group) {
  if ('path' in it) return <LeafLink leaf={it} />;
  return (
    <li className="group">
      <div className="gH">{it.label}</div>
      <ul className="nav">
        {it.children.map((c) => <LeafLink key={c.path} leaf={c} />)}
      </ul>
    </li>
  );
}

function SectionBlock({sec}:{sec:Section}) {
  return (
    <div className="navSec">
      <div className="secH">{sec.label}</div>
      <ul className="nav">
        {sec.items.map((it, i) => <RenderItem key={i+(('path'in it)?it.path:it.label)} {...({} as any)} />)}
      </ul>
    </div>
  );
}

export default function Nav(){
  return (
    <aside className="sidebar">
      <div className="brand">
        <div className="logo">AE</div>
        <div className="title">Empire Command Center</div>
      </div>
      {NAV.map((sec, i) => <SectionBlock key={sec.label+i} sec={sec} />)}
    </aside>
  );
}
TSX

cat > src/components/layout/Layout.tsx <<'TSX'
import Nav from "./Nav";
import React from "react";
export default function Layout({children}:{children:React.ReactNode}){
  return (
    <div className="layout">
      <Nav />
      <main className="main">
        {children}
      </main>
    </div>
  );
}
TSX

# 4) Minimal API client with smart fallbacks
cat > src/lib/useApi.ts <<'TS'
import { useEffect, useMemo, useState } from 'react';

export const API_BASE = import.meta.env.VITE_API_BASE || '/api';
const HEADERS: Record<string,string> = { Accept:'application/json' };
const KEY = import.meta.env.VITE_API_KEY || ''; if (KEY) HEADERS['x-api-key'] = KEY;

export function buildUrl(path:string, params?:Record<string,any>) {
  let u = /^https?:\/\//i.test(path) ? path : (path.startsWith('/') ? path : `${API_BASE.replace(/\/$/,'')}/${path}`);
  if (params && Object.keys(params).length) {
    const s = new URLSearchParams();
    Object.entries(params).forEach(([k,v])=> v!=null && s.set(k, String(v)));
    const q = s.toString(); if (q) u += (u.includes('?') ? '&' : '?')+q;
  }
  return u;
}
export async function fetchJSON<T=any>(url:string, init:RequestInit={}) {
  const res = await fetch(url, {...init, headers:{...HEADERS, ...(init.headers||{})}});
  if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
  return res.json() as Promise<T>;
}
export function useCounts(){
  const [data,set] = useState<any|null>(null);
  const [loading,setL] = useState(true);
  const [error,setE] = useState<any>(null);
  useEffect(()=>{(async()=>{
    setL(true); setE(null);
    const tries = [
      buildUrl('/api/portfolio/counts'),
      buildUrl('/api/counts'),
      buildUrl('portfolio/counts'),
      buildUrl('counts'),
      buildUrl('/api/rpc/portfolio_counts')
    ];
    for (const u of tries) {
      try { set(await fetchJSON(u)); setL(false); return; } catch {}
    }
    setE(new Error('Counts endpoint not found')); setL(false);
  })()},[]);
  return {data, loading, error};
}
export function useCollection(col:string, params:Record<string,any>={}){
  const qs = useMemo(()=>{const s=new URLSearchParams();Object.entries(params).forEach(([k,v])=>v!=null&&s.set(k,String(v)));const q=s.toString();return q?`?${q}`:''},[JSON.stringify(params)]);
  const [data,set]=useState<any[]>([]); const [loading,setL]=useState(true); const [error,setE]=useState<any>(null);
  useEffect(()=>{let live=true;(async()=>{
    setL(true); setE(null);
    const tries = [
      buildUrl(`/api/portfolio/${col}${qs}`),
      buildUrl(`/api/${col}${qs}`),
      buildUrl(`portfolio/${col}${qs}`),
      buildUrl(`${col}${qs}`)
    ];
    for (const u of tries) {
      try { const j:any = await fetchJSON(u); if(!live) return;
        const rows = Array.isArray(j?.items)?j.items : Array.isArray(j?.data)?j.data : Array.isArray(j)?j : [];
        set(rows); setL(false); return;
      } catch {}
    }
    if(live){ set([]); setE(new Error('No collection found')); setL(false); }
  })(); return()=>{live=false}},[col,qs]);
  return {data, loading, error};
}
TS

# 5) App shell + routes
cat > src/App.tsx <<'TSX'
import { Route, Switch, Redirect } from "wouter";
import Layout from "@/components/layout/Layout";
import Dashboard from "@/pages/dashboard";
import ApiProbe from "@/pages/tools/probe";
import Properties from "@/pages/portfolio/properties";
import Units from "@/pages/portfolio/units";
import Leases from "@/pages/portfolio/leases";
import Tenants from "@/pages/portfolio/tenants";
import Owners from "@/pages/portfolio/owners";

export default function App(){
  return (
    <Layout>
      <Switch>
        <Route path="/" component={()=><Redirect to="/dashboard" />} />
        <Route path="/dashboard" component={Dashboard}/>
        <Route path="/portfolio/properties" component={Properties}/>
        <Route path="/portfolio/units" component={Units}/>
        <Route path="/portfolio/leases" component={Leases}/>
        <Route path="/portfolio/tenants" component={Tenants}/>
        <Route path="/portfolio/owners" component={Owners}/>
        <Route path="/tools/probe" component={ApiProbe}/>
        <Route>404 Not Found</Route>
      </Switch>
    </Layout>
  );
}
TSX

# 6) Main entry with ONLY the two CSS files
cat > src/main.tsx <<'TSX'
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import "./styles/theme.css";
import "./styles/app.css";

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode><App/></React.StrictMode>
);
TSX

# 7) Dashboard + Portfolio pages
cat > src/pages/dashboard/index.tsx <<'TSX'
import { useCounts } from "@lib/useApi";

function Stat({label, value}:{label:string, value:any}){
  return (
    <div className="card">
      <h6>{label}</h6>
      <div className="n">{value ?? "…"}</div>
    </div>
  );
}

export default function Dashboard(){
  const {data, error} = useCounts();
  return (
    <>
      <h1 className="pageTitle">Dashboard</h1>
      {error && <div className="panel" style={{padding:12,marginBottom:12}}>API error: {String(error.message||error)}</div>}
      <div className="cards">
        <Stat label="Properties" value={data?.properties}/>
        <Stat label="Units" value={data?.units}/>
        <Stat label="Leases" value={data?.leases}/>
        <Stat label="Tenants" value={data?.tenants}/>
        <Stat label="Owners" value={data?.owners}/>
      </div>
      <div style={{marginTop:16}}><span className="badge">Powered by RPC</span></div>
    </>
  );
}
TSX

gen_portfolio_page () {
  local name="$1"; local col="$2"
  mkdir -p "src/pages/portfolio/$col"
  cat > "src/pages/portfolio/$col/index.tsx" <<TSX
import { useCollection } from "@lib/useApi";

export default function ${name}(){
  const {data, loading, error} = useCollection("${col}");
  return (
    <>
      <h1 className="pageTitle">${name}</h1>
      {error && <div className="panel" style={{padding:12,marginBottom:12}}>API error: {String(error.message||error)}</div>}
      <div className="panel" style={{padding:12}}>
        <table className="table">
          <thead><tr>{Object.keys((data[0]||{})).slice(0,7).map(k=><th key={k}>{k}</th>)}</tr></thead>
          <tbody>
            {loading ? <tr><td>Loading…</td></tr> :
              data.length === 0 ? <tr><td>No results</td></tr> :
              data.slice(0,50).map((row:any,i:number)=>(
                <tr key={i}>{Object.entries(row).slice(0,7).map(([k,v])=> <td key={k}>{String(v)}</td>)}</tr>
              ))
            }
          </tbody>
        </table>
      </div>
    </>
  )
}
TSX
}
gen_portfolio_page "Properties" properties
gen_portfolio_page "Units" units
gen_portfolio_page "Leases" leases
gen_portfolio_page "Tenants" tenants
gen_portfolio_page "Owners" owners

# 8) API Probe
cat > src/pages/tools/probe.tsx <<'TSX'
import { useState } from "react";
import { buildUrl } from "@lib/useApi";

export default function ApiProbe(){
  const [path, setPath] = useState("/api/health");
  const [out, setOut] = useState<any>(null);
  const [ok, setOk] = useState<boolean|null>(null);

  async function run(){
    setOk(null);
    try{
      const res = await fetch(buildUrl(path));
      const j = await res.json();
      setOut(j); setOk(res.ok);
    }catch(e:any){ setOut({error:String(e)}); setOk(false); }
  }

  return (
    <>
      <h1 className="pageTitle">API Probe</h1>
      <div className="panel" style={{padding:12, marginBottom:16}}>
        <div style={{display:"flex", gap:8}}>
          <input value={path} onChange={e=>setPath(e.target.value)} style="flex:1;border:1px solid var(--border);background:transparent;color:var(--text);padding:8px;border-radius:8px" />
          <button className="btn" onClick={run}>Probe</button>
        </div>
        <div style="margin-top:10px" className="kv">
          <div className="kvp">ok: {String(ok)}</div>
          <div className="kvp">target: {buildUrl(path)}</div>
        </div>
      </div>
      <div className="panel" style={{padding:12}}><pre style="white-space:pre-wrap">{JSON.stringify(out, null, 2)}</pre></div>
    </>
  );
}
TSX

# 9) Entry HTML
cat > index.html <<'HTML'
<!doctype html>
<html><head>
<meta charset="UTF-8"/><meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<title>Empire Command Center</title>
</head>
<body><div id="root"></div><script type="module" src="/src/main.tsx"></script></body>
</html>
HTML

# 10) Vite config: port + alias + proxy
cat > vite.config.mjs <<'JS'
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';
const allowed = true; // Replit ephemeral hosts
export default defineConfig({
  plugins:[react()],
  resolve:{ alias:{ '@': path.resolve(__dirname,'./src'), '@lib': path.resolve(__dirname,'./src/lib') } },
  server:{
    host:'0.0.0.0', port: Number(process.env.PORT)||3000, strictPort:false, allowedHosts:allowed,
    proxy:{
      '/api':{
        target: process.env.VITE_API_TARGET || 'https://empirecommandcenter-altus-staging.azurewebsites.net',
        changeOrigin:true, secure:true,
        // pass-through auth header if provided
        configure:(proxy, _opts)=>{
          proxy.on('proxyReq',(pReq, req)=>{ if(req.headers['x-api-key']) pReq.setHeader('x-api-key', req.headers['x-api-key']); });
        }
      }
    }
  }
});
JS

# 11) Preflight "vet" to kill drift
mkdir -p scripts
cat > scripts/vet.cjs <<'CJS'
const fs=require('fs'), path=require('path');
const fail=(m)=>{ console.error('❌ Vet failed:',m); process.exit(1); };
const ok=(m)=> console.log('✅',m);

const mainTsx = fs.readFileSync('src/main.tsx','utf8');
const cssImports = (mainTsx.match(/import\s+["']\.\/styles\/.*\.css["']/g)||[]).length;
if(cssImports!==2) fail('main.tsx must import exactly two CSS files (theme.css, app.css).');

const theme = fs.readFileSync('src/styles/theme.css','utf8');
['--gold','#F7C948','--bg','--panel'].forEach(tok=>{
  if(!theme.includes(tok)) fail('Brand token missing: '+tok);
});

const scanCss = (dir)=>{
  for(const f of fs.readdirSync(dir)){
    const p = path.join(dir,f);
    const s = fs.statSync(p);
    if(s.isDirectory()) scanCss(p);
    else if(/\.tsx?$/.test(p) && /import\s+['"][^'"]+\.css['"]/.test(fs.readFileSync(p,'utf8'))) fail('Rogue CSS import: '+p);
  }
};
scanCss('src');
ok('Theme + CSS guardrails enforced.');
CJS

# ensure predev hook
node -e "const p=require('./package.json'); p.scripts=p.scripts||{}; p.scripts.predev='node scripts/vet.cjs'; p.scripts.dev='vite'; require('fs').writeFileSync('package.json', JSON.stringify(p,null,2)); console.log('✅ package.json scripts updated');"

# 12) Install deps and start
npm i
npm run dev
