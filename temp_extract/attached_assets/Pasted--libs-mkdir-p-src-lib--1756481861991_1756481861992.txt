# --- libs --------------------------------------------------------------------
mkdir -p src/lib

# safe.ts helpers
cat > src/lib/safe.ts <<'TS'
export function asArray<T>(v: T | T[] | null | undefined): T[] {
  return Array.isArray(v) ? v : v == null ? [] : [v];
}
export function pick<T extends Record<string, any>, K extends keyof T>(
  obj: T,
  ...keys: K[]
): Partial<Pick<T, K>> {
  const out: Partial<Pick<T, K>> = {};
  for (const k of keys) if (obj && obj[k] != null) out[k] = obj[k];
  return out;
}
export function safeNum(v: any, d = 0): number {
  const n = Number(v);
  return Number.isFinite(n) ? n : d;
}
export function truncate(v: any, n = 80): string {
  const s = String(v ?? '');
  return s.length > n ? s.slice(0, n - 1) + '…' : s;
}
export function get(o: any, path: string, d?: any) {
  try {
    return path.split('.').reduce((a, k) => (a == null ? undefined : a[k]), o) ?? d;
  } catch {
    return d;
  }
}
TS

# ecc-api.ts (hardened client)
cat > src/lib/ecc-api.ts <<'TS'
const ABS = /^https?:\/\//i;

export function getBase(): string {
  const raw = (import.meta as any).env?.VITE_API_BASE ?? '/api';
  const base = (String(raw || '/api')).trim();
  if (ABS.test(base)) return base.replace(/\/+$/, '');
  const origin =
    typeof window !== 'undefined' && window.location?.origin
      ? window.location.origin
      : 'http://localhost';
  return `${origin}/${base.replace(/^\/+/, '').replace(/\/+$/, '')}`;
}

export function normalizePath(input: string): string {
  const s = String(input).replace(/^\/+api\/+/, '').replace(/^\/+/, '');
  return s.includes('/') ? s : `portfolio/${s}`;
}

export function buildUrl(
  input: string,
  params?: Record<string, string | number | boolean | null | undefined>
): string {
  const url = new URL(normalizePath(input), getBase() + '/');
  if (params) {
    for (const [k, v] of Object.entries(params)) {
      if (v !== undefined && v !== null && v !== '') url.searchParams.set(k, String(v));
    }
  }
  return url.toString();
}

export async function fetchJSON(
  path: string,
  opts: { params?: Record<string, any>; signal?: AbortSignal; headers?: Record<string, string> } = {}
) {
  const url = buildUrl(path, opts.params);
  const res = await fetch(url, {
    signal: opts.signal,
    headers: { Accept: 'application/json', ...(opts.headers || {}) }
  });
  if (!res.ok) {
    const isRpc = /^rpc\//i.test(normalizePath(path));
    if (isRpc && res.status === 404) return []; // optional feature absent
    throw new Error(`HTTP ${res.status} for ${url}`);
  }
  return res.json();
}

export async function fetchCollection(
  collOrPath: string,
  params: { select?: string; order?: string; limit?: number; offset?: number; signal?: AbortSignal } = {}
) {
  const p = { select: '*', limit: 200, ...(params || {}) };
  const items = await fetchJSON(collOrPath, { params: p, signal: params.signal });
  return { items: Array.isArray(items) ? items : [] };
}
TS

# facade api.ts
cat > src/lib/api.ts <<'TS'
export { buildUrl, fetchJSON, fetchCollection, fetchCollection as fetchPortfolio } from './ecc-api';
TS

# abort-safe hooks
cat > src/lib/useApi.ts <<'TS'
import { useEffect, useState } from 'react';
import { fetchCollection } from './ecc-api';

export function useCollection<T = any>(
  collection: string,
  params: { select?: string; order?: string; limit?: number } = {}
) {
  const [data, setData] = useState<T[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);

  useEffect(() => {
    const ac = new AbortController();
    setLoading(true);
    setError(null);
    fetchCollection(collection, { order: 'updated_at.desc', ...params, signal: ac.signal })
      .then(({ items }) => {
        if (!ac.signal.aborted) setData(items as T[]);
      })
      .catch((e) => {
        if (e?.name !== 'AbortError' && !ac.signal.aborted) setError(e as Error);
      })
      .finally(() => !ac.signal.aborted && setLoading(false));
    return () => ac.abort();
  }, [collection, JSON.stringify(params)]);

  return { data, loading, error };
}
TS

# --- UI components ------------------------------------------------------------
mkdir -p src/components/ui

cat > src/components/ui/Badge.tsx <<'TSX'
type Tone = 'neutral' | 'info' | 'success' | 'warn' | 'danger';
const colors: Record<Tone, string> = {
  neutral: 'background:var(--panel);color:var(--text);border:1px solid var(--border)',
  info: 'background:rgba(59,130,246,.15);color:#93c5fd;border:1px solid rgba(59,130,246,.35)',
  success: 'background:rgba(22,163,74,.15);color:#86efac;border:1px solid rgba(22,163,74,.35)',
  warn: 'background:rgba(245,158,11,.15);color:#fcd34d;border:1px solid rgba(245,158,11,.35)',
  danger: 'background:rgba(239,68,68,.15);color:#fca5a5;border:1px solid rgba(239,68,68,.35)'
};
export default function Badge({
  tone = 'neutral',
  children
}: {
  tone?: Tone;
  children: React.ReactNode;
}) {
  return (
    <span
      style={{
        borderRadius: 999,
        padding: '4px 10px',
        fontSize: 12,
        display: 'inline-flex',
        alignItems: 'center',
        gap: 6,
        ...(Object.fromEntries(
          colors[tone].split(';').filter(Boolean).map((kv) => {
            const [k, v] = kv.split(':');
            return [k.trim() as any, v.trim()];
          })
        ) as any)
      }}
    >
      {children}
    </span>
  );
}
TSX

cat > src/components/ui/StatCard.tsx <<'TSX'
import Badge from './Badge';
export default function StatCard({
  title,
  value,
  badge,
  hint
}: {
  title: string;
  value: string | number;
  badge?: { tone?: 'neutral' | 'info' | 'success' | 'warn' | 'danger'; text: string } | null;
  hint?: string;
}) {
  return (
    <div className="panel" style={{ minWidth: 220 }}>
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'baseline' }}>
        <div style={{ color: 'var(--muted)', fontSize: 12, textTransform: 'uppercase' }}>{title}</div>
        {badge && <Badge tone={badge.tone ?? 'neutral'}>{badge.text}</Badge>}
      </div>
      <div style={{ fontSize: 28, fontWeight: 700, marginTop: 8 }}>{value}</div>
      {hint && <div style={{ color: 'var(--muted)', marginTop: 6, fontSize: 12 }}>{hint}</div>}
    </div>
  );
}
TSX

cat > src/components/ui/Table.tsx <<'TSX'
type Col<T=any> = { key: string; label: string; render?: (row: T) => React.ReactNode; width?: number|string };
export default function Table<T=any>({ columns, rows }: { columns: Col<T>[]; rows: T[] }) {
  return (
    <div className="panel">
      <table style={{ width: '100%', borderCollapse: 'collapse' }}>
        <thead>
          <tr>
            {columns.map((c) => (
              <th key={c.key} style={{ textAlign: 'left', padding: '8px 10px', color: 'var(--muted)', fontWeight: 600, borderBottom: '1px solid var(--border)', width: c.width }}>
                {c.label}
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {rows.length === 0 ? (
            <tr>
              <td colSpan={columns.length} style={{ padding: 12, color: 'var(--muted)' }}>
                No data.
              </td>
            </tr>
          ) : (
            rows.map((r, i) => (
              <tr key={i} style={{ background: i % 2 ? 'rgba(255,255,255,.02)' : 'transparent' }}>
                {columns.map((c) => (
                  <td key={c.key} style={{ padding: '10px', borderBottom: '1px solid var(--border)' }}>
                    {c.render ? c.render(r) : (r as any)[c.key]}
                  </td>
                ))}
              </tr>
            ))
          )}
        </tbody>
      </table>
    </div>
  );
}
TSX

# --- Layout & Nav -------------------------------------------------------------
cat > src/components/Nav.tsx <<'TSX'
import { Link, useRoute } from 'wouter';

function NavLink({ href, children }: { href: string; children: React.ReactNode }) {
  const [isActive] = useRoute(href === '/' ? '/' : `${href}/*`);
  return (
    <Link href={href}>
      <span
        style={{
          display: 'block',
          padding: '8px 10px',
          borderRadius: 8,
          color: isActive ? '#fff' : 'var(--muted)',
          background: isActive ? 'rgba(59,130,246,.18)' : 'transparent'
        }}
      >
        {children}
      </span>
    </Link>
  );
}

export default function Nav() {
  return (
    <nav style={{ display: 'grid', gap: 6 }}>
      <div style={{ color: 'var(--muted)', fontSize: 11, letterSpacing: '.06em', marginTop: 8 }}>PRIMARY</div>
      <NavLink href="/dashboard">Dashboard</NavLink>

      <div style={{ color: 'var(--muted)', fontSize: 11, letterSpacing: '.06em', marginTop: 12 }}>PORTFOLIO V3</div>
      <NavLink href="/portfolio/properties">Properties</NavLink>
      <NavLink href="/portfolio/units">Units</NavLink>
      <NavLink href="/portfolio/leases">Leases</NavLink>
      <NavLink href="/portfolio/tenants">Tenants</NavLink>
      <NavLink href="/portfolio/owners">Owners</NavLink>

      <div style={{ color: 'var(--muted)', fontSize: 11, letterSpacing: '.06em', marginTop: 12 }}>TOOLS</div>
      <NavLink href="/tools/probe">API Probe</NavLink>
    </nav>
  );
}
TSX

cat > src/components/Layout.tsx <<'TSX'
import Nav from './Nav';

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <div style={{ display: 'grid', gridTemplateColumns: '240px 1fr', height: '100%' }}>
      <aside style={{ borderRight: '1px solid var(--border)', padding: 16, background: 'var(--panel)' }}>
        <div style={{ fontWeight: 800, marginBottom: 12 }}>Empire Command Center</div>
        <Nav />
      </aside>
      <main style={{ padding: 20, minWidth: 0 }}>
        {children}
      </main>
    </div>
  );
}
TSX

# --- App & routing ------------------------------------------------------------
cat > src/App.tsx <<'TSX'
import React from 'react';
import { Route, Switch, Redirect } from 'wouter';
import ErrorBoundary from './components/ErrorBoundary';
import Layout from './components/Layout';

import Dashboard from './pages/dashboard';
import Properties from './pages/portfolio/properties';
import Units from './pages/portfolio/units';
import Leases from './pages/portfolio/leases';
import Tenants from './pages/portfolio/tenants';
import Owners from './pages/portfolio/owners';
import ApiProbe from './pages/tools/ApiProbe';

export default function App() {
  return (
    <ErrorBoundary>
      <Layout>
        <Switch>
          <Route path="/" component={() => <Redirect to="/dashboard" />} />
          <Route path="/dashboard" component={Dashboard} />

          <Route path="/portfolio/properties" component={Properties} />
          <Route path="/portfolio/units" component={Units} />
          <Route path="/portfolio/leases" component={Leases} />
          <Route path="/portfolio/tenants" component={Tenants} />
          <Route path="/portfolio/owners" component={Owners} />

          <Route path="/tools/probe" component={ApiProbe} />
          <Route>404 — Not found</Route>
        </Switch>
      </Layout>
    </ErrorBoundary>
  );
}
TSX

# --- Pages: dashboard ---------------------------------------------------------
mkdir -p src/pages/dashboard
cat > src/pages/dashboard/index.tsx <<'TSX'
import { useEffect, useState } from 'react';
import StatCard from '@/components/ui/StatCard';
import Badge from '@/components/ui/Badge';
import { fetchCollection, fetchJSON } from '@lib/ecc-api';

export default function Dashboard() {
  const [counts, setCounts] = useState<Record<string, number>>({});
  const [rpcOk, setRpcOk] = useState(false);

  useEffect(() => {
    (async () => {
      const names = ['properties','units','leases','tenants','owners'];
      const results = await Promise.all(names.map(n => fetchCollection(n).catch(()=>({items:[]}))));
      const c: Record<string, number> = {};
      names.forEach((n,i)=> c[n] = (results[i].items as any[]).length);
      setCounts(c);

      try {
        await fetchJSON('rpc/dashboard_kpis'); // optional
        setRpcOk(true);
      } catch { setRpcOk(false); }
    })();
  }, []);

  const cards = [
    { title:'Properties', key:'properties' },
    { title:'Units', key:'units' },
    { title:'Leases', key:'leases' },
    { title:'Tenants', key:'tenants' },
    { title:'Owners', key:'owners' }
  ];

  return (
    <div style={{ display:'grid', gap:16 }}>
      <h1>Dashboard</h1>
      <div style={{ display:'grid', gap:12, gridTemplateColumns:'repeat(auto-fill,minmax(220px,1fr))' }}>
        {cards.map(c => (
          <StatCard key={c.key} title={c.title} value={counts[c.key] ?? '…'} />
        ))}
      </div>

      <div className="panel">
        <div style={{display:'flex',gap:10,alignItems:'center'}}>
          <strong>Next Best Action</strong>
          {rpcOk ? <Badge tone="info">Powered by RPC</Badge> : <Badge tone="neutral">Not available yet</Badge>}
        </div>
        {!rpcOk && <div style={{color:'var(--muted)',marginTop:8,fontSize:13}}>When the backend exposes <code>/api/rpc/dashboard_*</code> we’ll render richer KPIs here without blocking the page.</div>}
      </div>
    </div>
  );
}
TSX

# --- Pages: portfolio (5) -----------------------------------------------------
mk() { mkdir -p "src/pages/portfolio/$1"; }
mk properties; mk units; mk leases; mk tenants; mk owners;

cat > src/pages/portfolio/_common.ts <<'TS'
import Table from '@/components/ui/Table';
import { useCollection } from '@lib/useApi';

function getName(row:any){
  return row.display_name ?? row.name ?? row.property_name ?? row.full_name ?? row.company_name ?? row.address1 ?? '(unnamed)';
}
function getCity(row:any){
  return row.city ?? row.property_city ?? row.mailing_city ?? '';
}
function getState(row:any){
  return row.state ?? row.property_state ?? row.mailing_state ?? '';
}
function getUpdated(row:any){
  return row.updated_at ?? row.updatedAt ?? row.modified_at ?? row.modifiedAt ?? '';
}

export function PageFor({ entity }: { entity: string }) {
  const { data, loading, error } = useCollection<any>(entity, { order: 'updated_at.desc', limit: 200 });

  const rows = (data||[]).map((r:any)=>({
    ...r,
    __name: getName(r),
    __city: getCity(r),
    __state: getState(r),
    __updated: getUpdated(r)
  }));

  return (
    <div style={{ display:'grid', gap:12 }}>
      <h1 style={{ textTransform:'capitalize' }}>{entity}</h1>
      <div style={{ color:'var(--muted)' }}>
        {loading ? 'Loading…' : error ? String(error) : `Loaded ${rows.length} ${entity}.`}
      </div>
      <Table
        columns={[
          { key:'__name', label:'Name' },
          { key:'__city', label:'City' },
          { key:'__state', label:'State', width: 80 },
          { key:'__updated', label:'Updated' }
        ]}
        rows={rows}
      />
    </div>
  );
}
TS

for E in properties units leases tenants owners; do
cat > "src/pages/portfolio/$E/index.tsx" <<TSX
import { PageFor } from '../_common';
export default function ${E^}(){ return <PageFor entity="${E}" />; }
TSX
done

# --- Tools: API Probe ---------------------------------------------------------
mkdir -p src/pages/tools
cat > src/pages/tools/ApiProbe.tsx <<'TSX'
import { useEffect, useState } from 'react';
import Badge from '@/components/ui/Badge';
import { buildUrl } from '@lib/ecc-api';
import { truncate } from '@lib/safe';

type Check = { path: string; status?: number; ok?: boolean; sample?: any; error?: string };

export default function ApiProbe() {
  const [checks, setChecks] = useState<Check[]>([]);
  const run = async () => {
    const list: Check[] = [
      { path: 'health' },
      { path: 'portfolio/properties?limit=1' },
      { path: 'portfolio/units?limit=1' },
      { path: 'portfolio/leases?limit=1' },
      { path: 'portfolio/tenants?limit=1' },
      { path: 'portfolio/owners?limit=1' }
    ];
    const results: Check[] = [];
    for (const c of list) {
      const url = buildUrl(c.path);
      try {
        const res = await fetch(url, { headers: { Accept: 'application/json' } });
        const json = await res.json().catch(() => null);
        results.push({
          ...c,
          status: res.status,
          ok: res.ok,
          sample: Array.isArray(json) ? json[0] : json
        });
      } catch (e: any) {
        results.push({ ...c, ok: false, error: String(e) });
      }
    }
    setChecks(results);
  };

  useEffect(() => { run(); }, []);

  return (
    <div style={{ display:'grid', gap:16 }}>
      <h1>API Probe</h1>
      <div className="panel">
        <button onClick={run}>Run probe</button>
      </div>

      <div className="panel">
        <table style={{ width:'100%', borderCollapse:'collapse' }}>
          <thead>
            <tr>
              <th style={{ textAlign:'left', padding:8, borderBottom:'1px solid var(--border)' }}>Endpoint</th>
              <th style={{ textAlign:'left', padding:8, borderBottom:'1px solid var(--border)' }}>Status</th>
              <th style={{ textAlign:'left', padding:8, borderBottom:'1px solid var(--border)' }}>First item / body (truncated)</th>
            </tr>
          </thead>
          <tbody>
            {checks.map((c,i)=>(
              <tr key={i} style={{ background: i%2 ? 'rgba(255,255,255,.02)':'transparent' }}>
                <td style={{ padding:8 }}>/api/{c.path}</td>
                <td style={{ padding:8 }}>
                  {c.ok ? <Badge tone="success">✅ {c.status}</Badge> : <Badge tone="danger">❌ {c.status ?? ''}</Badge>}
                </td>
                <td style={{ padding:8, color:'var(--muted)', fontFamily:'ui-monospace,monospace' }}>
                  {truncate(JSON.stringify(c.sample ?? c.error ?? ''), 140)}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      <div style={{ color:'var(--muted)' }}>
        Probe uses only V3 endpoints; RPC routes are not required and never block.
      </div>
    </div>
  );
}
TSX

# --- ensure router dep --------------------------------------------------------
npm i wouter >/dev/null 2>&1 || true

# --- restart dev --------------------------------------------------------------
pkill -f vite >/dev/null 2>&1 || true
npm run dev
