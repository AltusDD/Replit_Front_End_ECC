project serves as the development environment and hosting for the React frontend. It's configured to be a thin client that makes all of its API calls to a live backend.

Technology Stack: The frontend is built with React for the UI, using Wouter for routing. The UI components are standardized using the Material-UI (MUI) library for a clean, professional aesthetic.

API Configuration: The frontend uses a .env file and Replit secrets to store its backend URL. The VITE_API_BASE secret points to the live Azure Functions API.

File Types:

.tsx files contain the React components and pages (e.g., Dashboard.tsx, PropertiesPage.tsx).

.ts files contain helper functions and API clients (e.g., src/lib/api.ts).

package.json defines the project's dependencies and scripts.

vite.config.ts configures the development server and proxies API calls to the backend.

Azure & Backend Details
The backend is a Python Azure Function App that acts as the data hub for the entire platform. It's deployed to a Linux Consumption plan, allowing it to scale automatically with demand.

Technology Stack: The backend uses Python 3.12 with the Azure Functions framework. All dependencies, such as azure-ai-inference, requests, and psycopg2, are managed in a requirements.txt file.

Authentication: It uses a Managed Identity (AAD) for secure, passwordless authentication with other Azure services. For other external services like Dropbox, it uses securely stored API keys.

File Types:

__init__.py files contain the main logic for each function.

function.json files define the triggers, bindings, and routes for each function (e.g., GET /api/health, GET /api/portfolio/{collection}).

requirements.txt lists all Python packages the backend needs.

host.json configures global settings for the Function App, including logging and extensions.

.yml files in the .github/workflows directory define the CI/CD pipeline that automates building and deploying the backend to Azure whenever new code is pushed.

JSON & API Interactions
The frontend and backend communicate exclusively using JSON.

The frontend makes fetch calls to endpoints like /api/portfolio/properties.

The backend's Python functions query data from a Supabase PostgREST endpoint, normalize the results into a standardized JSON format, and return them to the frontend.

API keys and secrets are stored securely as environment variables in Azure's configuration and are never exposed in the code or frontend.