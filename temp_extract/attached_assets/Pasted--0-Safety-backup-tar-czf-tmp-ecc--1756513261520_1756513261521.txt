# --- 0) Safety backup ---------------------------------------------------------
tar -czf /tmp/ecc-backup-$(date +%s).tgz src || true

# --- 1) Theme: single source of truth ----------------------------------------
mkdir -p src/styles
cat > src/styles/theme.css <<'CSS'
:root{
  --bg:#0b0d10;
  --panel:#12161b;
  --border:#26303b;
  --text:#e7eaee;
  --muted:#9fb0bf;
  --brand:#3b82f6;
  --brand-weak:#1f4dd8;
  --ok:#16a34a; --warn:#f59e0b; --err:#ef4444;
  --radius:12px;
  --shadow:0 6px 18px rgba(0,0,0,.24);
}

/* reset + layout */
*{box-sizing:border-box} html,body,#root{height:100%}
body{margin:0;background:var(--bg);color:var(--text);font:14px/1.45 Inter,system-ui,Segoe UI,Roboto,Arial}
h1,h2,h3{margin:.25rem 0 1rem}
a{color:var(--brand);text-decoration:none} a:hover{text-decoration:underline}
.muted{color:var(--muted)}
.stack{display:flex;flex-direction:column;gap:16px}
.gap{gap:16px}

/* app shell */
.ec-sidebar{width:240px;background:#0e1116;border-right:1px solid var(--border);position:fixed;top:0;bottom:0;left:0;padding:16px}
.ec-content{margin-left:240px;padding:24px}
.ec-title{font-weight:700;letter-spacing:.2px}

/* panels & badges */
.panel{background:var(--panel);border:1px solid var(--border);border-radius:var(--radius);box-shadow:var(--shadow)}
.badge{display:inline-flex;align-items:center;gap:6px;border:1px solid var(--border);border-radius:999px;padding:6px 10px;color:var(--muted);font-weight:600}

/* stat card */
.stat{padding:18px}
.stat h4{margin:0 0 8px;color:var(--muted);font-weight:600}
.stat .num{font-size:28px;font-weight:800}

/* table (shared) */
.table-wrap{overflow:auto}
.table{width:100%;border-collapse:separate;border-spacing:0}
.table thead th{
  position:sticky;top:0;z-index:1;background:var(--panel);
  color:var(--muted);font-weight:700;border-bottom:1px solid var(--border);text-align:left;padding:12px 14px
}
.table tbody td{padding:12px 14px;border-bottom:1px solid var(--border)}
.table tbody tr:hover{background:rgba(255,255,255,.03)}
.table.dense td,.table.dense th{padding:8px 10px}

/* cards/containers */
.card{background:var(--panel);border:1px solid var(--border);border-radius:var(--radius);padding:16px}
.grid-auto{display:grid;grid-template-columns:repeat(5,minmax(200px,1fr));gap:16px}
@media (max-width:1200px){.grid-auto{grid-template-columns:repeat(3,minmax(200px,1fr))}}
@media (max-width:800px){.grid-auto{grid-template-columns:repeat(2,minmax(200px,1fr))}}
CSS

# Tiny app glue (optional but handy)
cat > src/styles/app.css <<'CSS'
.page{display:flex;flex-direction:column;gap:16px}
.row{display:flex;gap:16px;align-items:center}
CSS

# Ensure main imports only these two
sed -i '1,/^$/ s#^import .*index\.css.*$##' src/main.tsx 2>/dev/null || true
grep -q "styles/theme.css" src/main.tsx || sed -i "1i import './styles/theme.css';" src/main.tsx
grep -q "styles/app.css"   src/main.tsx || sed -i "2i import './styles/app.css';"   src/main.tsx

# --- 2) Shared Table component ------------------------------------------------
mkdir -p src/components/ui
cat > src/components/ui/Table.tsx <<'TS'
import React from 'react';

export type Column<T=any> = {
  key: keyof T | string;
  label?: string;
  width?: string | number;
  render?: (row:T)=>React.ReactNode;
};
type Props<T=any> = {
  rows: T[];
  columns?: Column<T>[];
  empty?: React.ReactNode;
  dense?: boolean;
};

export default function Table<T=any>({ rows, columns, empty, dense }: Props<T>) {
  const cols = React.useMemo<Column<T>[]>(() => {
    if (columns && columns.length) return columns;
    if (!rows.length) return [];
    return Object.keys(rows[0] as any).map(k => ({ key: k, label: String(k) }));
  }, [rows, columns]);

  return (
    <div className="panel table-wrap">
      <table className={`table ${dense ? 'dense' : ''}`}>
        <thead>
          <tr>{cols.map(c => <th key={String(c.key)} style={{width:c.width}}>{c.label ?? String(c.key)}</th>)}</tr>
        </thead>
        <tbody>
          {rows.length ? rows.map((r, i) => (
            <tr key={i}>
              {cols.map(c => <td key={String(c.key)}>{c.render ? c.render(r) : String((r as any)[c.key] ?? '')}</td>)}
            </tr>
          )) : <tr><td colSpan={Math.max(cols.length,1)}>{empty ?? <div className="muted">No results</div>}</td></tr>}
        </tbody>
      </table>
    </div>
  );
}
TS

# --- 3) Harden counts so cards stop flipping ---------------------------------
cat > src/lib/useApi.ts <<'TS'
import { useEffect, useMemo, useState } from 'react';

export const API_BASE = import.meta.env.VITE_API_BASE || '/api';
const KEY = import.meta.env.VITE_API_KEY || '';
const HEADERS: Record<string, string> = { Accept: 'application/json' };
if (KEY) HEADERS['x-api-key'] = KEY;

export function buildUrl(path: string, params?: Record<string, any>): string {
  let out = path;
  if (!/^https?:\/\//i.test(path)) {
    if (!path.startsWith('/')) out = `${API_BASE.replace(/\/$/,'')}/${path}`;
  }
  if (params && Object.keys(params).length) {
    const sp = new URLSearchParams();
    for (const [k, v] of Object.entries(params)) if (v != null) sp.set(k, String(v));
    const q = sp.toString();
    if (q) out += (out.includes('?') ? '&' : '?') + q;
  }
  return out;
}

export async function fetchJSON<T>(url: string, init: RequestInit = {}): Promise<T> {
  const res = await fetch(url, { ...init, headers: { ...HEADERS, ...(init.headers || {}) } });
  if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
  return res.json();
}

async function tryCountsDirect(): Promise<Record<string,number>|null> {
  const cands = [
    `${API_BASE.replace(/\/$/,'')}/portfolio/counts`,
    `${API_BASE.replace(/\/$/,'')}/counts`,
    `${API_BASE.replace(/\/$/,'')}/rpc/portfolio_counts`,
  ];
  for (const u of cands) {
    try {
      const j: any = await fetchJSON(u);
      if (j && typeof j === 'object') return j;
    } catch {}
  }
  return null;
}

async function countForCollection(col: string): Promise<number> {
  // count endpoints
  const endpoints = [
    `${API_BASE.replace(/\/$/,'')}/portfolio/${col}/count`,
    `${API_BASE.replace(/\/$/,'')}/${col}/count`,
    `${API_BASE.replace(/\/$/,'')}/rpc/${col}_count`,
  ];
  for (const u of endpoints) {
    try {
      const j: any = await fetchJSON(u);
      const n = j?.count ?? j?.total ?? (Array.isArray(j)? j[0]?.count : undefined);
      if (typeof n === 'number' && !Number.isNaN(n)) return n;
    } catch {}
  }

  // HEAD/GET with X-Total-Count then meta.total
  try {
    const head = await fetch(buildUrl(`portfolio/${col}?limit=1`), { method:'GET', headers: HEADERS });
    const hdr = head.headers.get('X-Total-Count') || head.headers.get('x-total-count') || head.headers.get('total-count');
    if (hdr) return Number(hdr);
    const j:any = await head.json().catch(()=>null);
    const n = j?.total ?? j?.meta?.total ?? (Array.isArray(j?.items) ? j.items.length :
                Array.isArray(j) ? j.length : 0);
    if (typeof n === 'number') return n;
  } catch {}

  return 0;
}

export function useCounts() {
  const [data, set] = useState<Record<string,number>|null>(null);
  const [loading, setL] = useState(true);
  const [error, setE] = useState<any>(null);

  useEffect(() => {
    (async () => {
      setL(true); setE(null);
      const direct = await tryCountsDirect();
      if (direct) { set(direct); setL(false); return; }

      // Compute as fallback
      const cols = ['properties','units','leases','tenants','owners'];
      const entries = await Promise.all(cols.map(async col => [col, await countForCollection(col)] as const));
      set(Object.fromEntries(entries));
      setL(false);
    })().catch(e => { setE(e); setL(false); });
  }, []);

  return { data, loading, error };
}

export function useCollection(col: string, params: Record<string, any> = {}) {
  const qs = useMemo(() => {
    const s = new URLSearchParams();
    Object.entries(params).forEach(([k, v]) => v != null && s.set(k, String(v)));
    const q = s.toString(); return q ? `?${q}` : '';
  }, [JSON.stringify(params)]);

  const [data, set] = useState<any[]>([]);
  const [loading, setL] = useState(true);
  const [error, setE] = useState<any>(null);

  useEffect(() => {
    let alive = true;
    (async () => {
      setL(true); setE(null);
      const candidates = [
        buildUrl(`portfolio/${col}${qs}`),
        buildUrl(`${col}${qs}`),
      ];
      let json:any=null;
      for (const u of candidates) { try { json = await fetchJSON(u); break; } catch {} }
      if (!alive) return;

      const rows = Array.isArray(json?.items) ? json.items :
                   Array.isArray(json) ? json :
                   Array.isArray(json?.data) ? json.data : [];
      set(rows);
      setL(false);
    })().catch(e=>{ if(alive){ setE(e); setL(false); }});
    return () => { alive=false };
  }, [col, qs]);

  return { data, loading, error };
}
TS

# --- 4) Use the shared Table on portfolio pages -------------------------------
mkdir -p src/pages/portfolio/{properties,units,leases,tenants,owners}
for COL in properties units leases tenants owners; do
cat > src/pages/portfolio/$COL/index.tsx <<TSX
import { useCollection } from '@lib/useApi';
import Table from '@/components/ui/Table';

export default function ${COL[0].toUpperCase()}${COL.slice(1)}Page(){
  const { data, loading, error } = useCollection('${COL}', { limit: 1000 });
  return (
    <div className="page">
      <h1>${COL[0].toUpperCase()}${COL.slice(1)}</h1>
      {error ? <div className="panel">API error: {String((error as any)?.message || error)}</div> :
       loading ? <div className="panel">Loading…</div> :
       <Table rows={data} />}
    </div>
  );
}
TSX
done

# --- 5) Clean, consistent dashboard cards ------------------------------------
cat > src/components/ui/StatCard.tsx <<'TS'
export default function StatCard({ title, value, loading }: { title: string; value?: number|string; loading?: boolean }) {
  return (
    <div className="panel stat">
      <h4>{title}</h4>
      <div className="num">{loading ? '…' : (value ?? '…')}</div>
    </div>
  );
}
TS

cat > src/pages/dashboard/index.tsx <<'TSX'
import StatCard from '@/components/ui/StatCard';
import { useCounts } from '@lib/useApi';

export default function Dashboard(){
  const { data, loading, error } = useCounts();
  const v = (k:string)=> data?.[k];

  return (
    <div className="page">
      <h1 className="ec-title">Dashboard</h1>
      {error && <div className="panel">API error: {String((error as any)?.message || error)}</div>}
      <div className="grid-auto">
        <StatCard title="Properties" value={v('properties')} loading={loading} />
        <StatCard title="Units"      value={v('units')}      loading={loading} />
        <StatCard title="Leases"     value={v('leases')}     loading={loading} />
        <StatCard title="Tenants"    value={v('tenants')}    loading={loading} />
        <StatCard title="Owners"     value={v('owners')}     loading={loading} />
      </div>
      <span className="badge">Powered by RPC</span>
    </div>
  );
}
TSX

# --- 6) Guardrail: vet script blocks rogue CSS -------------------------------
mkdir -p scripts
cat > scripts/vet.cjs <<'CJS'
const fs = require('fs'), path = require('path');
const root = path.resolve(__dirname, '..');
const src = path.join(root, 'src');

let badCssImport = false, badStyleTag = false;

function walk(p){
  for (const f of fs.readdirSync(p)){
    const fp = path.join(p,f);
    const st = fs.statSync(fp);
    if (st.isDirectory()) walk(fp);
    else if (/\.(tsx?|jsx?)$/.test(f)){
      const txt = fs.readFileSync(fp,'utf8');
      if (fp.includes(path.join('src','main.tsx'))) continue;
      if (/import\s+['"][^'"]+\.css['"]/.test(txt)) { console.log('❌ CSS import in', fp); badCssImport = true; }
      if (/<style>/.test(txt)) { console.log('❌ <style> tag in', fp); badStyleTag = true; }
    }
  }
}
walk(src);

if (badCssImport || badStyleTag) {
  console.error('\nGuardrail failed: Only theme.css and app.css may be imported (from main.tsx). No <style> tags allowed.\n');
  process.exit(1);
}
console.log('✅ Vet passed.');
CJS

# Wire vet into predev if not present
if ! grep -q "\"predev\"" package.json; then
  npm pkg set scripts.predev="node scripts/vet.cjs"
fi

# --- 7) Restart dev on :3000 --------------------------------------------------
pkill -f vite >/dev/null 2>&1 || true
npm run dev -- --host 0.0.0.0 --port 3000
