wire them into replit
Replit Agent Prompt Maker v2 said:
Sidebar
Â· typescript
import { useState, useEffect } from "react";
import navConfig from "@/lib/navConfig";
import {
  Home, Building2, Layers, KeyRound, Users, User, Settings, Folder,
} from "lucide-react";


const iconMap = {
  dashboard: Home,
  properties: Building2,
  units: Layers,
  leases: KeyRound,
  tenants: Users,
  owners: User,
  settings: Settings,
};


const iconFor = (label: string) => {
  const key = label.toLowerCase();
  for (const k in iconMap) if (key.includes(k)) return iconMap[k];
  return Folder;
};


export default function Sidebar() {
  const [isCollapsed, setCollapsed] = useState(false);
  const [hoverExpand, setHoverExpand] = useState(false);
  const [loc] = useLocation();


  const collapsed = isCollapsed && !hoverExpand;


  useEffect(() => {
    const icon = document.querySelector(".nav-icon svg");
    if (icon instanceof HTMLElement) {
      const iconW = icon.offsetWidth + 24;
      document.documentElement.style.setProperty("--collapsed-width", `${iconW}px`);
      document.documentElement.style.setProperty("--collapsed-logo", `${iconW * 0.8}px`);
    }
  }, [collapsed]);


  return (
    <aside
      className={`sidebar ${collapsed ? "collapsed" : ""}`}
      onMouseEnter={() => setHoverExpand(true)}
      onMouseLeave={() => setHoverExpand(false)}
    >
      <div className="sidebar-logo">
        <img src="/logo.svg" alt="Logo" />
      </div>
      <nav className="nav">
        {navConfig.map((sec, i) => (
          <div key={i} className="nav-section">
            <div className="nav-title">{!collapsed && sec.label}</div>
            {sec.items.map((item) => {
              const Icon = iconFor(item.label);
              const active = loc === item.path;
              return (
                <Link href={item.path} key={item.label} className={`nav-item ${active ? "active" : ""}`}>
                  <Icon className="nav-icon" size={18} color="#F7C948" />
                  {!collapsed && <span className="lbl">{item.label}</span>}
                </Link>
              );
            })}
          </div>
        ))}
      </nav>
      <div className="sidebar-footer">
        <button className="pinBtn" onClick={() => setCollapsed(!isCollapsed)}>
          {isCollapsed ? "Unpin" : "Pin"}
        </button>
      </div>
    </aside>
  );
}



Your complete Sidebar.tsx component is now ready.

ðŸ“¦ Replit Integration Instructions
1. Place the Sidebar File

Save the code from the Sidebar.tsx
 file into src/components/Sidebar.tsx.

2. Ensure This CSS Is in Your Theme

Add this to theme.css or a new file like sidebar.css and import it in your main.tsx or Sidebar.tsx:

:root {
  --collapsed-width: 64px;
  --collapsed-logo: 48px;
}

.sidebar {
  width: 220px;
  background: var(--panel-3);
  transition: all 0.3s ease;
  display: flex;
  flex-direction: column;
  position: relative;
}

.sidebar.collapsed {
  width: var(--collapsed-width);
}

.sidebar-logo {
  padding: 12px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.sidebar-logo img {
  max-width: 160px;
  transition: max-width 0.3s ease;
}

.sidebar.collapsed .sidebar-logo img {
  max-width: var(--collapsed-logo);
}

.nav {
  flex: 1;
  overflow-y: auto;
  padding: 8px 0;
}

.nav-item {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 10px 16px;
  color: var(--text);
  text-decoration: none;
  border-radius: 8px;
  border: 1px solid transparent;
  transition: background 0.3s ease;
}

.nav-item:hover {
  background: var(--panel-2);
  border-color: var(--border);
}

.nav-item.active {
  background: rgba(247,201,72,0.12);
  border-color: var(--gold-700);
}

.nav-icon {
  min-width: 24px;
  display: grid;
  place-items: center;
}

.sidebar.collapsed .lbl {
  display: none;
}

.sidebar-footer {
  padding: 12px;
  text-align: center;
  position: absolute;
  bottom: 0;
  width: 100%;
}

.pinBtn {
  background: transparent;
  color: var(--muted);
  border: 1px solid var(--border);
  border-radius: 6px;
  padding: 6px 12px;
  cursor: pointer;
}

.pinBtn:hover {
  border-color: var(--gold-700);
  color: var(--text);
}

3. Update Layout.tsx (or main layout file)

Replace the sidebar container with:

import Sidebar from "@/components/Sidebar";

export default function Layout({ children }) {
  return (
    <div className="layout">
      <Sidebar />
      <main className="main">{children}</main>
    </div>
  );
}

4. Ensure Your navConfig.ts Looks Like:
const navConfig = [
  {
    label: "Dashboard",
    items: [{ label: "Home", path: "/dashboard" }]
  },
  {
    label: "Assets",
    items: [
      { label: "Properties", path: "/assets/properties" },
      { label: "Units", path: "/assets/units" }
    ]
  }
];

export default navConfig;