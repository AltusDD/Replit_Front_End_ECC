# 0) Safety: create a checkpoint
git add -A >/dev/null 2>&1 || true
git commit -m "checkpoint before style reset" >/dev/null 2>&1 || true

# 1) Canonical theme variables (colors, spacing, radii, shadows)
mkdir -p src/styles
cat > src/styles/theme.css <<'CSS'
:root{
  --bg:#0c0f13;
  --panel:#12171d;
  --panel-2:#0f141a;
  --border:#26303b;
  --text:#e7ecf2;
  --muted:#a6b0bc;

  --brand:#3b82f6;
  --brand-600:#2563eb;
  --success:#16a34a;
  --warn:#f59e0b;
  --danger:#ef4444;

  --radius:12px;
  --shadow:0 1px 0 rgba(255,255,255,0.03) inset, 0 6px 24px rgba(0,0,0,0.35);
  --gap:16px;
  --g2:24px;
}

*{box-sizing:border-box}
html,body,#root{height:100%}
body{
  margin:0;
  font:14px/1.5 ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Inter,Arial;
  color:var(--text); background:var(--bg);
}
a{color:var(--text); text-decoration:none}
a:hover{color:#fff}
h1,h2,h3,h4{margin:0 0 10px}

.badge{display:inline-flex;align-items:center;gap:8px;font-size:12px;
  padding:4px 10px;border-radius:999px;background:#0e1520;border:1px solid var(--border);color:var(--muted)}
.badge.primary{background:rgba(59,130,246,.1);border-color:#2b3a51;color:#c5d8ff}
CSS

# 2) Canonical app styles (layout, nav, cards, table, utilities)
cat > src/styles/app.css <<'CSS'
/* Layout grid: left sidebar + content */
.app-shell{display:grid;grid-template-columns:260px 1fr;min-height:100vh}
.sidebar{background:var(--panel);border-right:1px solid var(--border)}
.sidebar .brand{padding:18px var(--gap);font-weight:700;letter-spacing:.2px}
.nav{display:flex;flex-direction:column;padding:8px}
.nav .group{margin:10px 8px 14px}
.nav .group-title{color:var(--muted);font-size:11px;text-transform:uppercase;margin:10px 0 6px 8px}
.nav a{display:flex;align-items:center;gap:10px;padding:10px 12px;border-radius:10px;color:var(--muted);}
.nav a:hover{background:var(--panel-2);color:#fff}
.nav a[aria-current="page"]{background:linear-gradient(180deg,rgba(59,130,246,.12),rgba(59,130,246,.08));
  color:#dbe8ff;border:1px solid #294379}

.content{padding:28px 32px}
.page-title{font-size:28px;font-weight:800;margin-bottom:18px}

/* Panels & cards */
.panel{background:var(--panel);border:1px solid var(--border);border-radius:var(--radius);box-shadow:var(--shadow);padding:16px}
.cards{display:grid;grid-template-columns:repeat(5,minmax(0,1fr));gap:var(--gap)}
@media (max-width:1200px){.cards{grid-template-columns:repeat(3,minmax(0,1fr));}}
@media (max-width:800px){.cards{grid-template-columns:repeat(2,minmax(0,1fr));}}

.card{background:var(--panel);border:1px solid var(--border);border-radius:var(--radius);padding:18px;
  display:flex;flex-direction:column;gap:8px;box-shadow:var(--shadow)}
.card .label{font-size:12px;color:var(--muted);text-transform:uppercase;letter-spacing:.4px}
.card .value{font-size:28px;font-weight:800}

/* Table */
.table-wrap{background:var(--panel);border:1px solid var(--border);border-radius:var(--radius);overflow:auto}
.table{width:100%;border-collapse:separate;border-spacing:0}
.table thead th{
  position:sticky;top:0;background:#10151b;color:#b8c1cd;
  border-bottom:1px solid var(--border);text-align:left;font-size:12px;padding:12px}
.table tbody td{padding:11px 12px;border-bottom:1px solid #18202a;color:#dbe3ee;white-space:nowrap}
.table tbody tr:hover{background:#0e141b}

/* Utilities */
.grid{display:grid;gap:var(--gap)}
.stack{display:flex;flex-direction:column;gap:var(--gap)}
.row{display:flex;gap:var(--gap);align-items:center}
CSS

# 3) Ensure ONLY theme.css + app.css are globally imported
MAIN=src/main.tsx
if ! grep -q "import './styles/theme.css';" "$MAIN"; then
  sed -i "1i import './styles/theme.css';" "$MAIN"
fi
if ! grep -q "import './styles/app.css';" "$MAIN"; then
  sed -i "1i import './styles/app.css';" "$MAIN"
fi

# Comment any other *.css imports anywhere
grep -RIl --include='*.ts' --include='*.tsx' "import .*\\.css" src \
  | grep -v "$MAIN" | while read -r f; do
    sed -i "s/^\\s*import \\(.*\\.css.*\\)/\\/\\/ [locked by style-contract] \\1/" "$f"
  done

# 4) Layout wired to classes
cat > src/components/Layout.tsx <<'TSX'
import { Link, useLocation } from "wouter";
import ErrorBoundary from "./ErrorBoundary";
import nav from "./layout/navConfig";

export default function Layout({ children }: { children: React.ReactNode }) {
  const [loc] = useLocation();
  return (
    <div className="app-shell">
      <aside className="sidebar">
        <div className="brand">Empire Command Center</div>
        <nav className="nav">
          {nav.map(group => (
            <div className="group" key={group.title}>
              <div className="group-title">{group.title}</div>
              <div className="links stack">
                {group.items.map(it => {
                  const active = loc.startsWith(it.href);
                  return (
                    <Link key={it.href} href={it.href}>
                      <a aria-current={active ? "page" : undefined}>{it.label}</a>
                    </Link>
                  );
                })}
              </div>
            </div>
          ))}
        </nav>
      </aside>
      <main className="content">
        <ErrorBoundary>{children}</ErrorBoundary>
      </main>
    </div>
  );
}
TSX

# 5) StatCard to use .card contract
mkdir -p src/components/ui
cat > src/components/ui/StatCard.tsx <<'TSX'
export default function StatCard({ label, value }:{label:string; value:React.ReactNode}) {
  return (
    <div className="card">
      <div className="label">{label}</div>
      <div className="value">{value}</div>
    </div>
  );
}
TSX

# 6) Table to use .table contract
cat > src/components/ui/Table.tsx <<'TSX'
export default function Table({ columns, rows }:{
  columns: { key:string; label:string }[];
  rows: Record<string, any>[];
}) {
  return (
    <div className="table-wrap">
      <table className="table">
        <thead>
          <tr>{columns.map(c => <th key={c.key}>{c.label}</th>)}</tr>
        </thead>
        <tbody>
          {rows.map((r,i)=>(
            <tr key={i}>
              {columns.map(c => <td key={c.key}>{String(r[c.key] ?? "")}</td>)}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
TSX

# 7) Dashboard grid uses .cards
cat > src/pages/dashboard/index.tsx <<'TSX'
import StatCard from "@/components/ui/StatCard";
import { useCounts } from "@lib/useApi";

export default function Dashboard(){
  const { data } = useCounts();
  const c = data || {};
  const items = [
    { label:"Properties", value: c.properties ?? "…" },
    { label:"Units",      value: c.units ?? "…" },
    { label:"Leases",     value: c.leases ?? "…" },
    { label:"Tenants",    value: c.tenants ?? "…" },
    { label:"Owners",     value: c.owners ?? "…" },
  ];
  return (
    <div className="stack">
      <h1 className="page-title">Dashboard</h1>
      <div className="cards">
        {items.map(i => <StatCard key={i.label} label={i.label} value={i.value} />)}
      </div>
      <div className="panel"><span className="badge primary">Powered by RPC</span></div>
    </div>
  );
}
TSX

# 8) Restart dev server (best-effort)
pkill -f vite >/dev/null 2>&1 || true
npm run dev --silent >/dev/null 2>&1 & disown
echo "✅ Style contract applied. Refresh the preview."
