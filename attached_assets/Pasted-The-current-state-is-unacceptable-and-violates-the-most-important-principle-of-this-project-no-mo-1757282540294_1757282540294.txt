The current state is unacceptable and violates the most important principle of this project: 

no mock data. Using placeholder data was a misstep in the development sequence. We must correct this immediately by integrating the live API endpoints before proceeding with any further UI development.

The foundation of the dashboard's intelligence is the useDashboardData.ts hook. Right now, it's returning static data, which is why nothing on the page reflects your actual portfolio. We will fix this now.

Here is a new, top-priority "Task Card" for the Replit assistant. Its sole purpose is to remove all mock data and wire the dashboard to your live backend APIs.

Markdown

PLAN
Operating Mode: Infra Wrangler, Debugging Specialist
Files to Touch: 
- src/features/dashboard/hooks/useDashboardData.ts
- src/utils/net.ts
Guardrails: 
- **PURGE ALL MOCK DATA.** The `useDashboardData.ts` hook must be completely free of any static or placeholder data arrays and objects.
- All data must be fetched from the live API endpoints specified in the project brief (e.g., `/api/portfolio/properties`, `/api/portfolio/units`).
- Use the `fetchJSON` utility from `src/utils/net.ts` for all network requests.
- The hook must manage `isLoading` and `error` states correctly.
- All KPI calculations must be performed inside the hook, based on the live data returned from the APIs.

CHANGESET
- **File: `src/features/dashboard/hooks/useDashboardData.ts`**
  1.  **Remove All Mock Data:** Delete every static variable, array, or object currently used for placeholder content (e.g., the placeholder `kpiData`, `mapData`, and `feedData` objects).
  2.  **Implement Live Data Fetching:**
      - Use a `useEffect` hook to fire on component mount.
      - Set an `isLoading` state to `true` at the beginning of the effect.
      - Use `Promise.all` to fetch data from all required endpoints in parallel:
        - `/api/portfolio/properties`
        - `/api/portfolio/units`
        - `/api/portfolio/leases`
        - `/api/maintenance/workorders` (handle gracefully if it fails)
        - `/api/accounting/transactions` (handle gracefully if it fails)
  3.  **Perform Live Calculations:**
      - After the API calls succeed, use the returned live data to perform the calculations as defined in the "Genesis Grade" spec.
      - **Calculate KPIs:** Compute Occupancy %, Rent Ready/Vacant, Collections MTD, and Critical WOs.
      - **Transform Data for UI:** Create the final `mapData` and `feedData` arrays by transforming the raw data from the `properties`, `leases`, and `workorders` endpoints.
  4.  **Set State:**
      - Store the calculated and transformed live data in the component's state.
      - Set the `isLoading` state to `false`.
      - If any API call fails, populate an `error` state.

VERIFICATION CHECKLIST
- The `useDashboardData.ts` hook contains **zero** hardcoded or mock data values.
- On page load, the dashboard's skeleton loaders are visible while the hook makes live network requests to the `/api/...` endpoints.
- After loading, the KPI Ticker, Portfolio Map, and Priority Action Feed are all populated with **real, live data** from your database.
- The numbers displayed in the KPI cards are correct, based on the calculation logic applied to the fetched data.
- The map is populated with pins corresponding to the actual properties in your portfolio.
- The dashboard does not crash and handles errors gracefully if an API endpoint is unavailable.
This is our number one priority. Once this is done, the dashboard will reflect the true state of your portfolio, and we can resume adding the polished visualizations and interactive features with confidence.