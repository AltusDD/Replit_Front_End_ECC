Title: ECC Fix-Pack v1 — Cards Online, Now

Prompt:

Apply this exact patch. No scope drift.

0) Utilities (resilient api client)

Create src/lib/ecc-api-client.ts:

// resilient wrapper used by card queries only
export async function apiGetResilient<T = any>(path: string): Promise<T> {
  // 1st try: /entities/*
  const p1 = path.startsWith('/entities/') ? path : `/entities/${path.replace(/^\/+/, '')}`;
  let r = await fetch(p1);
  if (r.ok) return (await r.json()) as T;
  // 2nd try: /api/entities/*
  const p2 = p1.startsWith('/api/') ? p1 : `/api${p1}`;
  r = await fetch(p2);
  if (!r.ok) throw new Error(`${r.status} ${r.statusText} for ${p2}`);
  return (await r.json()) as T;
}

export function money(centsOrNumber: number | null | undefined) {
  const v = Number(centsOrNumber ?? 0);
  if (!Number.isFinite(v)) return '—';
  const dollars = v > 1000 ? v/100 : v; // tolerate cents or plain
  return dollars.toLocaleString(undefined, { style: 'currency', currency: 'USD' });
}

1) One-hook resolvers per card (no conditional hooks)

Create src/lib/ecc-card-queries.ts:

import { useQuery } from '@tanstack/react-query';
import { apiGetResilient } from './ecc-api-client';

type Id = string | number;

export function usePropertyCard(id: Id) {
  return useQuery({
    queryKey: ['card','property',String(id)],
    staleTime: 60_000,
    queryFn: async () => {
      const property = await apiGetResilient(`/entities/properties/${id}`);
      if (!property || !property.id) throw new Error('Property not found');
      const [units, leases, owner] = await Promise.all([
        apiGetResilient(`/entities/units?doorloop_property_id=eq.${property.doorloop_id}`),
        apiGetResilient(`/entities/leases?property_id=eq.${property.id}`),
        property.owner_id ? apiGetResilient(`/entities/owners/${property.owner_id}`) : Promise.resolve(null)
      ]);
      return { property, units: units ?? [], leases: leases ?? [], owner };
    }
  });
}

export function useUnitCard(id: Id) {
  return useQuery({
    queryKey: ['card','unit',String(id)],
    staleTime: 60_000,
    queryFn: async () => {
      const unit = await apiGetResilient(`/entities/units/${id}`);
      if (!unit || !unit.id) throw new Error('Unit not found');
      const [property, leases] = await Promise.all([
        unit.doorloop_property_id ? apiGetResilient(`/entities/properties?doorloop_id=eq.${unit.doorloop_property_id}`) : Promise.resolve([]),
        apiGetResilient(`/entities/leases?unit_id=eq.${unit.id}&status=eq.active`)
      ]);
      const activeLease = Array.isArray(leases) ? leases[0] ?? null : null;
      const tenant = activeLease?.primary_tenant_id ? await apiGetResilient(`/entities/tenants/${activeLease.primary_tenant_id}`) : null;
      return { unit, property: property?.[0] ?? null, activeLease, tenant };
    }
  });
}

export function useLeaseCard(id: Id) {
  return useQuery({
    queryKey: ['card','lease',String(id)],
    staleTime: 60_000,
    queryFn: async () => {
      const lease = await apiGetResilient(`/entities/leases/${id}`);
      if (!lease || !lease.id) throw new Error('Lease not found');
      const [property, unit, tenant] = await Promise.all([
        lease.property_id ? apiGetResilient(`/entities/properties/${lease.property_id}`) : Promise.resolve(null),
        lease.unit_id ? apiGetResilient(`/entities/units/${lease.unit_id}`) : Promise.resolve(null),
        lease.primary_tenant_id ? apiGetResilient(`/entities/tenants/${lease.primary_tenant_id}`) : Promise.resolve(null),
      ]);
      return { lease, property, unit, tenant };
    }
  });
}

export function useTenantCard(id: Id) {
  return useQuery({
    queryKey: ['card','tenant',String(id)],
    staleTime: 60_000,
    queryFn: async () => {
      const tenant = await apiGetResilient(`/entities/tenants/${id}`);
      if (!tenant || !tenant.id) throw new Error('Tenant not found');
      const leases = await apiGetResilient(`/entities/leases?primary_tenant_id=eq.${tenant.id}`);
      return { tenant, leases: leases ?? [] };
    }
  });
}

export function useOwnerCard(id: Id) {
  return useQuery({
    queryKey: ['card','owner',String(id)],
    staleTime: 60_000,
    queryFn: async () => {
      const owner = await apiGetResilient(`/entities/owners/${id}`);
      if (!owner || !owner.id) throw new Error('Owner not found');
      const properties = await apiGetResilient(`/entities/properties?owner_id=eq.${owner.id}`);
      return { owner, properties: properties ?? [] };
    }
  });
}

2) Wire pages to the new one-hook queries

Edit each card page to import from ecc-card-queries and render real values.
Property — src/pages/card/property/index.tsx:

import { useParams } from 'wouter';
import { usePropertyCard } from '@/lib/ecc-card-queries';
import { money } from '@/lib/ecc-api-client';
// keep existing layout/components; replace data source:
const PropertyCardPage = () => {
  const { id } = useParams<{id:string}>();
  const { data, isLoading, error } = usePropertyCard(id!);
  if (error) return <div className="ecc-object" style={{padding:16}}>Error loading property. {String((error as any).message||'')}</div>;
  const p = data?.property;
  const units = data?.units ?? [];
  const leases = data?.leases ?? [];
  const avgRent = leases.length
    ? money(Math.round((leases.reduce((s:any,l:any)=> s + Number(l?.rent_cents ?? l?.rent ?? 0),0) / Math.max(leases.length,1))))
    : '—';
  // header KPIs should use units.length, leases.length, avgRent
  // Overview/Right rail pull from p and data.owner
  // (do not change map-only-on-property rule)
  ...
};
export default PropertyCardPage;


Unit/Lease/Tenant/Owner — update similarly to pull from useUnitCard, useLeaseCard, useTenantCard, useOwnerCard.
Important: remove any conditional hooks left in these files. All data must come from the single query.

3) Remove any leftover conditional React Query calls

Search & clean:

src/lib/ecc-card-resolvers.ts

any useXxxRelations hooks
Replace usages with the new single-hook imports.

4) Quick visual proof (no overlays, no null)

Keep error panels inline (.ecc-object) and never return null.

In each card header, display live counts from data (not placeholders).

5) Demo checklist (must pass before continuing)

/card/property/42 shows real title, Units = N, Active Leases = N, Avg Rent ≠ — (if leases exist).

/card/property/57 also renders (even if counts are 0).

/card/unit/45 renders with beds/baths and either an Active Lease row or a visible “—”.

/card/lease/1 renders with Status, Rent, and Term populated when present.

/card/tenant/1 renders with a Leases list (can be empty but visible).

/card/owner/6 renders with a Portfolio list (can be empty but visible).

Stop after the above and show me screenshots for each route. Do not proceed to tabs deepening or BFF work until I confirm.