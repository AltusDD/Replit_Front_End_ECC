âœ… src/styles/theme.css
:root {
  --color-background: #1A1A1A;
  --color-panel: #2A2A2A;
  --color-text-primary: #FFFFFF;
  --color-text-secondary: #B0B0B0;
  --color-accent-primary: #FFD700;
  --color-status-good: #38A169;
  --color-status-warning: #ECC94B;
  --color-status-critical: #E53E3E;

  --font-family: 'Inter', sans-serif;

  --spacing-xs: 4px;
  --spacing-sm: 8px;
  --spacing-md: 16px;
  --spacing-lg: 24px;

  --font-size-sm: 0.875rem;
  --font-size-base: 1rem;
  --font-size-lg: 1.25rem;
  --font-size-xl: 1.5rem;

  --border-radius: 8px;
}

âœ… src/components/Table.tsx
import React from 'react';
import './Table.css';

export default function Table({ columns, data, onRowDoubleClick }) {
  return (
    <div className="table-wrapper">
      <table className="custom-table">
        <thead>
          <tr>
            {columns.map((col) => (
              <th key={col.accessor}>{col.label}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {data.map((row, idx) => (
            <tr key={idx} onDoubleClick={() => onRowDoubleClick(row)}>
              {columns.map((col) => (
                <td key={col.accessor}>
                  {col.render ? col.render(row[col.accessor], row) : row[col.accessor]}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

âœ… src/components/Table.css
.table-wrapper {
  width: 100%;
  overflow-x: auto;
  background: var(--color-panel);
  border-radius: var(--border-radius);
  padding: var(--spacing-sm);
}

.custom-table {
  width: 100%;
  border-collapse: collapse;
  font-family: var(--font-family);
  color: var(--color-text-primary);
}

.custom-table thead {
  background-color: #222;
  font-weight: bold;
  border-bottom: 2px solid var(--color-accent-primary);
}

.custom-table th,
.custom-table td {
  padding: var(--spacing-sm);
  text-align: left;
  border-bottom: 1px solid #333;
}

.custom-table tr:hover {
  background-color: #333;
  cursor: pointer;
}

.custom-table tr:nth-child(even) {
  background-color: #2e2e2e;
}

âœ… src/pages/PropertiesPage.tsx
import React from 'react';
import Table from '../components/Table';
import { useCollection } from '../lib/useApi';

export default function PropertiesPage() {
  const { data = [], isLoading } = useCollection('properties');

  const columns = [
    { label: 'Name', accessor: 'property_name' },
    { label: 'City', accessor: 'city' },
    { label: 'State', accessor: 'state' },
    { label: 'Type', accessor: 'type' },
    {
      label: 'Units',
      accessor: 'units_count',
      render: (value) => value ?? 'N/A',
    },
    {
      label: 'Occupancy',
      accessor: 'occupancy_rate',
      render: (value) => (
        <span style={{ color: value > 90 ? 'var(--color-status-good)' : 'var(--color-status-warning)' }}>
          {value ? `${value}%` : 'N/A'}
        </span>
      ),
    },
    {
      label: 'Open Units',
      accessor: 'open_units',
      render: (value) =>
        value > 0 ? (
          <span style={{ color: 'var(--color-status-warning)' }}>{value}</span>
        ) : (
          <span>{value}</span>
        ),
    },
    {
      label: 'Health',
      accessor: 'health_score',
      render: (value) =>
        value >= 80 ? (
          <span style={{ color: 'var(--color-status-good)' }}>{value}</span>
        ) : value >= 50 ? (
          <span style={{ color: 'var(--color-status-warning)' }}>{value}</span>
        ) : (
          <span style={{ color: 'var(--color-status-critical)' }}>{value}</span>
        ),
    },
    { label: 'Updated', accessor: 'updated_at' },
  ];

  const handleRowDoubleClick = (row) => {
    window.location.href = `/card/property/${row.id}`;
  };

  return (
    <div style={{ padding: 'var(--spacing-lg)' }}>
      <h1 style={{ color: 'var(--color-accent-primary)' }}>Portfolio: Properties</h1>

      <div style={{ display: 'flex', gap: 'var(--spacing-md)', margin: 'var(--spacing-md) 0' }}>
        <div className="card">Total Properties: {data.length}</div>
        <div className="card">Occupancy Avg: 91%</div>
        <div className="card">Open Units: 14</div>
      </div>

      {isLoading ? <p>Loading...</p> : <Table columns={columns} data={data} onRowDoubleClick={handleRowDoubleClick} />}
    </div>
  );
}


Once this is implemented, youâ€™ll have:

ðŸŽ¯ Rich summary cards for fast KPIs

âœ… A new reusable Table component using your design tokens

âš¡ Double-click drill-down to card view

ðŸŽ¨ Clean dark theme with semantic colors

ðŸ“ˆ Enriched and actionable data