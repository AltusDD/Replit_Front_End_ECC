PROMPT A — Hard-reset all 5 card pages (one hook only, no conditionals)

Replace each card’s page file with the exact minimal layout below. Do not add useState, useEffect, useMemo, or any other hooks. Only the single resolver hook per page is allowed. Use plain .ecc-object boxes so we don’t depend on other components.

1) src/pages/card/property/index.tsx
import React from "react";
import { useParams } from "wouter";
import { usePropertyCardData } from "../../../lib/ecc-card-resolvers";
import { joinAddress } from "../../../lib/format"; // already exists in your repo

export default function PropertyCardPage() {
  const { id } = useParams<{ id: string }>();
  const { property, units, leases, owner, isLoading, error } = usePropertyCardData(id);

  // Never return null. Show visible panels instead.
  return (
    <div style={{ display: "grid", gap: 16 }}>
      {/* Header */}
      <div className="ecc-object" style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
        <div style={{ fontWeight: 600 }}>
          {property?.street_1 || "—"}, {property?.city || "—"}, {property?.state || "—"}
        </div>
        <div style={{ display: "flex", gap: 8 }}>
          <button className="ecc-object" style={{ padding: "8px 12px" }}>Edit</button>
          <button className="ecc-object" style={{ padding: "8px 12px" }}>Export PDF</button>
          <button className="ecc-object" style={{ padding: "8px 12px" }}>New Work Order</button>
        </div>
      </div>

      {/* 2-column body */}
      <div style={{ display: "grid", gridTemplateColumns: "1fr 320px", gap: 16 }}>
        {/* Left column */}
        <div style={{ display: "grid", gap: 16 }}>
          <div className="ecc-object">
            <div className="ecc-label" style={{ marginBottom: 8 }}>Property Overview</div>
            <div style={{ display: "grid", gridTemplateColumns: "160px 1fr", rowGap: 6 }}>
              <div className="ecc-label">Type</div><div>{property?.type ?? "—"}</div>
              <div className="ecc-label">Class</div><div>{property?.class ?? "—"}</div>
              <div className="ecc-label">Status</div><div>{property?.status ?? "—"}</div>
              <div className="ecc-label">DoorLoop ID</div><div>{property?.doorloop_id ?? "—"}</div>
              <div className="ecc-label">Owner</div><div>{owner?.display_name ?? "—"}</div>
            </div>
          </div>

          <div className="ecc-object">
            <div className="ecc-label" style={{ marginBottom: 8 }}>Relationships</div>
            <div style={{ display: "grid", gridTemplateColumns: "160px 1fr", rowGap: 6 }}>
              <div className="ecc-label">Units</div><div>{units?.length ?? 0}</div>
              <div className="ecc-label">Active Leases</div>
              <div>
                {Array.isArray(leases)
                  ? leases.filter(l => String(l?.status ?? "").toLowerCase() === "active").length
                  : 0}
              </div>
            </div>
          </div>

          <div className="ecc-object">
            <div className="ecc-label" style={{ marginBottom: 8 }}>Files</div>
            <div>DoorLoop • Dropbox • Upload — buttons to be wired (present as stubs).</div>
          </div>

          <div className="ecc-object">
            <div className="ecc-label" style={{ marginBottom: 8 }}>Activity</div>
            <div>Timeline placeholder — no hooks here. Will bind to BFF later.</div>
          </div>
        </div>

        {/* Right rail */}
        <aside style={{ display: "grid", gap: 16 }}>
          <div className="ecc-object">
            <div className="ecc-label" style={{ marginBottom: 8 }}>Location</div>
            <div style={{ fontSize: 12, opacity: .8, marginBottom: 8 }}>
              {joinAddress([property?.street_1, property?.city, property?.state, property?.zip].filter(Boolean) as string[] ) || "—"}
            </div>
            {/* Keep the embed simple and inert to avoid hook churn */}
            <iframe
              title="map"
              style={{ width: "100%", height: 260, border: 0, borderRadius: 8 }}
              loading="lazy"
              referrerPolicy="no-referrer-when-downgrade"
              src={"https://www.google.com/maps?q=" + encodeURIComponent(
                joinAddress([property?.street_1, property?.city, property?.state, property?.zip].filter(Boolean) as string[])
              ) + "&output=embed"}
            />
          </div>

          <div className="ecc-object">
            <div className="ecc-label" style={{ marginBottom: 8 }}>Key Dates</div>
            <div style={{ opacity: .75 }}>No upcoming events.</div>
          </div>
        </aside>
      </div>

      {/* Inline error/info (never blank) */}
      {isLoading && <div className="ecc-object">Loading…</div>}
      {error && <div className="ecc-object">Error loading property.</div>}
    </div>
  );
}

2) src/pages/card/unit/index.tsx
import React from "react";
import { useParams } from "wouter";
import { useUnitCardData } from "../../../lib/ecc-card-resolvers";

export default function UnitCardPage() {
  const { id } = useParams<{ id: string }>();
  const { unit, property, activeLease, primaryTenant, isLoading, error } = useUnitCardData(id);

  return (
    <div style={{ display: "grid", gap: 16 }}>
      <div className="ecc-object" style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
        <div style={{ fontWeight: 600 }}>Unit {unit?.unit_number ?? "—"} — {property?.street_1 ?? "—"}</div>
        <div style={{ display: "flex", gap: 8 }}>
          <button className="ecc-object" style={{ padding: "8px 12px" }}>Edit</button>
          <button className="ecc-object" style={{ padding: "8px 12px" }}>Export PDF</button>
        </div>
      </div>

      <div style={{ display: "grid", gridTemplateColumns: "1fr 320px", gap: 16 }}>
        <div style={{ display: "grid", gap: 16 }}>
          <div className="ecc-object">
            <div className="ecc-label" style={{ marginBottom: 8 }}>Overview</div>
            <div style={{ display: "grid", gridTemplateColumns: "160px 1fr", rowGap: 6 }}>
              <div className="ecc-label">Status</div><div>{unit?.status ?? "—"}</div>
              <div className="ecc-label">Beds/Baths</div><div>{unit?.beds ?? "—"} / {unit?.baths ?? "—"}</div>
              <div className="ecc-label">Sq Ft</div><div>{unit?.sqft ?? "—"}</div>
              <div className="ecc-label">Market Rent</div><div>{typeof unit?.rent_cents === "number" ? `$${(unit.rent_cents/100).toFixed(0)}` : "—"}</div>
            </div>
          </div>

          <div className="ecc-object">
            <div className="ecc-label" style={{ marginBottom: 8 }}>Lease & Tenant</div>
            <div style={{ display: "grid", gridTemplateColumns: "160px 1fr", rowGap: 6 }}>
              <div className="ecc-label">Active Lease</div><div>{activeLease?.doorloop_id ?? "—"}</div>
              <div className="ecc-label">Primary Tenant</div><div>{primaryTenant?.display_name ?? "—"}</div>
            </div>
          </div>
        </div>

        <aside style={{ display: "grid", gap: 16 }}>
          <div className="ecc-object"><div className="ecc-label">Parent Property</div><div>{property?.street_1 ?? "—"}</div></div>
          <div className="ecc-object"><div className="ecc-label">Pinned Files</div><div>—</div></div>
        </aside>
      </div>

      {isLoading && <div className="ecc-object">Loading…</div>}
      {error && <div className="ecc-object">Error loading unit.</div>}
    </div>
  );
}

3) src/pages/card/lease/index.tsx
import React from "react";
import { useParams } from "wouter";
import { useLeaseCardData } from "../../../lib/ecc-card-resolvers";

export default function LeaseCardPage() {
  const { id } = useParams<{ id: string }>();
  const { lease, property, unit, tenant, isLoading, error } = useLeaseCardData(id);

  return (
    <div style={{ display: "grid", gap: 16 }}>
      <div className="ecc-object" style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
        <div style={{ fontWeight: 600 }}>Lease # {lease?.doorloop_id ?? "—"}</div>
        <div style={{ display: "flex", gap: 8 }}>
          <button className="ecc-object" style={{ padding: "8px 12px" }}>Edit</button>
          <button className="ecc-object" style={{ padding: "8px 12px" }}>Export PDF</button>
        </div>
      </div>

      <div style={{ display: "grid", gridTemplateColumns: "1fr 320px", gap: 16 }}>
        <div style={{ display: "grid", gap: 16 }}>
          <div className="ecc-object">
            <div className="ecc-label" style={{ marginBottom: 8 }}>Relationships</div>
            <div style={{ display: "grid", gridTemplateColumns: "160px 1fr", rowGap: 6 }}>
              <div className="ecc-label">Property</div><div>{property?.street_1 ?? "—"}</div>
              <div className="ecc-label">Unit</div><div>{unit?.unit_number ?? "—"}</div>
              <div className="ecc-label">Primary Tenant</div><div>{tenant?.display_name ?? "—"}</div>
            </div>
          </div>

          <div className="ecc-object">
            <div className="ecc-label" style={{ marginBottom: 8 }}>Lease Terms</div>
            <div style={{ display: "grid", gridTemplateColumns: "160px 1fr", rowGap: 6 }}>
              <div className="ecc-label">Status</div><div>{lease?.status ?? "—"}</div>
              <div className="ecc-label">Rent</div><div>{typeof lease?.rent_cents === "number" ? `$${(lease.rent_cents/100).toFixed(0)}` : "—"}</div>
              <div className="ecc-label">Term</div><div>{lease?.start_date ?? "—"} — {lease?.end_date ?? "—"}</div>
            </div>
          </div>
        </div>

        <aside style={{ display: "grid", gap: 16 }}>
          <div className="ecc-object"><div className="ecc-label">Pinned Files</div><div>—</div></div>
        </aside>
      </div>

      {isLoading && <div className="ecc-object">Loading…</div>}
      {error && <div className="ecc-object">Error loading lease.</div>}
    </div>
  );
}

4) src/pages/card/tenant/index.tsx
import React from "react";
import { useParams } from "wouter";
import { useTenantCardData } from "../../../lib/ecc-card-resolvers";

export default function TenantCardPage() {
  const { id } = useParams<{ id: string }>();
  const { tenant, leases, isLoading, error } = useTenantCardData(id);

  return (
    <div style={{ display: "grid", gap: 16 }}>
      <div className="ecc-object" style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
        <div style={{ fontWeight: 600 }}>{tenant?.display_name ?? "—"}</div>
        <div style={{ display: "flex", gap: 8 }}>
          <button className="ecc-object" style={{ padding: "8px 12px" }}>Edit</button>
          <button className="ecc-object" style={{ padding: "8px 12px" }}>Export PDF</button>
        </div>
      </div>

      <div style={{ display: "grid", gridTemplateColumns: "1fr 320px", gap: 16 }}>
        <div style={{ display: "grid", gap: 16 }}>
          <div className="ecc-object">
            <div className="ecc-label" style={{ marginBottom: 8 }}>Leases</div>
            {Array.isArray(leases) && leases.length > 0 ? (
              <div style={{ display: "grid", gridTemplateColumns: "repeat(2, minmax(0,1fr))", gap: 8 }}>
                {leases.map((l) => (
                  <div key={String(l.doorloop_id)} className="ecc-object">
                    <div className="ecc-label">Lease</div>
                    <div>#{l.doorloop_id ?? "—"} — {l.status ?? "—"}</div>
                  </div>
                ))}
              </div>
            ) : (
              <div style={{ opacity: .75 }}>No leases found.</div>
            )}
          </div>
        </div>

        <aside style={{ display: "grid", gap: 16 }}>
          <div className="ecc-object"><div className="ecc-label">Contact</div><div>{tenant?.primary_email ?? "—"}</div></div>
          <div className="ecc-object"><div className="ecc-label">Pinned Files</div><div>—</div></div>
        </aside>
      </div>

      {isLoading && <div className="ecc-object">Loading…</div>}
      {error && <div className="ecc-object">Error loading tenant.</div>}
    </div>
  );
}

5) src/pages/card/owner/index.tsx
import React from "react";
import { useParams } from "wouter";
import { useOwnerCardData } from "../../../lib/ecc-card-resolvers";

export default function OwnerCardPage() {
  const { id } = useParams<{ id: string }>();
  const { owner, properties, isLoading, error } = useOwnerCardData(id);

  return (
    <div style={{ display: "grid", gap: 16 }}>
      <div className="ecc-object" style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
        <div style={{ fontWeight: 600 }}>{owner?.display_name ?? "—"}</div>
        <div style={{ display: "flex", gap: 8 }}>
          <button className="ecc-object" style={{ padding: "8px 12px" }}>Edit</button>
          <button className="ecc-object" style={{ padding: "8px 12px" }}>Export PDF</button>
        </div>
      </div>

      <div style={{ display: "grid", gridTemplateColumns: "1fr 320px", gap: 16 }}>
        <div className="ecc-object">
          <div className="ecc-label" style={{ marginBottom: 8 }}>Portfolio</div>
          {Array.isArray(properties) && properties.length > 0 ? (
            <div style={{ display: "grid", gridTemplateColumns: "repeat(3, minmax(0,1fr))", gap: 8 }}>
              {properties.map((p) => (
                <div key={String(p.id)} className="ecc-object">
                  <div className="ecc-label">Property</div>
                  <div>{p.street_1 ?? "—"}, {p.city ?? "—"}</div>
                </div>
              ))}
            </div>
          ) : (
            <div style={{ opacity: .75 }}>No properties found.</div>
          )}
        </div>

        <aside style={{ display: "grid", gap: 16 }}>
          <div className="ecc-object"><div className="ecc-label">Pinned Files</div><div>—</div></div>
        </aside>
      </div>

      {isLoading && <div className="ecc-object">Loading…</div>}
      {error && <div className="ecc-object">Error loading owner.</div>}
    </div>
  );
}

PROMPT B — Remove legacy relation hooks and any extra hooks in card pages

Delete or empty these exports if they exist anywhere: usePropertyRelations, useUnitRelations, useOwnerRelations, useTenantRelations, useLeaseRelations. Replace their usages with the resolvers from ecc-card-resolvers.ts only.

In the five card page files under src/pages/card/**/index.tsx, remove any useState, useEffect, useMemo, useQuery, use* custom hooks other than the single resolver shown in PROMPT A.

Use a quick search to be explicit:

Find: use(Property|Unit|Owner|Tenant|Lease)Relations

Find: useQuery\( inside src/pages/card/**/index.tsx

Find: use(State|Effect|Memo)\( inside src/pages/card/**/index.tsx

All must be removed from card pages.

PROMPT C — Add a guardrail that prevents this regression

Create scripts/guardrail-card-hooks.mjs:

// scripts/guardrail-card-hooks.mjs
import fs from "node:fs";
import path from "node:path";

const root = "src/pages/card";
const allow = {
  property: ["usePropertyCardData"],
  unit: ["useUnitCardData"],
  lease: ["useLeaseCardData"],
  tenant: ["useTenantCardData"],
  owner: ["useOwnerCardData"],
};

let failed = false;
for (const entity of Object.keys(allow)) {
  const file = path.join(root, entity, "index.tsx");
  if (!fs.existsSync(file)) continue;
  const src = fs.readFileSync(file, "utf8");

  // 1) Only the allowed resolver hook may appear.
  const hooks = ["useState", "useEffect", "useMemo", "useQuery", "useMutation", "useReducer"];
  for (const h of hooks) {
    const rx = new RegExp(`\\b${h}\\s*\\(`, "g");
    if (rx.test(src)) {
      console.error(`[CARD HOOK GUARD] ${file} contains forbidden hook: ${h}`);
      failed = true;
    }
  }

  // 2) All custom "use*" hooks not in allow-list are blocked.
  const useCustom = src.match(/\buse[A-Z][A-Za-z0-9_]*\s*\(/g) || [];
  for (const call of useCustom) {
    const name = call.replace(/\(.*/, "");
    if (!allow[entity].includes(name)) {
      console.error(`[CARD HOOK GUARD] ${file} uses custom hook ${name} (only ${allow[entity][0]} allowed).`);
      failed = true;
    }
  }
}

if (failed) {
  process.exitCode = 1;
  console.error("\n❌ Card hook guardrail failed.");
} else {
  console.log("✅ Card hook guardrail passed.");
}


Add (or extend) your npm scripts:

{
  "scripts": {
    "guardrail:cardhooks": "node scripts/guardrail-card-hooks.mjs",
    "predev": "npm run guardrail:mega && npm run guardrail:overlays && npm run guardrail:cardhooks && npm run typecheck:cards",
    "prebuild": "npm run guardrail:mega && npm run guardrail:overlays && npm run guardrail:cardhooks && npm run guardrail && tsc -p tsconfig.cards.json"
  }
}

What this accomplishes

Fixes your screenshots: the hook-order error disappears because each card now has exactly one hook, always called in the same place, every render.

Removes the root cause (legacy relation hooks and ad-hoc queries).

Prevents regressions via a simple but strict guardrail.

When these three prompts are applied, try:

/card/property/57 (should render; map only here)

/card/unit/45

/card/lease/1

/card/tenant/1

/card/owner/1

If any page still shows placeholders, that’s expected until we wire the BFF read endpoints; but the pages should render reliably without hook errors or black screens, and with sane counts (not those massive repeated cards you saw before). After this lands, I’ll hand you the next patch to start filling out the Property → Relationships grid and wire Financials/Legal to the three BFF reads.