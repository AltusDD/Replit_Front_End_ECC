Replit Task — Asset Card Genesis Pack (M365/Teams, Files subtabs, Activity filters, Right-rail skeletons)
set -e
git checkout -b feat/asset-cards-genesis-pack

############################################
# 0) SERVER — Integrations config endpoint
############################################
mkdir -p server/routes
applypatch <<'PATCH'
*** Begin Patch
*** Add File: server/routes/config.ts
+import express from "express";
+
+const router = express.Router();
+
+router.get("/api/config/integrations", async (_req, res) => {
+  const env = process.env;
+  const m365 =
+    !!env.M365_CLIENT_ID &&
+    !!env.M365_TENANT_ID &&
+    (!!env.M365_CLIENT_SECRET || !!env.M365_AUTH_TENANT);
+  const sharepoint = !!env.M365_SHAREPOINT_SITE_ID;
+  const teamsDefault = !!env.M365_TEAMS_DEFAULT_TEAM_ID && !!env.M365_TEAMS_DEFAULT_CHANNEL_ID;
+  const doorloop = !!env.DOORLOOP_API_KEY;
+  const dropbox = !!env.DROPBOX_API_KEY || !!env.DROPBOX_ENABLED;
+  const corelogic = !!env.CORELOGIC_ENABLED || !!env.CORELOGIC_API_KEY;
+
+  return res.json({
+    ok: true,
+    integrations: {
+      m365,
+      sharepoint,
+      teamsDefault,
+      doorloop,
+      dropbox,
+      corelogic,
+    },
+  });
+});
+
+export default router;
*** End Patch
PATCH

applypatch <<'PATCH'
*** Begin Patch
*** Update File: server/index.ts
@@
 import express from "express";
 import cors from "cors";
 import ownerTransferRouter from "./routes/ownerTransfer";
 import auditRouter from "./routes/audit";
+import configRouter from "./routes/config";
 import { runDueTransfersTick } from "./lib/ownerTransfer";
 import { runAutoGeocodeTick } from "./jobs/autoGeocodeTick";
 
 const app = express();
 app.use(cors());
 app.use(express.json());
 app.use(ownerTransferRouter);
 app.use(auditRouter);
+app.use(configRouter);
*** End Patch
PATCH

############################################
# 1) FRONTEND — Shared UI: source badges
############################################
mkdir -p src/components/ui
cat > src/components/ui/SourceBadges.tsx <<'TSX'
import React from "react";

type Props = {
  doorloop?: boolean;
  corelogic?: boolean;
  m365?: boolean;
  dropbox?: boolean;
  className?: string;
};

const badge = (label: string, title: string) => (
  <span
    key={label}
    title={title}
    className="px-2 py-0.5 rounded-full text-xs bg-neutral-800 border border-neutral-700 text-neutral-300"
  >
    {label}
  </span>
);

export default function SourceBadges({ doorloop, corelogic, m365, dropbox, className }: Props) {
  const items: React.ReactNode[] = [];
  if (doorloop) items.push(badge("DL", "DoorLoop"));
  if (corelogic) items.push(badge("CL", "CoreLogic"));
  if (m365) items.push(badge("M365", "Microsoft 365 (Teams/SharePoint/Outlook/Planner)"));
  if (dropbox) items.push(badge("DBX", "Dropbox"));
  if (!items.length) return null;
  return <div className={`flex flex-wrap gap-1 ${className || ""}`}>{items}</div>;
}
TSX

############################################
# 2) FRONTEND — Integrations config hook
############################################
cat > src/lib/useIntegrations.ts <<'TS'
import { useEffect, useState } from "react";
type Integrations = {
  m365: boolean;
  sharepoint: boolean;
  teamsDefault: boolean;
  doorloop: boolean;
  dropbox: boolean;
  corelogic: boolean;
};
export function useIntegrations(){
  const [data,setData]=useState<Integrations|null>(null);
  useEffect(()=>{ (async()=>{
    try{
      const r=await fetch("/api/config/integrations"); const j=await r.json();
      setData(j?.integrations||null);
    }catch{ setData({ m365:false, sharepoint:false, teamsDefault:false, doorloop:false, dropbox:false, corelogic:false }); }
  })(); },[]);
  return data;
}
TS

############################################
# 3) FRONTEND — Right-rail widgets + skeletons
############################################
mkdir -p src/features/cards/widgets
cat > src/features/cards/widgets/RightRail.tsx <<'TSX'
import React from "react";

function Box({ title, children, minH=120 }: any){
  return (
    <div className="rounded-lg border border-neutral-800 bg-neutral-900 p-3">
      <div className="text-sm font-semibold mb-2">{title}</div>
      <div style={{ minHeight: minH }} className="text-sm">{children}</div>
    </div>
  );
}

export function RiskScoreWidget({ score, factors }:{ score?: number; factors?: string[] }){
  return (
    <Box title="Risk (CoreLogic)">
      {!score && <div className="animate-pulse h-5 bg-neutral-800 rounded w-24 mb-2"></div>}
      {score && <div className="text-xl font-bold">{score}</div>}
      <ul className="mt-1 list-disc list-inside text-neutral-300 text-xs">
        {factors?.slice(0,3).map((f,i)=><li key={i}>{f}</li>) || (
          <>
            <li className="animate-pulse h-3 bg-neutral-800 rounded w-40 mb-1"></li>
            <li className="animate-pulse h-3 bg-neutral-800 rounded w-48"></li>
          </>
        )}
      </ul>
    </Box>
  );
}

export function KeyDatesWidget({ items }:{ items?: {label:string; value:string}[] }){
  return (
    <Box title="Key Dates" minH={96}>
      {!items ? (
        <>
          <div className="animate-pulse h-3 bg-neutral-800 rounded w-40 mb-2"></div>
          <div className="animate-pulse h-3 bg-neutral-800 rounded w-48"></div>
        </>
      ) : (
        <ul className="text-xs text-neutral-300 space-y-1">
          {items.map((x,i)=><li key={i}><span className="text-neutral-400">{x.label}:</span> {x.value}</li>)}
        </ul>
      )}
    </Box>
  );
}

export function PinnedFilesWidget({ files }:{ files?: {name:string; href:string; src:'DL'|'DBX'|'SP'}[] }){
  return (
    <Box title="Pinned Files" minH={96}>
      {!files ? (
        <>
          <div className="animate-pulse h-3 bg-neutral-800 rounded w-60 mb-2"></div>
          <div className="animate-pulse h-3 bg-neutral-800 rounded w-40"></div>
        </>
      ) : files.length===0 ? (
        <div className="text-neutral-500 text-xs">No pinned files.</div>
      ) : (
        <ul className="text-xs space-y-1">
          {files.map((f,i)=><li key={i}><a className="text-blue-300 hover:underline" href={f.href} target="_blank" rel="noreferrer">[{f.src}] {f.name}</a></li>)}
        </ul>
      )}
    </Box>
  );
}

export default function RightRail({ children }:{ children?: any }){
  return <div className="space-y-3">{children}</div>;
}
TSX

############################################
# 4) FRONTEND — Activity filters & chips
############################################
mkdir -p src/features/activity
cat > src/features/activity/ActivityFeed.tsx <<'TSX'
import React, { useEffect, useMemo, useState } from "react";

type Event = { created_at:string; event_type:string; label?:string; payload?:any };
type Props = { table:string; refId:string };

const SOURCES = [
  { key: "EMAIL",    match: /email|mail/i, icon: "📧" },
  { key: "TEAMS",    match: /teams|m365|microsoft/i, icon: "💬" },
  { key: "ACCOUNT",  match: /payment|account|ledger/i, icon: "💵" },
  { key: "LEGAL",    match: /legal|court|notice/i, icon: "⚖️" },
  { key: "WO",       match: /work.?order|maintenance/i, icon: "🛠️" },
  { key: "GEOCODE",  match: /geocode/i, icon: "📍" },
  { key: "TRANSFER", match: /owner_transfer|authorize|execute|approved/i, icon: "🔁" },
];

function sourceIcon(e:Event){
  for(const s of SOURCES){ if(s.match.test(e.event_type) || s.match.test(e.label||"")) return s.icon; }
  return "•";
}

export default function ActivityFeed({ table, refId }: Props){
  const [raw,setRaw]=useState<Event[]|null>(null);
  const [q,setQ]=useState("");
  const [src,setSrc]=useState<string>("ALL");
  const [from,setFrom]=useState<string>("");
  const [to,setTo]=useState<string>("");

  useEffect(()=>{ (async()=>{
    try{
      const r=await fetch(`/api/audit/by-ref?table=${encodeURIComponent(table)}&ref_id=${encodeURIComponent(refId)}`);
      const j=await r.json(); setRaw(j.events||[]);
    }catch{ setRaw([]); }
  })(); },[table,refId]);

  const items = useMemo(()=>{
    let list = raw||[];
    if(q) list=list.filter(e=>(e.label||"").toLowerCase().includes(q.toLowerCase()) || e.event_type.toLowerCase().includes(q.toLowerCase()));
    if(src!=="ALL"){
      const conf = SOURCES.find(s=>s.key===src);
      if(conf) list=list.filter(e=>conf.match.test(e.event_type)||conf.match.test(e.label||""));
    }
    if(from){ const f=new Date(from).getTime(); list=list.filter(e=>new Date(e.created_at).getTime()>=f); }
    if(to){ const t=new Date(to).getTime(); list=list.filter(e=>new Date(e.created_at).getTime()<=t); }
    return list;
  },[raw,q,src,from,to]);

  if(!raw) return <div className="text-sm text-neutral-400">Loading activity…</div>;

  return (
    <div className="border border-neutral-800 rounded p-3">
      <div className="text-sm font-semibold mb-2">Activity</div>
      <div className="flex flex-wrap gap-2 mb-2">
        <input value={q} onChange={e=>setQ(e.target.value)} placeholder="Filter…" className="bg-neutral-950 border border-neutral-800 rounded px-2 py-1 text-sm" />
        <select value={src} onChange={e=>setSrc(e.target.value)} className="bg-neutral-950 border border-neutral-800 rounded px-2 py-1 text-sm">
          <option value="ALL">All sources</option>
          {SOURCES.map(s=><option key={s.key} value={s.key}>{s.key}</option>)}
        </select>
        <input type="date" value={from} onChange={e=>setFrom(e.target.value)} className="bg-neutral-950 border border-neutral-800 rounded px-2 py-1 text-sm" />
        <input type="date" value={to} onChange={e=>setTo(e.target.value)} className="bg-neutral-950 border border-neutral-800 rounded px-2 py-1 text-sm" />
      </div>
      <div className="space-y-2">
        {items.length===0 ? <div className="text-xs text-neutral-500">No events.</div> : items.map((e,i)=>(
          <div key={i} className={`flex items-start gap-2 border-l-2 pl-2 ${/legal|error|failed/i.test(e.event_type) ? "border-red-600" : "border-neutral-700"}`}>
            <div className="mt-0.5">{sourceIcon(e)}</div>
            <div className="flex-1">
              <div className="text-xs text-neutral-400">{new Date(e.created_at).toLocaleString()}</div>
              <div className="text-sm">
                <span className="px-1.5 py-0.5 mr-2 rounded border border-neutral-700 bg-neutral-800 text-neutral-200">{e.event_type}</span>
                <span className="text-neutral-200">{e.label}</span>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  )
}
TSX

############################################
# 5) FRONTEND — Files tab (DL/DBX subtabs + SP section)
############################################
mkdir -p src/features/files
cat > src/features/files/FilesTab.tsx <<'TSX'
import React, { useMemo, useState } from "react";
import SourceBadges from "../../components/ui/SourceBadges";

type FileRow = { id:string; name:string; href?:string; source:'DL'|'DBX'|'SP'; };
type Props = {
  doorloop?: boolean;
  dropbox?: boolean;
  sharepoint?: boolean;
  dlFiles?: FileRow[];
  dbxFiles?: FileRow[];
  spFiles?: FileRow[];
  onUploadDropbox?: ()=>void;
  onConnectDoorLoop?: ()=>void;
  onConnectDropbox?: ()=>void;
};

export default function FilesTab({ doorloop, dropbox, sharepoint, dlFiles=[], dbxFiles=[], spFiles=[], onUploadDropbox, onConnectDoorLoop, onConnectDropbox }: Props){
  const [tab,setTab]=useState<'DL'|'DBX'>('DL');
  const [q,setQ]=useState("");
  const merged = useMemo(()=>{
    const all = [
      ...(tab==='DL' ? dlFiles : dbxFiles),
      ...(sharepoint ? spFiles : []),
    ];
    if(!q) return all;
    return all.filter(f=>f.name.toLowerCase().includes(q.toLowerCase()));
  },[dlFiles,dbxFiles,spFiles,sharepoint,tab,q]);

  return (
    <div className="space-y-3">
      <div className="flex items-center justify-between">
        <input value={q} onChange={e=>setQ(e.target.value)} placeholder="Search all files…" className="bg-neutral-950 border border-neutral-800 rounded px-2 py-1 text-sm w-full max-w-sm" />
        <div className="ml-3"><SourceBadges doorloop={doorloop} dropbox={dropbox} m365={sharepoint} /></div>
      </div>

      <div className="flex items-center gap-2">
        <button className={`btn btn-sm ${tab==='DL'?'btn-primary':''}`} onClick={()=>setTab('DL')}>DoorLoop</button>
        <button className={`btn btn-sm ${tab==='DBX'?'btn-primary':''}`} onClick={()=>setTab('DBX')}>Dropbox</button>
        {dropbox && <button className="btn btn-sm" onClick={onUploadDropbox}>Upload</button>}
      </div>

      {/* States */}
      {!doorloop && tab==='DL' && (
        <div className="text-sm text-neutral-400 border border-neutral-800 rounded p-3">
          DoorLoop files not connected. <button className="btn btn-sm ml-2" onClick={onConnectDoorLoop}>Connect</button>
        </div>
      )}
      {!dropbox && tab==='DBX' && (
        <div className="text-sm text-neutral-400 border border-neutral-800 rounded p-3">
          Dropbox not connected. <button className="btn btn-sm ml-2" onClick={onConnectDropbox}>Connect</button>
        </div>
      )}
      {sharepoint && (
        <div className="text-xs text-neutral-500">SharePoint files included in results (read-only).</div>
      )}

      <table className="w-full text-sm">
        <thead>
          <tr className="text-neutral-400">
            <th className="text-left py-2">Name</th>
            <th className="text-left py-2">Source</th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          {merged.map(f=>(
            <tr key={`${f.source}:${f.id}`} className="border-t border-neutral-800">
              <td className="py-2">{f.name}</td>
              <td className="py-2">{f.source}</td>
              <td className="py-2 text-right">{f.href ? <a className="btn btn-sm" href={f.href} target="_blank" rel="noreferrer">Open</a> : <span className="text-neutral-500">No link</span>}</td>
            </tr>
          ))}
          {merged.length===0 && (
            <tr><td className="py-4 text-neutral-500" colSpan={3}>No files.</td></tr>
          )}
        </tbody>
      </table>
    </div>
  );
}
TSX

############################################
# 6) FRONTEND — Teams actions (Owner/Tenant cards)
############################################
applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/features/owners/components/OwnerCard.tsx
@@
 import { Link } from "wouter";
+import { useIntegrations } from "../../../lib/useIntegrations";
+import SourceBadges from "../../../components/ui/SourceBadges";
 
 export default function OwnerCard({ owner }: any){
+  const integrations = useIntegrations();
+  const phone = owner?.phone || owner?.primary_phone || "";
+  const email = owner?.email || "";
+  const m365 = !!integrations?.m365;
+  const telHref = phone ? `tel:${phone}` : undefined;
+  const teamsMsgHref = email ? `https://teams.microsoft.com/l/chat/0/0?users=${encodeURIComponent(email)}` : undefined;
+  const outlookMailHref = email ? `mailto:${email}` : undefined;
   return (
     <div className="card bg-neutral-900 border border-neutral-800">
       {/* existing owner summary UI */}
       <div className="mt-4 flex gap-2">
         <Link href={`/owners/transfer?ownerId=${owner.id}`}>
           <a className="btn btn-primary">Transfer Ownership</a>
         </Link>
         <Link href={`/owners/transfers?ownerId=${owner.id}`}>
           <a className="btn btn-secondary">Recent Transfers</a>
         </Link>
+        {/* Teams/Outlook actions */}
+        <a className={`btn ${telHref?'':'opacity-50 cursor-not-allowed'}`} href={telHref} title={telHref? 'Call via system dialer' : 'No phone on file'}>Call</a>
+        <a className={`btn ${m365 && teamsMsgHref?'':'opacity-50 cursor-not-allowed'}`} href={m365 && teamsMsgHref ? teamsMsgHref : undefined} title={m365? (teamsMsgHref?'Open Teams chat':'No email on file') : 'Microsoft 365 not configured'}>Message (Teams)</a>
+        <a className={`btn ${outlookMailHref?'':'opacity-50 cursor-not-allowed'}`} href={outlookMailHref} title={outlookMailHref?'Compose email':'No email on file'}>Email</a>
       </div>
+      <div className="mt-2">
+        <SourceBadges doorloop={!!integrations?.doorloop} corelogic={!!integrations?.corelogic} m365={!!integrations?.m365} dropbox={!!integrations?.dropbox} />
+      </div>
     </div>
   );
 }
*** End Patch
PATCH

# If you have a TenantCard, wire the same actions (safe no-op if file missing)
applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/features/tenants/components/TenantCard.tsx
@@
+import React from "react";
+import { useIntegrations } from "../../../lib/useIntegrations";
+import SourceBadges from "../../../components/ui/SourceBadges";
+
+export default function TenantCard({ tenant }: any){
+  const integrations = useIntegrations();
+  const phone = tenant?.phone || tenant?.primary_phone || "";
+  const email = tenant?.email || "";
+  const m365 = !!integrations?.m365;
+  const telHref = phone ? `tel:${phone}` : undefined;
+  const teamsMsgHref = email ? `https://teams.microsoft.com/l/chat/0/0?users=${encodeURIComponent(email)}` : undefined;
+  const outlookMailHref = email ? `mailto:${email}` : undefined;
+  return (
+    <div className="card bg-neutral-900 border border-neutral-800">
+      <div className="p-4">
+        <div className="text-lg font-semibold">{tenant?.display_name || tenant?.name || 'Tenant'}</div>
+        <div className="mt-3 flex gap-2">
+          <a className={`btn ${telHref?'':'opacity-50 cursor-not-allowed'}`} href={telHref} title={telHref? 'Call via system dialer' : 'No phone on file'}>Call</a>
+          <a className={`btn ${m365 && teamsMsgHref?'':'opacity-50 cursor-not-allowed'}`} href={m365 && teamsMsgHref ? teamsMsgHref : undefined} title={m365? (teamsMsgHref?'Open Teams chat':'No email on file') : 'Microsoft 365 not configured'}>Message (Teams)</a>
+          <a className={`btn ${outlookMailHref?'':'opacity-50 cursor-not-allowed'}`} href={outlookMailHref} title={outlookMailHref?'Compose email':'No email on file'}>Email</a>
+        </div>
+        <div className="mt-2">
+          <SourceBadges doorloop={!!integrations?.doorloop} corelogic={!!integrations?.corelogic} m365={!!integrations?.m365} dropbox={!!integrations?.dropbox} />
+        </div>
+      </div>
+    </div>
+  );
+}
*** End Patch
PATCH || true

############################################
# 7) FRONTEND — Example Right-Rail use on Owner page (safe update)
############################################
applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/features/owners/pages/OwnerTransferDetailPage.tsx
@@
-import React, { useEffect, useMemo, useState } from "react";
+import React, { useEffect, useMemo, useState } from "react";
 import { useLocation } from "wouter";
 import { useToast } from "../../../components/ui/Toast";
+import RightRail, { RiskScoreWidget, KeyDatesWidget, PinnedFilesWidget } from "../../cards/widgets/RightRail";
@@
   return (
-    <div className="p-6 text-neutral-200">
-      <div className="card bg-neutral-900 border border-neutral-800">
+    <div className="p-6 text-neutral-200 grid grid-cols-1 lg:grid-cols-3 gap-4">
+      <div className="card bg-neutral-900 border border-neutral-800 lg:col-span-2">
         <div className="card-header px-4 py-3 border-b border-neutral-800">
           <div className="flex items-center justify-between">
             <h2 className="text-lg font-semibold">Owner Transfer Detail — #{id}</h2>
@@
       </div>
+      <RightRail>
+        <RiskScoreWidget />
+        <KeyDatesWidget />
+        <PinnedFilesWidget />
+      </RightRail>
     </div>
   );
 }
*** End Patch
PATCH

############################################
# 8) FRONTEND — Use new ActivityFeed (optional on same page)
############################################
applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/features/owners/pages/OwnerTransferDetailPage.tsx
@@
-              {/* Audit feed */}
-              <AuditFeed table="owner_transfers" refId={String(id)} />
+              {/* Activity feed with filters */}
+              <ActivityFeed table="owner_transfers" refId={String(id)} />
*** End Patch
PATCH

applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/features/owners/pages/OwnerTransferDetailPage.tsx
@@
-import React, { useEffect, useMemo, useState } from "react";
+import React, { useEffect, useMemo, useState } from "react";
@@
-import function AuditFeed({ table, refId }:{ table:string; refId:string }){
+import ActivityFeed from "../../activity/ActivityFeed";
+function AuditFeed(){ return null } // deprecated shim
*** End Patch
PATCH

############################################
# 9) FRONTEND — Optional FilesTab wiring stub (owner page example)
############################################
applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/features/owners/pages/OwnerTransfersListPage.tsx
@@
 import { useLocation, Link } from "wouter";
+import FilesTab from "../../files/FilesTab";
+import { useIntegrations } from "../../../lib/useIntegrations";
@@
   const [items,setItems]=useState<T[]|null>(null);
+  const integrations = useIntegrations();
@@
       <div className="card bg-neutral-900 border border-neutral-800">
         <div className="card-header px-4 py-3 border-b border-neutral-800">
           <h2 className="text-lg font-semibold">Recent Transfers {ownerId?`— Owner #${ownerId}`:""}</h2>
         </div>
         <div className="card-content p-4">
+          {/* Files tab skeleton demo (replace with your actual card Files tab component) */}
+          {integrations && (
+            <div className="mb-6">
+              <FilesTab
+                doorloop={integrations.doorloop}
+                dropbox={integrations.dropbox}
+                sharepoint={integrations.sharepoint}
+                dlFiles={[]}
+                dbxFiles={[]}
+                spFiles={[]}
+              />
+            </div>
+          )}
*** End Patch
PATCH

git add -A
git commit -m "Asset Cards Genesis Pack: Source badges, Teams actions, Right-rail skeletons, Files subtabs, Activity filters, /api/config/integrations"

What Replit just built

/api/config/integrations: server truth for what’s enabled (M365, DoorLoop, SharePoint, Dropbox, CoreLogic).

Source badges: pill chips in card hero — compact, low-contrast, with tooltips.

Owner/Tenant actions: Call (tel:), Message (Teams deep link), Email (mailto:). Disabled with helpful tooltips if missing data or M365 not configured.

Right rail: Risk Score, Key Dates, Pinned Files — min-height skeletons to prevent layout shift (Gemini’s guidance).

Activity feed: Slack-style chips + filters (source & date range).

Files tab: DoorLoop / Dropbox sub-tabs + SharePoint blended list & global search. Clear “Connect” states, upload button passes through for Dropbox.

All UI matches the dark theme and the card standard (3-column layout, no new deps, feature-first).

Quick QA script for Replit to run

Restart the app.

Open any Owner page:

See source badges (DL/CL/M365/DBX) — visibility driven by /api/config/integrations.

Call/Teams/Email buttons: verify tooltips and disabled states when phone/email or M365 isn’t set.

Owner Transfer Detail: confirm right rail skeletons render immediately; Activity shows filters.

Transfers list: temporary Files area shows the DL/DBX tabs and SharePoint flag (for now with empty lists).

No errors in console.