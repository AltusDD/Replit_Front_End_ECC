# ---- 0) backup
ts=$(date +%Y%m%d_%H%M%S); mkdir -p estate_backup_$ts && cp -R src vite.config.mjs package.json postcss.config.* index.html estate_backup_$ts 2>/dev/null || true

# ---- 1) canonical app styles (keep theme.css, add app.css)
mkdir -p src/styles
cat > src/styles/app.css <<'CSS'
/* basic layout + utilities */
.container{max-width:1280px;margin:0 auto;padding:24px}
.grid{display:grid;gap:16px}
.grid-kpi{grid-template-columns:repeat(5,minmax(0,1fr))}
.panel{background:var(--panel);border:1px solid var(--border);border-radius:12px;padding:16px}
.badge{display:inline-block;padding:4px 8px;border:1px solid var(--border);border-radius:999px;color:var(--muted)}
.nav{width:240px;padding:18px;background:var(--panel);border-right:1px solid var(--border);position:fixed;inset:0 auto 0 0}
.nav a{display:block;color:var(--muted);padding:6px 10px;border-radius:8px}
.nav a.active{background:#10151b;color:var(--text);border:1px solid var(--border)}
.main{margin-left:240px;min-height:100vh}
.h1{font-size:28px;font-weight:800;margin:0 0 16px}
.stat{display:flex;flex-direction:column;gap:6px}
.stat .label{color:var(--muted);font-size:12px;text-transform:uppercase;letter-spacing:.08em}
.stat .value{font-size:28px;font-weight:800}
.table{width:100%;border-collapse:separate;border-spacing:0;border:1px solid var(--border);border-radius:10px;overflow:hidden}
.table th{background:#0f141a;color:var(--muted);text-align:left;font-size:12px;padding:10px;border-bottom:1px solid var(--border)}
.table td{padding:12px;border-bottom:1px solid var(--border)}
.table tr:last-child td{border-bottom:0}
.error{color:var(--danger)}
.center{display:flex;justify-content:center;align-items:center}
CSS

# ensure main.tsx imports theme + app
grep -q "styles/app.css" src/main.tsx || sed -i "s|styles/theme.css|styles/theme.css';\nimport './styles/app.css|g" src/main.tsx

# ---- 2) unified API helpers (auto-fallback collection paths)
mkdir -p src/lib
cat > src/lib/useApi.ts <<'TS'
import { useEffect, useMemo, useState } from 'react';

const BASE = import.meta.env.VITE_API_BASE || '/api';
const COLL_BASE = import.meta.env.VITE_API_COLLECTION_BASE || ''; // optional override
const KEY = import.meta.env.VITE_API_KEY || '';

const HEADERS: Record<string, string> = { Accept: 'application/json' };
if (KEY) HEADERS['x-api-key'] = KEY;

export async function fetchJSON<T>(url: string, init: RequestInit = {}): Promise<T> {
  const res = await fetch(url, { ...init, headers: { ...HEADERS, ...(init.headers || {}) } });
  if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
  return res.json();
}

// Try multiple paths for a collection until one works.
async function fetchCollection(col: string, qs: string) {
  const paths = [
    COLL_BASE ? `${COLL_BASE}/${col}${qs}` : '',
    `${BASE}/portfolio/${col}${qs}`,
    `${BASE}/${col}${qs}`
  ].filter(Boolean);

  const errors: any[] = [];
  for (const u of paths) {
    try { return await fetchJSON<any>(u); } catch (e) { errors.push([u, e]); }
  }
  const err = new Error(`No collection endpoint worked for "${col}". Tried: ${paths.join(', ')}`);
  (err as any).attempts = errors;
  throw err;
}

export function useCounts() {
  const [data, set] = useState<any | null>(null);
  const [loading, setL] = useState(true);
  const [error, setE] = useState<any>(null);

  useEffect(() => {
    (async () => {
      setL(true); setE(null);
      const candidates = [`${BASE}/counts`, `${BASE}/portfolio/counts`];
      let ok: any = null;
      for (const u of candidates) { try { ok = await fetchJSON(u); break; } catch {} }
      if (!ok) setE(new Error('Counts endpoint not found')); else set(ok);
      setL(false);
    })();
  }, []);
  return { data, loading, error };
}

export function useCollection(col: string, params: Record<string, any> = {}) {
  const qs = useMemo(() => {
    const s = new URLSearchParams();
    Object.entries(params).forEach(([k, v]) => v != null && s.set(k, String(v)));
    const q = s.toString();
    return q ? `?${q}` : '';
  }, [JSON.stringify(params)]);

  const [data, set] = useState<any[]>([]);
  const [loading, setL] = useState(true);
  const [error, setE] = useState<any>(null);

  useEffect(() => {
    let alive = true;
    (async () => {
      setL(true); setE(null);
      try {
        const json = await fetchCollection(col, qs);
        if (!alive) return;
        const rows =
          Array.isArray(json?.items) ? json.items :
          Array.isArray(json) ? json :
          Array.isArray(json?.data) ? json.data :
          [];
        set(rows);
      } catch (e) {
        if (!alive) return;
        setE(e); set([]);
      } finally { if (alive) setL(false); }
    })();
    return () => { alive = false };
  }, [col, qs]);

  return { data, loading, error };
}
TS

# ---- 3) generic Table (lightweight, themed)
mkdir -p src/components/ui
cat > src/components/ui/Table.tsx <<'TSX'
import React from 'react';

export type Col = { key: string; label?: string; width?: string; render?: (v:any,row:any)=>React.ReactNode };
export default function Table({ rows, columns }: { rows: any[]; columns?: Col[] }) {
  const cols: Col[] = columns && columns.length
    ? columns
    : (rows[0] ? Object.keys(rows[0]).slice(0, 8).map(k => ({ key:k, label:k })) : []);

  if (!rows.length) return <div className="panel">No results</div>;

  return (
    <div className="panel">
      <table className="table">
        <thead>
          <tr>{cols.map(c => <th key={c.key} style={{width:c.width}}>{c.label ?? c.key}</th>)}</tr>
        </thead>
        <tbody>
          {rows.map((r, i) => (
            <tr key={i}>
              {cols.map(c => <td key={c.key}>{c.render ? c.render(r[c.key], r) : String(r[c.key] ?? '')}</td>)}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
TSX

# ---- 4) collection page wrapper + plug five routes
mkdir -p src/pages/portfolio
cat > src/pages/portfolio/_Collection.tsx <<'TSX'
import React from 'react';
import { useCollection } from '@lib/useApi';
import Table from '@/components/ui/Table';

export default function CollectionPage({ name }: { name: 'properties'|'units'|'leases'|'tenants'|'owners' }) {
  const { data, loading, error } = useCollection(name, { limit: 50 });

  return (
    <div className="grid" style={{gap:16}}>
      <div className="panel">
        <strong style={{color:'var(--muted)'}}>Status</strong><br/>
        {loading && <span>Loadingâ€¦</span>}
        {error && <span className="error">API error: {String(error.message || error)}</span>}
        {!loading && !error && <span>OK</span>}
      </div>
      {!loading && !error && <Table rows={data} />}
    </div>
  );
}
TSX

for C in properties units leases tenants owners; do
  mkdir -p src/pages/portfolio/$C
  cat > src/pages/portfolio/$C/index.tsx <<TSX
import React from 'react';
import CollectionPage from '../_Collection';
export default function Page() { return <CollectionPage name="$C" /> }
TSX
done

# ---- 5) ensure all imports use @lib/useApi
grep -RIl --include='*.tsx' --include='*.ts' '@lib/ecc-api' src 2>/dev/null | xargs -r sed -i 's|@lib/ecc-api|@lib/useApi|g'

# ---- 6) restart vite
pkill -f vite >/dev/null 2>&1 || true
npm run dev
