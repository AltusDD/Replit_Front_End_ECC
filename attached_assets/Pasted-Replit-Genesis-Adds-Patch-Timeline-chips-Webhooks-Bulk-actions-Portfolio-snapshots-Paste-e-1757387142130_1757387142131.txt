Replit — “Genesis Adds” Patch (Timeline chips, Webhooks, Bulk actions, Portfolio snapshots)

Paste everything below into the Replit Shell (it’s idempotent and respects our feature-first layout and aliases) :

set -e
git checkout -b feat/genesis-adds-v2

############################################
# 0) ENV (document only — add to Replit UI)
############################################
# Add these (no file write):
# INTERNAL_WEBHOOK_URL=https://your-internal-bus.example.com/events
# INTERNAL_WEBHOOK_SECRET=********

############################################
# 1) SERVER — Internal Bus (signed webhook)
############################################
mkdir -p server/lib server/routes
cat > server/lib/bus.ts <<'TS'
import crypto from "crypto";
import fetch from "node-fetch";

const WEBHOOK = process.env.INTERNAL_WEBHOOK_URL || "";
const SECRET  = process.env.INTERNAL_WEBHOOK_SECRET || "";

function sign(body: string) {
  return crypto.createHmac("sha256", SECRET).update(body).digest("hex");
}

export async function emitBus(event: string, payload: any) {
  if (!WEBHOOK || !SECRET) return; // soft no-op if not configured
  const body = JSON.stringify({ event, payload, ts: new Date().toISOString() });
  const sig = sign(body);
  try {
    await fetch(WEBHOOK, {
      method: "POST",
      headers: { "Content-Type": "application/json", "x-empire-signature": sig, "x-empire-event": event },
      body
    });
  } catch {}
}
TS

############################################
# 2) SERVER — Owner Transfer webhooks + bulk APIs
############################################
applypatch <<'PATCH'
*** Begin Patch
*** Update File: server/routes/ownerTransfer.ts
@@
 import express from "express";
 import { initiateTransfer, approveAccounting, authorizeTransfer, executeTransfer } from "../lib/ownerTransfer";
 import { sbAdmin } from "../lib/supabaseAdmin";
 import { recordAudit } from "../lib/audit";
+import { emitBus } from "../lib/bus";
 const router = express.Router();
@@
 router.post("/api/owner-transfer/initiate", async (req, res) => {
   const { old_owner_id, new_owner_id, property_ids, effective_date, notes } = req.body || {};
   const user = (req as any).user || null;
   const transfer = await initiateTransfer({ old_owner_id, new_owner_id, property_ids, effective_date, notes, user });
+  await emitBus("owner_transfer.initiated", { id: transfer.id, old_owner_id, new_owner_id, effective_date, property_ids });
   return res.json({ ok: true, id: transfer.id, transfer });
 });
@@
 router.post("/api/owner-transfer/approve-accounting", async (req, res) => {
   const { transfer_id } = req.body || {};
   const t = await approveAccounting(transfer_id);
+  await emitBus("owner_transfer.accounting_approved", { id: transfer_id });
   return res.json({ ok: true, transfer: t });
 });
@@
 router.post("/api/owner-transfer/authorize", async (req, res) => {
   const token = (req.headers["authorization"]||"").replace(/^Bearer\s+/i,"");
   if (token !== process.env.ADMIN_SYNC_TOKEN) return res.status(401).send("Unauthorized");
   const { transfer_id } = req.body || {};
   const t = await authorizeTransfer(transfer_id);
+  await emitBus("owner_transfer.authorized", { id: transfer_id });
   return res.json({ ok: true, transfer: t });
 });
@@
 router.post("/api/owner-transfer/execute", async (req, res) => {
   const token = (req.headers["authorization"]||"").replace(/^Bearer\s+/i,"");
   if (token !== process.env.ADMIN_SYNC_TOKEN) return res.status(401).send("Unauthorized");
   const { transfer_id } = req.body || {};
   const t = await executeTransfer(transfer_id);
+  await emitBus("owner_transfer.executed", { id: transfer_id });
   return res.json({ ok: true, transfer: t });
 });
@@
 // list by owner (recent)
 router.get("/api/owner-transfers", async (req, res) => {
   const ownerId = Number(req.query.ownerId || 0);
   let q = sbAdmin.from("owner_transfers").select("*").order("created_at", { ascending:false }).limit(50);
   if (ownerId) q = q.or(`old_owner_id.eq.${ownerId},new_owner_id.eq.${ownerId}`);
   const { data, error } = await q;
   if (error) return res.status(500).send(error.message);
   return res.json({ ok:true, items: data||[] });
 });
+
+// ---- BULK actions (RBAC: admin for authorize/execute; accounting or admin for approve)
+router.post("/api/owner-transfers/bulk-approve", async (req, res) => {
+  const ids: number[] = req.body?.ids || [];
+  for (const id of ids) { await approveAccounting(id); await emitBus("owner_transfer.accounting_approved", { id }); }
+  return res.json({ ok:true, count: ids.length });
+});
+router.post("/api/owner-transfers/bulk-authorize", async (req, res) => {
+  const token = (req.headers["authorization"]||"").replace(/^Bearer\s+/i,"");
+  if (token !== process.env.ADMIN_SYNC_TOKEN) return res.status(401).send("Unauthorized");
+  const ids: number[] = req.body?.ids || [];
+  for (const id of ids) { await authorizeTransfer(id); await emitBus("owner_transfer.authorized", { id }); }
+  return res.json({ ok:true, count: ids.length });
+});
+router.post("/api/owner-transfers/bulk-execute", async (req, res) => {
+  const token = (req.headers["authorization"]||"").replace(/^Bearer\s+/i,"");
+  if (token !== process.env.ADMIN_SYNC_TOKEN) return res.status(401).send("Unauthorized");
+  const ids: number[] = req.body?.ids || [];
+  for (const id of ids) { await executeTransfer(id); await emitBus("owner_transfer.executed", { id }); }
+  return res.json({ ok:true, count: ids.length });
+});
+
+// ---- Portfolio Snapshot (before/after portfolio holdings)
+router.get("/api/owner-transfer/:id/snapshot.json", async (req, res) => {
+  const id = Number(req.params.id);
+  const { data: t } = await sbAdmin.from("owner_transfers").select("*").eq("id", id).maybeSingle();
+  if (!t) return res.status(404).send("Not found");
+  // Before = properties owned by old_owner_id (subset current or from snapshots), After = new_owner_id
+  const { data: propsBefore } = await sbAdmin.from("properties").select("id,owner_id,line1,city,state,postal_code").in("id", t.property_ids || []);
+  const after = (propsBefore||[]).map(p => ({ property_id: p.id, to_owner: t.new_owner_id }));
+  return res.json({ ok:true, transfer_id:id, before: propsBefore||[], after, meta: { effective_date: t.effective_date }});
+});
+router.get("/api/owner-transfer/:id/snapshot.csv", async (req, res) => {
+  const id = Number(req.params.id);
+  const { data: t } = await sbAdmin.from("owner_transfers").select("*").eq("id", id).maybeSingle();
+  if (!t) return res.status(404).send("Not found");
+  const { data: propsBefore } = await sbAdmin.from("properties").select("id,owner_id,line1,city,state,postal_code").in("id", t.property_ids || []);
+  const head = "transfer_id,effective_date,phase,property_id,owner_id,line1,city,state,postal_code";
+  const rowsB = (propsBefore||[]).map(p => [id,t.effective_date,"before",p.id,p.owner_id,(p as any).line1,(p as any).city,(p as any).state,(p as any).postal_code].map(v=>`"${v??""}"`).join(","));
+  const rowsA = (propsBefore||[]).map(p => [id,t.effective_date,"after", p.id,t.new_owner_id,(p as any).line1,(p as any).city,(p as any).state,(p as any).postal_code].map(v=>`"${v??""}"`).join(","));
+  const csv = [head, ...rowsB, ...rowsA].join("\n");
+  res.setHeader("Content-Type","text/csv");
+  res.setHeader("Content-Disposition",`attachment; filename=owner_transfer_${id}_snapshot.csv`);
+  return res.send(csv);
+});
*** End Patch
PATCH

############################################
# 3) FRONTEND — Slack-style timeline chips in AuditFeed
############################################
applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/features/owners/pages/OwnerTransferDetailPage.tsx
@@
-  return (
+  const iconFor = (ev:string)=> {
+    // lucide-react icon class names (assumes your icon system; fallback to emoji)
+    if (/initiated/i.test(ev)) return "📝";
+    if (/approved/i.test(ev))  return "✅";
+    if (/authorized/i.test(ev))return "🔐";
+    if (/executed/i.test(ev))  return "⚙️";
+    if (/GEOCODE/i.test(ev))   return "📍";
+    return "•";
+  };
+  return (
     <div className="mt-3 border border-neutral-800 rounded p-3">
       <div className="text-sm font-medium mb-2">Recent Activity</div>
       {items.length===0 ? <div className="text-xs text-neutral-500">No events</div> : (
-        <ul className="text-xs space-y-1">
-          {items.map((e,i)=>(
-            <li key={i} className="flex items-center gap-2">
-              <span className="text-neutral-500">{new Date(e.created_at).toLocaleString()}</span>
-              <span className="px-1.5 py-0.5 rounded border border-neutral-700 bg-neutral-800 text-neutral-200">{e.event_type}</span>
-              <span className="text-neutral-300">{e.label}</span>
-            </li>
-          ))}
-        </ul>
+        <div className="space-y-2">
+          {items.map((e,i)=>(
+            <div key={i} className="flex items-start gap-2">
+              <div className="mt-0.5">{iconFor(e.event_type)}</div>
+              <div className="flex-1">
+                <div className="text-xs text-neutral-400">{new Date(e.created_at).toLocaleString()}</div>
+                <div className="text-sm">
+                  <span className="px-1.5 py-0.5 mr-2 rounded border border-neutral-700 bg-neutral-800 text-neutral-200">{e.event_type}</span>
+                  <span className="text-neutral-200">{e.label}</span>
+                </div>
+              </div>
+            </div>
+          ))}
+        </div>
       )}
     </div>
   )
 }
*** End Patch
PATCH

############################################
# 4) FRONTEND — Bulk actions (list view with RBAC)
############################################
applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/features/owners/pages/OwnerTransfersListPage.tsx
@@
-import React, { useEffect, useState } from "react";
+import React, { useEffect, useState } from "react";
 import { useLocation, Link } from "wouter";
@@
   const [items,setItems]=useState<T[]|null>(null);
+  const [sel,setSel]=useState<number[]>([]);
+  const adminToken = typeof window!=="undefined" ? localStorage.getItem("ADMIN_SYNC_TOKEN") : null;
+  const headers = adminToken ? { "Content-Type":"application/json", "Authorization":`Bearer ${adminToken}` } : { "Content-Type":"application/json" };
+
+  async function bulk(path:string){
+    const r = await fetch(path, { method:"POST", headers, body: JSON.stringify({ ids: sel }) });
+    if (!r.ok) { alert(await r.text()); return; }
+    // reload
+    const j = await fetch(`/api/owner-transfers?ownerId=${ownerId}`).then(x=>x.json());
+    setItems(j.items||[]); setSel([]);
+  }
@@
-          {!items ? <div>Loading…</div> : items.length===0 ? <div className="text-neutral-400">No transfers</div> : (
+          {!items ? <div>Loading…</div> : items.length===0 ? <div className="text-neutral-400">No transfers</div> : (
             <table className="w-full text-sm">
               <thead><tr className="text-neutral-400">
-                <th className="text-left py-2">ID</th><th className="text-left">Status</th><th className="text-left">Effective</th><th className="text-left">Props</th><th></th>
+                <th className="text-left py-2"><input type="checkbox" onChange={e=>setSel(e.target.checked ? (items?.map(x=>x.id)||[]) : [])} /></th>
+                <th className="text-left py-2">ID</th><th className="text-left">Status</th><th className="text-left">Effective</th><th className="text-left">Props</th><th></th>
               </tr></thead>
               <tbody>
                 {items.map(t=>(
                   <tr key={t.id} className="border-t border-neutral-800">
-                    <td className="py-2">{t.id}</td>
+                    <td className="py-2"><input type="checkbox" checked={sel.includes(t.id)} onChange={e=>setSel(p=> e.target.checked ? [...new Set([...p,t.id])] : p.filter(x=>x!==t.id))} /></td>
+                    <td className="py-2">{t.id}</td>
                     <td>{t.status}</td>
                     <td>{t.effective_date}</td>
                     <td>{t.property_ids?.length||0}</td>
                     <td className="text-right">
                       <Link href={`/owners/transfer/detail?id=${t.id}`}><a className="btn btn-primary btn-sm">Open</a></Link>
                     </td>
                   </tr>
                 ))}
               </tbody>
             </table>
           )}
+          {items && items.length>0 && (
+            <div className="mt-3 flex flex-wrap gap-2">
+              <button disabled={!sel.length} className="btn btn-secondary btn-sm" onClick={()=>bulk("/api/owner-transfers/bulk-approve")}>Bulk Approve</button>
+              <button disabled={!sel.length} className="btn btn-warning btn-sm" onClick={()=>bulk("/api/owner-transfers/bulk-authorize")}>Bulk Authorize</button>
+              <button disabled={!sel.length} className="btn btn-primary btn-sm" onClick={()=>bulk("/api/owner-transfers/bulk-execute")}>Bulk Execute</button>
+              <div className="text-xs text-neutral-500 ml-auto">Admin token required for Authorize/Execute (stored in localStorage).</div>
+            </div>
+          )}
*** End Patch
PATCH

############################################
# 5) FRONTEND — Snapshot exports on Detail page
############################################
applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/features/owners/pages/OwnerTransferDetailPage.tsx
@@
               <div className="pt-3 flex flex-wrap gap-2">
                 <button disabled={busy} onClick={async()=>{ await doPost("/api/owner-transfer/approve-accounting"); push({kind:"success",message:"Accounting approved"}); }} className="btn btn-secondary">Approve Accounting</button>
                 <button disabled={busy} onClick={()=>{ setConfirmKind("authorize"); setConfirmText(""); }} className="btn btn-warning">Authorize</button>
                 <button disabled={busy} onClick={()=>{ setConfirmKind("execute"); setConfirmText(""); }} className="btn btn-primary">Execute Now</button>
                 <button disabled={busy} onClick={runPreflight} className="btn">Run Preflight</button>
                 <button disabled={busy} onClick={runDryRun} className="btn">Dry-Run</button>
                 <a className="btn" href={`/api/owner-transfer/${id}/accounting.csv`} target="_blank" rel="noreferrer">Download Accounting CSV</a>
+                <a className="btn" href={`/api/owner-transfer/${id}/snapshot.json`} target="_blank" rel="noreferrer">Snapshot JSON</a>
+                <a className="btn" href={`/api/owner-transfer/${id}/snapshot.csv`} target="_blank" rel="noreferrer">Snapshot CSV</a>
                 <a className="btn" href={`/api/owner-transfer/${id}/report.html`} target="_blank" rel="noreferrer">Print Report</a>
               </div>
*** End Patch
PATCH

git add -A
git commit -m "feat: timeline chips, internal webhooks, bulk transfer actions with RBAC, portfolio snapshot exports"


Why this is “no-drift”: All UI changes sit inside the card pages and features where they belong (no dashboard tables, right-rail remains read-only, tabs persist), matching the Portfolio Card Standard routes, layout, tabs, and RBAC expectations . Imports use our @/ aliases and feature-first structure per our alias SSOT and repo blueprint , and this follows our contribution and CI rules (branching, conventional commits, quality gates) .