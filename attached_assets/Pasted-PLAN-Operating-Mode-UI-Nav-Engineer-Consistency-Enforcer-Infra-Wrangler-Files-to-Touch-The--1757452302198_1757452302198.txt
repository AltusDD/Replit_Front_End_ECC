PLAN
Operating Mode: UI-Nav Engineer, Consistency Enforcer, Infra Wrangler
Files to Touch:
- The entire `src/features/portfolio/` feature directory.
- All card pages currently in `src/pages/card/`.
- The styling system files in `src/styles/`.
Guardrails:
- **The Asset Card Architecture Audit is now the non-negotiable Single Source of Truth (SSOT).** All code must be refactored to match its specifications precisely.
- The 3-Layer CSS system (`tokens.css`, `genesis.css`, `theme.css`) must be implemented as described. Ad-hoc styling must be removed.
- All components must be refactored to match the exact prop interfaces (`HeroBlockProps`, `AssetCardShellProps`, etc.) defined in the audit.
- All data hooks must be refactored to fetch and return data in the shapes specified.

CHANGESET
- **1. Implement the 3-Layer Styling System:**
  - Create `src/styles/tokens.css` and `src/styles/genesis.css` with the exact content from the audit.
  - Refactor all existing asset card components to remove inline style objects and replace them with the appropriate class names (e.g., `.genesis-shell`, `.genesis-hero`) and CSS variables (e.g., `var(--bg-primary)`).

- **2. Refactor Core Components to Match the Blueprint:**
  - Systematically go through each core component listed in the audit (`AssetCardShell.tsx`, `HeroBlock.tsx`, `FieldGroups.tsx`, `LedgerTable.tsx`, `Charts.tsx`, `ActivityTimeline.tsx`, `RightRail.tsx`, `MiniCards.tsx`).
  - Update the props (TypeScript interfaces) of each component to **exactly match** the definition in the audit.
  - Rebuild the internal logic of each component to correctly render its content based on these new, standardized props.

- **3. Implement Live KPI Calculations & Data Provenance:**
  - In the data hooks (`usePropertyData`, etc.), implement the client-side KPI calculation logic as specified (Occupancy, Avg Rent).
  - The hooks must return data in a structure that allows for provenance tracking.
  - The `FieldGroups.tsx` component must be updated to display the `provenance` tag (e.g., "CoreLogic") next to the relevant fields.

- **4. Implement the Integration Gating System:**
  - Create a global hook or context (`useIntegrationStatus`) that fetches the configuration from the `/api/config/integrations` endpoint.
  - Refactor the `HeroBlock.tsx` component. The `actions` prop it receives must now be used to dynamically enable or disable buttons based on the integration status.
  - Disabled buttons must show a tooltip explaining the reason (e.g., "DoorLoop required").
  - The `UnifiedFilesExplorer.tsx` component must also use this hook to conditionally enable the DoorLoop and Dropbox tabs.

- **5. Finalize the Card Pages:**
  - Move the card pages to the correct directory structure (`src/pages/card/`) if they are not already there.
  - Rebuild each of the five card pages to be a clean composition of the newly refactored components. Each page should:
    1. Call its specific data hook (e.g., `usePropertyData(id)`).
    2. Handle loading and error states.
    3. Pass the fetched and calculated data into the `<AssetCardShell />`, which in turn will contain the `<HeroBlock />`, `<RightRail />`, etc.

VERIFICATION CHECKLIST
- **Styling:** The application is styled using the 3-Layer CSS system. There are no remnant ad-hoc inline styles on the asset cards.
- **Component Props:** All core components (`AssetCardShell`, `HeroBlock`, etc.) have been refactored to use the exact prop interfaces defined in the audit blueprint.
- **Live KPIs:** The KPI values in the Hero Block are calculated live from the data hooks and are no longer placeholders.
- **Integration Gating:** Action buttons (e.g., "Record Payment," "Send Notice") are correctly disabled with an explanatory tooltip if their required integration (DoorLoop, M365) is not active, based on the status from `/api/config/integrations`.
- **Data Provenance:** Fields enriched by external sources (e.g., a market value from CoreLogic) display a "CoreLogic" tag next to them.
- **File Structure:** All files for the asset card feature are organized in the directories specified in the audit.
- **Error Handling:** Loading spinners, error messages, and empty states are handled gracefully in all relevant components as described in the blueprint.
- **Full Functionality:** The final rendered pages look and function exactly as described in the audit, with a 3-column layout, 7 tabs, interactive components, and live, relational data.