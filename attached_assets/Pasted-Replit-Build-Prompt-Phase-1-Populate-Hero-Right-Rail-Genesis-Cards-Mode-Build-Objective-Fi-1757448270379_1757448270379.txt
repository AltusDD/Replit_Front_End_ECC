Replit Build Prompt — Phase 1: Populate Hero & Right Rail (Genesis Cards)

Mode: Build
Objective: Fill the new 3-column shells with data-dense Hero and Right Rail components for Property / Unit / Lease / Tenant / Owner. Respect Genesis tokens, integration-gating, and relationship hooks.

Guardrails (do not deviate)

Keep existing routes working:
/card/property/:id, /card/unit/:id, /card/lease/:id, /card/tenant/:id, /card/owner/:id.

Use our dark theme tokens only. No ad-hoc colors or spacing.

Read integration flags from /api/config/integrations (m365, doorloop, dropbox, corelogic).
Use them to show/disable actions and render badges.

All content must be driven by data hooks (no inline fetches in components).

Right rail widgets must have min-heights + skeletons to prevent layout shift.

Keep the UI Inspector ?debug=1 badge working; no overlays unless debug=1.

Files to create/update
Components (create if missing)

src/features/portfolio/components/HeroBlock.tsx

src/features/portfolio/components/RightRail.tsx

src/features/portfolio/components/Kpi.tsx (small, reusable)

src/features/portfolio/components/Widget.tsx (RightRail sections)

src/features/portfolio/components/BadgePills.tsx (DL/CL/M365/DB)

src/styles/tokens.css (use existing if present; otherwise create and import once in src/main.tsx)

Hooks (enhance to expose KPI + rail data)

src/features/portfolio/hooks/usePropertyData.ts

src/features/portfolio/hooks/useUnitData.ts

src/features/portfolio/hooks/useLeaseData.ts

src/features/portfolio/hooks/useTenantData.ts

src/features/portfolio/hooks/useOwnerData.ts

Pages (wire props into Hero + RightRail)

PropertyCardPage.tsx

UnitCardPage.tsx

LeaseCardPage.tsx

TenantCardPage.tsx

OwnerCardPage.tsx

If your repo uses different filenames, adapt, but keep these roles intact.

Implementation details
1) Kpi.tsx

A tiny display component.

type KpiProps = {
  label: string;
  value?: string | number | null;
  trend?: "up" | "down" | null;
  hint?: string; // provenance or last sync
  loading?: boolean;
};
export function Kpi({label, value, trend, hint, loading}: KpiProps) {
  // use tokens: var(--surface-2), var(--text-1), var(--muted), etc.
  // when loading show skeleton bar with fixed height
}

2) BadgePills.tsx

Low-contrast source badges.

type BadgePillsProps = { doorloop?: boolean; corelogic?: boolean; m365?: boolean; dropbox?: boolean };
export function BadgePills(flags: BadgePillsProps) {
  // render subtle pill chips: DL / CL / M365 / DB
}

3) HeroBlock.tsx (populate!)

Layout: Title + badges (left), primary actions (right), then a dense 4-up KPI grid.

type Action = { label: string; onClick?: () => void; href?: string; disabled?: boolean; reasonIfDisabled?: string; variant?: "primary"|"ghost" };
type HeroProps = {
  title: string;
  subtitle?: string;
  badges: { doorloop?: boolean; corelogic?: boolean; m365?: boolean; dropbox?: boolean };
  kpis: Array<{ label: string; value?: string|number|null; trend?: "up"|"down"|null; hint?: string; loading?: boolean }>;
  actions: Action[];
};
export function HeroBlock({ title, subtitle, badges, kpis, actions }: HeroProps) {
  // title + subtitle
  // <BadgePills ... />
  // right-aligned actions (disabled with tooltip if gated)
  // KPI grid: 4 columns on desktop, wrap on smaller
}

4) Widget.tsx (Right Rail section)
type WidgetProps = { title: string; minHeight?: number; rightAdornment?: React.ReactNode; children?: React.ReactNode; loading?: boolean };
export function Widget({ title, minHeight = 160, rightAdornment, loading, children }: WidgetProps) {
  // header row, body with minHeight, skeleton if loading
}

5) RightRail.tsx
type RightRailProps = { children: React.ReactNode };
export function RightRail({ children }: RightRailProps) {
  // vertical stack with spacing; fixed column width handled by shell
}

KPI + Right-Rail mappings (Phase 1 content)

All values should come from the enhanced hooks. If a field is unavailable, show "—" with a muted hint like (DoorLoop) or (Derived).

Property Card

Hero KPIs

Occupancy (derived: occupied units / total units, %)

Delinquency (derived or from ledger; $)

Avg Rent (avg of current leases’ rent, $)

Open WOs (if not available, show 0 with hint —)

Hero Actions (gated by integrations.m365)

Record Payment (disabled if DL write not supported; reason: “read-only sync”)

Add WO (placeholder; disabled if no work-order backend)

Send Notice (disabled if !m365; reason: “M365 not configured”)

Export PDF (always enabled; placeholder handler)

Right Rail Widgets

Risk Score (CoreLogic) (score + 2–3 factors) (loading skeleton OK if CL off)

Key Dates (Next inspection, Insurance expiry)

Pinned Files (names + source icon; from DoorLoop/Dropbox when present)

Hook (usePropertyData) must return:

{
  property, owner,
  units, leases, // arrays for KPI derivation
  integrations,  // from /api/config/integrations
  risk?: { score?: number; factors?: string[] },
  keyDates?: { nextInspection?: string; insuranceExpiry?: string },
  pinnedFiles?: Array<{ id: string; name: string; source: "dl"|"db"; url?: string }>
}

Unit Card

Hero KPIs

Status (Vacant/Occupied)

Market Rent

Current Rent (from active lease)

Days Vacant (if vacant)

Actions

New Lease, Add WO, Schedule Tour (gate like above)

Right Rail

Parent Property summary (address, link)

Quick Stats (beds/baths/sf if known)

Pinned Files (photos/docs)

Lease Card

Hero KPIs

Status (Active/Ended)

Rent Amount

Balance Due

Days to Expiry

Actions

Record Payment, Add Charge, Send Renewal, Terminate Lease (gate appropriately)

Right Rail

Tenant Quick View (name, contact chips)

Payment History (last 5) (amount/date)

Pinned Files (lease PDF, addenda)

Tenant Card

Hero KPIs

Total Balance Due

Active Leases

On-time % (if unknown, show —)

Portal Status (if DoorLoop exposes)

Actions

Record Payment, Send Message, Add Note (gate by m365)

Right Rail

Contact Info

Next Payment Due (if known)

Pinned Files (ID, docs)

Owner Card

Hero KPIs

Properties Owned

Total Units

Portfolio Occupancy

Net Distribution (Est.)

Actions

Transfer Ownership → /owners/transfer?ownerId=:id (ensure wired)

Generate Statement, Send Message (gate by m365)

Right Rail

Contact Info

Portfolio Highlights (top 3 properties)

Pinned Files (Mgmt Agreement, W-9)

Hook enhancements (what to fetch/derive)

Use current endpoints; don’t over-engineer. Return computed fields so pages only render.

Common: GET /api/config/integrations → { m365, doorloop, dropbox, corelogic }.

usePropertyData(id)

GET /api/entities/properties/:id

GET /api/portfolio/units?property_id=:id

GET /api/portfolio/leases?property_id=:id

Derive occupancy = occupiedUnits/totalUnits, avgRent, delinquency.

Optionally hydrate risk, keyDates, pinnedFiles (leave empty arrays when unknown).

useUnitData(id)

GET /api/entities/units/:id

GET /api/entities/properties/:propertyId

GET /api/entities/leases/:leaseId (if active)

Derive status, daysVacant.

useLeaseData(id)

GET /api/entities/leases/:id

GET /api/entities/properties/:propertyId

GET /api/portfolio/tenants?lease_id=:id

Derive balance, daysToExpiry.

useTenantData(id)

GET /api/entities/tenants/:id

GET /api/portfolio/leases?tenant_id=:id

Derive totalBalance, activeCount, onTimePct?.

useOwnerData(id)

GET /api/entities/owners/:id

GET /api/portfolio/properties?owner_id=:id

Optionally counts for units/leases by owner (or derive from properties if present).

Derive portfolioOccupancy, netDistribution?.

All hooks return {loading, error} plus the shaped data above.

Wire pages

For each card page:

const { data, loading } = useXxxData(id)

Render <HeroBlock> with:

title: friendly title (address, “Unit #”, lease date range, person name, owner name)

badges: from integrations

kpis: 4 items mapped as above (loading true until computed)

actions: role/integration-gated; disabled + reasonIfDisabled when not allowed

Render <RightRail> with 2–3 <Widget>s populated from the hook.
If unknown/unavailable, show empty state but keep min-height.

Visual polish (tokens)

Backgrounds: var(--surface-1) page, var(--surface-2) cards.

Borders: 1px solid var(--border-muted); radii var(--radius-xl).

Text: var(--text-1) primary, var(--text-2) secondary.

Spacing: grid gap var(--space-4), rail widgets var(--space-3) between.

Actions: primary uses brand token (gold) already defined; otherwise ghost.

Acceptance checklist (please run and attach screenshots)

URLs to test

/card/property/42

/card/unit/45

/card/lease/1

/card/tenant/1

/card/owner/1

Hero (all five)

Shows Title + Badges + 4 KPIs + Actions.

If m365=false, Teams/Email actions are visible but disabled with tooltip.

KPI values render or show a skeleton while loading. No layout shift.

Right Rail (all five)

Renders 3 widgets with min-heights (no jumping).

Property shows Risk Score / Key Dates / Pinned Files (empty states OK).

Lease shows Tenant Quick View / Payment History / Pinned Files.

Owner shows Contact / Portfolio Highlights / Pinned Files.

Theme

Cards look unified, dense, and on-brand (no “page underneath” look).

No stray “DL” text. Provenance appears in hints/tooltips or subtle suffixes.

Inspector

?debug=1 shows only a small badge—not a large overlay.

Deliverables

Code diffs for the 6 components + 5 hooks + 5 pages updated.

Screenshot set (5 pages, Hero + Right Rail visible).

JSON from /api/config/integrations you used to gate badges/actions.

Notes

If a given KPI can’t be derived yet, return null with hint:"—" and show it as —.

Do not change server routes. This is a UI population pass only.

Keep Phase 2 slots ready (“Linked”, “Files”, “Activity” rich content will be added next).

End of prompt.
Run this exactly, then post the screenshots + brief notes on any KPI you had to placeholder so we can decide whether to derive client-side or expose via API in Phase 2.