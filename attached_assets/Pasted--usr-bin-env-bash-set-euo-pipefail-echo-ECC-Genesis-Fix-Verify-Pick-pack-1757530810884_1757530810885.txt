#!/usr/bin/env bash
set -euo pipefail

echo "=== ECC Genesis Fix & Verify ==="

# --- Pick package manager ---
if   [ -f pnpm-lock.yaml ]; then PM=pnpm
elif [ -f yarn.lock ];      then PM=yarn
else                              PM=npm
fi
echo "Using $PM"

# --- Ensure deps: @tanstack/react-query + devtools ---
if ! jq -e '.dependencies["@tanstack/react-query"]' package.json >/dev/null 2>&1; then
  echo "Installing @tanstack/react-query..."
  $PM add @tanstack/react-query
fi
if ! jq -e '.dependencies["@tanstack/react-query-devtools"]' package.json >/dev/null 2>&1 \
   && ! jq -e '.devDependencies["@tanstack/react-query-devtools"]' package.json >/dev/null 2>&1; then
  echo "Installing @tanstack/react-query-devtools..."
  $PM add -D @tanstack/react-query-devtools || $PM add @tanstack/react-query-devtools
fi

# --- Create queryClient if missing ---
mkdir -p src/lib
if [ ! -f src/lib/queryClient.ts ]; then
  cat > src/lib/queryClient.ts <<'TS'
import { QueryClient } from "@tanstack/react-query";

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: 2,
      refetchOnWindowFocus: false,
      staleTime: 30_000,
    },
    mutations: { retry: 0 },
  },
});
TS
  echo "Wrote src/lib/queryClient.ts"
fi

# --- Patch main.tsx to wrap <App /> if needed (non-destructive) ---
if rg -n "ReactDOM|createRoot" src/main.tsx >/dev/null 2>&1; then
  if ! rg -n "QueryClientProvider" src/main.tsx >/dev/null 2>&1; then
    # ensure imports
    awk '
      BEGIN{ inserted_qcp=0; inserted_qc=0 }
      /^import .*ReactDOM/ { print; next }
      /^import / {
        print;
        if (inserted_qcp==0) { print "import { QueryClientProvider } from \"@tanstack/react-query\";"; inserted_qcp=1 }
        next
      }
      { print }
    ' src/main.tsx > /tmp/main.1.tsx

    # ensure queryClient import
    if ! rg -n "from \"@/lib/queryClient\"" /tmp/main.1.tsx >/dev/null 2>&1; then
      awk '
        BEGIN { done=0 }
        /^import .*QueryClientProvider/ && done==0 { print; print "import { queryClient } from \"@/lib/queryClient\";"; done=1; next }
        { print }
      ' /tmp/main.1.tsx > /tmp/main.2.tsx
    else
      cp /tmp/main.1.tsx /tmp/main.2.tsx
    fi

    # wrap <App />
    perl -0777 -pe 's#(<App\s*/>)#<QueryClientProvider client={queryClient}>\n    \1\n  </QueryClientProvider>#' -i /tmp/main.2.tsx
    cp /tmp/main.2.tsx src/main.tsx
    echo "Patched src/main.tsx to mount QueryClientProvider"
  fi
fi

# --- Create hooks/use-toast (Genesis stub) ---
mkdir -p src/hooks
if [ ! -f src/hooks/use-toast.ts ]; then
  cat > src/hooks/use-toast.ts <<'TS'
import { useState, useCallback } from "react";

export interface Toast {
  id: number;
  title: string;
  message?: string;
  type?: "info" | "success" | "error" | "warning";
}

let counter = 0;

export function useToast() {
  const [toasts, setToasts] = useState<Toast[]>([]);

  const removeToast = useCallback((id: number) => {
    setToasts((prev) => prev.filter((t) => t.id !== id));
  }, []);

  const addToast = useCallback((toast: Omit<Toast, "id">) => {
    const id = ++counter;
    setToasts((prev) => [...prev, { id, ...toast }]);
    setTimeout(() => removeToast(id), 5000);
    return id;
  }, [removeToast]);

  return { toasts, addToast, removeToast };
}
TS
  echo "Wrote src/hooks/use-toast.ts"
fi

# --- Optional: UI Toast container so messages are visible ---
mkdir -p src/components/ui
if [ ! -f src/components/ui/ToastContainer.tsx ]; then
  cat > src/components/ui/ToastContainer.tsx <<'TSX'
import React from "react";
import type { Toast } from "@/hooks/use-toast";

export function ToastContainer({ toasts }: { toasts: Toast[] }) {
  return (
    <div className="fixed bottom-4 right-4 z-50 flex flex-col gap-2">
      {toasts.map((t) => (
        <div key={t.id}
             className={`rounded-lg px-4 py-2 shadow-lg text-white ${
               t.type === "error" ? "bg-red-600"
               : t.type === "success" ? "bg-green-600"
               : t.type === "warning" ? "bg-yellow-600"
               : "bg-gray-800"
             }`}>
          <div className="font-semibold">{t.title}</div>
          {t.message && <div className="text-sm opacity-90">{t.message}</div>}
        </div>
      ))}
    </div>
  );
}
TSX
  echo "Wrote src/components/ui/ToastContainer.tsx"
fi

# --- Quick Verify: report on known problem imports ---
echo "=== Verify imports existence ==="
for f in \
  "src/lib/queryClient.ts:@/lib/queryClient" \
  "src/hooks/use-toast.ts:@/hooks/use-toast" \
  "src/components/ui/ToastContainer.tsx:@/components/ui/ToastContainer"
do
  FILE="${f%%:*}"
  ALIAS="${f##*:}"
  if [ -f "$FILE" ]; then
    echo "✅ Exists: $FILE (satisfies $ALIAS)"
  else
    echo "❌ Missing: $FILE (needed for $ALIAS)"
  fi
done

# --- Build to catch lingering import errors without starting dev server ---
echo "=== Type check / build (best effort) ==="
$PM run build >/dev/null 2>&1 || echo "⚠️ Build reported issues (check console)."

echo "=== Done. If the preview pane was running, click Stop → Run to reload. ==="
