Fix Black Screen Now: Safe Render + Visible Error Panel

You are in PATCH MODE. Apply exactly. Show diffs and run the 3 verification commands at the end.

A) Upgrade ErrorBoundary to a big, visible panel + details toggle

Edit: src/components/EccErrorBoundary.tsx — replace with:

import React from "react";

export class EccErrorBoundary extends React.Component<
  { children: React.ReactNode },
  { hasError: boolean; error?: any; info?: any; showDetails: boolean }
> {
  constructor(props:any){
    super(props);
    this.state = { hasError:false, showDetails:false };
  }
  static getDerivedStateFromError(error:any){ return { hasError:true, error }; }
  componentDidCatch(error:any, info:any){
    console.error("ECC Boundary:", error, info);
    (window as any).__ECC_LAST_ERROR__ = { error, info };
    this.setState({ info });
  }
  render(){
    if(!this.state.hasError) return this.props.children as any;
    const msg = this.state.error?.message ?? String(this.state.error ?? "Unknown error");
    const stack = this.state.error?.stack ?? "";
    const compStack = this.state.info?.componentStack ?? "";

    return (
      <div style={{ padding: 24 }}>
        <section className="ecc-object" style={{ padding: 16, maxWidth: 960, margin: "0 auto" }}>
          <div className="ecc-header">
            <div className="ecc-title">Something went wrong</div>
            <div className="ecc-actions" style={{ display:"flex", gap:8 }}>
              <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={()=>location.reload()}>Reload</button>
              <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={()=>this.setState(s=>({showDetails:!s.showDetails}))}>
                {this.state.showDetails ? "Hide details" : "Show details"}
              </button>
            </div>
          </div>
          <div style={{ marginBottom: 8, fontWeight: 700 }}>{msg}</div>
          {this.state.showDetails && (
            <pre className="ecc-object" style={{ padding:12, overflow:"auto", whiteSpace:"pre-wrap" }}>
{stack || "(no stack)"}{"\n"}{"\n"}Component Stack:{"\n"}{compStack || "(no component stack)"}
            </pre>
          )}
        </section>
      </div>
    );
  }
}

B) Harden Property card render (no throws, always renders boxes)

Edit: src/pages/card/property/index.tsx

At the top of the component, right after your data hook (e.g., const rel = usePropertyData(id)), add safe defaults so nothing is ever undefined:

// SAFE DEFAULTS — never let render crash if data is missing
const property = rel.data?.property ?? null;
const units = rel.data?.units ?? [];
const leases = rel.data?.leases ?? [];
const tenants = rel.data?.tenants ?? [];
const owner = rel.data?.owner ?? null;


Replace any direct access like rel.data.property.street_1 etc. with the safe variables above:

Use property?.street_1 ?? "—" etc.

Wherever we built Financials/Legal earlier, ensure we reference leases and tenants from these safe variables (not from rel.data?.… inline).

Guard the map inputs (keep map on Property only):

const lat = Number.isFinite((property as any)?.lat) ? (property as any).lat as number : null;
const lng = Number.isFinite((property as any)?.lng) ? (property as any).lng as number : null;
const address = [property?.street_1, property?.city, property?.state, property?.zip].filter(Boolean).join(", ") || undefined;


…and pass lat, lng, address to <GeoMap />.

Make the page never return null. Ensure the top-level return is always a layout of .ecc-object sections. If there’s no property, render a visible “Property not found” panel instead of bailing:

if (!rel.isLoading && !property) {
  return (
    <div style={{ padding: 24 }}>
      <section className="ecc-object">
        <div className="ecc-header">
          <div className="ecc-title">Property not found</div>
        </div>
        <div style={{ opacity:.8 }}>No data returned for this ID.</div>
      </section>
    </div>
  );
}


Make all sections tolerate empty arrays (units, leases, tenants) and show a friendly “—” or “No items” inline state, not optional chaining chains that could throw.

C) Add a tiny DEV diagnostics bar (visible only in dev) to echo the last error

Create: src/components/DevDiagBar.tsx

import React, { useEffect, useState } from "react";

export default function DevDiagBar() {
  const [err,setErr] = useState<any>(null);
  useEffect(()=>{
    const t = setInterval(()=>{
      const e = (window as any).__ECC_LAST_ERROR__;
      if (e !== err) setErr(e);
    }, 500);
    return ()=>clearInterval(t);
  }, [err]);
  if (!import.meta.env.DEV || !err) return null;
  return (
    <div style={{ position:"fixed", top:6, left:6, zIndex: 1, fontSize:12, padding:"6px 8px",
      background:"rgba(0,0,0,.7)", border:"1px solid rgba(255,255,255,.2)", borderRadius:8 }}>
      <div style={{ fontWeight:700 }}>DEV ERROR</div>
      <div style={{ maxWidth: 560, whiteSpace:"nowrap", overflow:"hidden", textOverflow:"ellipsis" }}>
        {String(err?.error?.message ?? err?.error ?? "(unknown)")}
      </div>
    </div>
  );
}


Edit: src/main.tsx — render it just inside the boundary, dev-only:

import DevDiagBar from "./components/DevDiagBar";
// ...
<EccErrorBoundary>
  {import.meta.env.DEV && <DevDiagBar />}
  <App />
</EccErrorBoundary>

D) Re-run guardrails + cards typecheck; paste outputs
node scripts/guardrail-mega.mjs
node scripts/guardrail-overlays.mjs
npx tsc -p tsconfig.cards.json


Expected: all ✅.

Then open a real Property ID that was showing the black screen and confirm:

You see either the full card UI or the big error panel with a readable message and a “Show details” toggle.

No blank or nearly-blank page; no tiny banner only.

Paste:

the three command outputs

the first line of the error message shown in the big panel (if any)

or “renders fine” if fixed.

Why this fixes it

The error was happening during render; the upgraded boundary guarantees a large, visible card with details and a reload, not a thin banner.

The Property card now cannot throw on missing relations: everything is defaulted ([] / null), and sections show friendly empty states.

The small DEV bar mirrors the last error so we can catch any future regressions instantly while we build.

Once this is green, we’ll connect the BFF read-only endpoints for Financials/Legal so those tabs populate without guessing any paths.