Prompt for Generative AI (Replit's Build Mode or ChatGPT)
ROLE: You are a Lead Product Architect and Senior Full-Stack Engineer for Altus, tasked with designing and building the definitive "Genesis Grade" Dashboard for the Empire Command Center. This is not just a data display; it is an intelligent, actionable command center tailored specifically for the high-velocity world of Single Family Residence (SFR) management.

CONTEXT: The user is a sophisticated property manager who lives and dies by three core metrics: Occupancy, Collections, and Maintenance. They need to see the health of their entire portfolio in seconds and be immediately guided to the properties and tasks that are on fire. The backend API is now live and provides real-time, normalized data—no mock data is permitted. The tech stack is Vite, React, TypeScript, and wouter. The design language is "Genesis Empire": Altus Black (#0b0e12), Altus Gold (#d6b36a), and 'Inter' font.

THE "GENESIS GRADE" STANDARD (NON-NEGOTIABLE):

Actionable Intelligence: Every component must answer a business question and provide a clear "next step." No dead-end metrics.

Data Density & Clarity: Information must be dense but not cluttered. Use data visualization (charts, maps, indicators) to communicate complex information instantly.

Sophisticated Aesthetics: The UI must feel custom-built, professional, and powerful. Leverage shadows, subtle gradients, and smooth transitions.

Real-Time Feel: The dashboard should feel alive. Use skeleton loaders during data fetching and ensure a snappy, responsive user experience.

Google Maps Integration: The portfolio map must be a Google Map, leveraging its rich feature set.

YOUR ASSIGNMENT:

You will architect and implement the complete Dashboard from the ground up. This involves creating a new layout, building several sophisticated, data-driven widgets, and ensuring all data comes from live API hooks.

Phase 1: Architect the "Manager's Daily Briefing" Layout

Create a DashboardPage.tsx component that uses a responsive CSS Grid to orchestrate a new, more actionable layout.

Portfolio Health Ticker (Full Width): A top-row banner with the four most critical, portfolio-wide KPIs.

Portfolio Operations Map (Two-Thirds Width): A large, interactive Google Map that is the visual centerpiece of the dashboard.

Priority Action Feed (One-Third Width): A real-time feed of the most urgent tasks and alerts, positioned to the right of the map.

Key Financials & Leasing Funnel (Full Width): A row below the map containing two crucial charts that directly impact cash flow and occupancy.

Phase 2: Define Live API Hooks

Assume the backend provides real-time data. Create a src/features/dashboard/hooks/useDashboardData.ts file that contains realistic, well-typed hooks to fetch all necessary data. These hooks should manage loading and error states. Examples: usePortfolioHealth(), useMapProperties(), useActionFeed(), etc.

Phase 3: Build the "Genesis Grade" Dashboard Widgets

Implement each widget as a separate, highly polished component.

KpiTicker.tsx:

Data: Display these four KPIs, which are the lifeblood of an SFR manager:

Portfolio Occupancy: (e.g., 94.2%) - Must include a small donut chart visualizing the percentage.

Rent Ready / Vacant: (e.g., 8 / 15) - Shows units ready for leasing vs. total vacant. This is a key operational metric.

Collections Rate (MTD): (e.g., 98.5%) - Percentage of rent collected vs. billed this month.

Open Critical Work Orders: (e.g., 7) - Number of open work orders with "High" or "Critical" priority.

Display: Each KPI must be clickable. For example, clicking "Open Critical Work Orders" navigates the user directly to the Maintenance page, pre-filtered for high-priority tasks.

PortfolioGoogleMap.tsx:     * Technology: Must use the @vis.gl/react-google-maps library for modern React integration.

Functionality:

Render all properties as custom pins on a dark-themed Google Map.

Pin Styling is CRITICAL:

Shape: Use a custom SVG pin shape (e.g., a small house icon).

Color (Dynamic):

Green: Occupied, rent is current.

Yellow: Vacant and Rent Ready.

Orange: Vacant, Not Rent Ready (needs maintenance).

Red: Occupied, but tenant is delinquent.

Clustering: At high zoom levels, property pins must automatically cluster into larger circles showing the number of properties in that area.

Interaction: Clicking a pin or cluster must open a custom-styled InfoWindow with the property address, status, and a "View Details" link.

PriorityActionFeed.tsx:

Functionality: This is a scrolling, real-time list of the most urgent items needing the manager's attention. It must be grouped by category:

🆘 DELINQUENCY ALERTS: A list of the top 3 tenants with overdue balances. Each item shows the tenant, property, balance, and days overdue. It must include "Start Eviction" and "Send Reminder" ActionButtons.

⚠️ LEASE RENEWALS: A list of the top 3 leases expiring in the next 45 days. Each item shows the tenant, property, and days until expiry. It must include "Prepare Renewal" and "Do Not Renew" ActionButtons.

🛠️ MAINTENANCE HOTLIST: A list of the top 3 work orders that are either "High Priority" or have been open for more than 7 days. Each item shows the property, task description, and age. It must include an "Assign Vendor" ActionButton.

FinancialsAndLeasing.tsx:

Technology: Use recharts.

Functionality: Display two charts side-by-side in ChartContainer components:

Cash Flow (Last 90 Days): A combination bar/line chart. A green bar for Income and a gray bar for Expenses each month, with an Altus Gold line overlay showing the resulting Net Operating Income. This is far more actionable than just showing income vs. expenses.

Leasing Funnel (Last 30 Days): A horizontal funnel chart showing the real conversion rates for the leasing process: Leads -> Tours Scheduled -> Applications Received -> Leases Signed. This helps diagnose bottlenecks in the leasing process.

DELIVERABLES:

Provide the complete, final code for the following files. The code must be production-ready, fully typed, styled to the "Genesis Grade" standard, and use live data from the hooks you define.

src/styles/Dashboard.css (A dedicated stylesheet for all dashboard components).

src/features/dashboard/components/ChartContainer.tsx

src/features/dashboard/components/ActionButton.tsx

src/features/dashboard/hooks/useDashboardData.ts (defining all necessary API hooks).

src/features/dashboard/components/KpiTicker.tsx

src/features/dashboard/components/PortfolioGoogleMap.tsx

src/features/dashboard/components/PriorityActionFeed.tsx

src/features/dashboard/components/FinancialsAndLeasing.tsx

src/features/dashboard/pages/DashboardPage.tsx (The main component that assembles the layout and all widgets).