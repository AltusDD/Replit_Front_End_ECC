Replit Prompt 1 — Add shared UI atoms (exact files)

Create these files exactly. Do not rename imports, do not introduce new libs, do not edit unrelated files.

A) src/features/ui/KPI.tsx

import React from "react";

export default function KPI({
  label,
  value,
  sublabel,
  onClick,
}: {
  label: string;
  value: React.ReactNode;
  sublabel?: React.ReactNode;
  onClick?: () => void;
}) {
  return (
    <button
      type="button"
      onClick={onClick}
      className="ecc-object"
      style={{ padding: 12, textAlign: "left", cursor: onClick ? "pointer" : "default" }}
    >
      <div style={{ opacity: 0.75, fontSize: 12 }}>{label}</div>
      <div style={{ fontSize: 20, fontWeight: 700 }}>{value ?? "—"}</div>
      {sublabel && <div style={{ opacity: 0.75, fontSize: 12, marginTop: 4 }}>{sublabel}</div>}
    </button>
  );
}


B) src/features/ui/ActionButton.tsx

import React from "react";

export default function ActionButton({
  children,
  onClick,
  variant = "primary",
}: {
  children: React.ReactNode;
  onClick?: () => void;
  variant?: "primary" | "ghost";
}) {
  const base: React.CSSProperties = {
    padding: "8px 12px",
    borderRadius: 10,
    border: "1px solid rgba(255,255,255,0.1)",
    background: variant === "primary" ? "rgba(255,255,255,0.06)" : "transparent",
    cursor: "pointer",
  };
  return (
    <button type="button" onClick={onClick} style={base} className="ecc-object">
      {children}
    </button>
  );
}


C) src/features/ui/FieldGroup.tsx

import React from "react";
import Section from "../../components/Section";

export default function FieldGroup({
  title,
  fields,
}: {
  title: string;
  fields: { label: string; value?: React.ReactNode }[];
}) {
  return (
    <Section title={title}>
      <div style={{ display: "grid", gap: 8 }}>
        {fields.map((f, i) => (
          <div key={i} style={{ display: "grid", gridTemplateColumns: "160px 1fr", gap: 8 }}>
            <div style={{ opacity: 0.75 }}>{f.label}</div>
            <div>{f.value ?? "—"}</div>
          </div>
        ))}
      </div>
    </Section>
  );
}


D) src/features/ui/MiniCard.tsx

import React from "react";

export default function MiniCard({
  title,
  subtitle,
  onOpen,
}: {
  title: React.ReactNode;
  subtitle?: React.ReactNode;
  onOpen?: () => void;
}) {
  return (
    <div className="ecc-object" style={{ padding: 12 }}>
      <div style={{ fontWeight: 600 }}>{title}</div>
      {subtitle && <div style={{ opacity: 0.75, fontSize: 12 }}>{subtitle}</div>}
      {onOpen && (
        <div style={{ marginTop: 8 }}>
          <button type="button" onClick={onOpen}>Open</button>
        </div>
      )}
    </div>
  );
}


E) src/features/ui/ActivityChip.tsx

import React from "react";

export default function ActivityChip({
  when,
  what,
  who,
}: {
  when: string;
  what: string;
  who?: string;
}) {
  return (
    <div className="ecc-object" style={{ padding: 8, display: "flex", gap: 8, alignItems: "center" }}>
      <div style={{ width: 8, height: 8, borderRadius: 999, background: "rgba(255,255,255,0.6)" }} />
      <div style={{ fontWeight: 600 }}>{what}</div>
      <div style={{ opacity: 0.7 }}>• {when}</div>
      {who && <div style={{ opacity: 0.7 }}>• {who}</div>}
    </div>
  );
}

Replit Prompt 2 — Skeletons (loading states)

Add generic skeletons. These are lightweight; no new libs.

A) src/features/ui/Skeleton.tsx

import React from "react";

export function Line({ w = "100%" }: { w?: number | string }) {
  return (
    <div
      className="ecc-object"
      style={{
        height: 12,
        width: typeof w === "number" ? `${w}px` : w,
        opacity: 0.3,
        background: "linear-gradient(90deg, rgba(255,255,255,0.06), rgba(255,255,255,0.14), rgba(255,255,255,0.06))",
        backgroundSize: "200% 100%",
        animation: "ecc-shimmer 1.2s linear infinite",
      }}
    />
  );
}

export function Block({ h = 80 }: { h?: number }) {
  return <div className="ecc-object" style={{ height: h, opacity: 0.3 }} />;
}

/* global keyframes: add once if not present */


B) Append keyframes once to src/styles/theme.css (end of file)

@keyframes ecc-shimmer {
  0% { background-position: 0% 0; }
  100% { background-position: 200% 0; }
}

Replit Prompt 3 — Molecules (Hero, RightRail, Timeline) + stubs

Create molecules and wire “Light the stubs” placeholder actions.

A) src/features/cards/components/HeroBlock.tsx

import React from "react";
import KPI from "../../ui/KPI";
import ActionButton from "../../ui/ActionButton";
import Section from "../../../components/Section";

export default function HeroBlock({
  title,
  kpis,
  onEdit,
  onExport,
  onNewWorkOrder,
}: {
  title: React.ReactNode;
  kpis: { label: string; value: React.ReactNode; sublabel?: React.ReactNode; onClick?: () => void }[];
  onEdit?: () => void;
  onExport?: () => void;
  onNewWorkOrder?: () => void;
}) {
  return (
    <Section
      title={<div style={{ fontSize: 20, fontWeight: 700 }}>{title}</div>}
      actions={
        <div style={{ display: "flex", gap: 8 }}>
          <ActionButton onClick={onEdit}>Edit</ActionButton>
          <ActionButton onClick={onExport}>Export PDF</ActionButton>
          <ActionButton variant="primary" onClick={onNewWorkOrder}>New Work Order</ActionButton>
        </div>
      }
    >
      <div style={{ display: "grid", gridTemplateColumns: "repeat(4, minmax(0,1fr))", gap: 12 }}>
        {kpis.map((k, i) => (
          <KPI key={i} {...k} />
        ))}
      </div>
    </Section>
  );
}


B) Replace the previous simple right rail with stubs:
src/features/cards/components/RightRail.tsx

import React from "react";
import Section from "../../../components/Section";
import MiniCard from "../../ui/MiniCard";

function toast(msg: string) {
  // Simple non-blocking placeholder
  alert(msg);
}

export default function RightRail() {
  return (
    <div style={{ display: "grid", gap: 12 }}>
      <Section title="Risk Score">
        <div style={{ fontSize: 28, fontWeight: 800 }}>—</div>
        <div style={{ opacity: 0.75 }}>Key Factors: coming soon</div>
      </Section>

      <Section title="Recent Payments">
        <div style={{ opacity: 0.75 }}>No payments to show (stub)</div>
      </Section>

      <Section title="Upcoming Events">
        <div style={{ opacity: 0.75 }}>No upcoming events (stub)</div>
      </Section>

      <Section title="Quick Links">
        <div style={{ display: "grid", gap: 8 }}>
          <MiniCard title="CoreLogic" subtitle="AVM / Comps / Fraud" onOpen={() => toast("CoreLogic: stub action logged")} />
          <MiniCard title="Field App" subtitle="Schedule Visit / Site Check" onOpen={() => toast("Field App: stub action logged")} />
          <MiniCard title="Deal Room" subtitle="Send Asset" onOpen={() => toast("Deal Room: mock sent")} />
          <MiniCard title="Dropbox" subtitle="Open Folder / Upload" onOpen={() => toast("Dropbox: placeholder opened")} />
        </div>
      </Section>
    </div>
  );
}


C) src/features/cards/components/ActivityTimeline.tsx

import React from "react";
import Section from "../../../components/Section";
import ActivityChip from "../../ui/ActivityChip";

export default function ActivityTimeline({
  items,
}: {
  items: { when: string; what: string; who?: string }[];
}) {
  return (
    <Section title="Activity">
      <div style={{ display: "grid", gap: 8 }}>
        {items.length === 0 && <div style={{ opacity: 0.75 }}>No activity yet (stub)</div>}
        {items.map((it, i) => (
          <ActivityChip key={i} when={it.when} what={it.what} who={it.who} />
        ))}
      </div>
    </Section>
  );
}

Replit Prompt 4 — CardTabs with lazy “Files” & “Activity”

Replace previous CardTabs with a version that supports per-tab skeletons and lazy heavy tabs.

Overwrite src/features/cards/components/CardTabs.tsx

import React, { useState, Suspense } from "react";
import { Block } from "../../ui/Skeleton";

export function CardTabs({
  tabs,
}: {
  tabs: { key: string; label: string; node: React.ReactNode | (() => Promise<{ default: React.ComponentType<any> }>) }[];
}) {
  const [active, setActive] = useState(tabs[0]?.key);
  const activeTab = tabs.find(t => t.key === active);

  const RenderNode = (() => {
    if (!activeTab) return null;
    const n = activeTab.node;
    if (typeof n === "function") {
      const LazyComp = React.lazy(n as any);
      return (
        <Suspense fallback={<Block h={120} />}>
          <LazyComp />
        </Suspense>
      );
    }
    return <>{n as React.ReactNode}</>;
  }) as React.FC;

  return (
    <div>
      <div role="tablist" aria-label="Card Tabs" className="ecc-object" style={{ padding: 8, marginBottom: 12 }}>
        {tabs.map(t => (
          <button
            key={t.key}
            role="tab"
            aria-selected={active === t.key}
            onClick={() => setActive(t.key)}
            style={{ marginRight: 8 }}
          >
            {t.label}
          </button>
        ))}
      </div>
      <RenderNode />
    </div>
  );
}

Replit Prompt 5 — Property data hook (single query source)

Create a single hook that fetches property + lightweight relationships. Read-only, React Query.

File: src/features/cards/hooks/usePropertyCardData.ts

import { useQuery } from "@tanstack/react-query";
import { apiGet } from "../../../lib/ecc-api";

export type Property = {
  id: number;
  doorloop_id?: string;
  street_1?: string;
  city?: string;
  state?: string;
  zip?: string;
  type?: string;
  class?: string;
  status?: string;
};

export function usePropertyCardData(id: string) {
  return useQuery({
    queryKey: ["card:property", id],
    queryFn: async () => {
      const props = await apiGet(`/api/entities/properties`, {
        params: { select: "*", id: `eq.${id}`, limit: 1 },
      });
      const property: Property | undefined = props?.[0];
      // Relationship placeholders (wire once endpoints are ready)
      const units: any[] = [];
      const leases: any[] = [];
      const tenants: any[] = [];
      return { property, units, leases, tenants };
    },
  });
}

Replit Prompt 6 — PropertyCardPage (organism) using atoms/molecules

Replace the previous PropertyCardPage with this version. It uses the new hook, hero, tabs, right rail, and lazy heavy tabs.

Overwrite src/features/cards/PropertyCardPage.tsx

import React from "react";
import { useParams } from "wouter";
import Section from "../../components/Section";
import { CardTabs } from "./components/CardTabs";
import RightRail from "./components/RightRail";
import HeroBlock from "./components/HeroBlock";
import FieldGroup from "../ui/FieldGroup";
import { Line, Block } from "../ui/Skeleton";
import ActivityTimeline from "./components/ActivityTimeline";
import { usePropertyCardData } from "./hooks/usePropertyCardData";

function Overview({ data }: { data: ReturnType<typeof usePropertyCardData>["data"] }) {
  const p = data?.property;
  if (!p) return <Block h={120} />;

  return (
    <div style={{ display: "grid", gap: 12 }}>
      <FieldGroup
        title="Identity"
        fields={[
          { label: "Address", value: [p.street_1, p.city, p.state, p.zip].filter(Boolean).join(", ") },
          { label: "Type", value: p.type },
          { label: "Class", value: p.class },
          { label: "Status", value: p.status },
          { label: "Internal ID", value: `#${p.id}${p.doorloop_id ? ` • DL ${p.doorloop_id}` : ""}` },
        ]}
      />

      <Section title="Relationships" actions={<button>Open Units</button>}>
        <div style={{ opacity: 0.75 }}>Units → Active Lease → Primary Tenant (coming online)</div>
      </Section>
    </div>
  );
}

export default function PropertyCardPage() {
  const { id } = useParams<{ id: string }>();
  const q = usePropertyCardData(id);

  if (q.isLoading) {
    return (
      <div style={{ display: "grid", gridTemplateColumns: "1fr 340px", gap: 16, alignItems: "start" }}>
        <Section title={<Line w={240} />}><Block h={120} /></Section>
        <RightRail />
      </div>
    );
  }

  const p = q.data?.property;
  if (q.isError || !p) return <div>Property not found.</div>;

  const kpis = [
    { label: "Occupancy", value: "—" },
    { label: "Market Rent", value: "—" },
    { label: "Active Lease", value: "—" },
    { label: "Risk", value: "—" },
  ];

  const tabs = [
    { key: "overview", label: "Overview", node: <Overview data={q.data} /> },
    {
      key: "details",
      label: "Details",
      node: (
        <FieldGroup
          title="Details"
          fields={[
            { label: "City", value: p.city },
            { label: "State", value: p.state },
            { label: "ZIP", value: p.zip },
          ]}
        />
      ),
    },
    {
      key: "financials",
      label: "Financials",
      node: <Section title="Financials">Balances and MTD collections (placeholder)</Section>,
    },
    {
      key: "legal",
      label: "Legal",
      node: <Section title="Legal">Docs / notices (placeholder)</Section>,
    },
    {
      key: "files",
      label: "Files",
      node: async () => {
        const Comp = () => <Section title="Files (Dropbox stub)">Folder list / Upload (placeholder)</Section>;
        return { default: Comp };
      },
    },
    {
      key: "activity",
      label: "Activity",
      node: async () => {
        const Comp = () => <ActivityTimeline items={[]} />;
        return { default: Comp };
      },
    },
  ];

  return (
    <div style={{ display: "grid", gridTemplateColumns: "1fr 340px", gap: 16, alignItems: "start" }}>
      <div>
        <HeroBlock
          title={
            <>
              {p.street_1 || "Property"}
              {p.city ? ` — ${p.city}` : ""}
            </>
          }
          kpis={kpis}
          onEdit={() => alert("Edit: placeholder")}
          onExport={() => alert("Export PDF: placeholder")}
          onNewWorkOrder={() => alert("New Work Order: placeholder")}
        />
        <CardTabs tabs={tabs} />
      </div>
      <RightRail />
    </div>
  );
}

Replit Prompt 7 — Wire routes (if not already)

Open src/App.tsx (or your router file). Keep Wouter. Add/ensure this block exists without removing other routes.

import { Route } from "wouter";
import { Suspense, lazy } from "react";

const PropertyCardPage = lazy(() => import("./features/cards/PropertyCardPage"));
const UnitCardPage = lazy(() => import("./features/cards/UnitCardPage"));
const LeaseCardPage = lazy(() => import("./features/cards/LeaseCardPage"));
const TenantCardPage = lazy(() => import("./features/cards/TenantCardPage"));
const OwnerCardPage = lazy(() => import("./features/cards/OwnerCardPage"));

<Suspense fallback={<div>Loading…</div>}>
  <Route path="/card/property/:id" component={PropertyCardPage} />
  <Route path="/card/unit/:id" component={UnitCardPage} />
  <Route path="/card/lease/:id" component={LeaseCardPage} />
  <Route path="/card/tenant/:id" component={TenantCardPage} />
  <Route path="/card/owner/:id" component={OwnerCardPage} />
</Suspense>

Replit Prompt 8 — Minimal placeholders for the other four card pages

Create placeholder pages now so routes work; we’ll clone the pattern next.

Create all four:
src/features/cards/UnitCardPage.tsx
src/features/cards/LeaseCardPage.tsx
src/features/cards/TenantCardPage.tsx
src/features/cards/OwnerCardPage.tsx

import React from "react";
import Section from "../../components/Section";

export default function Page() {
  return (
    <Section title="Coming Soon">This card will follow the Property pattern.</Section>
  );
}

Replit Prompt 9 — Ensure styles are loaded once

Open src/main.tsx (or your root entry). Confirm these imports exist once (no duplicates):

import "./styles/theme.css";
import "./styles/card-enhancer.css";

What you should see (quick smoke)

Navigate to /card/property/1 (replace with a real ID you already have).

Header rail with Edit / Export / New Work Order (alerts for now).

KPIs showing placeholders.

Tabs render; Files & Activity are lazy and show almost instantly with stubs.

Right rail shows Risk/Payments/Events and stub “Quick Links” with alerts.

All panels have the light-grey interior (ecc-object).

When you’re ready, say “Clone pattern to Unit/Lease/Tenant/Owner” and I’ll drop copy-paste prompts for each, including their specific field lists, relationship blocks, and read-only hooks.