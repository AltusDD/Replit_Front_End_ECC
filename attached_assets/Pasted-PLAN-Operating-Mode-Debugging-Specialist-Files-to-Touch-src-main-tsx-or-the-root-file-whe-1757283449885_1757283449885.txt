PLAN
Operating Mode: Debugging Specialist
Files to Touch: 
- `src/main.tsx` (or the root file where `eruda` is initialized)
- `src/features/dashboard/hooks/useDashboardData.ts`
Guardrails: 
- This is a debugging and fixing phase only. Do not add any new UI features or components.
- The primary goal is to stabilize the application and get live, correctly transformed data rendering on the screen.

CHANGESET
- **1. Stabilize the Application (Remove Eruda):**
  - Search the project, likely in `src/main.tsx` or `App.tsx`, for any code that imports or initializes `eruda`.
  - **Completely remove or comment out all lines related to `eruda`.** This is non-negotiable and will eliminate the `DOMException` errors, cleaning our console so we can focus on the real data issue.

- **2. Debug and Fix the Data Transformation (`useDashboardData.ts`):**
  - **Add Diagnostic Logging:**
    - Inside the `useEffect`, immediately after the `Promise.all` successfully resolves, add this line: 
      `console.log('✅ Raw API Data Received:', { properties, units, leases, workorders });`
    - At the very end of the hook, right before the final `return` statement, add this line:
      `console.log('➡️ Transformed Data for UI:', { kpiData, mapData, feedData });`
  - **Fix Maintenance Hotlist Transformation:**
    - The current maintenance data is incorrect because it's not being joined with property data.
    - Find the logic that processes the `workorders` array.
    - For each work order, you **must** find its corresponding property in the `properties` array (by matching `workorder.property_id` with `property.id`).
    - Create a new, combined object for the UI that includes the work order details **and the property's address**. This is a critical fix.
  - **Review All Calculations:**
    - Double-check the logic that calculates `kpiData` from the raw `units` and `leases`. It is likely failing and returning zeros. Ensure it correctly filters active leases and counts units to produce a non-zero Occupancy rate.
    - Ensure the logic that creates `mapData` is correctly iterating over the `properties` array and creating an object for each pin that includes `lat` and `lng`.

VERIFICATION CHECKLIST
- The `DOMException` errors from `eruda.js` are completely gone from the console.
- The console now clearly shows two logs on load: "✅ Raw API Data Received" and "➡️ Transformed Data for UI".
- The "Raw API Data Received" log shows the large arrays of data coming from your backend.
- The "➡️ Transformed Data for UI" log shows **non-empty and correctly structured** objects and arrays for `kpiData`, `mapData`, and `feedData`.
- The dashboard UI is now populated with **live, correct data**:
  - KPI cards show non-zero, calculated values.
  - The map displays pins for your 184 properties.
  - The "Maintenance Hotlist" items now include the property address.