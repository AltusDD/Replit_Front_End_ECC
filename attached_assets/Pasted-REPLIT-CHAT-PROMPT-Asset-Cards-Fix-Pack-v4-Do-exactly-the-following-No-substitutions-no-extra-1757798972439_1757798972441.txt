REPLIT CHAT PROMPT — “Asset Cards Fix Pack v4”

Do exactly the following. No substitutions, no extra files.

0) Guardrail (safety banner)

Keep all MEGA LOCKDOWN v3 protections in place (no overlays; no return null; map only on Property).

1) Add a tiny, stable query layer (prevents the “Rendered more hooks” error)

Create src/lib/q.ts:

// src/lib/q.ts
import { useQuery, UseQueryResult } from "@tanstack/react-query";
import { apiGet } from "../lib/ecc-api";

// Small helpers so cards NEVER change hook counts between renders.
export type Id = string | number;

type ListParams = Record<string, string | number | boolean | null | undefined>;
function toQuery(params?: ListParams) {
  if (!params) return "";
  const parts: string[] = [];
  for (const [k, v] of Object.entries(params)) {
    if (v === undefined || v === null) continue;
    parts.push(`${encodeURIComponent(k)}=${encodeURIComponent(String(v))}`);
  }
  return parts.length ? `?${parts.join("&")}` : "";
}

export function useOne<T>(path: string, id: Id | null): UseQueryResult<T | null> {
  return useQuery<T | null>({
    queryKey: ["one", path, id],
    enabled: id !== null && id !== undefined && String(id).length > 0,
    queryFn: async () => {
      if (id === null || id === undefined) return null;
      // prefer row endpoint, fall back to filter form (prevents 404 breakage)
      try {
        return await apiGet<T>(`${path}/${id}`);
      } catch {
        const rows = await apiGet<T[]>(`${path}${toQuery({ "id": `eq.${id}`, limit: 1 })}`);
        return rows?.[0] ?? null;
      }
    },
    staleTime: 60_000,
  });
}

export function useList<T>(path: string, params?: ListParams, enabled = true): UseQueryResult<T[]> {
  return useQuery<T[]>({
    queryKey: ["list", path, params],
    enabled,
    queryFn: async () => {
      const url = `${path}${toQuery(params)}`;
      const rows = await apiGet<T[]>(url);
      return Array.isArray(rows) ? rows : [];
    },
    staleTime: 60_000,
  });
}

2) Normalizers + humanized formatting

Create src/lib/card-normalizers.ts:

// src/lib/card-normalizers.ts
import { titleCase, humanize, joinAddress, isFiniteNumber } from "../lib/format";

export type Property = any;
export type Unit = any;
export type Lease = any;
export type Tenant = any;
export type Owner = any;

export function normProperty(p?: Property | null) {
  if (!p) return null;
  const name =
    p.name ||
    joinAddress([p.street_1, p.city, p.state, p.zip]) ||
    `Property #${p.id ?? "—"}`;

  return {
    id: p.id ?? null,
    doorloopId: p.doorloop_id ?? p.doorloopId ?? null,
    type: humanize(String(p.property_type ?? p.type ?? "")),
    class: humanize(String(p.property_class ?? p.class ?? "")),
    status: humanize(String(p.status ?? "")),
    name,
    addr: joinAddress([p.street_1, p.city, p.state, p.zip]),
    lat: isFiniteNumber(p.lat ?? null) ? Number(p.lat) : null,
    lng: isFiniteNumber(p.lng ?? null) ? Number(p.lng) : null,
    ownerId: p.owner_id ?? null,
  };
}

export function normUnit(u?: Unit | null) {
  if (!u) return null;
  return {
    id: u.id ?? null,
    propertyDoorloopId: u.doorloop_property_id ?? u.property_doorloop_id ?? null,
    label: u.unit_label ?? u.label ?? u.unit_number ?? `Unit #${u.id ?? "—"}`,
    status: humanize(String(u.status ?? "")),
    beds: Number.isFinite(Number(u.bedrooms)) ? Number(u.bedrooms) : null,
    baths: Number.isFinite(Number(u.bathrooms)) ? Number(u.bathrooms) : null,
    sqft: Number.isFinite(Number(u.square_feet)) ? Number(u.square_feet) : null,
    marketRentCents:
      Number.isFinite(Number(u.market_rent_cents))
        ? Number(u.market_rent_cents)
        : (Number.isFinite(Number(u.market_rent)) ? Number(u.market_rent) * 100 : null),
    doorloopId: u.doorloop_id ?? null,
  };
}

export function normLease(l?: Lease | null) {
  if (!l) return null;
  return {
    id: l.id ?? null,
    status: humanize(String(l.status ?? "")),
    rentCents: Number.isFinite(Number(l.rent_cents)) ? Number(l.rent_cents) : null,
    startDate: l.start_date ?? null,
    endDate: l.end_date ?? null,
    propertyId: l.property_id ?? null,
    unitId: l.unit_id ?? null,
    primaryTenantId: l.primary_tenant_id ?? null,
    doorloopId: l.doorloop_id ?? null,
  };
}

export function normTenant(t?: Tenant | null) {
  if (!t) return null;
  const name = [t.first_name, t.last_name].filter(Boolean).join(" ").trim() || t.name || `Tenant #${t.id ?? "—"}`;
  return { id: t.id ?? null, name, email: t.email ?? null, phone: t.phone ?? null };
}

export function normOwner(o?: Owner | null) {
  if (!o) return null;
  const name = o.name || [o.first_name, o.last_name].filter(Boolean).join(" ").trim() || `Owner #${o.id ?? "—"}`;
  return { id: o.id ?? null, name, email: o.email ?? null, phone: o.phone ?? null };
}

3) Stable resolvers per card (constant hook count, correct relationships)

Create/Replace src/lib/ecc-card-resolvers.ts:

// src/lib/ecc-card-resolvers.ts
import { useOne, useList, Id } from "./q";
import { normProperty, normUnit, normLease, normTenant, normOwner } from "./card-normalizers";

export function usePropertyCardData(id: Id) {
  const propertyQ = useOne<any>("/entities/properties", id);
  const property = normProperty(propertyQ.data);

  // keep hook count constant – always declare, gate via 'enabled'
  const unitsQ = useList<any>(
    "/entities/units",
    property?.doorloopId ? { "doorloop_property_id": `eq.${property.doorloopId}` } : undefined,
    Boolean(property?.doorloopId)
  );

  const leasesQ = useList<any>(
    "/entities/leases",
    property?.id ? { "property_id": `eq.${property.id}` } : undefined,
    Boolean(property?.id)
  );

  const ownerQ = useOne<any>("/entities/owners", property?.ownerId ?? null);

  return {
    isLoading: propertyQ.isLoading || unitsQ.isLoading || leasesQ.isLoading || ownerQ.isLoading,
    error: propertyQ.error || unitsQ.error || leasesQ.error || ownerQ.error,
    property,
    units: (unitsQ.data ?? []).map(normUnit),
    leases: (leasesQ.data ?? []).map(normLease),
    owner: normOwner(ownerQ.data),
  };
}

export function useUnitCardData(id: Id) {
  const unitQ = useOne<any>("/entities/units", id);
  const unit = normUnit(unitQ.data);

  const propertyQ = useList<any>(
    "/entities/properties",
    unit?.propertyDoorloopId ? { "doorloop_id": `eq.${unit.propertyDoorloopId}`, limit: 1 } : undefined,
    Boolean(unit?.propertyDoorloopId)
  );
  const property = normProperty((propertyQ.data ?? [])[0] ?? null);

  const activeLeaseQ = useList<any>(
    "/entities/leases",
    unit?.id ? { "unit_id": `eq.${unit.id}`, "status": "eq.active", "order": "start_date.desc", "limit": 1 } : undefined,
    Boolean(unit?.id)
  );
  const lease = normLease((activeLeaseQ.data ?? [])[0] ?? null);

  const tenantQ = useOne<any>("/entities/tenants", lease?.primaryTenantId ?? null);
  const tenant = normTenant(tenantQ.data);

  return {
    isLoading: unitQ.isLoading || propertyQ.isLoading || activeLeaseQ.isLoading || tenantQ.isLoading,
    error: unitQ.error || propertyQ.error || activeLeaseQ.error || tenantQ.error,
    unit,
    property,
    lease,
    tenant,
  };
}

export function useLeaseCardData(id: Id) {
  const leaseQ = useOne<any>("/entities/leases", id);
  const lease = normLease(leaseQ.data);
  const propertyQ = useOne<any>("/entities/properties", lease?.propertyId ?? null);
  const unitQ = useOne<any>("/entities/units", lease?.unitId ?? null);
  const tenantQ = useOne<any>("/entities/tenants", lease?.primaryTenantId ?? null);

  return {
    isLoading: leaseQ.isLoading || propertyQ.isLoading || unitQ.isLoading || tenantQ.isLoading,
    error: leaseQ.error || propertyQ.error || unitQ.error || tenantQ.error,
    lease,
    property: normProperty(propertyQ.data),
    unit: normUnit(unitQ.data),
    tenant: normTenant(tenantQ.data),
  };
}

export function useTenantCardData(id: Id) {
  const tenantQ = useOne<any>("/entities/tenants", id);
  const leasesQ = useList<any>("/entities/leases", { "primary_tenant_id": `eq.${id}` }, true);
  return {
    isLoading: tenantQ.isLoading || leasesQ.isLoading,
    error: tenantQ.error || leasesQ.error,
    tenant: normTenant(tenantQ.data),
    leases: (leasesQ.data ?? []).map(normLease),
  };
}

export function useOwnerCardData(id: Id) {
  const ownerQ = useOne<any>("/entities/owners", id);
  const propsQ = useList<any>("/entities/properties", { "owner_id": `eq.${id}` }, true);
  return {
    isLoading: ownerQ.isLoading || propsQ.isLoading,
    error: ownerQ.error || propsQ.error,
    owner: normOwner(ownerQ.data),
    properties: (propsQ.data ?? []).map(normProperty),
  };
}


Why this fixes the crash + “no data”:

We call the same set of hooks on every render and gate with enabled → no “Rendered more hooks” panic.

We never 404 the whole card: .useOne falls back to ?id=eq.X&limit=1 and returns null gracefully.

All values are normalized (no ALL_CAPS, no underscores), so the UI can display stable strings.

4) Wire the normalized data into the pages (show real values + links)
4a) Property card

Edit src/pages/card/property/index.tsx — at top imports:

// ADD/REPLACE imports
import { usePropertyCardData } from "../../../lib/ecc-card-resolvers";
import { fmtMoneyCents, joinAddress } from "../../../lib/format";
import { Link } from "wouter";


Replace the current data acquisition and value reads with:

const { id } = params;
const rel = usePropertyCardData(id);

const p = rel.property;
const units = rel.units ?? [];
const leases = rel.leases ?? [];
const owner = rel.owner;

const kpiUnits = units.length;
const kpiActiveLeases = leases.filter(l => l?.status?.toLowerCase() === "active").length;
const kpiAvgRent = (() => {
  const cents = leases
    .map(l => l?.rentCents ?? 0)
    .filter(n => Number.isFinite(n)) as number[];
  if (!cents.length) return "—";
  const avg = Math.round(cents.reduce((a,b)=>a+b,0) / cents.length);
  return fmtMoneyCents(avg);
})();


In the header/title:

<h1>{p?.name ?? "—"}</h1>


In “Property Overview” fields:

{fields([
  ["Type", p?.type ?? "—"],
  ["Class", p?.class ?? "—"],
  ["Status", p?.status ?? "—"],
  ["DoorLoop ID", p?.doorloopId ?? "—"],
  ["Owner", owner?.id ? <Link href={`/card/owner/${owner.id}`}>{owner.name}</Link> : "—"],
])}


Relationships box:

{fields([
  ["Units", String(kpiUnits)],
  ["Active Leases", String(kpiActiveLeases)],
])}


Right-rail “Location” (map ONLY here; already present)

Leave your GeoMap usage as-is, feeding p?.addr, p?.lat, p?.lng.

4b) Unit card

Edit src/pages/card/unit/index.tsx — imports:

import { useUnitCardData } from "../../../lib/ecc-card-resolvers";
import { fmtMoneyCents } from "../../../lib/format";
import { Link } from "wouter";


Data reads + KPIs:

const rel = useUnitCardData(id);
const u = rel.unit;
const prop = rel.property;
const lease = rel.lease;
const tenant = rel.tenant;

const bedsBaths = [u?.beds ?? "—", u?.baths ?? "—"].join(" / ");
const marketRent = Number.isFinite(u?.marketRentCents) ? fmtMoneyCents(u!.marketRentCents!) : "—";


Overview fields:

{fields([
  ["Status", u?.status ?? "—"],
  ["Beds/Baths", bedsBaths],
  ["Sq Ft", u?.sqft ?? "—"],
  ["Market Rent", marketRent],
])}


Lease & Tenant block:

{fields([
  ["Active Lease", lease?.id ? <Link href={`/card/lease/${lease.id}`}>#{lease.id}</Link> : "—"],
  ["Primary Tenant", tenant?.id ? <Link href={`/card/tenant/${tenant.id}`}>{tenant.name}</Link> : "—"],
])}


Right rail “Parent Property”:

{prop?.id ? <Link href={`/card/property/${prop.id}`}>{prop.name}</Link> : "—"}


Keep NO map on Unit (enforced).

4c) Lease card

Edit src/pages/card/lease/index.tsx — imports and reads:

import { useLeaseCardData } from "../../../lib/ecc-card-resolvers";
import { fmtMoneyCents } from "../../../lib/format";
import { Link } from "wouter";

const rel = useLeaseCardData(id);
const l = rel.lease;
const prop = rel.property;
const unit = rel.unit;
const tenant = rel.tenant;

const rent = Number.isFinite(l?.rentCents) ? fmtMoneyCents(l!.rentCents!) : "—";


Relationships:

{fields([
  ["Property", prop?.id ? <Link href={`/card/property/${prop.id}`}>{prop.name}</Link> : "—"],
  ["Unit", unit?.id ? <Link href={`/card/unit/${unit.id}`}>{unit.label}</Link> : "—"],
  ["Primary Tenant", tenant?.id ? <Link href={`/card/tenant/${tenant.id}`}>{tenant.name}</Link> : "—"],
])}


Lease Terms:

{fields([
  ["Status", l?.status ?? "—"],
  ["Rent", rent],
  ["Term", [l?.startDate ?? "—", l?.endDate ?? "—"].join(" — ")],
])}


Keep NO map on Lease.

4d) Tenant card

Edit src/pages/card/tenant/index.tsx:

import { useTenantCardData } from "../../../lib/ecc-card-resolvers";
import { Link } from "wouter";

const rel = useTenantCardData(id);
const t = rel.tenant;
const leases = rel.leases ?? [];


Header title:

<h1>{t?.name ?? "—"}</h1>


Leases list (compact):

Render a mini list of links (active first):

<ul style={{display:"grid", gap:6}}>
  {leases.length ? leases.map(l => (
    <li key={l.id}>
      <Link href={`/card/lease/${l.id}`}>Lease #{l.id}</Link> — {l.status ?? "—"}
    </li>
  )) : <div style={{opacity:.7}}>No leases.</div>}
</ul>


Keep NO map on Tenant.

4e) Owner card

Edit src/pages/card/owner/index.tsx:

import { useOwnerCardData } from "../../../lib/ecc-card-resolvers";
import { Link } from "wouter";

const rel = useOwnerCardData(id);
const o = rel.owner;
const props = rel.properties ?? [];


Header title:

<h1>{o?.name ?? "—"}</h1>


Portfolio list (mini-cards or links):

<ul style={{display:"grid", gap:6}}>
  {props.length ? props.map(p => (
    <li key={p.id}><Link href={`/card/property/${p.id}`}>{p.name}</Link></li>
  )) : <div style={{opacity:.7}}>No properties found.</div>}
</ul>


Keep NO map on Owner.

5) Do not touch styles/tokens.

Keep the light-grey .ecc-object surface everywhere.

Keep GeoMap ONLY on Property.

6) Quick verification (you run)

node scripts/guardrail-mega.mjs → expect ✅

node scripts/guardrail-overlays.mjs → expect ✅

npx tsc -p tsconfig.cards.json → expect ✅

Navigate:

/card/property/42 (should show: title, Type/Class/Status, DoorLoop ID, Units and Active Leases counts, Owner link, Map with address)

/card/unit/45 (should show: beds/baths, rent, property link, active lease + tenant links)

/card/lease/25 (should show: property/unit/tenant links, status, rent, term)

/card/tenant/1 (should show: name + list of lease links)

/card/owner/1 (should show: owner name + property links)

If any card shows “Rendered more hooks…” that’s a defect—halt and fix the file to match this pattern before proceeding.

What this gives us now

Stable pages that render real values and links (no blank “—” where data exists).

No more hook-count crashes.

Relationship navigation restored (Property ⇄ Unit ⇄ Lease ⇄ Tenant, Owner ⇄ Properties).

Map appears only on Property.

Next after this lands

Wire real Financials and Legal to BFF endpoints (/api/bff/...) behind the current components we dropped.

Add CoreLogic widget + Key Dates population.

Add Files actions (DoorLoop/Dropbox/Upload) to call BFF.

If you want, I’ll follow up with a v5 patch that wires the three BFF endpoints you scoped and fills the Financials/Legal tabs with live data.