Replit — Follow-up Patch (Stepper Success CTA → /owners/transfer/detail?id=…)

Paste everything below into the Replit Shell:

set -e
git checkout -b feat/owner-transfer-success-cta

############################################
# 1) SERVER — Ensure initiate returns { id }
############################################
applypatch <<'PATCH'
*** Begin Patch
*** Update File: server/routes/ownerTransfer.ts
@@
-  // existing: create transfer via initiateTransfer(...)
-  const transfer = await initiateTransfer({ old_owner_id, new_owner_id, property_ids, effective_date, notes, user });
-  return res.json({ ok: true, transfer });
+  // create transfer and explicitly return its id for the stepper CTA
+  const transfer = await initiateTransfer({ old_owner_id, new_owner_id, property_ids, effective_date, notes, user });
+  // Be explicit & stable for frontend consumers:
+  return res.json({ ok: true, id: transfer.id, transfer });
*** End Patch
PATCH

#########################################################################
# 2) FRONTEND — Stepper page: show success banner + CTA to Detail page
#########################################################################
applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/features/owners/pages/OwnerTransferPage.tsx
@@
-import React, { useEffect, useMemo, useState } from "react";
+import React, { useEffect, useMemo, useState } from "react";
+import { Link } from "wouter";
@@
 export default function OwnerTransferPage() {
   // existing page state...
+  const [createdId, setCreatedId] = useState<number | null>(null);
+  const [successMsg, setSuccessMsg] = useState<string | null>(null);
@@
-  async function onSubmit() {
+  async function onSubmit() {
     setErr(null); setBusy(true);
     try {
       // payload assembly (old_owner_id, new_owner_id, property_ids, effective_date, notes)
-      const res = await fetch("/api/owner-transfer/initiate", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(payload) });
+      const res = await fetch("/api/owner-transfer/initiate", {
+        method: "POST",
+        headers: { "Content-Type": "application/json" },
+        body: JSON.stringify(payload)
+      });
       if (!res.ok) throw new Error(await res.text());
-      // existing: maybe we reset form, etc.
-      // TODO: surface success to user
+      const j = await res.json().catch(() => ({}));
+      const idFromApi = j?.id ?? j?.transfer?.id ?? null;
+      setCreatedId(idFromApi);
+      setSuccessMsg(
+        idFromApi
+          ? `Transfer #${idFromApi} created — proceed to detail to approve/authorize/execute.`
+          : "Transfer created successfully."
+      );
+      // optional: keep chosen values; we don’t hard reset to allow review
     } catch (e:any) {
       setErr(e.message || "Failed to create transfer");
     } finally {
       setBusy(false);
     }
   }
@@
   return (
     <div className="p-6 text-neutral-200">
       <div className="card bg-neutral-900 border border-neutral-800">
         <div className="card-header px-4 py-3 border-b border-neutral-800">
           <h2 className="text-lg font-semibold">Owner Transfer</h2>
-          {err && <div className="mt-2 text-sm text-red-400">{err}</div>}
+          {err && <div className="mt-2 text-sm text-red-400">{err}</div>}
+          {successMsg && (
+            <div className="mt-2 text-sm text-green-400 flex items-center gap-3">
+              <span>{successMsg}</span>
+              {createdId && (
+                <Link href={`/owners/transfer/detail?id=${createdId}`}>
+                  <a className="btn btn-primary btn-sm">View transfer details</a>
+                </Link>
+              )}
+            </div>
+          )}
         </div>
         <div className="card-content p-4 space-y-4">
           {/* existing stepper UI: select new owner, pick properties, effective date, notes */}
           {/* ensure ownerId from query preloads current owner, as already implemented in your version */}
           <div className="pt-2 flex gap-2">
             <button onClick={onSubmit} disabled={busy} className="btn btn-primary">
               {busy ? "Creating…" : "Create Transfer"}
             </button>
-            {/* keep any existing cancel/back buttons */}
+            {/* Inline CTA duplication for convenience if needed */}
+            {createdId && (
+              <Link href={`/owners/transfer/detail?id=${createdId}`}>
+                <a className="btn btn-secondary">Open Detail</a>
+              </Link>
+            )}
           </div>
           <p className="text-xs text-neutral-500">
             After creation, Accounting must approve, an admin must authorize, and then the transfer executes
             on the effective date (or immediately if you click Execute Now on the detail page).
           </p>
         </div>
       </div>
     </div>
   );
 }
*** End Patch
PATCH

#############################################################
# 3) (Optional) Small copy tweak on detail page header label
#############################################################
applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/features/owners/pages/OwnerTransferDetailPage.tsx
@@
-          <h2 className="text-lg font-semibold">Owner Transfer: #{id}</h2>
+          <h2 className="text-lg font-semibold">Owner Transfer Detail — #{id}</h2>
*** End Patch
PATCH

git add -A
git commit -m "Owner Transfer: success CTA to detail page; API initiate returns {id}; minor label polish"

What this gives you (at a glance)

Initiate → returns id: Frontend can reliably link to the detail view.

Success banner + buttons: After a transfer is created, the user sees a green success line with a “View transfer details” button (dark theme, btn btn-primary). A secondary “Open Detail” button sits next to your Create Transfer button as well.

No style drift: Uses your existing card, btn, neutral colors; no new CSS files.

Admin flow stays the same: Detail page still uses localStorage.ADMIN_SYNC_TOKEN for Authorize/Execute.

Quick validation script for Replit Agent (pasteable)

Run the patch block above.

Create a transfer on /owners/transfer?ownerId=<existing> (choose one/many/all properties; any date).

Confirm green success message + working View transfer details link.

On the detail page, click Approve Accounting, then (in DevTools) run:

localStorage.setItem("ADMIN_SYNC_TOKEN", "<YOUR_ADMIN_SYNC_TOKEN>");


Then click Authorize and Execute Now.

Check Dashboard Map continues to populate pins as the geocode tick runs (from the previous patch).