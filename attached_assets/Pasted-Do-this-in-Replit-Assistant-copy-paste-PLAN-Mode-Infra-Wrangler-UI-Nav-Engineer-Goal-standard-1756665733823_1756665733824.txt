Do this in Replit Assistant (copy/paste)
PLAN

Mode: Infra Wrangler + UI-Nav Engineer
Goal: standardize on pnpm, remove mixed-manager artifacts, fix “Icons is not defined”, restore logo, collapse & hover flyout.

BACKUP
mkdir -p .archive && zip -qr ".archive/navfix-$(date +%Y%m%d-%H%M%S).zip" . -x "node_modules/*" ".git/*"

INFRA CLEANUP (one time)
pkill -f vite || true
rm -rf node_modules package-lock.json yarn.lock npm-shrinkwrap.json
pnpm install
# If prompted later about “Ignored build scripts: esbuild”
pnpm approve-builds


Add a package-manager pin so Replit sticks to pnpm:

node - <<'NODE'
const fs = require('fs'); const p = JSON.parse(fs.readFileSync('package.json','utf8'));
p.packageManager = p.packageManager || 'pnpm@10.12.4'; // keep what we’re running today
fs.writeFileSync('package.json', JSON.stringify(p,null,2));
console.log('package.json → packageManager set to pnpm@10.12.4');
NODE


(If Tailwind is in use and you see the peer warning again)

pnpm add -D tailwindcss@^3.4

CODE CHANGES
1) navConfig.ts (named export NAV_SECTIONS)

src/components/layout/navConfig.ts

import type { LucideIcon } from "lucide-react";
import {
  LayoutDashboard, Home, Building2, Layers, FileText, Users,
  UserCircle, SquareStack, LayoutGrid, AlertTriangle,
  Calculator, Key, Wrench, Megaphone
} from "lucide-react";

export type NavItem = { label: string; href: string; icon?: LucideIcon };
export type NavSection = { id: string; title: string; icon?: LucideIcon; items: NavItem[] };

export const NAV_SECTIONS: NavSection[] = [
  {
    id: "dashboard",
    title: "Dashboard",
    icon: LayoutDashboard,
    items: [{ label: "Home", href: "/dashboard", icon: Home }],
  },
  {
    id: "portfolio-v3",
    title: "Portfolio V3",
    icon: Building2,
    items: [
      { label: "Properties", href: "/properties", icon: Building2 },
      { label: "Units", href: "/units", icon: Layers },
      { label: "Leases", href: "/leases", icon: FileText },
      { label: "Tenants", href: "/tenants", icon: Users },
      { label: "Owners", href: "/owners", icon: UserCircle },
    ],
  },
  {
    id: "cards",
    title: "Cards",
    icon: SquareStack,
    items: [
      { label: "Overview", href: "/cards/overview", icon: LayoutGrid },
      { label: "Delinquencies", href: "/cards/delinquencies", icon: AlertTriangle },
      { label: "Vacancy", href: "/cards/vacancy", icon: Home },
    ],
  },
  {
    id: "operations",
    title: "Operations",
    icon: Wrench,
    items: [
      { label: "Accounting", href: "/ops/accounting", icon: Calculator },
      { label: "Leasing", href: "/ops/leasing", icon: Key },
      { label: "Maintenance", href: "/ops/maintenance", icon: Wrench },
      { label: "Marketing", href: "/ops/marketing", icon: Megaphone },
    ],
  },
];

2) Sidebar.tsx (remove the old Icons map; use lucide-react directly; add logo, collapse & flyout)

src/components/Sidebar.tsx

import { useState } from "react";
import { Link, useLocation } from "wouter";
import { NAV_SECTIONS, NavItem } from "./layout/navConfig";
import { Pin, PinOff } from "lucide-react";

function ItemIcon({ item }: { item: NavItem }) {
  if (!item.icon) return null;
  const Ico = item.icon;
  return <Ico className="ecc-link__icon" />;
}

function NavLinkItem({ item, onNavigate }: { item: NavItem; onNavigate?: () => void }) {
  const [location] = useLocation();
  const active = location === item.href;
  return (
    <Link href={item.href} onClick={onNavigate}>
      <a className={`ecc-link ${active ? "is-active" : ""}`}>
        <ItemIcon item={item} />
        <span className="ecc-link__label">{item.label}</span>
      </a>
    </Link>
  );
}

export default function Sidebar() {
  const [collapsed, setCollapsed] = useState(false);
  const [pinned, setPinned] = useState(true);

  return (
    <aside className={`ecc-sidebar ${collapsed ? "ecc--collapsed" : ""}`}>
      <div className="ecc-sidebar__inner">
        {/* header with logo + pin */}
        <div className="ecc-sidebar__brand">
          <img src="/brand/altus-logo.png" alt="Altus" className="ecc-logo" />
          <button
            className="ecc-pin"
            title={pinned ? "Unpin" : "Pin"}
            onClick={() => setPinned((v) => !v)}
          >
            {pinned ? <Pin className="w-4 h-4" /> : <PinOff className="w-4 h-4" />}
          </button>
        </div>

        {/* groups */}
        <nav className="ecc-groups">
          {NAV_SECTIONS.map((section) => (
            <div
              key={section.id}
              className="ecc-group"
              onMouseEnter={() => !pinned && setCollapsed(true)}
              onMouseLeave={() => !pinned && setCollapsed(false)}
            >
              <div className="ecc-group__title">
                {section.icon ? <section.icon className="ecc-group__icon" /> : null}
                <span>{section.title}</span>
              </div>

              <div className="ecc-group__list">
                {section.items.map((it) => (
                  <NavLinkItem key={it.href} item={it} />
                ))}
              </div>

              {/* flyout when collapsed */}
              <div className="ecc-flyout">
                <div className="ecc-flyout__header">{section.title}</div>
                <div className="ecc-flyout__list">
                  {section.items.map((it) => (
                    <NavLinkItem key={it.href} item={it} />
                  ))}
                </div>
              </div>
            </div>
          ))}
        </nav>

        {/* collapse toggle at bottom */}
        <div className="ecc-collapse">
          <button onClick={() => setCollapsed((v) => !v)} aria-pressed={collapsed}>
            {collapsed ? "Expand" : "Collapse"}
          </button>
        </div>
      </div>
    </aside>
  );
}

3) CSS additions (flyout + collapse + logo sizing)

src/styles/_ecc-override.css (append if not present)

.ecc-sidebar { width: 280px; background: #0f1216; border-right: 1px solid rgba(255,255,255,.06); transition: width .18s ease; position: relative; }
.ecc--collapsed.ecc-sidebar { width: 68px; }
.ecc-sidebar__inner { height: 100%; padding: 12px; display: flex; flex-direction: column; gap: 12px; }
.ecc-logo { height: 28px; object-fit: contain; filter: drop-shadow(0 1px 0 rgba(0,0,0,.25)); }
.ecc-sidebar__brand { display: flex; align-items: center; justify-content: space-between; padding: 6px 8px; }
.ecc-pin { background: transparent; border: 0; color: #cfcfcf; cursor: pointer; }

.ecc-group { position: relative; padding: 8px; border-radius: 12px; }
.ecc-group__title { display:flex; align-items:center; gap:.5rem; color:#dcdcdc; opacity:.9; font-weight:600; padding:2px 8px 8px; }
.ecc-group__icon { width: 16px; height:16px; opacity:.8; }

.ecc-group__list { display: grid; gap: 4px; }
.ecc-link { display:flex; align-items:center; gap:.625rem; padding:.5rem .75rem; border-radius:.75rem; color:#c8d0d8; border:1px solid transparent; }
.ecc-link:hover { background: rgba(255,255,255,.04); border-color: rgba(255,255,255,.06); }
.ecc-link.is-active { outline:2px solid #ffc658; color:#fff; }
.ecc-link__icon { width:18px; height:18px; opacity:.85; }

.ecc--collapsed .ecc-group__title,
.ecc--collapsed .ecc-group__list .ecc-link__label { display: none; }
.ecc--collapsed .ecc-group__list { display:none; }
.ecc--collapsed .ecc-link { justify-content:center; padding:.5rem; }

.ecc-flyout { display:none; position:absolute; left:72px; top:8px; background:#0f1216; border:1px solid rgba(255,255,255,.08); padding:8px; border-radius:12px; min-width:220px; z-index:30; box-shadow:0 8px 24px rgba(0,0,0,.35); }
.ecc--collapsed .ecc-group:hover .ecc-flyout { display:block; }
.ecc-flyout__header { font-weight:600; color:#e9e9e9; margin:4px 8px 8px; }
.ecc-flyout__list { display:grid; gap:4px; }

.ecc-collapse { margin-top:auto; padding:8px; }

RUN
pnpm dev