We’re done tiptoeing. Here’s a controlled purge + clean rebuild of the sidebar and layout so there is only one canonical rail and a sane 2-pane layout. It archives everything first, deletes any legacy rails/ CSS, rewrites the layout, and reinstalls the verified sidebar kit.

🔥 ECC Sidebar “Nuke & Pave” (safe + idempotent)

Paste the whole block into the Replit Shell. It snapshots the repo, purges stray sidebars and 3-column junk, and writes the canonical files.

set -e

APP_ARCHIVE_DIR=".archive"
STAMP="$(date +%Y%m%d-%H%M%S)"
SNAP="${APP_ARCHIVE_DIR}/ecc-snapshot-${STAMP}.zip"

echo "==> 0) Snapshot current workspace → ${SNAP}"
mkdir -p "${APP_ARCHIVE_DIR}"
zip -r "${SNAP}" . -x "node_modules/*" -x ".git/*" >/dev/null
echo "Snapshot complete."

echo "==> 1) Ensure deps"
npm pkg get dependencies.wouter >/dev/null 2>&1 || npm i wouter

echo "==> 2) Make dirs"
mkdir -p src/components/layout src/styles

echo "==> 3) Move legacy sidebar components/CSS out of the way (archived)"
# Move any Sidebar-like components that are NOT the canonical one
LEGACY_DIR="${APP_ARCHIVE_DIR}/legacy-${STAMP}"
mkdir -p "${LEGACY_DIR}"

# Find TSX components that look like rails (SideBar/Sidenav/LeftNav/etc) except our canonical Sidebar.tsx
rg -n --glob 'src/**/{*Side*,*Nav*,*sidenav*,*leftnav*}.tsx' -g '!src/components/Sidebar.tsx' -g '!node_modules' -g '!**/*.bak' | cut -d: -f1 | sort -u | while read -r f; do
  mkdir -p "${LEGACY_DIR}/$(dirname "$f")"
  [ -f "$f" ] && mv "$f" "${LEGACY_DIR}/${f}" && echo "  archived: $f"
done

# Move any CSS with 'sidebar' in the name EXCEPT our override
rg -n --glob 'src/**/*.css' 'sidebar' -g '!src/styles/_ecc-override.css' -g '!node_modules' | cut -d: -f1 | sort -u | while read -r f; do
  mkdir -p "${LEGACY_DIR}/$(dirname "$f")"
  [ -f "$f" ] && mv "$f" "${LEGACY_DIR}/${f}" && echo "  archived CSS: $f"
done

echo "==> 4) Rewrite the canonical Layout (2-pane, no ghost columns)"
cat > src/components/layout/Layout.tsx <<'TSX'
import React from "react";
import Sidebar from "@/components/Sidebar";

/**
 * Canonical 2-pane app layout:
 * - Fixed rail on the left (Sidebar handles its own width + collapse)
 * - Main content on the right
 * - No grid with 3 columns; no extra wrappers that could mount another rail
 */
export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <div className="ecc-layout" data-ecc="layout">
      <Sidebar />
      <main className="ecc-main" data-ecc="main" role="main" style={{minHeight: "100vh"}}>
        {children}
      </main>
    </div>
  );
}
TSX

echo "==> 5) Canonical navConfig.ts"
cat > src/components/layout/navConfig.ts <<'TS'
export type Leaf = { label: string; to: string };
export type Group = { label: string; children: Leaf[] };
export type Item = Leaf | Group;
export type Section = { title?: string; items: Item[] };

const sections: Section[] = [
  { title: "Dashboard", items: [{ label: "Home", to: "/dashboard" }] },
  {
    title: "Portfolio V3",
    items: [
      { label: "Properties", to: "/portfolio/properties" },
      { label: "Units", to: "/portfolio/units" },
      { label: "Leases", to: "/portfolio/leases" },
      { label: "Tenants", to: "/portfolio/tenants" },
      { label: "Owners", to: "/portfolio/owners" },
    ],
  },
  {
    title: "Cards",
    items: [
      { label: "Overview", to: "/cards/overview" },
      { label: "Delinquencies", to: "/cards/delinquencies" },
      { label: "Vacancy", to: "/cards/vacancy" },
    ],
  },
  {
    title: "Operations",
    items: [
      { label: "Accounting", to: "/operations/accounting" },
      { label: "Leasing", to: "/operations/leasing" },
      { label: "Maintenance", to: "/operations/maintenance" },
      { label: "Marketing", to: "/operations/marketing" },
    ],
  },
];

export { sections };
export default sections;
TS

echo "==> 6) Canonical Sidebar.tsx (wouter-only, primary-tagged)"
cat > src/components/Sidebar.tsx <<'TSX'
import React, { useEffect, useMemo, useState } from "react";
import { Link, useLocation } from "wouter";

/* Local types */
type Leaf = { label: string; to: string };
type Group = { label: string; children: Leaf[]; label?: string };
type Item = Leaf | Group;
type Section = { title?: string; items: Item[] };
const isGroup = (i: Item): i is Group => (i as Group)?.children !== undefined;

/* Robust import */
import * as Nav from "@/components/layout/navConfig";
const RAW: any = (Nav as any).sections ?? (Nav as any).default ?? [];
const DEFAULT_SECTIONS: Section[] = [{ title: "Dashboard", items: [{ label: "Home", to: "/dashboard" }] }];
const SECTIONS: Section[] = Array.isArray(RAW) && RAW.length ? RAW : DEFAULT_SECTIONS;

export default function Sidebar() {
  const [location] = useLocation();
  const current = location || "/";

  // collapse state
  const [collapsed, setCollapsed] = useState<boolean>(() => {
    try { return localStorage.getItem("ecc:nav:collapsed") === "1"; } catch { return false; }
  });
  useEffect(() => {
    try { localStorage.setItem("ecc:nav:collapsed", collapsed ? "1" : "0"); } catch {}
  }, [collapsed]);

  // ensure body reserves space for the rail (prevents layout jump)
  useEffect(() => {
    document.documentElement.setAttribute("data-sidebar-mounted", "1");
    const w = getComputedStyle(document.documentElement).getPropertyValue("--ecc-sidebar-w").trim() || "280px";
    const wc = getComputedStyle(document.documentElement).getPropertyValue("--ecc-sidebar-w-collapsed").trim() || "72px";
    document.documentElement.style.setProperty("--ecc-sidepad", collapsed ? wc : w);
  }, [collapsed]);

  // expanded groups following active route
  const initialExpanded = useMemo(() => {
    const map = new Map<string, boolean>();
    SECTIONS.forEach((section, s) => {
      (section.items || []).forEach((it, i) => {
        if (isGroup(it)) {
          const open = (it.children || []).some((c) => current.startsWith(c.to));
          map.set(`${s}:${i}`, open);
        }
      });
    });
    return map;
  }, [current]);
  const [expanded, setExpanded] = useState(initialExpanded);
  useEffect(() => setExpanded(initialExpanded), [initialExpanded]);

  const toggle = (k: string) => setExpanded((p) => new Map(p).set(k, !p.get(k)));

  return (
    <aside className={`sidebar ${collapsed ? "collapsed" : ""}`} data-ecc="primary" aria-label="Primary">
      {/* Brand + Pin */}
      <div className="brand">
        <img src="/logo.png" alt="Altus" className="brand-logo"
          onError={(e) => { (e.currentTarget as HTMLImageElement).style.display = "none"; }} />
        <button className="pinBtn" onClick={() => setCollapsed(!collapsed)}>
          {collapsed ? "Unpin" : "Pin"}
        </button>
      </div>

      <div className="sidebar-scroll">
        <nav role="navigation" data-nav aria-label="Main">
          {SECTIONS.map((section, sIdx) => (
            <div className="section" key={section.title || sIdx}>
              {section.title && <div className="section-title">{section.title}</div>}
              {(section.items || []).map((it, iIdx) => {
                const key = `${sIdx}:${iIdx}`;
                if (isGroup(it)) {
                  const open = expanded.get(key) ?? false;
                  return (
                    <div className="group" key={key}>
                      <button type="button" className="nav-row group-row" aria-expanded={open} onClick={() => toggle(key)}>
                        <span className="icon">•</span>
                        <span className="label">{(it as any).label ?? "Group"}</span>
                        <span className="expand" aria-hidden>▾</span>
                      </button>
                      <div className="leafList" hidden={!open}>
                        {(it.children || []).map((ch) => {
                          const active = current.startsWith(ch.to);
                          return (
                            <Link key={ch.to} href={ch.to} className={`nav-row leaf ${active ? "active" : ""}`}
                                  aria-current={active ? "page" : undefined}>
                              <span className="icon">•</span>
                              <span className="label">{ch.label}</span>
                              <span className="expand" />
                            </Link>
                          );
                        })}
                      </div>
                    </div>
                  );
                }
                const leaf = it as Leaf;
                const active = current.startsWith(leaf.to);
                return (
                  <Link key={leaf.to} href={leaf.to} className={`nav-row leaf ${active ? "active" : ""}`}
                        aria-current={active ? "page" : undefined}>
                    <span className="icon">•</span>
                    <span className="label">{leaf.label}</span>
                    <span className="expand" />
                  </Link>
                );
              })}
            </div>
          ))}
        </nav>
      </div>

      {/* ECC inline style overrides */}
      <style>{`
        .sidebar[data-ecc="primary"] a,
        .sidebar[data-ecc="primary"] a:link,
        .sidebar[data-ecc="primary"] a:visited,
        .sidebar[data-ecc="primary"] a:active { color: var(--ecc-text) !important; text-decoration: none !important; }
      `}</style>
    </aside>
  );
}
TSX

echo "==> 7) Canonical _ecc-override.css (scoped + kill-switch)"
cat > src/styles/_ecc-override.css <<'CSS'
:root{
  --ecc-sidebar-w: 280px;
  --ecc-sidebar-w-collapsed: 76px;
  --ecc-bg:#0e0f11; --ecc-panel:#121316; --ecc-seam:#222428;
  --ecc-text:#d7d9dd; --ecc-dim:#a6a8ac; --ecc-gold:#ffd400;
}

/* Reserve rail space globally */
html[data-sidebar-mounted="1"] body{
  padding-left:var(--ecc-sidepad, var(--ecc-sidebar-w)) !important;
  box-sizing:border-box;
}

.sidebar{
  position:fixed; top:0; left:0; height:100vh; z-index:50;
  width:var(--ecc-sidebar-w);
  background:var(--ecc-panel);
  color:var(--ecc-text);
  display:flex; flex-direction:column;
  border-right:1px solid var(--ecc-seam);
}
.sidebar.collapsed{ width:var(--ecc-sidebar-w-collapsed); }

/* Brand */
.sidebar .brand{ display:flex; align-items:center; gap:10px; padding:14px 12px 8px; }
.sidebar .brand-logo{ height:42px; width:auto; }
.sidebar .pinBtn{ margin-left:auto; font-size:12px; border:1px solid var(--ecc-seam); background:transparent; color:var(--ecc-dim); border-radius:10px; padding:4px 10px; }
.sidebar.collapsed .pinBtn{ font-size:10px; padding:2px 8px; }

/* Scroll */
.sidebar .sidebar-scroll{
  height:calc(100vh - 70px);
  overflow-y:auto; -webkit-overflow-scrolling:touch; overscroll-behavior:contain;
  scrollbar-width:none;
}
.sidebar .sidebar-scroll::-webkit-scrollbar{ width:0; height:0; }

/* Sections/rows */
.sidebar .section{ padding:6px 8px; }
.sidebar .section-title{ color:var(--ecc-dim); font-size:12px; letter-spacing:.08em; padding:8px 10px 6px; }
.sidebar .nav-row{
  display:grid; grid-template-columns:18px minmax(0,1fr) auto;
  align-items:center; column-gap:10px; padding:8px 10px;
  border-radius:10px; text-decoration:none; color:inherit;
}
.sidebar .nav-row:hover{ background:#17181b; }
.sidebar .leaf.active{ background:#17181b; box-shadow:inset 0 0 0 2px var(--ecc-gold); }
.sidebar .icon{ width:18px; min-width:18px; text-align:center; color:var(--ecc-gold); }
.sidebar .label{ white-space:nowrap; overflow:hidden; text-overflow:ellipsis; }
.sidebar .expand{ opacity:.5; }

.sidebar .group-row{ width:100%; text-align:left; background:transparent; border:0; color:inherit; }
.sidebar .leafList{ padding-left:20px; }

/* Collapsed: icon-only */
.sidebar.collapsed .nav-row{ grid-template-columns:18px; justify-items:center; padding-left:10px; padding-right:8px; }
.sidebar.collapsed .label,
.sidebar.collapsed .expand,
.sidebar.collapsed .section-title{ display:none; }
.sidebar.collapsed .leafList{ display:none; }

/* === Kill any non-canonical rails === */
.sidebar:not([data-ecc="primary"]) { display:none !important; visibility:hidden !important; }

/* Main column should never drift under the rail */
.ecc-main{ padding:24px; }
CSS

echo "==> 8) Ensure CSS import order in main.tsx"
cat > src/main.tsx <<'TS'
import "@/styles/theme.css";
import "@/styles/app.css";
import "@/styles/_ecc-override.css";

if (import.meta.env.DEV) {
  import("@/debug/crash-overlay");
}

import React from "react";
import ReactDOM from "react-dom/client";
import App from "@/App";

document.documentElement.setAttribute("data-theme", "altus");

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
TS

echo "==> 9) Dev server check (ignore if already running)"
npm run dev --silent >/dev/null 2>&1 || true
echo "✅ Purge + Rebuild done. Refresh your app."
echo "Archive of removed files: ${LEGACY_DIR}"

What this does (and why it fixes your screenshots)

Archives the whole project + moves any other Sidebar/SideNav/LeftNav components and any CSS containing “sidebar” (except our _ecc-override.css) into .archive/legacy-<timestamp>/….

Replaces Layout.tsx with a clean 2-pane layout—no hidden third column to “catch” routed pages.

Rewrites the canonical Sidebar (wouter-only, data-ecc="primary").

Reinstates the scoped _ecc-override.css and ensures import order so it wins.

Forces global left padding via --ecc-sidepad so content never slides under the rail.

Adds a kill-switch CSS rule so any stray rail that might still render is hidden.

Quick verification

Only one rail visible (no thin ghost strip).

Content is to the right with clean padding (≈280px expanded, ≈76px collapsed).

Pin/collapse persists on refresh.

Active item highlights on navigation.

No 3-column behavior (nothing gets shoved into a phantom column).

Rollback (if needed)
# Restore everything from the snapshot zip you saw printed at the start:
# Example:
# unzip .archive/ecc-snapshot-YYYYMMDD-HHMMSS.zip -d .


If you still see anything that looks like a second rail after this, it means a runtime-rendered rail is being injected elsewhere. In that case, I’ll give you a 10-second grep to find the mount site and comment it:

rg -n "<aside[^>]*class(Name)?=['\"]sidebar|<Sidebar|from ['\"][^\"']*/Sidebar['\"]" src


But the nuke-and-pave above should remove the debris and stop the 3-column drift you called out.