Paste this exact patch into server/index.ts (no drift elsewhere):

// --- alias-aware env helpers (top of file, after imports) ---
function mask(v?: string) {
  if (!v) return "MISSING";
  return v.slice(0, 6) + "…" + v.slice(-4);
}
function pickKey(...candidates: string[]) {
  for (const k of candidates) if (process.env[k]) return k;
  return "MISSING";
}

// Prefer server-only keys; include public aliases for completeness
const KEY_SUPABASE_URL  = pickKey("SUPABASE_URL","NEXT_PUBLIC_SUPABASE_URL","PUBLIC_SUPABASE_URL");
const KEY_ANON          = pickKey("SUPABASE_ANON_KEY","NEXT_PUBLIC_SUPABASE_ANON_KEY","PUBLIC_SUPABASE_ANON_KEY");
const KEY_SERVICE_ROLE  = pickKey("SUPABASE_SERVICE_ROLE_KEY","SUPABASE_SERVICE_ROLE","SERVICE_ROLE");

function envSummary() {
  return {
    SUPABASE_URL_KEY: KEY_SUPABASE_URL,
    SUPABASE_URL: KEY_SUPABASE_URL === "MISSING" ? "MISSING" : process.env[KEY_SUPABASE_URL],
    ANON_KEY_KEY: KEY_ANON,
    ANON_KEY_MASKED: KEY_ANON === "MISSING" ? "MISSING" : mask(process.env[KEY_ANON]),
    SERVICE_ROLE_KEY: KEY_SERVICE_ROLE,
    SERVICE_ROLE_MASKED: KEY_SERVICE_ROLE === "MISSING" ? "MISSING" : mask(process.env[KEY_SERVICE_ROLE]),
    NODE_ENV: process.env.NODE_ENV || "dev",
  };
}
console.log("[EnvLock]", envSummary());

// If you initialize Supabase here, make sure you use the resolved keys:
const SUPABASE_URL = KEY_SUPABASE_URL === "MISSING" ? undefined : process.env[KEY_SUPABASE_URL]!;
const SERVICE_ROLE = KEY_SERVICE_ROLE === "MISSING" ? undefined : process.env[KEY_SERVICE_ROLE]!;
if (!SUPABASE_URL || !SERVICE_ROLE) {
  console.error("[EnvLock] Missing required server envs for Supabase (URL or SERVICE_ROLE)");
}


Keep the diag route you already added:

app.get("/api/diag/env", (_req, res) => res.json(envSummary()));

How to verify (fast)

Click Run (not a Workflow). You should see:

[Dev API] Listening on :8787

[EnvLock] { SUPABASE_URL_KEY: "...", ANON_KEY_KEY: "...", SERVICE_ROLE_KEY: "..." }

Hit: curl -s http://localhost:8787/api/diag/env | jq

You’ll now see which exact variable names were picked (e.g., NEXT_PUBLIC_SUPABASE_ANON_KEY) and masked values. If your secrets are indeed set in Replit, one of those alias keys will show up as the chosen key—no more “MISSING” confusion.

Quick note: the asset cards only need the service role on the server. The ANON key is only needed if the browser makes direct Supabase calls. So even if ANON prints MISSING, it won’t block the cards unless you’ve added client-side Supabase usage.