Violations Fix Pack (post Mega v2)

You are in PATCH MODE. Apply each step exactly, print diffs, then run the 3 verification commands at the end and paste the outputs.

1) Remove banned deps (no framework drift)

Actions

Remove from package.json and uninstall:

npm remove @mui/material @mui/x-data-grid react-router-dom


Confirm no imports remain:

Search globally for from "@mui/ and from "react-router-dom"; if found, delete the import and its usage. Router must be Wouter only.

2) Purge dev inspector overlay (inline only)

File: src/dev/UiInspector.tsx
Replace entire file with an inline, non-fixed panel:

import React from "react";

export default function UiInspector({ open, onClose }: { open: boolean; onClose: () => void }) {
  if (!open) return null;
  return (
    <section className="ecc-object" role="region" aria-label="UI Inspector">
      <div className="ecc-header">
        <div className="ecc-title">UI Inspector</div>
        <div className="ecc-actions" style={{ display: "flex", gap: 8 }}>
          <button className="ecc-object" onClick={onClose} style={{ padding: "8px 12px" }}>Close</button>
        </div>
      </div>
      <div style={{ opacity: .85 }}>Inspector content renders here (inline). No fixed/backdrop usage.</div>
    </section>
  );
}


File: src/styles/dev-inspector.css
Replace contents with inline styles (no fixed/backdrop):

/* Inline-only inspector; never covers viewport */
.ui-inspector { position: static; inset: auto; z-index: auto; }
.ui-inspector__panel { background: var(--ecc-object-bg); border: 1px solid var(--ecc-object-border); border-radius: 16px; padding: 16px; }
.ui-inspector__backdrop { display: none !important; }

3) Move raw endpoints out of pages (no guessing, just lift & route)

Page flagged: src/pages/DataHub.tsx (uses apiGet/raw /api/)

Do NOT change any endpoint strings. Create thin resolvers that call the exact same URLs currently used in this page, then use those resolvers from the page.

Edit: src/lib/ecc-resolvers.ts — append:

import { useQuery } from "@tanstack/react-query";
import { apiGet } from "./ecc-api";

// DataHub – lifted exactly from DataHub.tsx (no guessing, same URLs)
export function useDataHubSummary() {
  return useQuery({
    queryKey: ["datahub","summary"],
    queryFn: () => apiGet("/api/portfolio/summary")
  });
}
export function useDataHubProperties(params: Record<string, any> = {}) {
  const q = new URLSearchParams(params as any).toString();
  return useQuery({
    queryKey: ["datahub","properties", q],
    queryFn: () => apiGet(`/api/portfolio/properties${q ? `?${q}` : ""}`)
  });
}
// add additional wrappers here matching any other raw endpoints used in DataHub.tsx


Edit: src/pages/DataHub.tsx — replace direct apiGet(...) calls with the new hooks, e.g.:

// import { useDataHubSummary, useDataHubProperties } from "../../lib/ecc-resolvers";
const summary = useDataHubSummary();
const propsQ = useDataHubProperties({ limit: 50 });


Delete any remaining import { apiGet } from ... and any raw "/api/... strings in this page.

4) Fix the two TypeScript errors
A) src/components/Sidebar.tsx:248 (ref prop issue)

Convert Sidebar to a proper forwardRef so the ref type is correct.

Patch Sidebar root export (top of file):

import React from "react";

// Replace existing component export with forwardRef form:
type SidebarProps = { /* keep existing props */ } & React.HTMLAttributes<HTMLDivElement>;

const Sidebar = React.forwardRef<HTMLDivElement, SidebarProps>(function Sidebar(props, ref) {
  const { className = "", ...rest } = props;
  // ... keep all existing logic/state
  return (
    <div ref={ref} className={className} {...rest}>
      {/* keep existing sidebar markup */}
    </div>
  );
});

export default Sidebar;


Remove any manual ref?: any prop from the props type if present; the forwardRef now handles it.

B) src/components/ui/Typeahead.tsx:161 (duplicate attribute)

Find the input/combobox where the linter reports duplicates. Keep one of each attribute and wire the IDs once.

Canonical input shape:

<input
  id={inputId}
  ref={inputRef}
  role="combobox"
  autoComplete="off"
  aria-autocomplete="list"
  aria-controls={listboxId}
  aria-expanded={isOpen}
  aria-activedescendant={highlightedId ?? undefined}
  // ensure no second aria-activedescendant / id / role / ref props exist
  {...rest}
/>


Delete any second occurrence of id, ref, role, or aria-* on that element.

5) Re-run guardrails & cards typecheck; paste outputs

Run:

node scripts/guardrail-mega.mjs
node scripts/guardrail-overlays.mjs
npx tsc -p tsconfig.cards.json


Expected:

guardrail-mega → no violations

guardrail-overlays → passes

typecheck:cards → 0 errors

6) Quick route smoke (no covers, no blanks)

Open real IDs for:

/card/property/:id → renders ✅, map present ✅, page cover ❌

/card/unit/:id → renders ✅, no map ✅, page cover ❌

/card/lease/:id → renders ✅, no map ✅, page cover ❌

/card/tenant/:id → renders ✅, no map ✅, page cover ❌

/card/owner/:id → renders ✅, no map ✅, page cover ❌

Paste a 5-line checklist with those three booleans per route.

Why this finishes the lockdown

Removes the remaining overlay sources (dev inspector + CSS).

Eliminates banned libraries and router drift entirely.

Enforces “no raw endpoints in pages” without guessing—just lifts existing URLs into resolvers.

Fixes the two TypeScript blockers so cards compile cleanly.

Keeps all “map-only-on-Property”, Wouter routing, token locks, and overlay bans in force.