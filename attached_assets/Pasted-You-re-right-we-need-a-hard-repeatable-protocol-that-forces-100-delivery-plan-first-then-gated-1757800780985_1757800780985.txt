You’re right: we need a hard, repeatable protocol that forces 100% delivery — plan first, then gated milestones, each with a visible demo before moving on. Below is the working agreement plus ready-to-paste prompts so you can enforce it in Replit Chat every time.

Permanent Working Protocol (no wiggle room)

Plan → Build → Demo → Accept (loop)

I must produce a full task breakdown with DoD (Definition of Done) before writing code.

Work proceeds in small milestones (1–3 hrs of effort each).

After each milestone I must demo the result in the running app (route + what to look for).

You accept or reject. Only then do we proceed.

Non-negotiables

No assumptions: if an input is missing, I must stop and ask.

No “complete” claims without an on-screen demo of the feature working.

No scope drift: only files, routes, and contracts specified by you.

Guardrails on: overlay lock, map-only-on-Property, no return null pages, constant hook counts.

Every milestone must ship with

Files created/edited list.

How to navigate to the feature (routes/IDs).

“What you should see” checklist.

Verification commands: node scripts/guardrail-mega.mjs, node scripts/guardrail-overlays.mjs, npx tsc -p tsconfig.cards.json.

Master Control Prompt (paste into Replit Chat once per major scope)
ECC MASTER CONTROL — 100% DELIVERY REQUIRED

SCOPE: Build Genesis Asset Cards to full contract spec (Property, Unit, Lease, Tenant, Owner).

RULES (MANDATORY):
1) Before coding, produce a COMPLETE TASK BREAKDOWN across all cards with DoD for each task.
2) Work in milestones. After each milestone, STOP and DEMO in the browser with exact routes and “what to see”.
3) Do not claim completion of any item without an on-screen demo. No assumptions; ask instead of guessing.
4) Respect all guardrails: overlay lock, constant hook counts, map only on Property, no return null pages.

OUTPUT #1 (PLANNING): 
- File tree to be created (per card: Hero.tsx, Tabs.tsx, Overview.tsx, Details.tsx, Financials.tsx, Legal.tsx, Files.tsx, Linked.tsx, Activity.tsx, RightRail.tsx, api.ts).
- API contracts to call (rich DTO BFF endpoints AND current /entities fallbacks until BFF is ready).
- Milestones list with DoD + demo routes.

WAIT for my approval before coding.


Use this to force the plan upfront.

Milestone Prompt Template (use for each milestone)
ECC MILESTONE — {name}

DELIVERABLES:
- Files to add/edit: {list}
- Exact UI behaviors: {list}
- Data sources: {hooks/endpoints}
- DoD:
  - [ ] Renders with real data (no placeholders where data exists)
  - [ ] Links navigate to the correct cards
  - [ ] Guardrails pass (mega + overlays), TypeScript clean
  - [ ] Demo: open {routes}, you should see {checklist}

AFTER IMPLEMENTATION: STOP and post:
- Files changed list
- Verification outputs (three commands)
- Demo instructions with screenshots or animated GIFs if possible

Deviation/Correction Prompts (keep handy)

If they guess an endpoint or omit a feature

STOP. You deviated from spec. Re-align to the approved task list. 
- List exactly what changed vs. plan.
- Fix to match the contract. 
- Re-demo per DoD.


If they claim completion without demo

Not accepted. Show the on-screen demo now:
- Route(s):
- What I should see:
- Verification outputs (guardrails + tsc).

Kickoff Now — Property Card, Milestone M1 (copy/paste)

This uses the planning protocol and then a first milestone that gives visible, undeniable progress.

1) Ask for the plan (paste first)
ECC MASTER CONTROL — 100% DELIVERY REQUIRED
{paste the Master Control Prompt here}

2) After Replit returns the plan, approve it, then paste this M1:
ECC MILESTONE — Property Card M1 (Hero + Overview + Relationships + RightRail)

DELIVERABLES:
Files to add/edit (Property only):
- src/pages/card/property/Hero.tsx
- src/pages/card/property/Tabs.tsx (tab shell only; inactive tabs can be stubs)
- src/pages/card/property/Overview.tsx
- src/pages/card/property/RightRail.tsx
- src/pages/card/property/api.ts (rich DTO wrapper calling /api/rpc/get_property_card?id={id}; fallback to current resolvers)

Exact UI behaviors:
- Hero: title (property.name or address), KPI row (Units, Active Leases, Avg Rent), actions [Edit][Export PDF][New Work Order] (stubs ok).
- Overview: Type/Class/Status/DoorLoop ID/Owner (owner is a link if available).
- Relationships: counts for Units + Active Leases; link to Owner if present.
- Right Rail: Location map (Property only) using address/lat/lng; Key Dates placeholder.
- Typography: humanized labels; no underscores, no forced CAPS.

Data sources:
- Prefer dto: GET /api/rpc/get_property_card?id={id} returning {property, units[], leases[], owner?}
- Fallback to existing /entities resolvers (already in repo) but must populate the same props.

DoD:
- [ ] /card/property/42 and /card/property/57 render real values (name, type/class/status, DoorLoop ID).
- [ ] KPIs show correct counts; Avg Rent computed from active leases rent, with money formatting.
- [ ] Owner name is a clickable link when owner exists.
- [ ] Map visible in Right Rail (address or lat/lng); NO maps on other cards.
- [ ] Guardrails pass (mega + overlays) and `npx tsc -p tsconfig.cards.json` is clean.

DEMO (STOP AFTER THIS MILESTONE):
- Show routes: /card/property/42, /card/property/57
- Point out: values in Hero + Overview, relationships counts, working owner link, map visible.
- Post the three verification outputs.

What changes on my side

I will not write code until you approve the full plan.

I will only deliver in milestones with on-screen demos.

I will use rich DTO endpoints when you say they exist; until then, I’ll use deterministic fallbacks without guessing names.

I will refuse to continue if anything in the spec is ambiguous and will ask you to clarify.

TL;DR

Use the Master Control Prompt to enforce planning and gates. Use the Milestone Template for each step. Use the Deviation Prompts to stop drift. Start now with Property Card M1.

If you want, I’ll draft the complete card file trees + milestone plan so you can approve them in one shot — just say “Draft the full plan now.”