Replit — Genesis Pack v3 (Graph live hooks + Activity fix)
set -e
git checkout -b feat/genesis-pack-v3 || git checkout feat/genesis-pack-v3

############################################
# 0) OPTIONAL SECRETS (no code edits here)
############################################
# Add these in Replit Secrets when ready (server will no-op if missing):
#   M365_TENANT_ID
#   M365_CLIENT_ID
#   M365_CLIENT_SECRET
#   M365_PLANNER_PLAN_ID           # required for real Planner create
#   M365_PLANNER_BUCKET_ID         # optional (defaults to first bucket)
#   M365_TEAMS_DEFAULT_TEAM_ID     # for Teams message notifications
#   M365_TEAMS_DEFAULT_CHANNEL_ID  # for Teams message notifications
#   M365_SHAREPOINT_SITE_ID        # to list SharePoint drive root files

############################################
# 1) SERVER — Microsoft Graph helper
############################################
mkdir -p server/lib/m365
cat > server/lib/m365/graph.ts <<'TS'
import fetch from "node-fetch";

const TENANT = process.env.M365_TENANT_ID || process.env.M365_AUTH_TENANT || "";
const CLIENT_ID = process.env.M365_CLIENT_ID || "";
const CLIENT_SECRET = process.env.M365_CLIENT_SECRET || "";

async function getToken(): Promise<string|null> {
  if (!TENANT || !CLIENT_ID || !CLIENT_SECRET) return null;
  const body = new URLSearchParams({
    client_id: CLIENT_ID,
    client_secret: CLIENT_SECRET,
    scope: "https://graph.microsoft.com/.default",
    grant_type: "client_credentials",
  });
  const res = await fetch(`https://login.microsoftonline.com/${TENANT}/oauth2/v2.0/token`, {
    method: "POST",
    headers: { "Content-Type": "application/x-www-form-urlencoded" },
    body,
  });
  if (!res.ok) return null;
  const j = await res.json().catch(()=>null);
  return j?.access_token || null;
}

export async function graphFetch(path: string, init: any = {}, base = "https://graph.microsoft.com/v1.0"){
  const token = await getToken();
  if (!token) throw new Error("GRAPH_NOT_CONFIGURED");
  const res = await fetch(`${base}${path}`, {
    ...init,
    headers: {
      "Authorization": `Bearer ${token}`,
      "Content-Type": "application/json",
      ...(init.headers || {})
    }
  });
  if (!res.ok) {
    const t = await res.text().catch(()=> "");
    throw new Error(`GRAPH_HTTP_${res.status}:${t}`);
  }
  return res.json();
}

// ---- Planner
export async function createPlannerTask(params: {
  title: string;
  notes?: string;
  dueDateTime?: string; // ISO string
  planId: string;
  bucketId?: string;
}){
  const { title, notes, dueDateTime, planId } = params;
  if (!planId) throw new Error("PLANNER_PLAN_ID_REQUIRED");
  let bucketId = params.bucketId;
  if (!bucketId) {
    // fetch buckets and pick the first
    const b = await graphFetch(`/planner/plans/${planId}/buckets`, { method: "GET" });
    bucketId = b?.value?.[0]?.id;
  }
  const payload: any = { planId, bucketId, title };
  if (dueDateTime) payload.dueDateTime = dueDateTime;
  const task = await graphFetch(`/planner/tasks`, { method: "POST", body: JSON.stringify(payload) });
  if (notes) {
    // add details (notes) — requires separate call
    await graphFetch(`/planner/tasks/${task.id}/details`, {
      method: "PATCH",
      headers: { "If-Match": task["@odata.etag"] || "*" },
      body: JSON.stringify({ description: notes })
    });
  }
  return task;
}

// ---- Teams channel message
export async function postTeamsChannelMessage(teamId: string, channelId: string, text: string){
  if (!teamId || !channelId) throw new Error("TEAMS_TARGET_REQUIRED");
  const payload = { body: { content: text } };
  return graphFetch(`/teams/${teamId}/channels/${channelId}/messages`, { method: "POST", body: JSON.stringify(payload) });
}

// ---- SharePoint (drive root)
export async function listSharePointRoot(siteId: string){
  if (!siteId) throw new Error("SP_SITE_ID_REQUIRED");
  const j = await graphFetch(`/sites/${siteId}/drive/root/children`, { method: "GET" });
  const items = (j?.value || []).map((x:any)=>({
    id: x.id, name: x.name, webUrl: x.webUrl, is_file: x.file ? true : false
  }));
  return items;
}
TS

############################################
# 2) SERVER — Use Graph in our routes (Planner, SP, Teams)
############################################
applypatch <<'PATCH'
*** Begin Patch
*** Update File: server/routes/m365.ts
@@
-import express from "express";
-import { recordAudit } from "../lib/audit";
-import { emitBus } from "../lib/bus";
+import express from "express";
+import { recordAudit } from "../lib/audit";
+import { emitBus } from "../lib/bus";
+import { createPlannerTask } from "../lib/m365/graph";
 
 const router = express.Router();
 
 router.post("/api/m365/planner/tasks", async (req, res) => {
   // Minimal payload: { title, notes, entity_type, entity_id, due_date }
   const { title, notes, entity_type, entity_id, due_date } = req.body || {};
   // For now: record audit + optional bus; later: call Graph if env is present.
-  await recordAudit({
+  await recordAudit({
     event_type: "M365_PLANNER_TASK_CREATED",
     label: "M365_ACTION",
     ref_table: entity_type || null,
     ref_id: entity_id || null,
     payload: { title, notes, due_date }
   });
   await emitBus("m365.planner.task_created", { title, notes, entity_type, entity_id, due_date });
-  return res.json({ ok: true });
+  // Try Graph if configured
+  try{
+    const planId = process.env.M365_PLANNER_PLAN_ID || "";
+    const bucketId = process.env.M365_PLANNER_BUCKET_ID || "";
+    if (planId) {
+      const task = await createPlannerTask({
+        title: title || "ECC Task",
+        notes,
+        dueDateTime: due_date || undefined,
+        planId,
+        bucketId: bucketId || undefined
+      });
+      return res.json({ ok: true, graph: { taskId: task?.id } });
+    }
+  }catch(e:any){
+    // Graceful: still ok, we already audited; include hint
+    return res.json({ ok: true, note: "Planner not fully configured for Graph call", error: String(e.message||e) });
+  }
+  return res.json({ ok: true, note: "Planner plan not configured; audit-only" });
 });
 
 export default router;
*** End Patch
PATCH

applypatch <<'PATCH'
*** Begin Patch
*** Update File: server/routes/files.ts
@@
-import express from "express";
-import { dropboxListFolder, dropboxGetTempLink, dropboxSearch } from "../lib/integrations/dropbox";
+import express from "express";
+import { dropboxListFolder, dropboxGetTempLink, dropboxSearch } from "../lib/integrations/dropbox";
+import { listSharePointRoot } from "../lib/m365/graph";
@@
 // ---- SharePoint Files (graceful placeholder — future Graph integration)
 router.get("/api/files/sharepoint/list", async (_req, res) => {
-  // Later: query Graph by site/drive; today we no-op gracefully.
-  return res.json({ ok: true, items: [] });
+  try{
+    const siteId = process.env.M365_SHAREPOINT_SITE_ID || "";
+    if (!siteId) return res.json({ ok: true, items: [] });
+    const items = await listSharePointRoot(siteId);
+    return res.json({ ok: true, items: items.map(i=>({ id:i.id, name:i.name, href:i.webUrl, source: "SP" })) });
+  }catch(e:any){
+    if (String(e.message||"").includes("GRAPH_NOT_CONFIGURED")) return res.status(501).send("SharePoint not configured");
+    return res.status(500).send(String(e.message||e));
+  }
 });
 
 export default router;
*** End Patch
PATCH

############################################
# 3) SERVER — Teams notifications on transfer state changes
############################################
applypatch <<'PATCH'
*** Begin Patch
*** Update File: server/routes/ownerTransfer.ts
@@
-import { emitBus } from "../lib/bus";
+import { emitBus } from "../lib/bus";
+import { postTeamsChannelMessage } from "../lib/m365/graph";
+
+async function maybeTeamsNotify(text: string){
+  try{
+    const team = process.env.M365_TEAMS_DEFAULT_TEAM_ID || "";
+    const channel = process.env.M365_TEAMS_DEFAULT_CHANNEL_ID || "";
+    if (team && channel) await postTeamsChannelMessage(team, channel, text);
+  }catch(_e){}
+}
@@
   const transfer = await initiateTransfer({ old_owner_id, new_owner_id, property_ids, effective_date, notes, user });
   await emitBus("owner_transfer.initiated", { id: transfer.id, old_owner_id, new_owner_id, effective_date, property_ids });
+  await maybeTeamsNotify(`ECC: Owner transfer #${transfer.id} initiated (old:${old_owner_id} → new:${new_owner_id}, props:${(property_ids||[]).length}).`);
   return res.json({ ok: true, id: transfer.id, transfer });
 });
@@
   const t = await approveAccounting(transfer_id);
   await emitBus("owner_transfer.accounting_approved", { id: transfer_id });
+  await maybeTeamsNotify(`ECC: Transfer #${transfer_id} accounting approved.`);
   return res.json({ ok: true, transfer: t });
 });
@@
   const t = await authorizeTransfer(transfer_id);
   await emitBus("owner_transfer.authorized", { id: transfer_id });
+  await maybeTeamsNotify(`ECC: Transfer #${transfer_id} authorized.`);
   return res.json({ ok: true, transfer: t });
 });
@@
   const t = await executeTransfer(transfer_id);
   await emitBus("owner_transfer.executed", { id: transfer_id });
+  await maybeTeamsNotify(`ECC: Transfer #${transfer_id} executed.`);
   return res.json({ ok: true, transfer: t });
 });
*** End Patch
PATCH

############################################
# 4) FRONTEND — CardEnhancer: fix table pluralization
############################################
applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/features/_enhancer/CardEnhancer.tsx
@@
-  return (
+  const tableMap: Record<string,string> = { property:"properties", unit:"units", lease:"leases", tenant:"tenants" };
+  const refTable = match ? (tableMap[match.entity] || (match.entity + "s")) : "";
+  return (
@@
-            <ActivityFeed table={match.entity + "s"} refId={String(match.id)} />
+            <ActivityFeed table={refTable} refId={String(match.id)} />
           </div>
         </div>
       </div>
     </div>
   );
*** End Patch
PATCH

git add -A
git commit -m "feat(graph): Planner real create, SharePoint listing, Teams notifications; fix(Activity): correct table mapping on card enhancer" || true

What changed (and how to verify)

Activity feed fix

Now uses correct tables: properties/units/leases/tenants.

Check any /card/property/:id etc. and you should see events (when present) filter correctly.

Planner (real)

Set M365_TENANT_ID, M365_CLIENT_ID, M365_CLIENT_SECRET, and M365_PLANNER_PLAN_ID (bucket optional).

From any Owner/Tenant card → New Task → creates an actual Planner task (returns graph.taskId).

If not configured, it still audits (no break).

SharePoint files

Set M365_SHAREPOINT_SITE_ID.

Files tab now lists SharePoint drive root items with Open (webUrl) links.

If not configured, it stays empty (cleanly).

Teams notifications

Set M365_TEAMS_DEFAULT_TEAM_ID and M365_TEAMS_DEFAULT_CHANNEL_ID.

Approve/Authorize/Execute a transfer → message lands in that channel.

Tiny smoke script for Replit

Restart app.

Visit /api/config/integrations (confirm m365, sharepoint, dropbox flags reflect secrets).

Owner/Tenant card → New Task → confirm response shows { ok: true, graph: { taskId: ... } } when configured.

Files tab → see SharePoint entries when site id is set; Dropbox still works as before.

Transfer → approve/authorize/execute → verify Teams message posted (if team/channel ids set).

/card/property/:id → Activity feed filters work; no “propertys” typo anymore.