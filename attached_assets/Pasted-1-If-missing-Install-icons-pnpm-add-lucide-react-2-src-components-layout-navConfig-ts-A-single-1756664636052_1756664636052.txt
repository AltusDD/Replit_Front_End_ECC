1) (If missing) Install icons
pnpm add lucide-react

2) src/components/layout/navConfig.ts

A single source of truth for the nav structureâ€”parents, icons, and children.

// src/components/layout/navConfig.ts
import type { LucideIcon } from "lucide-react";
import {
  Home,
  LayoutDashboard,
  Building2,
  Boxes,
  FileText,
  Users2,
  User,
  Gauge,
  AlertCircle,
  HomeIcon,
  Calculator,
  FileSignature,
  Wrench,
  Megaphone,
  Settings,
} from "lucide-react";

export type NavItem = {
  label: string;
  href: string;
  icon?: LucideIcon;
};

export type NavSection = {
  id: string;
  title: string;
  icon?: LucideIcon;
  items: NavItem[];
};

export const NAV_SECTIONS: NavSection[] = [
  {
    id: "dashboard",
    title: "Dashboard",
    icon: LayoutDashboard,
    items: [
      { label: "Home", href: "/dashboard", icon: Home },
    ],
  },
  {
    id: "portfolio-v3",
    title: "Portfolio v3",
    icon: Building2,
    items: [
      { label: "Properties", href: "/portfolio/properties", icon: Building2 },
      { label: "Units", href: "/portfolio/units", icon: Boxes },
      { label: "Leases", href: "/portfolio/leases", icon: FileText },
      { label: "Tenants", href: "/portfolio/tenants", icon: Users2 },
      { label: "Owners", href: "/portfolio/owners", icon: User },
    ],
  },
  {
    id: "cards",
    title: "Cards",
    icon: Gauge,
    items: [
      { label: "Overview", href: "/cards/overview", icon: Gauge },
      { label: "Delinquencies", href: "/cards/delinquencies", icon: AlertCircle },
      { label: "Vacancy", href: "/cards/vacancy", icon: HomeIcon },
    ],
  },
  {
    id: "operations",
    title: "Operations",
    icon: Settings,
    items: [
      { label: "Accounting", href: "/ops/accounting", icon: Calculator },
      { label: "Leasing", href: "/ops/leasing", icon: FileSignature },
      { label: "Maintenance", href: "/ops/maintenance", icon: Wrench },
      { label: "Marketing", href: "/ops/marketing", icon: Megaphone },
    ],
  },
];

3) src/components/Sidebar.tsx

Fully functional collapse + hover flyout, Altus logo, a11y labels, and active link styles. Uses the NAV_SECTIONS above.

// src/components/Sidebar.tsx
import { useEffect, useMemo, useState } from "react";
import { NAV_SECTIONS } from "./layout/navConfig";
import { Pin, PinOff } from "lucide-react";
import { useLocation } from "react-router-dom";

const STORAGE_KEY = "ecc.sidebar.collapsed";

export default function Sidebar() {
  const location = useLocation();
  const [collapsed, setCollapsed] = useState<boolean>(() => {
    try {
      return localStorage.getItem(STORAGE_KEY) === "1";
    } catch {
      return false;
    }
  });

  useEffect(() => {
    try {
      localStorage.setItem(STORAGE_KEY, collapsed ? "1" : "0");
    } catch {}
  }, [collapsed]);

  const activePath = location.pathname;
  const sections = useMemo(() => NAV_SECTIONS, []);

  return (
    <aside
      className={`ecc-sidebar ${collapsed ? "ecc--collapsed" : ""}`}
      data-ecc="primary"
      aria-label="Primary navigation"
    >
      <div className="ecc-brand">
        <a href="/" className="ecc-brand__link" aria-label="Altus home">
          <img
            className="ecc-brand__logo"
            src="/brand/altus-logo.png"
            alt="Altus"
          />
          {!collapsed && <span className="ecc-brand__text">Altus</span>}
        </a>
      </div>

      <nav className="ecc-nav" role="navigation">
        {sections.map((section) => {
          const ParentIcon = section.icon;
          return (
            <div key={section.id} className="ecc-group" data-group={section.id}>
              <div className="ecc-group__header" title={section.title}>
                {ParentIcon && <ParentIcon className="ecc-group__icon" />}
                {!collapsed && <span className="ecc-group__title">{section.title}</span>}
              </div>

              <ul className="ecc-group__list">
                {section.items.map((item) => {
                  const Icon = item.icon;
                  const isActive =
                    activePath === item.href ||
                    (item.href !== "/" && activePath.startsWith(item.href));
                  return (
                    <li key={item.href} className="ecc-item">
                      <a
                        href={item.href}
                        className={`ecc-link ${isActive ? "is-active" : ""}`}
                        aria-current={isActive ? "page" : undefined}
                        title={collapsed ? item.label : undefined}
                      >
                        {Icon && <Icon className="ecc-link__icon" />}
                        {!collapsed && <span className="ecc-link__label">{item.label}</span>}
                      </a>
                    </li>
                  );
                })}
              </ul>

              {/* Flyout for collapsed state */}
              <div className="ecc-flyout" role="menu" aria-label={section.title}>
                <div className="ecc-flyout__title">{section.title}</div>
                <ul>
                  {section.items.map((item) => {
                    const Icon = item.icon;
                    const isActive =
                      activePath === item.href ||
                      (item.href !== "/" && activePath.startsWith(item.href));
                    return (
                      <li key={item.href}>
                        <a
                          href={item.href}
                          className={`ecc-flyout__link ${isActive ? "is-active" : ""}`}
                          role="menuitem"
                        >
                          {Icon && <Icon className="ecc-flyout__icon" />}
                          <span>{item.label}</span>
                        </a>
                      </li>
                    );
                  })}
                </ul>
              </div>
            </div>
          );
        })}
      </nav>

      <button
        className="ecc-pin"
        onClick={() => setCollapsed((v) => !v)}
        aria-pressed={collapsed}
        aria-label={collapsed ? "Pin sidebar (expand)" : "Unpin sidebar (collapse)"}
      >
        {collapsed ? <Pin className="ecc-pin__icon" /> : <PinOff className="ecc-pin__icon" />}
        {!collapsed && <span className="ecc-pin__text">{collapsed ? "Pin" : "Unpin"}</span>}
      </button>
    </aside>
  );
}

4) src/styles/_ecc-override.css

Finish the look: dark theme, spacing, borders, active/hover, plus the flyout behavior on hover when collapsed.

/* src/styles/_ecc-override.css */

/* Theme tokens */
:root {
  --ecc-bg: #0e1014;
  --ecc-panel: #151922;
  --ecc-border: #262c36;
  --ecc-text: #e7ecf6;
  --ecc-muted: #9aa6b2;
  --ecc-accent: #ffd166; /* golden accent */
  --ecc-link-hl: rgba(255, 209, 102, 0.18);

  --ecc-sidebar-w: 288px;
  --ecc-sidebar-w-collapsed: 64px;
  --ecc-radius: 14px;
  --ecc-pad: 14px;
  --ecc-gap: 10px;
}

/* Shell layout helpers (if your Layout already handles this, these are harmless) */
.ecc-shell {
  display: grid;
  grid-template-columns: var(--ecc-sidebar-w) 1fr;
  min-height: 100vh;
  background: var(--ecc-bg);
}
.ecc-sidebar.ecc--collapsed ~ * {
  grid-column: 2 / -1;
}

/* Sidebar core */
.ecc-sidebar {
  position: sticky;
  top: 0;
  align-self: start;
  width: var(--ecc-sidebar-w);
  height: 100vh;
  background: linear-gradient(180deg, #0e1014, #0e1014);
  border-right: 1px solid var(--ecc-border);
  display: flex;
  flex-direction: column;
  gap: var(--ecc-gap);
  z-index: 30;
}
.ecc-sidebar.ecc--collapsed {
  width: var(--ecc-sidebar-w-collapsed);
}

/* Brand */
.ecc-brand {
  display: flex;
  align-items: center;
  height: 64px;
  padding: 0 var(--ecc-pad);
}
.ecc-brand__link {
  display: flex;
  align-items: center;
  gap: 10px;
  color: var(--ecc-text);
  text-decoration: none;
}
.ecc-brand__logo {
  width: 28px;
  height: 28px;
  object-fit: contain;
  filter: drop-shadow(0 0 0 rgba(0,0,0,0.0));
}
.ecc-brand__text {
  font-weight: 700;
  letter-spacing: .2px;
}

/* Groups */
.ecc-nav {
  overflow-y: auto;
  padding: 0 var(--ecc-pad) var(--ecc-pad);
}
.ecc-group {
  position: relative;
  border-radius: var(--ecc-radius);
  background: #12151c;
  padding: var(--ecc-pad);
  margin-bottom: var(--ecc-gap);
  border: 1px solid var(--ecc-border);
}
.ecc-group__header {
  display: flex;
  align-items: center;
  gap: 10px;
  color: var(--ecc-muted);
  text-transform: uppercase;
  font-size: 12px;
  letter-spacing: .8px;
  margin-bottom: 8px;
}
.ecc-group__icon {
  width: 16px;
  height: 16px;
  opacity: .9;
}

/* Links */
.ecc-group__list {
  list-style: none;
  padding: 0;
  margin: 0;
  display: grid;
  gap: 6px;
}
.ecc-link {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 10px 12px;
  border-radius: 12px;
  color: var(--ecc-text);
  text-decoration: none;
  border: 1px solid transparent;
  background: transparent;
}
.ecc-link:hover {
  background: var(--ecc-link-hl);
  border-color: var(--ecc-border);
}
.ecc-link.is-active {
  background: rgba(255, 209, 102, 0.12);
  border-color: var(--ecc-accent);
  box-shadow: inset 0 0 0 1px var(--ecc-accent);
}
.ecc-link__icon {
  width: 18px;
  height: 18px;
  color: var(--ecc-muted);
}

/* Collapse: icon-only, headings hidden */
.ecc-sidebar.ecc--collapsed .ecc-group {
  padding: 8px;
}
.ecc-sidebar.ecc--collapsed .ecc-group__title,
.ecc-sidebar.ecc--collapsed .ecc-link__label {
  display: none;
}
.ecc-sidebar.ecc--collapsed .ecc-link {
  justify-content: center;
  padding: 10px;
}

/* Flyout for collapsed mode */
.ecc-flyout {
  display: none;
  position: absolute;
  top: 8px;
  left: calc(100% + 10px);
  min-width: 220px;
  background: var(--ecc-panel);
  border: 1px solid var(--ecc-border);
  border-radius: 12px;
  padding: 10px;
  box-shadow: 0 10px 30px rgba(0,0,0,.35);
}
.ecc-flyout__title {
  color: var(--ecc-muted);
  font-size: 12px;
  text-transform: uppercase;
  letter-spacing: .8px;
  margin-bottom: 8px;
}
.ecc-flyout ul {
  list-style: none;
  margin: 0;
  padding: 0;
  display: grid;
  gap: 6px;
}
.ecc-flyout__link {
  display: flex;
  align-items: center;
  gap: 10px;
  text-decoration: none;
  color: var(--ecc-text);
  padding: 8px 10px;
  border-radius: 10px;
}
.ecc-flyout__link:hover { background: var(--ecc-link-hl); }
.ecc-flyout__link.is-active {
  background: rgba(255, 209, 102, 0.12);
  box-shadow: inset 0 0 0 1px var(--ecc-accent);
}
.ecc-flyout__icon { width: 16px; height: 16px; color: var(--ecc-muted); }

/* Reveal the flyout when collapsed and hovering a group */
.ecc-sidebar.ecc--collapsed .ecc-group:hover .ecc-flyout { display: block; }

/* Pin button */
.ecc-pin {
  margin: auto var(--ecc-pad) var(--ecc-pad);
  display: inline-flex;
  align-items: center;
  gap: 8px;
  padding: 8px 10px;
  border-radius: 12px;
  border: 1px solid var(--ecc-border);
  background: #12151c;
  color: var(--ecc-text);
  cursor: pointer;
}
.ecc-pin:hover { background: var(--ecc-link-hl); }
.ecc-pin__icon { width: 16px; height: 16px; }

5) (Only if needed) Layout hook-up

If your main layout file doesnâ€™t already place the sidebar and content in a grid, wrap your app with a shell class:

// in src/components/layout/Layout.tsx (only if needed)
export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <div className="ecc-shell">
      {/* @ts-ignore â€“ your projectâ€™s Sidebar import path */}
      <Sidebar />
      <main>{children}</main>
    </div>
  );
}

QA checklist

Logo shows at top (served from /brand/altus-logo.png).

Parents have icons and headings; children show with icons and correct hrefs.

Collapse works; hover each parent shows a flyout panel with the children.

Active route gets the gold accent border and inset glow.

State persists (collapsed vs expanded) after refresh.

If anything still looks off after pasting this in, tell me which item and Iâ€™ll ship a micro-patch.