What you’ll do (3 quick edits)

Add helper: src/lib/ecc-api.ts

Add page: src/pages/DataHub.tsx

Register route in src/App.tsx (or wherever your router lives)

Also make sure Replit Secrets contain:

VITE_API_BASE_URL = https://empirecommandcenter-altus-staging.azurewebsites.net

VITE_ADMIN_SYNC_TOKEN = <your current token> (you already printed it)

1) Create src/lib/ecc-api.ts
// src/lib/ecc-api.ts
const BASE = (import.meta.env.VITE_API_BASE_URL || "").replace(/\/$/, "");
const ADMIN = import.meta.env.VITE_ADMIN_SYNC_TOKEN || "";

export type Query = Record<string, string | number | boolean | null | undefined>;

function q(params?: Query) {
  if (!params) return "";
  const s = new URLSearchParams();
  for (const [k, v] of Object.entries(params)) {
    if (v === undefined || v === null || v === "") continue;
    s.append(k, String(v));
  }
  const str = s.toString();
  return str ? `?${str}` : "";
}

export async function apiGet<T = unknown>(path: string, params?: Query) {
  const res = await fetch(`${BASE}${path}${q(params)}`);
  if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
  if (res.status === 204) return null as T;
  return (await res.json()) as T;
}

export async function apiPost<T = unknown>(path: string, body?: any, admin = false) {
  const headers: Record<string, string> = { "Content-Type": "application/json" };
  if (admin && ADMIN) headers["x-admin-token"] = ADMIN;
  const res = await fetch(`${BASE}${path}`, {
    method: "POST",
    headers,
    body: body ? JSON.stringify(body) : undefined,
  });
  if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
  return (await res.json()) as T;
}

// Convenience wrappers for entities
export const Entities = {
  owners:   (params?: Query) => apiGet<any[]>("/api/entities/owners",   params),
  tenants:  (params?: Query) => apiGet<any[]>("/api/entities/tenants",  params),
  leases:   (params?: Query) => apiGet<any[]>("/api/entities/leases",   params),
  units:    (params?: Query) => apiGet<any[]>("/api/entities/units",    params),
  properties:(params?: Query)=> apiGet<any[]>("/api/entities/properties",params),
};

// Owners extras
export const Owners = {
  search: (qstr: string) => apiGet<any>("/api/owners/search", { q: qstr }),
  transferContext: (sourceOwnerId: string|number) =>
    apiGet<any>("/api/owners/transfercontext", { sourceOwnerId }),
  initiateTransfer: () => apiPost<{ transferId: string }>("/api/owners/initiatetransfer", { note: "from UI" }),
  approve:   (transferId: string) => apiPost("/api/owners/approvetransfer",   { transferId }, true),
  authorize: (transferId: string) => apiPost("/api/owners/authorizetransfer", { transferId }, true),
  execute:   (transferId: string) => apiPost("/api/owners/executetransfer",   { transferId }, true),
};

2) Create src/pages/DataHub.tsx
// src/pages/DataHub.tsx
import { useEffect, useMemo, useState } from "react";
import { Entities, Owners } from "../lib/ecc-api";

type EntityKey = "owners" | "tenants" | "leases" | "units" | "properties";

function useFetch<T>(fn: () => Promise<T>, deps: any[] = []) {
  const [data, setData] = useState<T | null>(null);
  const [err, setErr] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);
  useEffect(() => {
    let alive = true;
    setLoading(true);
    setErr(null);
    fn()
      .then((d) => alive && setData(d))
      .catch((e) => alive && setErr(String(e)))
      .finally(() => alive && setLoading(false));
    return () => { alive = false; };
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, deps);
  return { data, err, loading };
}

function Table({ rows }: { rows: any[] }) {
  const cols = useMemo(() => {
    if (!rows?.length) return [];
    // union of keys for a simple explorer table
    const set = new Set<string>();
    rows.forEach((r) => Object.keys(r || {}).forEach((k) => set.add(k)));
    return Array.from(set);
  }, [rows]);
  if (!rows?.length) return <div className="text-sm text-gray-500">No rows.</div>;
  return (
    <div className="overflow-auto rounded-xl border border-gray-200">
      <table className="min-w-full text-sm">
        <thead className="bg-gray-50 sticky top-0">
          <tr>{cols.map((c) => <th key={c} className="text-left px-3 py-2 font-medium">{c}</th>)}</tr>
        </thead>
        <tbody>
          {rows.map((r, i) => (
            <tr key={i} className="odd:bg-white even:bg-gray-50">
              {cols.map((c) => (
                <td key={c} className="px-3 py-2 align-top">
                  <pre className="whitespace-pre-wrap break-words text-xs">{JSON.stringify(r?.[c] ?? null)}</pre>
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default function DataHub() {
  const [entity, setEntity] = useState<EntityKey>("owners");
  const [limit, setLimit]   = useState<number>(25);

  const fetcher = () => {
    const params = { order: "id.desc", limit };
    switch (entity) {
      case "owners":     return Entities.owners(params);
      case "tenants":    return Entities.tenants(params);
      case "leases":     return Entities.leases({ order: "id.desc", limit, select: "doorloop_id,property_id,unit_id,primary_tenant_id,rent_cents,status,start_date,end_date" });
      case "units":      return Entities.units(params);
      case "properties": return Entities.properties(params);
    }
  };

  const { data: rows, err, loading } = useFetch<any[]>(fetcher, [entity, limit]);

  // Search + Transfer context + Admin flow
  const [searchQ, setSearchQ] = useState("");
  const [searchRes, setSearchRes] = useState<any>(null);
  const [sourceOwnerId, setSourceOwnerId] = useState("");
  const [context, setContext] = useState<any>(null);
  const [transferId, setTransferId] = useState<string>("");

  const doSearch = async () => setSearchRes(await Owners.search(searchQ));
  const doContext = async () => setContext(await Owners.transferContext(sourceOwnerId));
  const doInitiate = async () => {
    const res = await Owners.initiateTransfer();
    setTransferId(res.transferId);
  };
  const doApprove = async () => setTransferId(String((await Owners.approve(transferId))?.transferId || transferId));
  const doAuthorize = async () => setTransferId(String((await Owners.authorize(transferId))?.transferId || transferId));
  const doExecute = async () => setTransferId(String((await Owners.execute(transferId))?.transferId || transferId));

  return (
    <div className="max-w-7xl mx-auto p-6 space-y-8">
      <h1 className="text-2xl font-semibold">ECC Data Hub</h1>
      <p className="text-gray-600">Live Azure Functions integration. Explore entities, search owners, view transfer context, and run the owner transfer workflow.</p>

      {/* Entities explorer */}
      <div className="space-y-3">
        <div className="flex items-center gap-3">
          <label className="text-sm">Entity:</label>
          <select className="border rounded-md px-2 py-1"
                  value={entity} onChange={(e)=>setEntity(e.target.value as EntityKey)}>
            <option value="owners">owners</option>
            <option value="tenants">tenants</option>
            <option value="leases">leases</option>
            <option value="units">units</option>
            <option value="properties">properties</option>
          </select>
          <label className="text-sm ml-4">Limit:</label>
          <input className="border rounded-md px-2 py-1 w-24" type="number" min={1} max={200}
                 value={limit} onChange={(e)=>setLimit(parseInt(e.target.value||"25"))}/>
          {loading && <span className="text-sm text-gray-500">loading…</span>}
          {err && <span className="text-sm text-red-600">{err}</span>}
        </div>
        <Table rows={rows || []} />
      </div>

      {/* Owner Search */}
      <div className="space-y-2">
        <h2 className="text-lg font-semibold">Owners Search</h2>
        <div className="flex gap-2">
          <input className="border rounded-md px-2 py-1 flex-1" placeholder="search owners (e.g., Jane)"
                 value={searchQ} onChange={(e)=>setSearchQ(e.target.value)} />
          <button className="rounded-lg px-3 py-1 bg-black text-white" onClick={doSearch}>Search</button>
        </div>
        {searchRes && <Table rows={Array.isArray(searchRes?.results) ? searchRes.results : [searchRes]} />}
      </div>

      {/* Transfer Context */}
      <div className="space-y-2">
        <h2 className="text-lg font-semibold">Transfer Context</h2>
        <div className="flex gap-2">
          <input className="border rounded-md px-2 py-1" placeholder="sourceOwnerId"
                 value={sourceOwnerId} onChange={(e)=>setSourceOwnerId(e.target.value)} />
          <button className="rounded-lg px-3 py-1 bg-black text-white" onClick={doContext}>Load</button>
        </div>
        {context && <Table rows={[context]} />}
      </div>

      {/* Transfer Flow */}
      <div className="space-y-2">
        <h2 className="text-lg font-semibold">Owner Transfer Flow</h2>
        <div className="flex flex-wrap items-center gap-2">
          <button className="rounded-lg px-3 py-1 bg-gray-800 text-white" onClick={doInitiate}>1) initiate</button>
          <button className="rounded-lg px-3 py-1 bg-gray-800 text-white disabled:opacity-50" disabled={!transferId} onClick={doApprove}>2) approve</button>
          <button className="rounded-lg px-3 py-1 bg-gray-800 text-white disabled:opacity-50" disabled={!transferId} onClick={doAuthorize}>3) authorize</button>
          <button className="rounded-lg px-3 py-1 bg-gray-800 text-white disabled:opacity-50" disabled={!transferId} onClick={doExecute}>4) execute</button>
          <span className="text-sm text-gray-600">transferId: <code>{transferId || "(not started)"}</code></span>
        </div>
      </div>
    </div>
  );
}

3) Add a route to your router (src/App.tsx)

Add one line to your routes so you can visit /data:

// src/App.tsx (only the relevant snippet)
import { BrowserRouter, Routes, Route } from "react-router-dom";
import DataHub from "./pages/DataHub";

// …
<BrowserRouter>
  <Routes>
    {/* …your existing routes… */}
    <Route path="/data" element={<DataHub />} />
  </Routes>
</BrowserRouter>


Run your frontend and open /data. You’ll see:

Entities: owners, tenants, leases, units, properties (tables refresh live).

Search: live /api/owners/search?q=….

Transfer Context: live /api/owners/transfercontext?sourceOwnerId=….

Admin Flow: initiate → approve → authorize → execute using your token in VITE_ADMIN_SYNC_TOKEN.

Missing data in Owners/Tenants (emails/phones) is expected until you load more JSON into emails_json/phones_json. We already gave you the backfill that derives primary_* once those JSON fields exist. Your leases are live; the primary_tenant_id will fill in as you link tenants (we included a backfill helper for that too).

If anything on /data doesn’t render, tell me which panel and I’ll give you the exact paste-in fix.