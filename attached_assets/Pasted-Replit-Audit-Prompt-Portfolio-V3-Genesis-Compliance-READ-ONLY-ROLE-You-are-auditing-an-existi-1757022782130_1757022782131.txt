Replit Audit Prompt — “Portfolio V3 Genesis Compliance (READ-ONLY)”

ROLE
You are auditing an existing React + TypeScript + Vite project (Empire Command Center). Your job is to analyze, not modify code and produce a precise report on the five Portfolio V3 pages (Properties, Units, Leases, Tenants, Owners).

HARD GUARDRAILS (do not violate):

✅ READ-ONLY. Do not change, format, or “auto-fix” any file.

✅ Do not install packages, change config, or run migrations.

✅ If you must run the dev server to inspect runtime shapes, do so without committing any code and do not save temporary changes.

✅ Your output is a Markdown report and a JSON summary only.

Scope & where to look

Primary files (do not edit; only inspect):

src/pages/portfolio/properties/index.tsx

src/pages/portfolio/units/index.tsx

src/pages/portfolio/leases/index.tsx

src/pages/portfolio/tenants/index.tsx

src/pages/portfolio/owners/index.tsx

src/pages/portfolio/columns.tsx (all map<Property|Unit|Lease|Tenant|Owner> and *_COLUMNS)

src/components/DataTable.tsx (public API: props like columns, rows, rowHref, onRowDoubleClick, rowActions, filters, pagination)

src/utils/format.ts (ensure exports: money, percent, shortDate, boolBadge and helpers)

Any features/*/useCollection* or features/data/useCollection* hooks used by these pages.

Branding/theming must remain untouched; just note any drift.

What to verify (per page)

For each of the five pages, confirm and report:

Columns present vs. required, and their data paths in the mapper.

Mark columns as ✅ correct, ❌ missing, or ➕ extra.

Filter & sort types per column (text, select, number range) and numeric alignment (right).

Special renderers in use:

Properties: OCCUPANCY uses a progress bar; ACTIVE uses a badge; ZIP present.

Units: STATUS badge; BEDS/BATHS/SQFT numeric; MARKET RENT money.

Leases: TENANT(S) bold; STATUS badge; START/END dates; RENT money.

Tenants: TYPE badge (primary/secondary/prospect); BALANCE money (red if negative).

Owners: COMPANY bold; EMAIL, PHONE, ACTIVE badge; no giant “properties list” column.

Row interactions: Double-click behavior via rowHref or onRowDoubleClick; presence of rowActions menu (even if placeholder).

Pagination selector exists at bottom with options 25, 50, 100, 150, 200.

KPI cards show counts derived from the same dataset the table renders (not hardcoded).

Theme adherence: uses existing tokens & classes (no off-brand colors, headers uppercase with tracking, zebra banding, sticky headers, hover state).

If something is ambiguous, trace the mapper function (e.g., mapProperty) and write which object path it reads. If paths don’t exist in the incoming item, flag it.

Expected columns by page (use this as the compliance checklist)

Properties
PROPERTY (bold) | TYPE | CLASS | STATE | CITY | ZIP | UNITS (right) | OCCUPANCY (ProgressBar) | ACTIVE (StatusTag)

Units
PROPERTY | UNIT | BEDS (right) | BATHS (right) | SQFT (right) | STATUS (StatusTag) | MARKET RENT (right, money)

Leases
PROPERTY | UNIT | TENANT(S) (bold) | STATUS (StatusTag) | START (date) | END (date) | RENT (right, money)

Tenants
TENANT | EMAIL | PHONE | PROPERTY | UNIT | TYPE (StatusTag: lease_tenant/prospect_tenant) | BALANCE (right, money; red if < 0)

Owners
COMPANY (bold) | EMAIL | PHONE | ACTIVE (StatusTag)
(❌ No property list column.)

(Optional) Runtime shape probe

If safe, launch dev server, navigate to each page route, and copy one sample row’s JSON (redact PII). Do not modify source; use console inspection only.

Record actual keys for: property address fields (city/state/zip), units (beds/baths/sqft/status/marketRent), leases (tenants[], startDate/endDate/rent/status), tenants (type/role/balance/property/unit), owners (company/email/phone/active).

Note any mismatches vs. mapper functions.

Deliverables

docs/portfolio_v3_audit.md — a well-structured report with:

Executive summary (pass/fail counts per page).

A table per page:

Column	Required	Present	Data Path (from mapper)	Renderer	Filter	Sort	Align	Notes

Row interaction checks.

KPI derivation check.

Theme/visual compliance notes.

Fix Plan: ordered list of concrete edits (file & line ranges), each with a one-line rationale.

Risk log: anything that could break if changed.

docs/portfolio_v3_audit.json — machine-readable summary with this shape:

{
  "pages": {
    "properties": {
      "columns": [
        {"name":"ZIP","required":true,"present":false,"mapperPath":"address.zip","issue":"missing column"}
      ],
      "rowInteraction":{"doubleClick":"onRowDoubleClick","ok":true},
      "kpis":{"source":"properties hook","ok":true}
    }
  },
  "theme": {"drift": false},
  "totals": {"requiredColumns": 0, "missing": 0, "extra": 0}
}


Post the audit’s executive summary back in this chat (top 10 findings + file/line pointers), and include links/paths to the MD and JSON output.

Acceptance criteria

The report identifies every mismatch between required vs. present columns, including exact data paths used by current mappers.

The report confirms double-click behavior & pagination selector options.

The fix plan references specific files and sections (e.g., “src/pages/portfolio/columns.tsx: add ZIP column; map from address.zip with fallback zip”).

No files were modified during audit.

Begin. If you hit a blocker (missing hook, undefined field), document it in the report under “Blockers & Assumptions” and continue with the rest.