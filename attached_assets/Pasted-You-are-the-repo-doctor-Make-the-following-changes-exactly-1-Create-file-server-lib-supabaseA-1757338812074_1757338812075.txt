You are the repo doctor. Make the following changes exactly:

1) Create file: server/lib/supabaseAdmin.ts
-------------------------------------------
import { createClient } from '@supabase/supabase-js';

const url  = process.env.SUPABASE_URL!;
const key  = process.env.SUPABASE_SERVICE_ROLE_KEY!;

export const supabaseAdmin = createClient(url, key, {
  auth: { persistSession: false }
});

2) Create file: server/routes/owners.ts
--------------------------------------
import { Router } from 'express';
import { supabaseAdmin } from '../lib/supabaseAdmin';

export const ownersRouter = Router();

// GET /api/owners/search?q=term
ownersRouter.get('/search', async (req, res) => {
  try {
    const q = String(req.query.q || '').trim();
    let query = supabaseAdmin
      .from('owners')
      .select('id, company_name, first_name, last_name, display_name')
      .order('display_name', { ascending: true })
      .limit(30);

    if (q) {
      query = query.or(
        `display_name.ilike.%${q}%,company_name.ilike.%${q}%,first_name.ilike.%${q}%,last_name.ilike.%${q}%`
      );
    }

    const { data, error } = await query;
    if (error) throw error;

    const owners = (data || []).map(o => ({
      id: o.id,
      label: o.display_name || [o.company_name, o.first_name, o.last_name].filter(Boolean).join(' '),
      company_name: o.company_name,
      first_name: o.first_name,
      last_name: o.last_name
    }));

    res.json({ owners });
  } catch (err:any) {
    res.status(500).json({ error: err.message || 'owners search failed' });
  }
});

// GET /api/owners/:id/summary
ownersRouter.get('/:id/summary', async (req, res) => {
  try {
    const ownerId = Number(req.params.id);

    const { data: owner, error: e1 } = await supabaseAdmin
      .from('owners')
      .select('*')
      .eq('id', ownerId)
      .single();
    if (e1) throw e1;

    const { count: propertyCount, error: e2 } = await supabaseAdmin
      .from('properties')
      .select('*', { count: 'exact', head: true })
      .eq('owner_id', ownerId);
    if (e2) throw e2;

    res.json({ owner, counts: { properties: propertyCount || 0 }});
  } catch (err:any) {
    res.status(500).json({ error: err.message || 'owner summary failed' });
  }
});

// GET /api/owners/:id/properties?limit=200&offset=0
ownersRouter.get('/:id/properties', async (req, res) => {
  try {
    const ownerId = Number(req.params.id);
    const limit  = Math.min(Number(req.query.limit || 200), 400);
    const offset = Math.max(Number(req.query.offset || 0), 0);

    const { data, error, count } = await supabaseAdmin
      .from('properties')
      .select('id,name,city,state,units', { count: 'exact' })
      .eq('owner_id', ownerId)
      .order('name', { ascending: true })
      .range(offset, offset + limit - 1);
    if (error) throw error;

    res.json({ properties: data || [], total: count || 0 });
  } catch (err:any) {
    res.status(500).json({ error: err.message || 'owner properties failed' });
  }
});

3) Wire the router in server/index.ts
-------------------------------------
- Add: import { ownersRouter } from './routes/owners';
- Add: app.use('/api/owners', ownersRouter);

4) Update Owner Card page to only fetch this owner’s properties:
----------------------------------------------------------------
- Find the Owner Card page (search the repo for the string "Owner Card" or the route /card/owner).
- Ensure it calls:
   GET /api/owners/:id/summary for the header info
   GET /api/owners/:id/properties?limit=200 for the properties list
- Ensure it renders ONLY the returned properties, not the entire portfolio.

5) Replace the Transfer Ownership modal with a live-search + property selector:
-------------------------------------------------------------------------------
- Locate the current transfer modal component (search "Transfer Property Ownership" or "Transfer Ownership").
- Replace its content with a component that:
   a) live-searches owners from GET /api/owners/search?q=
   b) shows company names and natural names (first+last) in a single label
   c) fetches this owner’s properties from GET /api/owners/:id/properties
   d) includes checkboxes with "Select all" to choose which properties to transfer
   e) on Next, POSTs to /api/owner-transfer/initiate including:
        { old_owner_id, new_owner_id, effective_date, notes, property_ids: [ ... ] }
- Use the exact code block below as the modal body (Typescript/React):

<CODE>
import React, { useEffect, useMemo, useState } from 'react';
type OwnerLite = { id:number; label:string; company_name?:string|null; first_name?:string|null; last_name?:string|null };
type PropertyLite = { id:number; name:string; city:string|null; state:string|null; units:number|null };
function useDebounced<T>(val:T, ms=250){ const [v,setV]=useState(val); useEffect(()=>{ const t=setTimeout(()=>setV(val),ms); return ()=>clearTimeout(t);},[val,ms]); return v; }

export function TransferOwnershipModal({ ownerId, onClose, onNext }:{
  ownerId:number;
  onNext:(p:{ newOwnerId:number; effectiveDate:string; notes?:string; propertyIds:number[] })=>void;
  onClose:()=>void;
}) {
  const [q, setQ] = useState(''); const dq = useDebounced(q, 300);
  const [owners, setOwners] = useState<OwnerLite[]>([]); const [loadingOwners, setLoadingOwners] = useState(false);
  const [newOwnerId, setNewOwnerId] = useState<number|undefined>(undefined);

  const [propsLoading, setPropsLoading] = useState(false);
  const [ownerProps, setOwnerProps] = useState<PropertyLite[]>([]);
  const [selectedProps, setSelectedProps] = useState<Record<number, boolean>>({});
  const [selectAll, setSelectAll] = useState(true);

  const [effectiveDate, setEffectiveDate] = useState<string>(() => new Date().toISOString().slice(0,10));
  const [notes, setNotes] = useState<string>('');

  useEffect(() => { let keep = true; (async () => {
    setLoadingOwners(true);
    try {
      const r = await fetch(`/api/owners/search?q=${encodeURIComponent(dq)}`);
      const j = await r.json(); if (keep) setOwners(j.owners || []);
    } finally { if (keep) setLoadingOwners(false); }
  })(); return () => { keep = false }; }, [dq]);

  useEffect(() => { let keep = true; (async () => {
    setPropsLoading(true);
    try {
      const r = await fetch(`/api/owners/${ownerId}/properties?limit=500`);
      const j = await r.json(); if (!keep) return;
      const props:PropertyLite[] = j.properties || [];
      setOwnerProps(props);
      const sel:Record<number,boolean> = {}; props.forEach(p => { sel[p.id] = true; });
      setSelectedProps(sel); setSelectAll(true);
    } finally { if (keep) setPropsLoading(false); }
  })(); return () => { keep = false }; }, [ownerId]);

  const selectedIds = useMemo(() => Object.entries(selectedProps).filter(([,v])=>v).map(([k])=>Number(k)), [selectedProps]);
  const toggleAll = (flag:boolean) => { const sel:Record<number,boolean>={}; ownerProps.forEach(p=>{sel[p.id]=flag}); setSelectedProps(sel); setSelectAll(flag); };
  const canContinue = Boolean(newOwnerId) && effectiveDate && selectedIds.length > 0;

  return (
    <div className="ecc-modal">
      <div className="p-4">
        <div className="font-semibold mb-2">Select New Owner</div>
        <input value={q} onChange={e=>setQ(e.target.value)} placeholder="Search owner (company or person)..." className="ecc-input w-full mb-2" />
        <div className="ecc-select w-full mb-4">
          <select value={newOwnerId ?? ''} onChange={e=>setNewOwnerId(e.target.value ? Number(e.target.value) : undefined)} className="w-full bg-transparent">
            <option value="">{loadingOwners ? 'Loading owners...' : 'Select an owner...'}</option>
            {owners.map(o => (<option key={o.id} value={o.id}>{o.label}</option>))}
          </select>
        </div>

        <div className="grid grid-cols-2 gap-4 mb-4">
          <div><div className="font-semibold mb-1">Effective Date</div>
            <input type="date" value={effectiveDate} onChange={e=>setEffectiveDate(e.target.value)} className="ecc-input w-full" />
          </div>
          <div><div className="font-semibold mb-1">Notes</div>
            <textarea value={notes} onChange={e=>setNotes(e.target.value)} rows={2} className="ecc-input w-full" placeholder="Optional notes..." />
          </div>
        </div>

        <div className="font-semibold mb-2">Selected Properties ({selectedIds.length})</div>
        <div className="flex items-center gap-3 mb-3">
          <label className="flex items-center gap-2 cursor-pointer">
            <input type="checkbox" checked={selectAll} onChange={e=>toggleAll(e.target.checked)} />
            <span>Select all</span>
          </label>
        </div>

        <div className="max-h-[280px] overflow-auto rounded border border-[var(--line)] p-2">
          {propsLoading && <div className="text-[var(--text-dim)] p-2">Loading properties…</div>}
          {!propsLoading && ownerProps.length===0 && <div className="text-[var(--text-dim)] p-2">No properties for this owner.</div>}
          {ownerProps.map(p => (
            <label key={p.id} className="flex items-center gap-2 py-1 px-2 hover:bg-[var(--panel-elev)] rounded cursor-pointer">
              <input type="checkbox" checked={!!selectedProps[p.id]} onChange={e=>setSelectedProps(s=>({...s,[p.id]:e.target.checked}))} />
              <span className="flex-1">{p.name}</span>
              <span className="text-xs text-[var(--text-dim)]">{[p.city,p.state].filter(Boolean).join(', ')}</span>
            </label>
          ))}
        </div>

        <div className="mt-6 flex justify-end gap-2">
          <button className="ecc-btn" onClick={onClose}>Close</button>
          <button className={`ecc-btn ecc-btn--primary ${!canContinue ? 'opacity-50 cursor-not-allowed' : ''}`} disabled={!canContinue}
            onClick={()=>onNext({ newOwnerId:newOwnerId!, effectiveDate, notes, propertyIds:selectedIds })}>Next</button>
        </div>
      </div>
    </div>
  );
}
</CODE>

6) Ensure the modal’s “Next” handler posts selected property_ids
-----------------------------------------------------------------
When calling POST /api/owner-transfer/initiate include:
{ old_owner_id, new_owner_id, effective_date, notes, property_ids: [ ... ] }

7) Run typecheck/build and restart the dev server.
