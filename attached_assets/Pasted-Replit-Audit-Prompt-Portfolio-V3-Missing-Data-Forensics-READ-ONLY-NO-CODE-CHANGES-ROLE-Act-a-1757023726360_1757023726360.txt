Replit Audit Prompt — “Portfolio V3 Missing Data Forensics (READ-ONLY, NO CODE CHANGES)”

ROLE
Act as a senior TS/React auditor. Your job is to diagnose why fields are blank/missing on the Portfolio V3 pages (Properties, Units, Leases, Tenants, Owners). Work read-only and produce a precise report with file/line references and concrete causes.

DO NOT modify files, run formatters, or auto-fix anything. We only want findings and suggested diffs.

Scope & Known Symptoms

Owners table: missing company, email, phone; “PROPERTIES” count shown but not granular property list (by design we don’t need huge overflow).

Tenants table: missing key fields; needs differentiation for lease_tenant vs prospect_tenant and support for secondary tenants.

Leases table: some columns appear incomplete.

Units table: missing/blank fields in some rows.

Properties table: missing ZIP code in many rows.

What to Audit (Trace end-to-end)

For each page (5) perform API → shaping → DataTable lineage:

Data source / hook

Locate the hook used to fetch each dataset (e.g., useCollection, useProperties, useUnits, etc.).

Identify the endpoint or mock source feeding it.

Note loading/abort/transform code paths.

List the raw field names present in sample records (first 3 items).

File & line refs.

Row shaping (mappers/adapters)

Find the “mapX” (e.g., mapProperty, mapUnit, mapLease, mapTenant, mapOwner) or equivalent row builder.

For every column shown in the grid, list the exact path it expects (e.g., r.address.zip vs r.zip_code).

Flag mismatches where the mapper builds zip but columns read zipcode (or vice-versa).

Note any fallbacks like getPath(['a.b', 'x.y']); confirm at least one path exists in raw data.

File & line refs.

Column config / renderers

Open the columns config (commonly src/pages/portfolio/columns.tsx).

For each column: record key, header, render (if any), and the exact property read from the row.

Confirm numeric columns right-align and text left-align (just check config flags; don’t change).

Identify columns that always display "—" or empty string and why (e.g., renderer swallowing 0, nullish coalesce, formatter returning "—").

File & line refs.

Formatters / utilities

Inspect src/utils/format.ts (or .tsx) for money, percent, shortDate, boolean/status helpers.

Identify guards that convert falsy values to "—" or hide 0.

Call out any formatter that would mask legitimate 0 or empty strings.

File & line refs.

Filters & defaults

Check DataTable’s default filter state.

Verify that select filters labeled “All” truly mean no filtering, not value='all' which can unintentionally filter out data.

Confirm number range controls aren’t defaulting to min > max or an applied range that excludes everything.

Confirm search input isn’t initialized with a hidden whitespace query.

File & line refs.

Cross-entity enrichment

Note any joins (e.g., properties ⇄ units ⇄ leases ⇄ tenants) that compute counts, occupancy, or owner relationships.

Identify if missing fields are due to join failure (e.g., mismatched id vs _id, string vs number).

File & line refs.

Output Format (Single Markdown Report)

Produce one Markdown report with these sections:

1) Executive Summary

5–10 bullets with the primary root causes (e.g., wrong field path, formatter hiding zero, default filter excluding data, broken id join).

2) Column Coverage Matrix (per page)

A table for each page listing:

Column Header

Row Field Path (what the column reads)

Mapper Output (what the mapper creates)

Raw Field Path(s) (from API/mock)

Status (OK / Mismatch / Missing)

File:Line refs

3) Data Lineage Notes (per page)

Hook/endpoint path, sample raw item (pretty-printed keys only, no sensitive values)

Mapper function and example shaped row (keys only)

Columns snippet references

Any filter defaults that affect visibility

4) Problem Catalog

For each missing/blank field discovered:

Symptom (e.g., Properties.ZIP empty)

Root cause (e.g., mapper outputs zip, columns expect zipcode; or getPath paths incorrect)

Exact Fix as a minimal diff block, but DO NOT APPLY, e.g.:

- { key: "zipcode", header: "ZIP", render: (v, r) => r.zipcode ?? "—" }
+ { key: "zip", header: "ZIP", render: (v, r) => r.zip ?? "—" }


or

- const zip = getPath(p, ["address.zipcode"]);
+ const zip = getPath(p, ["address.zip", "address.zipcode", "zip", "zipcode"]);


Include file:line references.

5) Filters & Formatters Risks

List any formatter converting valid values to "—" or hiding zeros.

List any default filter state that silently excludes rows.

6) Join/ID Mismatch Risks

Note any id type mismatches (string vs number) or key name drift (ownerId vs owner_id).

Propose the safest fix (mapper normalization) but do not change code.

7) Final Checklist (pass/fail)

For each page: ZIP present? Company/email/phone present? Tenant type present? Secondary tenants visible? Lease rent/start/end present? Units BD/BA/SQFT present?

Mark ✅/❌ and reference the Problem Catalog item.

Guardrails

Do not modify files or run codemods.

No style/theme changes.

No imports organization or lint-fixes.

Do not install packages.

If you must execute code to print sample records, do it via a temporary scratch script and don’t commit.

Deliverables

One Markdown report as described above.

File/line-accurate references for every finding.

A short summary at the end titled “Minimal Fix Set” listing the 3–10 smallest changes that resolve all missing data, in order of impact.

Begin the audit now.