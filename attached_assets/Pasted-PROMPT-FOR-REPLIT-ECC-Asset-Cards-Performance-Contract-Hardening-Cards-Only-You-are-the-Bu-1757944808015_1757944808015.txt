PROMPT FOR REPLIT — “ECC Asset Cards: Performance & Contract Hardening (Cards-Only)”

You are the Build Agent. Implement exactly what follows. Do not change ports, schemas, portfolio/table pages, or any masking rules. Stop on the first error and print it.

0) Guardrails

Keep Vite 5173 + API 8787.

Scope: src/components/cardkit/*, src/pages/card/*/*, src/App.tsx, src/main.tsx, optional server/index.ts dev-only mock guards.

No masking reintroduction (?? 0, || 0, || '—' for required fields).

1) Root route redirect (remove full reload)

Edit src/App.tsx (or your top-level routes file). Replace any window.location = '/dashboard' with wouter navigation:

import { useLocation } from "wouter";
import { useEffect } from "react";

export default function App() {
  const [, setLocation] = useLocation();
  useEffect(() => {
    if (location.pathname === "/") setLocation("/dashboard"); // client-side nav, no reload
  }, []);
  // ...existing routes
}

2) Dev overlay safety (no change to prod, silence dev flash)

Edit src/main.tsx and hard-gate any development overlays:

{import.meta.env.DEV ? null : null} // ensure no overlay is rendered in prod builds


(Leave your existing DevDiagBar import/logic alone; just ensure it never mounts in non-DEV. No other changes.)

3) CardShell: add lazy tab support + breadcrumbs + actions

Edit src/components/cardkit/CardShell.tsx to support lazy tab content and a contract header.

Types:

export type CardTab = {
  id: string;
  title: string;
  testid?: string;
  // EITHER provide a ready element OR a lazy loader
  element?: React.ReactNode;
  lazy?: () => Promise<{ default: React.ComponentType<any> }>;
  // props passed to lazy component when mounted
  props?: Record<string, any>;
};


Breadcrumbs + Actions (simple contract-safe header):

import React, { useMemo, useState, Suspense } from "react";

export function CardShell({
  title,
  hero,
  tabs,
  breadcrumbs,       // e.g., ["Portfolio", "Properties", "14111 Magnolia St"]
  actions,           // e.g., [{label:"Export PDF", onClick:...}, {label:"Edit", onClick:...}]
  rightRail,         // ReactNode | null (320px fixed column)
}: {
  title: string;
  hero: React.ReactNode;
  tabs: CardTab[];
  breadcrumbs?: string[];
  actions?: { label: string; onClick?: () => void; testid?: string }[];
  rightRail?: React.ReactNode | null;
}) {
  const [active, setActive] = useState(tabs[0]?.id);
  const activeTab = useMemo(() => tabs.find(t => t.id === active), [tabs, active]);

  const [LazyComp, setLazyComp] = useState<React.ComponentType<any> | null>(null);
  React.useEffect(() => {
    if (activeTab?.lazy) {
      activeTab.lazy().then(m => setLazyComp(() => m.default));
    } else {
      setLazyComp(null);
    }
  }, [activeTab?.id]);

  return (
    <div className="max-w-7xl mx-auto px-4">
      {/* Breadcrumbs */}
      {breadcrumbs && breadcrumbs.length > 0 && (
        <nav aria-label="Breadcrumb" className="text-sm mb-2">
          <ol className="flex gap-1 text-neutral-400">
            {breadcrumbs.map((b, i) => (
              <li key={i} className="flex items-center gap-1">
                <span>{b}</span>
                {i < breadcrumbs.length - 1 && <span>›</span>}
              </li>
            ))}
          </ol>
        </nav>
      )}

      {/* Title + actions */}
      <div className="flex items-start justify-between mb-4">
        <h1 className="text-2xl font-semibold">{title}</h1>
        {actions && actions.length > 0 && (
          <div className="flex gap-2">
            {actions.map((a, idx) => (
              <button
                key={idx}
                data-testid={a.testid ?? `action-${idx}`}
                onClick={a.onClick}
                className="px-3 py-1.5 rounded-xl border border-neutral-700 hover:bg-neutral-800"
              >
                {a.label}
              </button>
            ))}
          </div>
        )}
      </div>

      {/* Hero */}
      <div className="mb-6">{hero}</div>

      {/* Tabs */}
      <div className="border-b border-neutral-800 mb-4 flex gap-4">
        {tabs.map(t => (
          <button
            key={t.id}
            data-testid={`tab-${t.id}`}
            onClick={() => setActive(t.id)}
            className={`pb-2 ${active === t.id ? "border-b-2 border-amber-500 text-amber-500" : "text-neutral-400"}`}
          >
            {t.title}
          </button>
        ))}
      </div>

      {/* Body + Right rail layout */}
      <div className="grid grid-cols-12 gap-6">
        <div className={rightRail ? "col-span-9" : "col-span-12"}>
          {activeTab?.element && !activeTab?.lazy && activeTab.element}
          {!activeTab?.element && activeTab?.lazy && (
            <Suspense fallback={<div className="animate-pulse h-24 rounded-xl bg-neutral-900" />}>
              {LazyComp ? <LazyComp {...(activeTab.props ?? {})} /> : null}
            </Suspense>
          )}
        </div>
        {rightRail && <aside className="col-span-3">{rightRail}</aside>}
      </div>
    </div>
  );
}

4) CardKit: basic RightRail panel (contract-safe)

Create src/components/cardkit/RightRailPanel.tsx:

export default function RightRailPanel({
  title,
  children,
  testid,
}: {
  title: string;
  children: React.ReactNode;
  testid?: string;
}) {
  return (
    <section data-testid={testid} className="rounded-2xl border border-neutral-800 p-4 bg-neutral-950">
      <h3 className="text-sm font-semibold text-neutral-300 mb-3">{title}</h3>
      <div className="space-y-2">{children}</div>
    </section>
  );
}

5) Use lazy tabs and RightRail on each asset card

For each of:
src/pages/card/property/index.tsx, src/pages/card/unit/index.tsx, src/pages/card/lease/index.tsx, src/pages/card/tenant/index.tsx, src/pages/card/owner/index.tsx:

Convert tab array to use lazy for all heavy tabs (Financials / Legal / Files), keep Overview inline.

Add breadcrumbs and actions.

Provide a simple right rail with 1–2 panels using RightRailPanel (e.g., “Key Dates”, “Contacts”).

Example (Property):

import { CardShell } from "@/components/cardkit/CardShell";
import RightRailPanel from "@/components/cardkit/RightRailPanel";
import HeroBlock from "./HeroBlock";
// import inline Overview
import Overview from "./Overview";

export default function PropertyCardPage() {
  const { data } = usePropertyCard(Number(params.id)); // already fail-fast validated
  const breadcrumbs = ["Portfolio", "Properties", data?.property?.name ?? "Property"];
  const actions = [
    { label: "Export PDF", testid: "action-export-pdf" },
    { label: "Edit", testid: "action-edit" },
  ];

  const tabs = [
    { id: "overview", title: "Overview", element: <Overview data={data} />, testid: "tab-overview" },
    { id: "financials", title: "Financials", lazy: () => import("./Financials"), props: { data }, testid: "tab-financials" },
    { id: "legal",      title: "Legal",      lazy: () => import("./Legal"),      props: { data }, testid: "tab-legal" },
    { id: "files",      title: "Files",      lazy: () => import("./Files"),      props: { data }, testid: "tab-files" },
  ];

  const rightRail = (
    <div className="space-y-4">
      <RightRailPanel title="Key Dates" testid="rr-dates">
        <div className="text-sm text-neutral-300">Created: {data?.property?.created_at ?? "—"}</div>
        <div className="text-sm text-neutral-300">Updated: {data?.property?.updated_at ?? "—"}</div>
      </RightRailPanel>
      <RightRailPanel title="Contacts" testid="rr-contacts">
        <div className="text-sm text-neutral-300">{data?.owner?.display_name ?? "—"}</div>
      </RightRailPanel>
    </div>
  );

  return (
    <CardShell
      title={data?.property?.name ?? "Property"}
      hero={<HeroBlock data={data} />}
      tabs={tabs}
      breadcrumbs={breadcrumbs}
      actions={actions}
      rightRail={rightRail}
    />
  );
}


(Mirror this pattern for Unit, Lease, Tenant, Owner. Keep required testids on KPIs and do not mask required fields.)

6) Prefetch on-hover (card-to-card links)

Create src/components/cardkit/PrefetchLink.tsx to warm the cache when a user hovers a link:

import { useQueryClient } from "@tanstack/react-query";
import { Link } from "wouter";

export default function PrefetchLink({
  to,
  prefetchKey,
  fetcher,        // () => Promise<any>
  children,
  ...rest
}: React.ComponentProps<typeof Link> & {
  prefetchKey?: any[];
  fetcher?: () => Promise<any>;
}) {
  const qc = useQueryClient();
  return (
    <Link
      to={to}
      onMouseEnter={async () => {
        if (prefetchKey && fetcher) {
          await qc.prefetchQuery({ queryKey: prefetchKey, queryFn: fetcher, staleTime: 30_000 });
        }
      }}
      {...rest}
    >
      {children}
    </Link>
  );
}


Use this where you link to related cards (unit→lease, lease→unit/tenant, etc.), passing the same queryKey/fetcher your hooks use.

7) Skeleton unification (reduce animation overhead)

Create src/components/cardkit/Skeleton.tsx:

export default function Skeleton({ className = "h-6 rounded-xl bg-neutral-900 animate-pulse" }:{
  className?: string;
}) {
  return <div className={className} />;
}


Replace ad-hoc shimmer classes in card tabs/components with <Skeleton />. Do not change loading logic—only unify the visual.

8) Guard dev-only mock routes (optional, non-breaking)

If you have dev mocks like server/routes/maintenance.ts or server/routes/accounting.ts, guard the mounts:

if (process.env.NODE_ENV === "development") {
  app.use("/api/dev/maintenance", maintenanceRouter);
  // etc.
}


Do not remove or change their logic—only ensure they don’t run in production.

9) Start & verify
npm run dev


Expect:

[EnvLock] { … }

[Dev API] Listening on :8787

VITE v5.x ready … http://localhost:5173/

Browser checks (cards only, using IDs you know exist):

/card/property/<id> → KPIs + address, tabs switch instantly, heavy tabs load on click.

/card/unit/<id> → shows unit, with right rail visible.

/card/lease/<id> → shows lease + relations, with lazy tabs.

/card/owner/<id> → shows owner KPIs, actions present.

/card/tenant/<id> → shows tenant KPIs, actions present.

10) Deliverables (print these)

Confirmation that tabs for all five cards lazy-load heavy content (Financials/Legal/Files).

Screenshot or text proof that breadcrumbs, actions, and right rail render on all five cards.

Confirmation that no client-side KPI calculation was added (we keep server-side KPIs).

Confirmation that no masking was reintroduced.

End of prompt.