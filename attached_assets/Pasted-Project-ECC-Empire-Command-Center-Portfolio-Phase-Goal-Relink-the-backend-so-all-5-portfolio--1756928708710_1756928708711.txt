Project: ECC (Empire Command Center) — Portfolio Phase
Goal: Relink the backend so all 5 portfolio pages (Properties, Units, Leases, Tenants, Owners) load live data again. No UI/UX redesign, no nav changes.

HARD GUARDRAILS (do not violate):
- Do NOT modify the Sidebar/nav (src/layout/components/Sidebar.tsx, src/config/navigation.ts).
- Keep wouter only (do NOT add or switch to react-router-dom).
- No hardcoded/mock data; must pull from the actual DB.
- Scope any CSS changes; no global theme drift; prefer existing Altus tokens.
- Backup any file before overwriting.

WHERE TO WORK (and ONLY these unless needed to fix imports):
- Backend/dev API (create or update): server/index.ts
- Vite proxy (create or update): vite.config.ts
- Data hook: src/features/data/useCollection.ts
- Portfolio pages & shared columns (verify only; fix imports/exports if broken):
  - src/pages/portfolio/columns.ts
  - src/pages/portfolio/{properties,units,leases,tenants,owners}/index.tsx

DATA SOURCE & DETECTION:
- Use PostgreSQL if DATABASE_URL or PG* env vars are present.
- Otherwise use Supabase if SUPABASE_URL + SUPABASE_* key present.
- Never require both; pick the one that’s configured. Log which mode you chose in the console and /api/health.
- Table names default to: properties, units, leases, tenants, owners.
  - If env vars TBL_PROPERTIES / TBL_UNITS / TBL_LEASES / TBL_TENANTS / TBL_OWNERS exist, use those instead (e.g., normalized_properties).

BACKEND TASKS:
1) If server/index.ts doesn’t exist, create it; otherwise update it to expose:
   - GET /api/health → returns JSON { ok: true, mode: "postgres"|"supabase", now: <timestamp> }.
   - GET /api/portfolio/:collection → returns an array of rows for one of:
     properties | units | leases | tenants | owners.
   - For Postgres: use node-postgres (pg) Pool with DATABASE_URL or PG* vars, SSL on unless PGSSL_DISABLE.
   - For Supabase: use @supabase/supabase-js with SUPABASE_URL + SERVICE_ROLE or ANON key.
   - Respect TBL_* overrides; validate table names (letters, numbers, _, . only). Limit 1000 rows.
   - No schema changes; just read. No data writes.

2) Ensure vite.config.ts exists with:
   - @vitejs/plugin-react and vite-tsconfig-paths.
   - server.proxy mapping "/api" → "http://localhost:8787" (the dev API).
   - Do not change build or aliases beyond ensuring @/ works.

FRONTEND TASKS:
3) Ensure src/features/data/useCollection.ts exists and fetches from `/api/portfolio/<collection>`, parsing JSON safely. If response is HTML or not JSON, show a clear error string so we can diagnose (do NOT swap libraries).

4) Verify portfolio pages compile and have default exports:
   - src/pages/portfolio/{properties,units,leases,tenants,owners}/index.tsx
   - Each page should import mappers/columns from "../columns" (relative) and the hook from "@/features/data/useCollection".
   - Do not modify the Sidebar or nav; only fix import paths or missing default exports if needed.

5) Verify shared columns exist:
   - src/pages/portfolio/columns.ts defines the column arrays and mapping helpers used by those pages.
   - Do not change visual design; just ensure shape matches what the pages read.

ACCEPTANCE CRITERIA (must all pass):
- Navigating to /api/health returns JSON (not HTML) with ok:true and correct mode.
- Hitting /api/portfolio/{properties|units|leases|tenants|owners} returns JSON arrays (even if empty), not HTML.
- Visiting each portfolio page renders a table without console errors:
  - Properties: id, doorloop_id, name, type, class, active, address, city, state, unit_count, occupancy
  - Units: id, property, unit #, beds, baths, sqft, status, market rent
  - Leases: id, tenant(s), property, rent, start, end, status
  - Tenants: id, name, property, unit, email, phone, status, balance
  - Owners: id, name, email, phone, property count, active flag
- No changes to the nav pane behavior/appearance (pin/collapse still works; active link highlighting intact).
- No new router libraries; wouter remains.
- No mock data committed.

REPORT BACK WITH:
- Which backend mode was detected (postgres or supabase).
- The exact env vars it relied on (names only, not values).
- Confirmation that each /api/portfolio/* endpoint returned JSON.
- A list of any files you created or updated.
- Any remaining empty tables (so we know if DB content is missing).
