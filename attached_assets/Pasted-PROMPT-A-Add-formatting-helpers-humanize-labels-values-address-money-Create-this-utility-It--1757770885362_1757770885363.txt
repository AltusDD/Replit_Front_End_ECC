PROMPT A — Add formatting helpers (humanize labels/values, address, money)

Create this utility. It keeps values readable (Title Case, underscores → spaces) without changing data.

File: src/lib/format.ts

export function titleCase(input?: string | null): string {
  if (!input) return "—";
  const s = String(input).replace(/_/g, " ").toLowerCase();
  return s.replace(/\b\w/g, (c) => c.toUpperCase());
}

export function humanize(input?: string | null): string {
  if (!input) return "—";
  // Preserve digits/symbols; normalize underscores and shouty text
  return titleCase(input);
}

export function fmtMoneyCents(cents?: number | null): string {
  if (cents == null) return "—";
  const dollars = Math.round(cents) / 100;
  try {
    return dollars.toLocaleString(undefined, { style: "currency", currency: "USD", maximumFractionDigits: 0 });
  } catch {
    return `$${Math.round(dollars)}`;
  }
}

export function joinAddress(parts: Array<string | null | undefined>): string {
  const out = parts.filter(Boolean).join(", ");
  return out || "—";
}

export function googleMapsHref(address: string): string {
  return `https://www.google.com/maps?q=${encodeURIComponent(address)}`;
}

export function isFiniteNumber(n: any): n is number {
  return typeof n === "number" && Number.isFinite(n);
}

PROMPT B — Add a zero-dependency map box with safe fallbacks

This component embeds a map if we have lat/lng; if not, it embeds a Google Maps view from the full address. No new libraries.

File: src/components/GeoMap.tsx

import React from "react";
import Section from "./Section";
import { googleMapsHref, isFiniteNumber } from "../lib/format";

export default function GeoMap({
  title = "Map & Location",
  address,
  lat,
  lng,
}: {
  title?: string;
  address?: string;
  lat?: number | null;
  lng?: number | null;
}) {
  const hasCoords = isFiniteNumber(lat) && isFiniteNumber(lng);
  const hasAddress = !!address && address !== "—";

  let src: string | null = null;
  if (hasCoords) {
    // Simple OSM embed when coords available
    const pad = 0.005;
    const bbox = [lng! - pad, lat! - pad, lng! + pad, lat! + pad].join(",");
    src = `https://www.openstreetmap.org/export/embed.html?bbox=${bbox}&layer=mapnik&marker=${lat},${lng}`;
  } else if (hasAddress) {
    src = `https://www.google.com/maps?q=${encodeURIComponent(address!)}&output=embed`;
  }

  return (
    <Section title={title} actions={hasAddress ? <a href={googleMapsHref(address!)} target="_blank" rel="noreferrer">Open in Maps</a> : null}>
      {src ? (
        <div style={{ borderRadius: 12, overflow: "hidden" }}>
          <iframe
            title="map"
            src={src}
            style={{ width: "100%", height: 260, border: 0 }}
            loading="lazy"
            referrerPolicy="no-referrer-when-downgrade"
          />
        </div>
      ) : (
        <div style={{ opacity: 0.8 }}>No coordinates or address available.</div>
      )}
    </Section>
  );
}

PROMPT C — Tighten skeletons + field rows (reusable across pages)

If you don’t already have these from earlier, create them now. If they exist, leave them (no duplicates).

File: src/components/Skeleton.tsx

import React from "react";
export function Line({ w = "100%", h = 12 }: { w?: number | string; h?: number }) {
  return (
    <div
      className="ecc-object"
      style={{
        height: h,
        width: typeof w === "number" ? `${w}px` : w,
        background: "linear-gradient(90deg, rgba(255,255,255,0.06), rgba(255,255,255,0.14), rgba(255,255,255,0.06))",
        backgroundSize: "200% 100%",
        animation: "ecc-shimmer 1.2s linear infinite",
        opacity: 0.35,
      }}
    />
  );
}
export function Block({ h = 96 }: { h?: number }) {
  return <div className="ecc-object" style={{ height: h, opacity: 0.35 }} />;
}


File: src/components/FieldRows.tsx

import React from "react";

export function FieldRows({ rows }: { rows: { label: string; value?: React.ReactNode }[] }) {
  return (
    <div style={{ display: "grid", gap: 8 }}>
      {rows.map((r, i) => (
        <div key={i} style={{ display: "grid", gridTemplateColumns: "160px 1fr", gap: 8 }}>
          <div className="ecc-label" style={{ textTransform: "none" }}>{r.label}</div>
          <div style={{ textTransform: "none" }}>{r.value ?? "—"}</div>
        </div>
      ))}
    </div>
  );
}

PROMPT D — Patch the live Property page: boxes, humanized text, map, links

Edit only this file. Keep all existing logic and lists. We’re adding a clean boxed top section + map and standard labels.

File: src/pages/card/property/index.tsx

Add imports at top (keep existing imports):

import Section from "../../../components/Section";
import GeoMap from "../../../components/GeoMap";
import { FieldRows } from "../../../components/FieldRows";
import { Line, Block } from "../../../components/Skeleton";
import { titleCase, humanize, joinAddress } from "../../../lib/format";
import { Link } from "wouter";


Add a small skeleton + helpers (place above the default export):

function PropertySkeleton() {
  return (
    <div style={{ display: "grid", gap: 12 }}>
      <Section title={<Line w={260} />}><Block h={120} /></Section>
      <Section title={<Line w={200} />}><Block h={260} /></Section>
      <Section title={<Line w={180} />}><Block h={120} /></Section>
    </div>
  );
}


At the start of your component render, ensure we show skeleton while loading:

// if you have isLoading/data vars, adapt accordingly:
if (typeof isLoading !== "undefined" ? isLoading : !property) {
  return <PropertySkeleton />;
}


Compute cleaned values (just below where property is defined):

const addr = joinAddress([property?.street_1, property?.city, property?.state, property?.zip]);
const kind = humanize(property?.type || property?.property_type);
const klass = humanize(property?.class || property?.property_class);
const status = humanize(property?.status);
const lat = (property as any)?.lat ?? (property as any)?.latitude ?? null;
const lng = (property as any)?.lng ?? (property as any)?.longitude ?? null;


Insert the polished, boxed top stack right under the page title/toolbar, and above your existing detail blocks (do not delete them):

{/* === Genesis: Overview (clean labels/values, no ALL CAPS / underscores) === */}
<Section title="Property Overview">
  <FieldRows
    rows={[
      { label: "Address", value: addr },
      { label: "Type", value: kind },
      { label: "Class", value: klass },
      { label: "Status", value: status },
      {
        label: "IDs",
        value: (
          <>
            #{property?.id ?? "—"}{property?.doorloop_id ? <> • DL {property.doorloop_id}</> : null}
          </>
        ),
      },
    ]}
  />
</Section>

{/* === Genesis: Map & Links (iframe if coords/address; button opens native maps) === */}
<GeoMap address={addr} lat={lat as any} lng={lng as any} />

{/* === Genesis: Quick Links to Related Objects (only render links that exist) === */}
<Section title="Related">
  <div style={{ display: "flex", flexWrap: "wrap", gap: 8 }}>
    {/* Examples. Keep/extend based on available IDs in your data */}
    {"unit_id" in (property || {}) && property?.unit_id ? (
      <Link href={`/card/unit/${property.unit_id}`}><a className="ecc-object" style={{ padding: 8 }}>Open Unit</a></Link>
    ) : null}
    {"owner_id" in (property || {}) && property?.owner_id ? (
      <Link href={`/card/owner/${property.owner_id}`}><a className="ecc-object" style={{ padding: 8 }}>Open Owner</a></Link>
    ) : null}
    {/* Always available: back to list */}
    <Link href="/portfolio"><a className="ecc-object" style={{ padding: 8 }}>Back to Properties</a></Link>
  </div>
</Section>


Notes:

If your schema doesn’t expose unit_id/owner_id on property, those links auto-hide.

Your existing “Units / Leases / Tenants” lists further down stay intact; this just improves the top experience.

PROMPT E — Typography polish (ensure labels aren’t forced uppercase)

If any legacy CSS is forcing uppercase, neutralize it without touching old files.

Append to: src/styles/card-enhancer.css (end of file)

/* Neutralize legacy text transforms on our content */
.ecc-object, .ecc-object * { text-transform: none; }
.ecc-label { opacity: .75; font-size: 12px; }

PROMPT F — Visual smoke (Property)

Hard refresh the preview.

Open /card/property/<real id>. Verify:

Clean Property Overview box (Title Case, no underscores).

Map & Location box shows an embedded map (from coords or address). “Open in Maps” opens a new tab.

Related box shows contextual links (only when IDs exist).

Older content remains under these boxes.

All boxes use the light-grey surface.