This comprehensive blueprint will cover:
1.	DoorLoop API Field Names & Types: The exact field name and its type (JSON, string, number, boolean) from the DoorLoop API response.
2.	Database Table & Column: The exact table and column where that field is stored, including its PostgreSQL data type.
3.	Transformation/Notes: Any casting, flattening, derivation, or FK lookup logic.
4.	Backend API Exposure: How our internal /api endpoint exposes that data (camelCase, joins).
5.	Relationship Chains: How entities link together via ids.
________________________________________
Global Data Lineage & Relationship Blueprint: DoorLoop API to Altus DB & API
Objective: To establish a definitive, field-by-field blueprint for data ingestion (DoorLoop API → Supabase Database) and exposure (Supabase Database → Altus Backend API), ensuring 100% data fidelity, correct relationships via internal IDs, and accurate transformations across all core entities.
Protocol: For each entity, we will map: DoorLoop API Field → Supabase DB Column → Altus Backend API Field
________________________________________
Core Principles of Data Lineage (Reinforced)
•	DoorLoop API as Raw Source: The payload_json in raw_doorloop_data is the untouched source.
•	doorloop_raw_* Tables: These mirror all DoorLoop fields directly as TEXT/NUMERIC/JSONB from payload_json for comprehensive raw staging.
•	Normalized Tables (Primary Source of Truth): properties, units, tenants, owners, leases, lease_payments, lease_charges, lease_credits, vendors, tasks, collection_actions, etc., store data in a usable, normalized, and correctly typed format.
•	Internal IDs for FKs: All JOIN operations in SQL must be on INTEGER REFERENCES table(id). doorloop_id is for unique identification and lookup, never for JOINs.
•	Backend Derivation: Complex calculations and status derivations happen in Python (KpiService.py or dedicated services), then stored in the DB.
•	Backend API Transformation: /api endpoints perform aliasing (camelCase), joins, and JSONB parsing to prepare data for the frontend.
•	Frontend Display Only: React components display what the API provides.
________________________________________
I. Entity: Properties
DoorLoop API Endpoint: /properties (Response is property object)
DL Field	DL Type	Supabase properties Table Column (Type)	Transformation / Notes	Altus Backend API Field (Type)
id	String	doorloop_id (VARCHAR)	Direct mapping	doorLoopId (TEXT)
name	String	name (TEXT)	Direct mapping	name (TEXT)
type	String	type (TEXT)	e.g., RESIDENTIAL_SINGLE_FAMILY	type (TEXT)
class	String	class (TEXT)	e.g., RESIDENTIAL	class (TEXT)
active	Boolean	active (BOOLEAN)	Direct mapping	active (BOOLEAN)
description	String	description (TEXT)	Direct mapping	description (TEXT)
createdAt	DateTime	created_at (TIMESTAMP WITH TIME ZONE)	strptime from ISO string	createdAt (TIMESTAMP)
updatedAt	DateTime	updated_at (TIMESTAMP WITH TIME ZONE)	strptime from ISO string	updatedAt (TIMESTAMP)
externalId	String	external_id (TEXT)	Direct mapping	externalId (TEXT)
managerId	String	manager_id (TEXT)	Direct mapping (DoorLoop User ID)	managerId (TEXT)
purchaseDate	Date	purchase_date (DATE)	strptime from ISO string	purchaseDate (DATE)
purchasePrice	Number	purchase_price (NUMERIC)	float() cast	purchasePrice (NUMERIC)
currentValue	Number	current_value (NUMERIC)	float() cast	currentValue (NUMERIC)
bedroomCount	Number	bedroom_count (INTEGER)	int() cast (total bedrooms in property)	bedroomCount (INTEGER)
address.street1	String	address_street1 (TEXT)	Flattened	addressStreet1 (TEXT)
address.street2	String	address_street2 (TEXT)	Flattened	addressStreet2 (TEXT)
address.city	String	address_city (TEXT)	Flattened	addressCity (TEXT)
address.state	String	address_state (TEXT)	Flattened	addressState (TEXT)
address.zip	String	address_zip (TEXT)	Flattened	addressZip (TEXT)
address.country	String	address_country (TEXT)	Flattened	addressCountry (TEXT)
address.lat	String	address_lat (TEXT)	Flattened	addressLat (TEXT)
address.lng	String	address_lng (TEXT)	Flattened	addressLng (TEXT)
address.isValidAddress	Boolean	address_is_valid (BOOLEAN)	Flattened, bool() cast	addressIsValid (BOOLEAN)
owners	Array	owners_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	owners (ARRAY of OBJECTS)
pictures	Array	pictures_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	pictures (ARRAY of OBJECTS)
amenities	Array	amenities_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	amenities (ARRAY of OBJECTS)
settings.customFields	Object	custom_fields_json (JSONB)	json.dumps() (from nested)	customFields (OBJECT)
boardMembers	Array	board_members_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	boardMembers (ARRAY of OBJECTS)
insurance	Object	insurance_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	insurance (OBJECT)
taxInfo	Object	tax_info_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	taxInfo (OBJECT)
financials	Object	financials_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	financials (OBJECT)
compliance	Object	compliance_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	compliance (OBJECT)
Derived/Aggregated (DB)		total_sqft (NUMERIC)	Sum of units.sq_ft for property's units (post-sync calculation)	totalSqFt (NUMERIC)
		unit_count (INTEGER)	Count of units linked to property (post-sync calculation)	unitCount (INTEGER)
		occupied_unit_count (INTEGER)	Count of occupied units (post-sync calculation)	occupiedUnitCount (INTEGER)
		vacant_unit_count (INTEGER)	Count of vacant units (post-sync calculation)	vacantUnitCount (INTEGER)
		occupancy_rate (NUMERIC)	Derived from occupied_unit_count / unit_count	occupancyRate (NUMERIC)
Export to Sheets
•	Relationship Chains: properties.id (PK) 
o	Linked by: units.property_id
o	Linked by: leases.property_id
o	Linked by: tasks.property_id
o	Linked by: expenses.property_id
o	Linked by: buildertrend_projects.property_id
________________________________________
II. Entity: Units
DoorLoop API Endpoint: /units (Response is unit object)
DL Field	DL Type	Supabase units Table Column (Type)	Transformation / Notes	Altus Backend API Field (Type)
id	String	doorloop_id (VARCHAR)	Direct mapping	doorLoopId (TEXT)
name	String	unit_number (TEXT)	Direct mapping (this is your custom "Unit Name" from DoorLoop)	unitName (TEXT)
beds	Number	beds (NUMERIC)	float() cast	beds (NUMERIC)
baths	Number	baths (NUMERIC)	float() cast	baths (NUMERIC)
size	Number	sq_ft (NUMERIC)	float() cast	squareFeet (NUMERIC)
active	Boolean	active (BOOLEAN)	Direct mapping	active (BOOLEAN)
marketRent	Number	rent_amount (NUMERIC)	float() cast	marketRent (NUMERIC)
description	String	description (TEXT)	Direct mapping	description (TEXT)
createdAt	DateTime	created_at (TIMESTAMP WITH TIME ZONE)	strptime from ISO string	createdAt (TIMESTAMP)
updatedAt	DateTime	updated_at (TIMESTAMP WITH TIME ZONE)	strptime from ISO string	updatedAt (TIMESTAMP)
property_id	String	property_id (INTEGER)	FK Lookup: SELECT id FROM properties WHERE doorloop_id = %s	propertyDbId (INT)
floorPlan	String	floor_plan (TEXT)	Direct mapping	floorPlan (TEXT)
isRentable	Boolean	is_rentable (BOOLEAN)	bool() cast	isRentable (BOOLEAN)
lastRenovated	Date	last_renovated (DATE)	strptime from ISO string	lastRenovated (DATE)
condition	String	unit_condition (TEXT)	Direct mapping	unitCondition (TEXT)
address	Object	address_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	address (OBJECT)
rentalApplicationListing	Object	listing_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	listing (OBJECT)
amenities	Array	amenities_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	amenities (ARRAY)
photos	Array	pictures_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	pictures (ARRAY)
features	Array	features_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	features (ARRAY)
utilities	Object	utilities_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	utilities (OBJECT)
Derived (DB)		status (TEXT)	Calculated by compute_derived_fields_post_sync (Occupied/Vacant)	status (TEXT)
Export to Sheets
•	Relationship Chains: units.id (PK) 
o	Linked by: leases.unit_id
o	Linked by: tasks.unit_id
o	Linked by: expenses.unit_id
o	Parent: units.property_id → properties.id (FK)
________________________________________
III. Entity: Tenants
DoorLoop API Endpoint: /tenants (Response is tenant object)
DL Field	DL Type	Supabase tenants Table Column (Type)	Transformation / Notes	Altus Backend API Field (Type)
id	String	doorloop_id (VARCHAR)	Direct mapping	doorLoopId (TEXT)
firstName	String	first_name (TEXT)	Direct mapping	firstName (TEXT)
lastName	String	last_name (TEXT)	Direct mapping	lastName (TEXT)
fullName	String	full_name (TEXT)	Direct mapping	fullName (TEXT)
name	String	display_name (TEXT)	Direct mapping (used for tenant display name)	displayName (TEXT)
dateOfBirth	Date	date_of_birth (DATE)	strptime from ISO string	dateOfBirth (DATE)
timezone	String	timezone (TEXT)	Direct mapping	timezone (TEXT)
companyName	String	company_name (TEXT)	Direct mapping	companyName (TEXT)
jobTitle	String	job_title (TEXT)	Direct mapping	jobTitle (TEXT)
notes	String	notes (TEXT)	Direct mapping	notes (TEXT)
type	String	type (TEXT)	e.g., LEASE_TENANT, PROSPECT_TENANT	type (TEXT)
ssn	String	ssn (TEXT)	Sensitive: Ensure encryption at rest.	ssn (TEXT) (Sensitive)
creditScore	Number	credit_score (INTEGER)	int() cast	creditScore (INTEGER)
primaryAddress	Object	primary_address_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	primaryAddress (OBJECT)
emails	Array	emails_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	emails (ARRAY)
phones	Array	phones_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	phones (ARRAY)
dependants	Array	dependants_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	dependants (ARRAY)
pets	Array	pets_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	pets (ARRAY)
vehicles	Array	vehicles_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	vehicles (ARRAY)
emergencyContacts	Array	emergency_contacts_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	emergencyContacts (ARRAY)
prospectInfo	Object	prospect_info_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	prospectInfo (OBJECT)
portalInfo	Object	portal_info_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	portalInfo (OBJECT)
employmentInfo	Object	employment_info_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	employmentInfo (OBJECT)
backgroundCheck	Object	background_check_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	backgroundCheck (OBJECT)
references	Array	references_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	references (ARRAY)
bankingInfo	Object	banking_info_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	bankingInfo (OBJECT)
Derived (DB)		primary_email (TEXT)	Derived from emails_json (type='Primary')	primaryEmail (TEXT)
		primary_phone (TEXT)	Derived from phones_json (type='Mobile'/'Primary')	primaryPhone (TEXT)
		primary_phone_formatted (TEXT)	Formatted primary_phone	primaryPhoneFormatted (TEXT)
		status (TEXT)	Derived by compute_derived_fields_post_sync (Active/Inactive/Prospect)	status (TEXT)
		portal_enabled (BOOLEAN)	Derived from portal_info_json.allowAccess	portalEnabled (BOOLEAN)
		tenant_type (TEXT)	Derived ('Primary', 'Dependent', 'Prospect')	tenantType (TEXT)
		risk_score_ml (NUMERIC)	Calculated by calculateTenantRiskScoresML	riskScoreMl (NUMERIC)
		risk_tier_ml (TEXT)	Calculated by calculateTenantRiskScoresML	riskTierMl (TEXT)
		last_risk_calculated_at (TIMESTAMP)	When risk_score_ml was last calculated	lastRiskCalculatedAt (TIMESTAMP)
Export to Sheets
•	Relationship Chains: tenants.id (PK) 
o	Linked by: leases.tenant_id
o	Linked by: tasks.tenant_id
o	Linked by: tenant_assistance_links.tenant_id
o	Linked by: collection_actions.tenant_id
________________________________________
IV. Entity: Owners
DoorLoop API Endpoint: /owners (Response is owner object)
DL Field	DL Type	Supabase owners Table Column (Type)	Transformation / Notes	Altus Backend API Field (Type)
id	String	doorloop_id (VARCHAR)	Direct mapping	doorLoopId (TEXT)
firstName	String	first_name (TEXT)	Direct mapping	firstName (TEXT)
lastName	String	last_name (TEXT)	Direct mapping	lastName (TEXT)
fullName	String	full_name (TEXT)	Direct mapping	fullName (TEXT)
name	String	display_name (TEXT)	Direct mapping (used for owner display name)	displayName (TEXT)
dateOfBirth	Date	date_of_birth (DATE)	strptime from ISO string	dateOfBirth (DATE)
timezone	String	timezone (TEXT)	Direct mapping	timezone (TEXT)
companyName	String	company_name (TEXT)	Direct mapping	companyName (TEXT)
jobTitle	String	job_title (TEXT)	Direct mapping	jobTitle (TEXT)
notes	String	notes (TEXT)	Direct mapping	notes (TEXT)
active	Boolean	active (BOOLEAN)	Direct mapping	active (BOOLEAN)
managementStartDate	Date	management_start_date (DATE)	strptime from ISO string	managementStartDate (DATE)
managementEndDate	Date	management_end_date (DATE)	strptime from ISO string	managementEndDate (DATE)
primaryAddress	Object	primary_address_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	primaryAddress (OBJECT)
emails	Array	emails_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	emails (ARRAY)
phones	Array	phones_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	phones (ARRAY)
federalTaxInfo	Object	federal_tax_info_json (JSONB)	json.dumps() on ingest, json.loads() on API fetch	federalTaxInfo (OBJECT)
bankingInfo	Object	bank_account_info_json (JSONB)	Sensitive: Encrypt at rest. json.dumps() / json.loads()	bankAccountInfo (OBJECT)
Derived (DB)		primary_email (TEXT)	Derived from emails_json	primaryEmail (TEXT)
		primary_phone (TEXT)	Derived from phones_json	primaryPhone (TEXT)
		primary_phone_formatted (TEXT)	Formatted primary_phone	primaryPhoneFormatted (TEXT)
		is_investor (BOOLEAN)	Manual flag (initially FALSE)	isInvestor (BOOLEAN)
		payout_schedule (TEXT)	Manual input (Monthly, Quarterly)	payoutSchedule (TEXT)
		remittance_day_of_month (INTEGER)	Manual input	remittanceDayOfMonth (INTEGER)
		reserve_amount (NUMERIC)	Manual input	reserveAmount (NUMERIC)
Derived/Aggregated (API)		(Not stored, aggregated on API for response)		totalPropertiesOwned (INT)
				totalUnitsOwned (INT)
				totalActiveLeasesOwned (INT)
				totalDelinquencyExposure (NUMERIC)
				portfolioRiskTier (TEXT)
Export to Sheets
•	Relationship Chains: owners.id (PK) 
o	Linked by: properties.owners_json (JSONB - for linking properties to owners)
o	Linked by: collection_actions.owner_id
o	Linked by: owner_payout_calculations.owner_id
o	Linked by: owner_payout_transactions.owner_id
________________________________________
V. Entity: Leases
DoorLoop API Endpoint: /leases (Response is lease object)
DL Field	DL Type	Supabase leases Table Column (Type)	Transformation / Notes	Altus Backend API Field (Type)
id	String	doorloop_id (VARCHAR)	Direct mapping	doorLoopId (TEXT)
name	String	name (TEXT)	Direct mapping (e.g., Tenant Names on Lease)	name (TEXT)
start	Date	start_date (DATE)	strptime from ISO string	startDate (DATE)
end	Date	end_date (DATE)	strptime from ISO string	endDate (DATE)
term	String	term (TEXT)	e.g., FIXED, MONTH_TO_MONTH	term (TEXT)
status	String	status (TEXT)	e.g., ACTIVE, EXPIRED, PAST_DUE	status (TEXT)
evictionPending	Boolean	eviction_pending (BOOLEAN)	bool() cast	evictionPending (BOOLEAN)
rolloverToAtWill	Boolean	rollover_to_at_will (BOOLEAN)	bool() cast	rolloverToAtWill (BOOLEAN)
proofOfInsuranceRequired	Boolean	proof_of_insurance_required (BOOLEAN)	bool() cast	proofOfInsuranceRequired (BOOLEAN)
totalBalanceDue	Number	total_balance_due (NUMERIC)	float() cast	totalBalanceDue (NUMERIC)
totalDepositsHeld	Number	total_deposits_held (NUMERIC)	float() cast	totalDepositsHeld (NUMERIC)
totalRecurringRent	Number	total_recurring_rent (NUMERIC)	float() cast	totalRecurringRent (NUMERIC)
totalRecurringPayments	Number	total_recurring_payments (NUMERIC)	float() cast	totalRecurringPayments (NUMERIC)
totalRecurringCredits	Number	total_recurring_credits (NUMERIC)	float() cast	totalRecurringCredits (NUMERIC)
totalRecurringCharges	Number	total_recurring_charges (NUMERIC)	float() cast	totalRecurringCharges (NUMERIC)
created_at	DateTime	created_at (TIMESTAMP WITH TIME ZONE)	strptime from ISO string	createdAt (TIMESTAMP)
updated_at	DateTime	updated_at (TIMESTAMP WITH TIME ZONE)	strptime from ISO string	updatedAt (TIMESTAMP)
property	String	property_id (INTEGER)	FK Lookup: SELECT id FROM properties WHERE doorloop_id = %s	propertyDbId (INT)
units	Array	unit_id (INTEGER)	FK Lookup (Primary Unit): SELECT id FROM units WHERE doorloop_id = %s for units[0]	unitDbId (INT)
tenants	Array	tenant_id (INTEGER)	FK Lookup (Primary Tenant): SELECT id FROM tenants WHERE doorloop_id = %s for tenants[0]	tenantDbId (INT)
reference	String	reference_json (JSONB)	json.dumps() (DoorLoop field is sometimes complex)	reference (TEXT/JSON)
notes	String	notes_json (JSONB)	json.dumps() (DoorLoop field is sometimes complex)	notes (TEXT/JSON)
settings	Object	settings_json (JSONB)	json.dumps()	settings (OBJECT)
renewalInfo	Object	renewal_info_json (JSONB)	json.dumps()	renewalInfo (OBJECT)
customFields	Object	custom_fields_json (JSONB)	json.dumps() (from settings)	customFields (OBJECT)
petPolicy	Object	pet_policy_json (JSONB)	json.dumps()	petPolicy (OBJECT)
addendums	Array	addendums_json (JSONB)	json.dumps()	addendums (ARRAY)
cosigners	Array	cosigners_json (JSONB)	json.dumps()	cosigners (ARRAY)
utilities	Object	utilities_json (JSONB)	json.dumps()	utilities (OBJECT)
proofOfInsuranceStatus	String	insurance_status_json (JSONB)	json.dumps() (DoorLoop field is sometimes complex text)	insuranceStatus (TEXT/JSON)
Derived (DB)		lease_type_classification (TEXT)	Derived ('Term Lease', 'Month-to-Month Lease')	leaseTypeClassification (TEXT)
		assistance_link_id (INTEGER)	FK to tenant_assistance_links.id	assistanceLinkId (INT)
		agency_portion_due (NUMERIC)	Derived agency portion	agencyPortionDue (NUMERIC)
		tenant_portion_due (NUMERIC)	Derived tenant portion	tenantPortionDue (NUMERIC)
		escalation_stage (TEXT)	Derived (NONE, NOTICE_10_DAY, LEGAL_FLAGGED, etc.)	escalationStage (TEXT)
Export to Sheets
•	Relationship Chains: leases.id (PK) 
o	Linked by: lease_payments.lease_id
o	Linked by: lease_charges.lease_id
o	Linked by: lease_credits.lease_id
o	Linked by: collection_actions.lease_id
o	Parent: leases.property_id → properties.id (FK)
o	Parent: leases.unit_id → units.id (FK)
o	Parent: leases.tenant_id → tenants.id (FK)
o	Parent: leases.assistance_link_id → tenant_assistance_links.id (FK)
________________________________________
VI. Entity: Lease Payments
DoorLoop API Endpoint: /lease-payments (Response is leasePayment object)
DL Field	DL Type	Supabase lease_payments Table Column (Type)	Transformation / Notes	Altus Backend API Field (Type)
id	String	doorloop_id (VARCHAR)	Direct mapping	doorLoopId (TEXT)
amountReceived	Number	amount (NUMERIC)	float() cast	amount (NUMERIC)
payment_date	Date	payment_date (DATE)	strptime from ISO string	paymentDate (DATE)
status	String	status (TEXT)	e.g., paid, pending, deposited	status (TEXT)
lease_id	String	lease_id (INTEGER)	FK Lookup: SELECT id FROM leases WHERE doorloop_id = %s	leaseDbId (INT)
createdAt	DateTime	created_at (TIMESTAMP WITH TIME ZONE)	strptime from ISO string	createdAt (TIMESTAMP)
updatedAt	DateTime	updated_at (TIMESTAMP WITH TIME ZONE)	strptime from ISO string	updatedAt (TIMESTAMP)
Derived (DB)		payment_type (TEXT)	Derived ('TENANT_PORTION', 'AGENCY_PAYMENT', 'OTHER')	paymentType (TEXT)
Export to Sheets
•	Relationship Chains: lease_payments.id (PK) 
o	Parent: lease_payments.lease_id → leases.id (FK)
________________________________________
VII. Other Key Tables (Brief Overview)
This section ensures other critical tables are correctly defined and populated.
A. Lease Charges (/lease-charges)
•	lease_charges table: doorloop_id, lease_id (FK), amount, description, due_date, status, category (TEXT).
•	API: leaseId, amount, description, dueDate, status, category.
B. Lease Credits (/lease-credits)
•	lease_credits table: doorloop_id, lease_id (FK), amount, description.
•	API: leaseId, amount, description.
C. Vendors (/vendors)
•	vendors table: doorloop_id, name, display_name, phone, email, trade, is_active.
•	API: doorLoopId, name, displayName, phone, email, trade, isActive.
D. Tasks (/tasks)
•	tasks table: doorloop_id, property_id (FK), unit_id (FK), tenant_id (FK), assigned_to_user_id (FK), assigned_to_vendor_id (FK), type, subject, description, due_date, status, priority, estimated_cost, actual_cost, is_program_inspection, program_id (FK), original_inspection_date, work_order_json (JSONB).
•	API: doorLoopId, propertyName, unitName, tenantName, vendorName, type, subject, description, dueDate, status, priority, estimatedCost, actualCost, isProgramInspection, programName.
E. Other doorloop_raw_* tables (for 100% Ingestion)
•	Purpose: To store raw JSON for all other DoorLoop endpoints.
•	Example API Endpoints: /files, /notes, /communications, /applications, /inspections, /insurance-policies, /recurring-charges, /recurring-credits, /accounts, /users, /portfolios, /reports, /activity-logs.
•	DB Tables: doorloop_raw_files, doorloop_raw_notes, doorloop_raw_communications, etc. (Each with id, doorloop_id, payload_json, created_at). These are for future processing.
________________________________________
VIII. Global Data Integrity & Sourcing Directives for Replit
Action: Replit must strictly adhere to this blueprint when writing or modifying any backend API endpoint or frontend component.
1.	DB-First Principle: When an API endpoint is requested (/api/{entity}), it must SELECT directly from the corresponding normalized table (e.g., properties, units). Only JOIN to other normalized tables for related data.
2.	No Direct raw_doorloop_data Querying by API: API endpoints should query the normalized tables, not raw_doorloop_data or doorloop_raw_* tables, unless it's a specific dev-debug endpoint.
3.	No Frontend Joins/Derivations: The frontend (.tsx files) will ONLY display data as provided by the backend API. It will not perform JOINs or complex derivations.
4.	camelCase / PascalCase Strictness: All backend API responses MUST use the aliasing defined above.
5.	JSONB Parsing: Backend API routes must json.loads() (or rely on psycopg2.extras.DictCursor to auto-parse) any JSONB columns before jsonify()ing them to the frontend.
6.	NULL Handling for Fallbacks: If a field is NULL in the database, the API should return null or None. The frontend then renders —.
7.	Sync is the ONLY DB Populator: All data in the normalized tables gets there only via KpiService.py's syncAllDoorLoopData method, which is the controlled point for DoorLoop API data.
________________________________________
Phase 4: Run Initial Master Sync (The First Fill)
Action: After the schema is created, run the master sync.
•	Instruction to Replit: "Now that the database schema is complete, we will execute the master sync logic. This will pull ALL data from DoorLoop and populate your freshly created Supabase tables.
Locate your server/services/KpiService.py file and verify its syncAllDoorLoopData method is exactly as I last provided it in the 'Blueprint: Global API to Database Full Patch & Logic Correction' section. This method handles all fetching, raw data storage, and normalization.
Then, execute the sync from your Replit shell:
Bash
curl -X POST http://localhost:5000/api/kpis/sync
Monitor the console very closely for any errors during this sync. It MUST complete successfully for ALL entities.
After the sync, provide the following database counts from Supabase to confirm initial population:
1.	Total Properties: psql -d <your_db_name> -c "SELECT COUNT(*) FROM properties WHERE doorloop_id IS NOT NULL;"
2.	Total Units: psql -d <your_db_name> -c "SELECT COUNT(*) FROM units WHERE doorloop_id IS NOT NULL;"
3.	Total Leases: psql -d <your_db_name> -c "SELECT COUNT(*) FROM leases WHERE doorloop_id IS NOT NULL;"
4.	Total Tenants: psql -d <your_db_name> -c "SELECT COUNT(*) FROM tenants WHERE doorloop_id IS NOT NULL;"
5.	Total Work Orders: psql -d <your_db_name> -c "SELECT COUNT(*) FROM tasks WHERE type = 'WORK_ORDER' AND doorloop_id IS NOT NULL;"
6.	Total Vendors: psql -d <your_db_name> -c "SELECT COUNT(*) FROM vendors WHERE doorloop_id IS NOT NULL;"
7.	Total Lease Payments: psql -d <your_db_name> -c "SELECT COUNT(*) FROM lease_payments WHERE doorloop_id IS NOT NULL;"
Provide the exact output for all these SQL queries."
This comprehensive blueprint and step-by-step verification is our strongest path to a fully "bulletproof" database.
