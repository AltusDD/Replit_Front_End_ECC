1) Quick unblock (1-line change)

If you just want to compile now, switch the import in the failing file to a relative path:

src/features/systems/integrations/IntegrationsHealthPage.tsx

- import { apiRequest } from "@/lib/queryClient";
+ import { apiRequest } from "../../../lib/queryClient";

2) Proper fix (path alias + client util)
A) Create the client util (if missing)

src/lib/queryClient.ts

import { QueryClient } from "@tanstack/react-query";

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: { refetchOnWindowFocus: false, retry: 1, staleTime: 30_000 },
    mutations: { retry: 0 },
  },
});

type ApiOpts = RequestInit & { json?: unknown; qs?: Record<string, any> };

function buildUrl(path: string, qs?: Record<string, any>) {
  const base = typeof window !== "undefined" ? window.location.origin : "http://localhost";
  const url = path.startsWith("http") ? new URL(path) : new URL(path, base);
  if (qs) for (const [k, v] of Object.entries(qs)) if (v != null) url.searchParams.set(k, String(v));
  return url.toString();
}

export async function apiRequest(path: string, opts: ApiOpts = {}) {
  const { json, qs, headers, ...rest } = opts;
  const url = buildUrl(path, qs);
  const res = await fetch(url, {
    headers: { "Content-Type": "application/json", ...headers },
    body: json ? JSON.stringify(json) : rest.body,
    ...rest,
  });
  const ctype = res.headers.get("content-type") || "";
  const payload = ctype.includes("application/json")
    ? await res.json().catch(() => null)
    : await res.text();

  if (!res.ok) throw { status: res.status, url, payload };
  return payload;
}

B) Wire the @ alias for Vite + TS

vite.config.ts

import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import { fileURLToPath, URL } from "node:url";

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: { "@": fileURLToPath(new URL("./src", import.meta.url)) },
  },
});


tsconfig.json (merge if present)

{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": { "@/*": ["src/*"] }
  }
}

C) Ensure React Query is provided

src/main.tsx (or App root)

import { QueryClientProvider } from "@tanstack/react-query";
import { queryClient } from "@/lib/queryClient";

// ...
root.render(
  <React.StrictMode>
    <QueryClientProvider client={queryClient}>
      <App />
    </QueryClientProvider>
  </React.StrictMode>
);

3) DoorLoop Smoke Checklist (copy/paste for Replit)
Prereqs

Secrets:

DOORLOOP_API_KEY = your real key

DOORLOOP_BASE_URL = https://api.doorloop.com
 ← (not https://app.doorloop.com/api)

Optional: DOORLOOP_AUTH_MODE = bearer (default) or x-api-key

Scripts are executable:

chmod +x tools/smoke_doorloop.sh tools/run_backfill.sh || true

A. CLI smoke
./tools/smoke_doorloop.sh


Expect: HTTP 200/401 JSON from /owners or /me.

If you see 404 + HTML “ReadMe / Page Not Found” → base URL is wrong; set DOORLOOP_BASE_URL=https://api.doorloop.com.

If 401 → key/header mode mismatch; set DOORLOOP_AUTH_MODE=x-api-key if your account uses that header (and update client to send x-api-key), otherwise keep bearer.

B. Curl spot-checks
# ping raw API
curl -sS -D - -o /dev/null "$DOORLOOP_BASE_URL/owners" \
  -H "Authorization: Bearer $DOORLOOP_API_KEY"

# try with x-api-key (if needed)
curl -sS -D - -o /dev/null "$DOORLOOP_BASE_URL/owners" \
  -H "x-api-key: $DOORLOOP_API_KEY"


200 = good; 401 = auth; 404 HTML = wrong host/path.

C. Admin endpoints (your app)
# health snapshot
curl -sS /api/admin/integrations/status | jq .

# API connectivity
curl -sS -X POST /api/admin/doorloop/ping | jq .

# shallow smoke (first page of each entity)
curl -sS -X POST /api/admin/doorloop/smoke | jq .

# start delta sync (respects AUTO_SYNC_* env)
curl -sS -X POST "/api/admin/doorloop/sync/start?entities=owners,properties,units,leases,tenants" | jq .

# force manual backfill
curl -sS -X POST "/api/admin/doorloop/backfill?entities=owners,properties,units,leases,tenants" \
  -H "Content-Type: application/json" -d '{"mode":"full"}' | jq .

# tail logs
curl -sS "/api/admin/doorloop/logs?limit=50" | jq .

D. Data landed?

Hit your portfolio APIs:

/api/portfolio/owners?limit=5

/api/portfolio/properties?limit=5

/api/portfolio/tenants?limit=5

Open a card page with a synced ID:

/card/owner/:id, /card/property/:id, etc.

Integrations Health Console:

Systems → Integrations → Health: run Ping, Smoke, Delta Sync, view Logs.

E. Common failure → fix map
Symptom	Likely cause	Fix
404 + HTML “ReadMe Page Not Found”	Wrong base URL (app.doorloop.com)	Set DOORLOOP_BASE_URL=https://api.doorloop.com (if your client expects a versioned path, try /v1)
401 Unauthorized	Auth header mode mismatch	Set DOORLOOP_AUTH_MODE and have client send either Authorization: Bearer or x-api-key
200 but empty arrays	Wrong account / env / filters	Verify key is for the correct DoorLoop account; run backfill full
Admin “Last success: Never”	Scheduler isn’t running or crashing	Check /api/admin/doorloop/logs, ensure AUTO_SYNC_ENABLED=true, and server console for stack traces

(Optional tiny client tweak if you need both header modes)

// server/clients/doorloop.ts (headers)
const authMode = (process.env.DOORLOOP_AUTH_MODE || "bearer").toLowerCase();
const headers =
  authMode === "x-api-key"
    ? { "x-api-key": apiKey }
    : { Authorization: `Bearer ${apiKey}` };
