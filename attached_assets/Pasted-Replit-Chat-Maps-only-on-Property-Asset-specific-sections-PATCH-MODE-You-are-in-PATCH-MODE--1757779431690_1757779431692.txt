Replit Chat — “Maps only on Property” + Asset-specific sections (PATCH MODE)

You are in PATCH MODE. Apply the exact changes below. After patching, run npm run guardrail and report results.

0) Update guardrail: GeoMap import allowed only on Property page

File: scripts/guardrail-check.mjs (edit in place; add the block marked // GEO ONLY-ON-PROPERTY below)

@@
 const reApiString = /["'`]\/api\//;
 const reImportEccApi = /from\s+["''][^"']*lib\/ecc-api["'']/;
 const reApiGetCall = /\bapiGet\s*\(/;
 const reImportResolvers = /from\s+["''][^"']*lib\/ecc-resolvers["'']/;
+// GEO ONLY-ON-PROPERTY
+const reImportGeoMap = /from\s+["''][^"']*components\/GeoMap["'']/;

@@
 for (const file of pages) {
   const rel = path.relative(ROOT, file);
   const src = fs.readFileSync(file, "utf8");
+  const isPropertyPage = rel.replace(/\\/g,"/") === "src/pages/card/property/index.tsx";

@@
   if (!reImportResolvers.test(src)) {
     violations.push({ file: rel, rule: "MUST_USE_RESOLVERS", msg: "Card pages must import from lib/ecc-resolvers." });
   }
+
+  // Disallow GeoMap import on any card page that isn't the Property page
+  if (reImportGeoMap.test(src) && !isPropertyPage) {
+    violations.push({ file: rel, rule: "GEO_MAP_ONLY_ON_PROPERTY", msg: "Only Property page may import GeoMap." });
+  }
 }

1) Property page — overwrite with asset-specific sections (map stays here)

File: src/pages/card/property/index.tsx (replace entire file)

import React from "react";
import { useParams, Link } from "wouter";
import Section from "../../../components/Section";
import { FieldRows } from "../../../components/FieldRows";
import GeoMap from "../../../components/GeoMap";
import { Line, Block } from "../../../components/Skeleton";
import { humanize, joinAddress, moneyCents, isFiniteNumber } from "../../../lib/format";
import { usePropertyById, usePropertyRelations } from "../../../lib/ecc-resolvers";

function Skeleton() {
  return (
    <div style={{ display:"grid", gridTemplateColumns:"1fr 340px", gap:16, alignItems:"start" }}>
      <section className="ecc-object"><div className="ecc-header"><Line w={240} /><div/></div><Block h={96}/></section>
      <aside style={{ display:"grid", gap:12 }}>
        <Section title={<Line w={160}/>}><Block h={260}/></Section>
        <Section title={<Line w={120}/>}><Block h={96}/></Section>
      </aside>
    </div>
  );
}

export default function PropertyCardPage(){
  const { id } = useParams<{ id: string }>();
  const q = usePropertyById(id);
  if (q.isLoading) return <Skeleton />;
  if (q.isError) return <section className="ecc-object">Error loading property.</section>;
  if (!q.data) return <section className="ecc-object">Property not found. (Route expects internal ECC id)</section>;

  const p = q.data;
  const rel = usePropertyRelations(p);
  const addr = joinAddress([p.street_1, p.city, p.state, p.zip]);
  const lat = isFiniteNumber(p.lat) ? p.lat : null;
  const lng = isFiniteNumber(p.lng) ? p.lng : null;

  const leases = rel.data?.leases || [];
  const unitCount = rel.data?.units?.length ?? null;
  const activeLeases = leases.filter(l => (l.status||"").toLowerCase()==="active").length || null;
  const occ = unitCount ? Math.round((Math.min(activeLeases||0, unitCount)/unitCount)*100) : null;
  const avgRentCents = (() => {
    const nums = leases.map(l=>l.rent_cents).filter((n): n is number => typeof n==="number");
    return nums.length ? Math.round(nums.reduce((a,b)=>a+b,0)/nums.length) : null;
  })();

  return (
    <div style={{ display:"grid", gridTemplateColumns:"1fr 340px", gap:16, alignItems:"start" }}>
      {/* LEFT */}
      <div>
        {/* Header + KPIs */}
        <section className="ecc-object" style={{ marginBottom:12 }}>
          <div className="ecc-header">
            <div className="ecc-title" style={{ fontSize:20, fontWeight:700 }}>{addr !== "—" ? addr : `Property #${p.id}`}</div>
            <div className="ecc-actions" style={{ display:"flex", gap:8 }}>
              <button className="ecc-object" style={{ padding:"8px 12px" }}>Edit</button>
              <button className="ecc-object" style={{ padding:"8px 12px" }}>Export PDF</button>
              <button className="ecc-object" style={{ padding:"8px 12px" }}>New Work Order</button>
            </div>
          </div>
          <div style={{ display:"grid", gridTemplateColumns:"repeat(4, minmax(0,1fr))", gap:12 }}>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Units</div><div style={{ fontSize:20, fontWeight:700 }}>{unitCount ?? "—"}</div></div>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Occupancy</div><div style={{ fontSize:20, fontWeight:700 }}>{occ==null?"—":`${occ}%`}</div></div>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Active Leases</div><div style={{ fontSize:20, fontWeight:700 }}>{activeLeases ?? "—"}</div></div>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Avg Rent</div><div style={{ fontSize:20, fontWeight:700 }}>{moneyCents(avgRentCents)}</div></div>
          </div>
        </section>

        {/* Overview */}
        <Section title="Property Overview">
          <FieldRows rows={[
            { label:"Address", value: addr },
            { label:"Type", value: humanize(p.type) },
            { label:"Class", value: humanize(p.class) },
            { label:"Status", value: humanize(p.status) },
            { label:"IDs", value: <>#{p.id}{p.doorloop_id ? <> • DL {p.doorloop_id}</> : null}</> },
            { label:"Owner", value: p.owner_id ? <Link href={`/card/owner/${p.owner_id}`}><a>Open Owner</a></Link> : "—" },
          ]}/>
        </Section>

        {/* Relationships */}
        <Section title="Units → Active Lease → Primary Tenant">
          {rel.isLoading ? <Block h={96}/> :
           (rel.data?.units?.length ?? 0) === 0 ? <div style={{ opacity:.8 }}>No units linked via DoorLoop.</div> :
           <div style={{ display:"grid", gridTemplateColumns:"repeat(auto-fill, minmax(260px,1fr))", gap:12 }}>
            {rel.data!.units.map(u => {
              const lease = leases.find(l => l.unit_id===u.id && (l.status||"").toLowerCase()==="active");
              const tenant = lease ? (rel.data!.tenants || []).find(t => t.id===lease.primary_tenant_id) : null;
              return (
                <div key={u.id} className="ecc-object" style={{ padding:12 }}>
                  <div style={{ fontWeight:700, marginBottom:6 }}>Unit {u.unit_number ?? u.id}</div>
                  <div style={{ fontSize:12, opacity:.8, marginBottom:8 }}>{u.beds ?? "—"} bd • {u.baths ?? "—"} ba</div>
                  <div><span className="ecc-label">Active Lease:</span> {lease ? `#${lease.doorloop_id}` : "None"}</div>
                  <div><span className="ecc-label">Primary Tenant:</span> {tenant ? <Link href={`/card/tenant/${tenant.id}`}><a>{tenant.display_name ?? `Tenant #${tenant.id}`}</a></Link> : "—"}</div>
                </div>
              );
            })}
           </div>
          }
        </Section>

        {/* CoreLogic (stubbed actions) */}
        <Section title="CoreLogic">
          <div style={{ display:"flex", flexWrap:"wrap", gap:8 }}>
            <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={()=>alert("Stub: Run AVM")}>Run AVM</button>
            <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={()=>alert("Stub: Pull Comps")}>Pull Comps</button>
            <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={()=>alert("Stub: Check Fraud")}>Check Fraud</button>
          </div>
        </Section>

        {/* Assessor & GIS */}
        <Section title="Assessor & GIS">
          <FieldRows rows={[
            { label:"Parcel ID", value:"—" },
            { label:"Assessed Value", value:"—" },
          ]}/>
          <div style={{ marginTop:8, display:"flex", gap:8 }}>
            <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={()=>alert("Stub: Open CoreLogic Assessor")}>Open Assessor</button>
            <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={()=>alert("Stub: Open GIS Map")}>Open GIS Map</button>
          </div>
        </Section>

        {/* Utilities (Property/Common Areas) */}
        <Section title="Utilities (Property/Common Areas)">
          <FieldRows rows={[
            { label:"Electric (Responsible)", value:"Owner — Provider: —" },
            { label:"Gas (Responsible)", value:"Owner — Provider: —" },
            { label:"Water/Sewer (Responsible)", value:"Owner — Provider: —" },
            { label:"Trash (Responsible)", value:"Owner — Provider: —" },
            { label:"Landscaping/Snow", value:"Owner — Provider: —" },
          ]}/>
        </Section>

        {/* Maintenance & Inspections */}
        <Section title="Maintenance & Schedules">
          <FieldRows rows={[
            { label:"Next Property Inspection", value:"—" },
            { label:"Roof/Gutter Service", value:"—" },
            { label:"Fire Extinguisher Check", value:"—" },
          ]}/>
        </Section>

        {/* Notes / Media & Files / Marketing */}
        <Section title="Notes">
          <div style={{ opacity:.9, marginBottom:8 }}>No notes yet.</div>
          <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={()=>alert("Stub: Add Note")}>Add Note</button>
        </Section>

        <Section title="Media & Files">
          <div style={{ display:"flex", gap:8, flexWrap:"wrap" }}>
            <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={()=>alert("Stub: Open DoorLoop Files")}>DoorLoop</button>
            <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={()=>alert("Stub: Open Dropbox Folder")}>Dropbox</button>
            <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={()=>alert("Stub: Upload File")}>Upload</button>
          </div>
        </Section>

        <Section title="Marketing">
          <FieldRows rows={[
            { label:"Brochure", value:"—" },
            { label:"Photos", value:"—" },
            { label:"Campaigns", value:"—" },
          ]}/>
        </Section>
      </div>

      {/* RIGHT RAIL (Property is the ONLY card with a map) */}
      <aside style={{ display:"grid", gap:12 }}>
        <GeoMap title="Location" address={addr} lat={lat} lng={lng} />
        <Section title="Risk Score"><div style={{ fontSize:28, fontWeight:800 }}>—</div><div className="ecc-label">Key Factors</div><div style={{ opacity:.8 }}>None listed.</div></Section>
        <Section title="Key Dates"><div style={{ opacity:.8 }}>No upcoming events.</div></Section>
      </aside>
    </div>
  );
}

2) Unit page — remove map, add unit-specific sections (overwrite file)

File: src/pages/card/unit/index.tsx (replace entire file)

import React from "react";
import { useParams, Link } from "wouter";
import Section from "../../../components/Section";
import { FieldRows } from "../../../components/FieldRows";
import { Line, Block } from "../../../components/Skeleton";
import { humanize, moneyCents } from "../../../lib/format";
import { useUnitById, useUnitRelations } from "../../../lib/ecc-resolvers";

function Skeleton(){ return <section className="ecc-object"><div className="ecc-header"><Line w={220}/></div><Block h={120}/></section>; }

export default function UnitCardPage(){
  const { id } = useParams<{ id: string }>();
  const q = useUnitById(id);
  if (q.isLoading) return <Skeleton/>;
  if (q.isError) return <section className="ecc-object">Error loading unit.</section>;
  if (!q.data) return <section className="ecc-object">Unit not found. (Route expects internal ECC id)</section>;

  const u = q.data;
  const rel = useUnitRelations(u);

  const title = `Unit ${u.unit_number ?? u.id}`;
  const rent = moneyCents(u.rent_cents ?? null);

  return (
    <div style={{ display:"grid", gridTemplateColumns:"1fr 340px", gap:16 }}>
      <div>
        <section className="ecc-object" style={{ marginBottom:12 }}>
          <div className="ecc-header">
            <div className="ecc-title" style={{ fontSize:20, fontWeight:700 }}>{title}</div>
            <div className="ecc-actions" style={{ display:"flex", gap:8 }}>
              <button className="ecc-object" style={{ padding:"8px 12px" }}>Edit</button>
              <button className="ecc-object" style={{ padding:"8px 12px" }}>Export PDF</button>
            </div>
          </div>
          <div style={{ display:"grid", gridTemplateColumns:"repeat(3, minmax(0,1fr))", gap:12 }}>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Status</div><div style={{ fontSize:20, fontWeight:700 }}>{humanize(u.status)}</div></div>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Beds/Baths</div><div style={{ fontSize:20, fontWeight:700 }}>{u.beds ?? "—"} / {u.baths ?? "—"}</div></div>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Rent</div><div style={{ fontSize:20, fontWeight:700 }}>{rent}</div></div>
          </div>
        </section>

        <Section title="Unit Overview">
          <FieldRows rows={[
            { label:"Property", value: rel.data?.property ? <Link href={`/card/property/${rel.data.property.id}`}><a>Open Property</a></Link> : "—" },
            { label:"Unit Number", value: u.unit_number ?? "—" },
            { label:"Square Feet", value: u.sqft ?? "—" },
            { label:"Market Rent", value: rent },
            { label:"DoorLoop ID", value: u.doorloop_id ?? "—" },
          ]}/>
        </Section>

        <Section title="Lease & Tenant">
          {rel.isLoading ? <Block h={96}/> : (
            <>
              <div><span className="ecc-label">Active Lease:</span> {rel.data?.activeLease ? `#${rel.data.activeLease.doorloop_id}` : "None"}</div>
              <div><span className="ecc-label">Primary Tenant:</span> {rel.data?.tenant ? <Link href={`/card/tenant/${rel.data.tenant.id}`}><a>{rel.data.tenant.display_name ?? `Tenant #${rel.data.tenant.id}`}</a></Link> : "—"}</div>
            </>
          )}
        </Section>

        <Section title="Utilities (Unit)">
          <FieldRows rows={[
            { label:"Electric (Responsible)", value:"Tenant — Provider: —" },
            { label:"Gas (Responsible)", value:"Tenant — Provider: —" },
            { label:"Water/Sewer (Responsible)", value:"Tenant — Provider: —" },
          ]}/>
        </Section>

        <Section title="Equipment & Serials">
          <FieldRows rows={[
            { label:"Furnace Serial", value:"—" },
            { label:"Water Heater Serial", value:"—" },
            { label:"Appliances (Range/Fridge)", value:"—" },
            { label:"Filter Size", value:"—" },
          ]}/>
        </Section>

        <Section title="Maintenance & Schedules">
          <FieldRows rows={[
            { label:"Air Filter Change", value:"—" },
            { label:"Smoke/CO Detector Check", value:"—" },
            { label:"Appliance Service", value:"—" },
          ]}/>
        </Section>

        <Section title="Marketing & Media">
          <FieldRows rows={[
            { label:"Floor Plan", value:"—" },
            { label:"Photos", value:"—" },
            { label:"Listing Terms", value:"—" },
          ]}/>
          <div style={{ marginTop:8, display:"flex", gap:8, flexWrap:"wrap" }}>
            <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={()=>alert("Stub: Open DoorLoop Unit Files")}>DoorLoop</button>
            <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={()=>alert("Stub: Open Dropbox Folder")}>Dropbox</button>
          </div>
        </Section>
      </div>

      {/* RIGHT RAIL (no map on Unit) */}
      <aside style={{ display:"grid", gap:12 }}>
        <Section title="Upcoming Tasks"><div style={{ opacity:.8 }}>None scheduled.</div></Section>
        <Section title="Recent Work Orders"><div style={{ opacity:.8 }}>None found.</div></Section>
      </aside>
    </div>
  );
}

3) Ensure Lease/Tenant/Owner have header actions and no GeoMap imports

If any of the following files import GeoMap, remove that import and any map usage.

Lease header actions — open file and ensure header actions exist; if not, replace top section with:

<section className="ecc-object" style={{ marginBottom:12 }}>
  <div className="ecc-header">
    <div className="ecc-title" style={{ fontSize:20, fontWeight:700 }}>Lease</div>
    <div className="ecc-actions" style={{ display:"flex", gap:8 }}>
      <button className="ecc-object" style={{ padding:"8px 12px" }}>Edit</button>
      <button className="ecc-object" style={{ padding:"8px 12px" }}>Export PDF</button>
    </div>
  </div>
  {/* keep existing KPI blocks/content here */}
</section>


Tenant header actions — similar block with title {t.display_name ?? \Tenant #${t.id}`}`.

Owner header actions — similar block with title {o.display_name ?? \Owner #${o.id}`}`.

(Leave their existing sections intact; just add actions and remove any GeoMap imports if present.)

4) Run guardrail & report

Run: npm run guardrail

If it fails, paste the exact violations and fix per message (likely a stray GeoMap import in non-property pages).

Then reload /card/property/<real id> and /card/unit/<real id> to verify the new sections render.

If you’d like, I can follow up with a compact patch to add consistent “Financials” and “Files/Activity” sections to Lease and “Payments/Balance” to Tenant, staying 100% within this asset-specific approach.