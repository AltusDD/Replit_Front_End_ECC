This redeploys a dependency-free backend (no requests), so you don’t get 500s from missing packages. You’ll just paste commands in the Replit Shell.

Step 0 — If the Shell says az: command not found

Paste this once, wait until it finishes:

curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

Step 1 — Log in
az login --use-device-code


(A code appears → open the link → paste the code → select your account.)

Step 2 — Make sure Replit Secrets are set (left sidebar 🔒)

SUPABASE_URL = https://<your-project>.supabase.co

SUPABASE_SERVICE_ROLE_KEY = your service_role key

Step 3 — Paste this whole block in Shell (it writes & runs the deploy for you)
cat > deploy.sh <<'EOF'
#!/bin/bash
set -euo pipefail
RG="empirecommandcenter-altus-staging_group"
APP="empirecommandcenter-altus-staging"
DEPLOY_DIR="ecc_hotfix_final"
DEPLOY_ZIP="ecc_hotfix_final.zip"

if ! az account show >/dev/null 2>&1; then echo "Run: az login --use-device-code"; exit 1; fi
: "${SUPABASE_URL:?Set SUPABASE_URL in Replit Secrets}"
: "${SUPABASE_SERVICE_ROLE_KEY:?Set SUPABASE_SERVICE_ROLE_KEY in Replit Secrets}"

echo "Checking AzureWebJobsStorage (must exist on app)..."
if [[ -z "$(az functionapp config appsettings list -g "$RG" -n "$APP" --query "[?name=='AzureWebJobsStorage'].value" -o tsv)" ]]; then
  echo "ERROR: AzureWebJobsStorage is empty. Set it once in Portal → Configuration, then re-run."
  exit 1
fi

ADMIN_TOKEN=$(openssl rand -hex 32)
rm -rf "$DEPLOY_DIR" "$DEPLOY_ZIP"; mkdir -p "$DEPLOY_DIR"

cat > "$DEPLOY_DIR/host.json" <<JSON
{ "version": "2.0", "extensionBundle": { "id": "Microsoft.Azure.Functions.ExtensionBundle", "version": "[4.*, 5.0.0)" } }
JSON

write_entity() {
  local folder="$1" table="$2"
  mkdir -p "$DEPLOY_DIR/$folder"
  cat > "$DEPLOY_DIR/$folder/function.json" <<F
{ "scriptFile":"__init__.py","bindings":[
  {"authLevel":"anonymous","type":"httpTrigger","direction":"in","name":"req","methods":["get"],"route":"entities/$table/{id?}"},
  {"type":"http","direction":"out","name":"\$return"}]}
F
  cat > "$DEPLOY_DIR/$folder/__init__.py" <<'PY'
import os, json, urllib.request, urllib.parse, azure.functions as func, os as _os
SUPABASE_URL=os.environ.get("SUPABASE_URL"); SUPABASE_KEY=os.environ.get("SUPABASE_SERVICE_ROLE_KEY")
TABLE=_os.path.basename(_os.path.dirname(__file__)).split("-")[-1]
def _sb(path, params):
    if not SUPABASE_URL or not SUPABASE_KEY: raise RuntimeError("Missing SUPABASE_URL or SUPABASE_SERVICE_ROLE_KEY")
    qs=urllib.parse.urlencode(params, doseq=True); url=f"{SUPABASE_URL}/rest/v1/{path}?{qs}"
    req=urllib.request.Request(url, headers={"apikey":SUPABASE_KEY,"Authorization":f"Bearer {SUPABASE_KEY}"})
    with urllib.request.urlopen(req, timeout=15) as r: return json.loads(r.read().decode("utf-8") or "null")
def main(req: func.HttpRequest) -> func.HttpResponse:
    try:
        params={}; 
        for k in ("select","limit","order"):
            v=req.params.get(k); 
            if v: params[k]=v
        rid=req.route_params.get("id")
        if rid: params["id"]=f"eq.{rid}"
        else: params.setdefault("select","*")
        data=_sb(TABLE, params)
        if rid and isinstance(data,list) and len(data)==1: data=data[0]
        return func.HttpResponse(json.dumps(data), mimetype="application/json")
    except urllib.error.HTTPError as e:
        return func.HttpResponse(json.dumps({"error":"supabase_http_error","status":e.code}), status_code=502, mimetype="application/json")
    except Exception as e:
        return func.HttpResponse(json.dumps({"error":"server_error","detail":str(e)}), status_code=500, mimetype="application/json")
PY
}

write_simple_get(){
  local folder="$1" route="$2" select="$3" table="$4"
  mkdir -p "$DEPLOY_DIR/$folder"
  cat > "$DEPLOY_DIR/$folder/function.json" <<F
{ "scriptFile":"__init__.py","bindings":[
  {"authLevel":"anonymous","type":"httpTrigger","direction":"in","name":"req","methods":["get"],"route":"$route"},
  {"type":"http","direction":"out","name":"\$return"}]}
F
  cat > "$DEPLOY_DIR/$folder/__init__.py" <<PY
import os, json, urllib.request, urllib.parse, azure.functions as func
SUPABASE_URL=os.environ.get("SUPABASE_URL"); SUPABASE_KEY=os.environ.get("SUPABASE_SERVICE_ROLE_KEY")
def _sb(table, params):
    qs=urllib.parse.urlencode(params, doseq=True); url=f"{SUPABASE_URL}/rest/v1/{table}?{qs}"
    req=urllib.request.Request(url, headers={"apikey":SUPABASE_KEY,"Authorization":f"Bearer {SUPABASE_KEY}"})
    with urllib.request.urlopen(req, timeout=15) as r: return json.loads(r.read().decode("utf-8") or "null")
def main(req: func.HttpRequest) -> func.HttpResponse:
    try:
        q=(req.params.get("q") or "").strip()
        params={"select":"$select"}
        if q: params["display_name"]=f"ilike.%{q}%"
        data=_sb("$table", params)
        return func.HttpResponse(json.dumps(data), mimetype="application/json")
    except Exception as e:
        return func.HttpResponse(json.dumps({"error":"server_error","detail":str(e)}), status_code=500, mimetype="application/json")
PY
}

write_context(){
  local folder="$1" route="$2"
  mkdir -p "$DEPLOY_DIR/$folder"
  cat > "$DEPLOY_DIR/$folder/function.json" <<F
{ "scriptFile":"__init__.py","bindings":[
  {"authLevel":"anonymous","type":"httpTrigger","direction":"in","name":"req","methods":["get"],"route":"$route"},
  {"type":"http","direction":"out","name":"\$return"}]}
F
  cat > "$DEPLOY_DIR/$folder/__init__.py" <<'PY'
import os, json, urllib.request, urllib.parse, azure.functions as func
SUPABASE_URL=os.environ.get("SUPABASE_URL"); SUPABASE_KEY=os.environ.get("SUPABASE_SERVICE_ROLE_KEY")
def _sb(table, params):
    qs=urllib.parse.urlencode(params, doseq=True); url=f"{SUPABASE_URL}/rest/v1/{table}?{qs}"
    req=urllib.request.Request(url, headers={"apikey":SUPABASE_KEY,"Authorization":f"Bearer {SUPABASE_KEY}"})
    with urllib.request.urlopen(req, timeout=15) as r: return json.loads(r.read().decode("utf-8") or "null")
def main(req: func.HttpRequest) -> func.HttpResponse:
    try:
        src=req.params.get("sourceOwnerId")
        if not src:
            return func.HttpResponse(json.dumps({"error":"missing_sourceOwnerId"}), status_code=400, mimetype="application/json")
        owner=_sb("owners", {"id":f"eq.{src}","select":"id,display_name,primary_email,primary_phone"})
        ctx={"sourceOwner": (owner[0] if isinstance(owner,list) and owner else owner), "canTransfer": bool(owner)}
        return func.HttpResponse(json.dumps(ctx), mimetype="application/json")
    except Exception as e:
        return func.HttpResponse(json.dumps({"error":"server_error","detail":str(e)}), status_code=500, mimetype="application/json")
PY
}

write_admin(){
  local folder="$1" route="$2"
  mkdir -p "$DEPLOY_DIR/$folder"
  cat > "$DEPLOY_DIR/$folder/function.json" <<F
{ "scriptFile":"__init__.py","bindings":[
  {"authLevel":"anonymous","type":"httpTrigger","direction":"in","name":"req","methods":["post"],"route":"$route"},
  {"type":"http","direction":"out","name":"\$return"}]}
F
  cat > "$DEPLOY_DIR/$folder/__init__.py" <<'PY'
import os, json, azure.functions as func, os as _os
ADMIN=os.environ.get("ADMIN_SYNC_TOKEN")
def main(req: func.HttpRequest) -> func.HttpResponse:
    if not ADMIN or req.headers.get("x-admin-token") != ADMIN:
        return func.HttpResponse(json.dumps({"error":"unauthorized"}), status_code=401, mimetype="application/json")
    try:
        body=req.get_json() if req.get_body() else {}
        step=_os.path.basename(_os.path.dirname(__file__)).split("owners-")[-1]
        return func.HttpResponse(json.dumps({"ok":True,"step":step,"transferId":body.get("transferId")}), mimetype="application/json")
    except Exception as e:
        return func.HttpResponse(json.dumps({"error":"server_error","detail":str(e)}), status_code=500, mimetype="application/json")
PY
}

write_public_post(){
  local folder="$1" route="$2"
  mkdir -p "$DEPLOY_DIR/$folder"
  cat > "$DEPLOY_DIR/$folder/function.json" <<F
{ "scriptFile":"__init__.py","bindings":[
  {"authLevel":"anonymous","type":"httpTrigger","direction":"in","name":"req","methods":["post"],"route":"$route"},
  {"type":"http","direction":"out","name":"\$return"}]}
F
  cat > "$DEPLOY_DIR/$folder/__init__.py" <<'PY'
import json, secrets, azure.functions as func
def main(req: func.HttpRequest) -> func.HttpResponse:
    try:
        body=req.get_json() if req.get_body() else {}
        return func.HttpResponse(json.dumps({"transferId":secrets.token_hex(12),"ok":True,"echo":body}), mimetype="application/json")
    except Exception as e:
        return func.HttpResponse(json.dumps({"error":"server_error","detail":str(e)}), status_code=500, mimetype="application/json")
PY
}

# 11 functions
write_entity "entities-properties" "properties"
write_entity "entities-units"      "units"
write_entity "entities-leases"     "leases"
write_entity "entities-tenants"    "tenants"
write_entity "entities-owners"     "owners"
write_simple_get "owners-search" "owners/search" "id,display_name,primary_email,primary_phone" "owners"
write_context   "owners-transfercontext" "owners/transfercontext"
write_public_post "owners-initiatetransfer" "owners/initiatetransfer"
write_admin "owners-approvetransfer"  "owners/approvetransfer"
write_admin "owners-authorizetransfer" "owners/authorizetransfer"
write_admin "owners-executetransfer"   "owners/executetransfer"

( cd "$DEPLOY_DIR" && zip -qr "../$DEPLOY_ZIP" . )

echo "Setting app settings (keeping AzureWebJobsStorage)..."
az functionapp config appsettings set -g "$RG" -n "$APP" --settings \
  FUNCTIONS_WORKER_RUNTIME=python FUNCTIONS_EXTENSION_VERSION=~4 WEBSITE_RUN_FROM_PACKAGE=1 \
  SCM_DO_BUILD_DURING_DEPLOYMENT=false ADMIN_SYNC_TOKEN="$ADMIN_TOKEN" \
  SUPABASE_URL="$SUPABASE_URL" SUPABASE_SERVICE_ROLE_KEY="$SUPABASE_SERVICE_ROLE_KEY" >/dev/null

echo "Deploying zip..."
az functionapp deployment source config-zip -g "$RG" -n "$APP" --src "$DEPLOY_ZIP" >/dev/null

echo "Restarting..."
az functionapp restart -g "$RG" -n "$APP" >/dev/null

rm -rf "$DEPLOY_DIR" "$DEPLOY_ZIP"
echo "DONE. New ADMIN token (set this in your frontend secret VITE_ADMIN_SYNC_TOKEN):"
echo "$ADMIN_TOKEN"
EOF

chmod +x deploy.sh
bash deploy.sh

Step 4 — Quick verify (paste)
BASE="https://empirecommandcenter-altus-staging.azurewebsites.net"
echo "owners:" && curl -s -i "$BASE/api/entities/owners?select=id,display_name&limit=1" | head -n1
echo "search:" && curl -s -i "$BASE/api/owners/search?q=Jane" | head -n1
echo "context:" && curl -s -i "$BASE/api/owners/transfercontext?sourceOwnerId=1" | head -n1
echo "approve (401 expected w/o token):" && curl -s -i -X POST "$BASE/api/owners/approvetransfer" -d '{"transferId":"x"}' | head -n1


If you see HTTP/1.1 200 OK → backend fixed (empty arrays = fine if DB empty).

If you see HTTP/1.1 502 with supabase_http_error → your Supabase keys/URL are wrong. Re-check Portal → Configuration values.

If you prefer, tell me “Portal only” or “Replit only” and I’ll trim to a single ultra-short set.