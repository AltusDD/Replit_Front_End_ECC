Replit Prompt — “Portfolio V3 Missing Data: Diagnose + Fix (STRICT, GENESIS)”

ROLE
You are a senior TS/React engineer operating surgically in an existing Vite + React + TypeScript project (Empire Command Center). Your mission: diagnose and fix missing/blank data in the Portfolio V3 pages while preserving theme, layout, and table features.

HARD GUARDRAILS (do not violate):

Touch only the files and lines specified below.

No stylistic refactors, no import reordering, no auto-formatters.

Do not change the nav pane, routing, theme tokens, or table component API.

Do not install packages or change build config.

Keep wouter only.

Keep DataTable features & CSS exactly as-is.

Keep row double-click and pagination options intact.

Phase 0 — Targets

Audit already identified gaps; we’ll fix them precisely:

Properties: ZIP fallback paths too narrow.

Units: property name/label mismatch; beds/baths/sqft path drift.

Leases: missing unit.label enrichment; multi-tenant support.

Tenants: property/unit context fragile; tenant type (primary/secondary/prospect) logic gap.

Owners: company/email/phone field names not matched.

Formatters: money(0) shows “—” (needs “$0”).

Cross-entity joins: normalize IDs (string vs number).

Files you may edit (and only these):

src/pages/portfolio/columns.tsx

src/pages/portfolio/properties/index.tsx

src/pages/portfolio/units/index.tsx

src/pages/portfolio/leases/index.tsx

src/pages/portfolio/tenants/index.tsx

src/pages/portfolio/owners/index.tsx

src/utils/format.ts (ensure extension is .ts, not .tsx; if it’s .tsx, rename + fix imports)

(Optional tiny helper) src/utils/ids.ts (new) for normalizeId

Phase 1 — Runtime shape probe (read-only)

Start dev, hit these endpoints, capture first item keys (no PII values):

curl -s http://localhost:8787/api/portfolio/properties | node -e "let d='';process.stdin.on('data',c=>d+=c).on('end',()=>{try{const a=JSON.parse(d)||[];const o=a[0]||{};console.log(Object.keys(o).sort())}catch(e){console.error('!bad json')}})"
curl -s http://localhost:8787/api/portfolio/units | node -e "let d='';process.stdin.on('data',c=>d+=c).on('end',()=>{try{const a=JSON.parse(d)||[];const o=a[0]||{};console.log(Object.keys(o).sort())}catch(e){console.error('!bad json')}})"
curl -s http://localhost:8787/api/portfolio/leases | node -e "let d='';process.stdin.on('data',c=>d+=c).on('end',()=>{try{const a=JSON.parse(d)||[];const o=a[0]||{};console.log(Object.keys(o).sort())}catch(e){console.error('!bad json')}})"
curl -s http://localhost:8787/api/portfolio/tenants | node -e "let d='';process.stdin.on('data',c=>d+=c).on('end',()=>{try{const a=JSON.parse(d)||[];const o=a[0]||{};console.log(Object.keys(o).sort())}catch(e){console.error('!bad json')}})"
curl -s http://localhost:8787/api/portfolio/owners | node -e "let d='';process.stdin.on('data',c=>d+=c).on('end',()=>{try{const a=JSON.parse(d)||[];const o=a[0]||{};console.log(Object.keys(o).sort())}catch(e){console.error('!bad json')}})"


Post the key lists back in chat (we won’t commit anything from this step).

Proceed to fixes below regardless (use sensible fallbacks if some fields absent).

Phase 2 — Precise fixes (apply exactly)
A) Formatter: show $0 (don’t hide zeros)

File: src/utils/format.ts

If the file is .tsx, rename to .ts and fix imports to .../format (no extension).

Modify money only, keep all other functions untouched.

export function money(n?: number | null): string {
  if (n == null || Number.isNaN(n as number)) return "—";
  if (n === 0) return "$0";
  const v = typeof n === "number" ? n : Number(n);
  return v.toLocaleString(undefined, { style: "currency", currency: "USD", maximumFractionDigits: 0 });
}

B) ID normalization helper for joins

New File (optional): src/utils/ids.ts

export const normalizeId = (id: any) => (id == null ? "" : String(id));


Ensure pages use normalizeId() wherever they build Maps or do cross-entity lookups.

C) Properties — ZIP fallbacks

File: src/pages/portfolio/columns.tsx
Find the Properties mapper (e.g., mapProperty). Update the zip line to include robust fallbacks:

const zip =
  getPath(src, "address.zip") ??
  getPath(src, "address.zipCode") ??
  getPath(src, "address.postal_code") ??
  getPath(src, "zipcode") ??
  getPath(src, "zip_code") ??
  getPath(src, "postal_code") ??
  getPath(src, "zip") ?? dash;


Keep column key/header as is (e.g., ZIP), just ensure the row object exposes zip.

D) Units — property name + label + BD/BA/SQFT paths

File: src/pages/portfolio/columns.tsx (Units mapper)

Property name (row field property):

const property =
  getPath(src, "property.name") ??
  getPath(src, "property.displayName") ??
  getPath(src, "property") ??
  dash;


Unit label:

const unit =
  getPath(src, "label") ??
  getPath(src, "unit.label") ??
  getPath(src, "unit_number") ??
  getPath(src, "number") ??
  getPath(src, "name") ?? dash;


Numeric fallbacks (ensure numbers; do not hide zero):

const beds = Number(
  getPath(src, "bedrooms") ??
  getPath(src, "beds") ?? 0
);
const baths = Number(
  getPath(src, "bathrooms") ??
  getPath(src, "baths") ?? 0
);
const sqft = Number(
  getPath(src, "squareFeet") ??
  getPath(src, "square_feet") ??
  getPath(src, "sqft") ?? 0
);


Leave marketRent as-is but ensure the mapper emits a numeric (or 0) so money() can render $0.

E) Leases — enrich with unit + multi-tenant

File: src/pages/portfolio/leases/index.tsx

Wherever the page builds pById, uById, tById maps, ensure keys use normalizeId().

When mapping leases, add:

const leaseId = normalizeId(l.id);
const prop = pById.get(normalizeId(l.property_id));
const unit = uById.get(normalizeId(l.unit_id));

const propName =
  prop?.name ?? prop?.displayName ?? prop?.address_line1 ?? "—";
const unitLabel =
  unit?.label ?? unit?.unit_number ?? unit?.number ?? unit?.name ?? "—";

// Build tenants array (primary + secondary)
const names: string[] = [];
if (l.primary_tenant_id) {
  const pt = tById.get(normalizeId(l.primary_tenant_id));
  if (pt?.display_name || pt?.full_name || pt?.name) {
    names.push(pt.display_name ?? pt.full_name ?? pt.name);
  }
}
if (l.tenant_id && l.tenant_id !== l.primary_tenant_id) {
  const st = tById.get(normalizeId(l.tenant_id));
  if (st?.display_name || st?.full_name || st?.name) {
    names.push(st.display_name ?? st.full_name ?? st.name);
  }
}
// If your DB has a many-to-many table (lease_tenants), fold those in here once available.

const shaped = {
  ...l,
  property: { name: propName },
  unit: { label: unitLabel },
  tenants: names.length ? names : ["—"],
};


Ensure columns read property.name, unit.label, and tenants (string join if your column renderer expects a string).

F) Tenants — property/unit context + type

File: src/pages/portfolio/tenants/index.tsx

Use latest (most recent) lease for context (already present per audit), but fix label robustness & type:

const unitLabel =
  unit?.unit_number ?? unit?.label ?? unit?.name ?? "—";

const tenantType = (() => {
  const raw = String(tenant?.type ?? "").toLowerCase();
  if (raw.includes("prospect")) return "prospect_tenant";
  // If present on latest lease, consider active lease tenant:
  if (latestLease?.status && String(latestLease.status).toLowerCase() === "active") {
    return "lease_tenant";
  }
  // Secondary tenant heuristic (if linked via l.tenant_id and not primary):
  if (latestLease && latestLease.primary_tenant_id && latestLease.tenant_id && latestLease.primary_tenant_id !== latestLease.tenant_id) {
    return "secondary_tenant";
  }
  return raw || "lease_tenant";
})();


Ensure the mapped row exposes type: tenantType, property.name, and unit.label so columns render.

G) Owners — company/email/phone fallbacks

File: src/pages/portfolio/columns.tsx (Owners mapper)

const company =
  getPath(src, "company") ??
  getPath(src, "companyName") ??
  getPath(src, "company_name") ??
  getPath(src, "businessName") ??
  getPath(src, "organization") ??
  getPath(src, "name") ??
  getPath(src, "ownerName") ?? dash;

const email =
  getPath(src, "email") ??
  getPath(src, "primary_email") ??
  getPath(src, "contact_email") ??
  getPath(src, "owner_email") ?? dash;

const phone =
  getPath(src, "phone") ??
  getPath(src, "phoneNumber") ??
  getPath(src, "phone_number") ??
  getPath(src, "contact_phone") ??
  getPath(src, "mobile") ?? dash;

const active =
  getPath(src, "active") ??
  getPath(src, "is_active") ??
  getPath(src, "status") ?? null;


Keep the Owners table columns as: COMPANY (bold) | EMAIL | PHONE | ACTIVE (StatusTag). Do not add a giant properties list column.

Phase 3 — Verification

Typecheck+build

pnpm typecheck || npm run typecheck || yarn typecheck
pnpm build || npm run build || yarn build


Smoke test pages

/portfolio/properties → ZIP now populates.

/portfolio/units → property + unit label visible; BD/BA/SQFT correct (0 allowed).

/portfolio/leases → property name, unit label, multi-tenant names show.

/portfolio/tenants → property & unit context; tenant type shows (prospect/lease/secondary).

/portfolio/owners → company, email, phone populate; active badge works.

No console errors. Pagination selector remains [25, 50, 100, 150, 200] at bottom.

Post back in chat

Summarize files changed + lines touched.

Show 1 example row per page (keys only, no PII values) proving the shaped fields exist:

Properties: { zip, units, occPct, active }

Units: { property, unit, beds, baths, sqft, marketRent }

Leases: { property: {name}, unit: {label}, tenants: [] }

Tenants: { name, email, phone, property: {name}, unit: {label}, type }

Owners: { company, email, phone, active }

Single commit

git add -A
git commit -m "Portfolio V3: fill missing data (ZIP/owners contacts/units labels/tenant types/lease unit), $0 money, normalized joins. No theme or nav changes."

Acceptance Criteria

Data appears in all previously blank columns (ZIP, Owners contact, Units label & numerics, Leases unit & tenants, Tenants type/context).

$0 renders as $0, not “—”.

No regression to filters/sort/pagination/row double-click.

No theme or nav changes.

Guardrails respected.

Begin.