Here are surgical, zero-drift Replit prompts to patch the live Property Card (and optionally mirror to the other cards). These do not add placeholders, keep your existing live pages, and simply enhance them with Genesis header KPIs + object surfaces using your live data only.

PROMPT 1 — PropertyCard: add Genesis KPIs (read-only, uses live API)

Open src/pages/card/property/index.tsx. Do not replace the whole file. Follow the three inserts below exactly.

1A) Add imports (top of file, keep existing ones)
// === Genesis KPIs (add) ===
import { useQuery } from "@tanstack/react-query";
import { apiGet } from "../../../lib/ecc-api";

1B) Add the tiny hook + header component (paste above the default export)
// === Genesis: live metrics for Property ===
function formatMoneyCents(cents?: number | null) {
  if (cents == null) return "—";
  const dollars = Math.round(cents) / 100;
  try { return dollars.toLocaleString(undefined, { style: "currency", currency: "USD", maximumFractionDigits: 0 }); }
  catch { return `$${Math.round(dollars)}`; }
}

/** Fetch units & leases for this property for KPIs (read-only) */
function usePropertyKpis(p: { id: number; doorloop_id?: string }) {
  return useQuery({
    queryKey: ["property-kpis", p.id, p.doorloop_id],
    queryFn: async () => {
      // Units by DL property id (per ECC schema: units.doorloop_property_id)
      const units = p.doorloop_id
        ? await apiGet("/api/entities/units", { params: { select: "id,status,beds,baths,rent_cents", doorloop_property_id: `eq.${p.doorloop_id}` } })
        : [];

      // Leases by internal property id
      const leases = await apiGet("/api/entities/leases", { params: { select: "doorloop_id,status,unit_id,primary_tenant_id,start_date,end_date,rent_cents", property_id: `eq.${p.id}` } });

      // Derive KPIs safely
      const unitCount = Array.isArray(units) ? units.length : 0;
      const activeLeases = Array.isArray(leases) ? leases.filter((l: any) => (l?.status || "").toLowerCase() === "active").length : 0;
      const occupiedUnits = Math.min(activeLeases, unitCount);
      const occupancyPct = unitCount > 0 ? Math.round((occupiedUnits / unitCount) * 100) : null;

      // Market rent (simple: average unit rent if present; falls back to average lease rent)
      const unitRents = (units || []).map((u: any) => u?.rent_cents).filter((v: any) => typeof v === "number");
      const leaseRents = (leases || []).map((l: any) => l?.rent_cents).filter((v: any) => typeof v === "number");
      const avgUnitRent = unitRents.length ? Math.round(unitRents.reduce((a: number, b: number) => a + b, 0) / unitRents.length) : null;
      const avgLeaseRent = !avgUnitRent && leaseRents.length ? Math.round(leaseRents.reduce((a: number, b: number) => a + b, 0) / leaseRents.length) : null;

      return {
        unitCount,
        activeLeases,
        occupancyPct,
        avgRentCents: avgUnitRent ?? avgLeaseRent ?? null,
      };
    },
  });
}

/** Compact KPI rail; uses existing page actions (we don't remove/duplicate them) */
function GenesisKpiRail({ p }: { p: { id: number; doorloop_id?: string } }) {
  const { data } = usePropertyKpis(p);
  const unitCount = data?.unitCount ?? null;
  const occupancy = data?.occupancyPct ?? null;
  const activeLeases = data?.activeLeases ?? null;
  const avgRent = formatMoneyCents(data?.avgRentCents ?? null);

  return (
    <div className="ecc-object" style={{ display: "grid", gridTemplateColumns: "repeat(4, minmax(0,1fr))", gap: 12, marginBottom: 12 }}>
      <div className="ecc-object" style={{ padding: 12 }}>
        <div style={{ opacity: 0.75, fontSize: 12 }}>Units</div>
        <div style={{ fontSize: 20, fontWeight: 700 }}>{unitCount ?? "—"}</div>
      </div>
      <div className="ecc-object" style={{ padding: 12 }}>
        <div style={{ opacity: 0.75, fontSize: 12 }}>Occupancy</div>
        <div style={{ fontSize: 20, fontWeight: 700 }}>{occupancy == null ? "—" : `${occupancy}%`}</div>
      </div>
      <div className="ecc-object" style={{ padding: 12 }}>
        <div style={{ opacity: 0.75, fontSize: 12 }}>Active Leases</div>
        <div style={{ fontSize: 20, fontWeight: 700 }}>{activeLeases ?? "—"}</div>
      </div>
      <div className="ecc-object" style={{ padding: 12 }}>
        <div style={{ opacity: 0.75, fontSize: 12 }}>Avg Rent</div>
        <div style={{ fontSize: 20, fontWeight: 700 }}>{avgRent}</div>
      </div>
    </div>
  );
}

1C) Mount the KPI rail (inside the page’s JSX, just below the title/header area)

In the main component’s return (…), locate the top of the page content (right under the property title/toolbar). Insert:

{/* === Genesis KPI Rail (live data, non-blocking) === */}
{property?.id ? <GenesisKpiRail p={{ id: property.id, doorloop_id: property.doorloop_id }} /> : null}


Use the same property object already in the page (don’t rename). If your variable is p or prop, pass that instead.

PROMPT 2 — Force the light-grey “object surface” on live panels (non-intrusive)

Open src/styles/card-enhancer.css and overwrite with:

:root{
  --ecc-object-bg:#2A2F38;
  --ecc-object-border:rgba(255,255,255,0.06);
  --ecc-object-radius:16px;
  --ecc-object-pad:16px;
}

/* apply to common containers used in live pages without touching markup */
:where(.ecc-object,.section,.panel,.module,.box,.detail-panel,.card){
  background:var(--ecc-object-bg)!important;
  border:1px solid var(--ecc-object-border)!important;
  border-radius:var(--ecc-object-radius)!important;
  padding:var(--ecc-object-pad)!important;
}

:where(.ecc-object) .ecc-header{
  display:flex;align-items:center;justify-content:space-between;gap:12px;margin-bottom:12px;
}

@keyframes ecc-shimmer{
  0%{background-position:0% 0}
  100%{background-position:200% 0}
}


(No markup changes; this latches onto your existing .section/.panel etc.)

PROMPT 3 — Remove any stale placeholder routes/components (safety)

In src/App.tsx ensure only these card routes exist (keep all other existing routes as-is):

<Route path="/card/property/:id" component={require("./pages/card/property").default} />
<Route path="/card/unit/:id" component={require("./pages/card/unit").default} />
<Route path="/card/lease/:id" component={require("./pages/card/lease").default} />
<Route path="/card/tenant/:id" component={require("./pages/card/tenant").default} />
<Route path="/card/owner/:id" component={require("./pages/card/owner").default} />


Delete any /card/* catch-alls or imports from src/features/cards/* if they exist.

PROMPT 4 — Quick smoke (no placeholders)

Open /card/property/42 (or any valid property id).

Verify:

A 4-tile KPI rail appears under the title.

Values show live counts (Units / Occupancy / Active Leases / Avg Rent) or “—” if not derivable.

All panels have the light-grey interior surface.

Mirror to the other cards (optional, same approach)

If you want them now, run these copy-paste tweaks; each uses only live reads and defensive math.

A) UnitCard — KPIs: Lease Status, Beds/Baths, Rent

src/pages/card/unit/index.tsx

Add imports:

import { useQuery } from "@tanstack/react-query";
import { apiGet } from "../../../lib/ecc-api";


Add above default export:

function useUnitKpis(u:{id:number; doorloop_id?:string; property_id?:number}) {
  return useQuery({
    queryKey:["unit-kpis",u.id],
    queryFn:async()=>{
      const leases= await apiGet("/api/entities/leases",{params:{select:"status,rent_cents",unit_id:`eq.${u.id}`}});
      const active= (leases||[]).some((l:any)=>(l?.status||"").toLowerCase()==="active");
      const rentCents= (leases||[]).find((l:any)=>typeof l?.rent_cents==="number")?.rent_cents ?? null;
      return {active,rentCents}
    }
  });
}
function UnitKpiRail({u}:{u:any}){
  const {data}=useUnitKpis(u)||{};
  return(
    <div className="ecc-object" style={{display:"grid",gridTemplateColumns:"repeat(3,1fr)",gap:12,marginBottom:12}}>
      <div className="ecc-object" style={{padding:12}}>
        <div style={{opacity:.75,fontSize:12}}>Lease</div>
        <div style={{fontSize:20,fontWeight:700}}>{data?.active? "Active":"None"}</div>
      </div>
      <div className="ecc-object" style={{padding:12}}>
        <div style={{opacity:.75,fontSize:12}}>Beds/Baths</div>
        <div style={{fontSize:20,fontWeight:700}}>{[u?.beds??"—",u?.baths??"—"].join(" / ")}</div>
      </div>
      <div className="ecc-object" style={{padding:12}}>
        <div style={{opacity:.75,fontSize:12}}>Rent</div>
        <div style={{fontSize:20,fontWeight:700}}>{(data?.rentCents!=null)? (Math.round(data!.rentCents!/100)).toLocaleString(undefined,{style:"currency",currency:"USD",maximumFractionDigits:0}):"—"}</div>
      </div>
    </div>
  );
}


Inside JSX (below unit title), mount:

{unit?.id ? <UnitKpiRail u={unit} /> : null}

B) LeaseCard — KPIs: Status, Term, Rent

src/pages/card/lease/index.tsx (add imports same as above)

function LeaseKpiRail({l}:{l:any}){
  const term = (l?.start_date && l?.end_date) ? `${l.start_date} → ${l.end_date}` : "—";
  const rent = typeof l?.rent_cents==="number" ? (Math.round(l.rent_cents/100)).toLocaleString(undefined,{style:"currency",currency:"USD",maximumFractionDigits:0}) : "—";
  const status = (l?.status||"—");
  return(
    <div className="ecc-object" style={{display:"grid",gridTemplateColumns:"repeat(3,1fr)",gap:12,marginBottom:12}}>
      <div className="ecc-object" style={{padding:12}}><div style={{opacity:.75,fontSize:12}}>Status</div><div style={{fontSize:20,fontWeight:700}}>{status}</div></div>
      <div className="ecc-object" style={{padding:12}}><div style={{opacity:.75,fontSize:12}}>Term</div><div style={{fontSize:20,fontWeight:700}}>{term}</div></div>
      <div className="ecc-object" style={{padding:12}}><div style={{opacity:.75,fontSize:12}}>Rent</div><div style={{fontSize:20,fontWeight:700}}>{rent}</div></div>
    </div>
  );
}


Mount below lease title:

{lease ? <LeaseKpiRail l={lease} /> : null}

C) TenantCard — KPIs: Active Leases, Balance (placeholder-safe using live leases)

src/pages/card/tenant/index.tsx

import { useQuery } from "@tanstack/react-query";
import { apiGet } from "../../../lib/ecc-api";

function useTenantKpis(t:{id:number}){
  return useQuery({
    queryKey:["tenant-kpis",t.id],
    queryFn:async()=>{
      const leases= await apiGet("/api/entities/leases",{params:{select:"status,primary_tenant_id", primary_tenant_id:`eq.${t.id}`}});
      const active= (leases||[]).filter((l:any)=>(l?.status||"").toLowerCase()==="active").length;
      return {active}
    }
  });
}
function TenantKpiRail({t}:{t:any}){
  const {data}=useTenantKpis(t)||{};
  return(
    <div className="ecc-object" style={{display:"grid",gridTemplateColumns:"repeat(2,1fr)",gap:12,marginBottom:12}}>
      <div className="ecc-object" style={{padding:12}}><div style={{opacity:.75,fontSize:12}}>Active Leases</div><div style={{fontSize:20,fontWeight:700}}>{data?.active ?? "—"}</div></div>
      <div className="ecc-object" style={{padding:12}}><div style={{opacity:.75,fontSize:12}}>Balance</div><div style={{fontSize:20,fontWeight:700}}>—</div></div>
    </div>
  );
}


Mount:

{tenant?.id ? <TenantKpiRail t={tenant} /> : null}

D) OwnerCard — KPIs: Properties, Units, Active Leases

src/pages/card/owner/index.tsx

import { useQuery } from "@tanstack/react-query";
import { apiGet } from "../../../lib/ecc-api";

function useOwnerKpis(o:{id:number}){
  return useQuery({
    queryKey:["owner-kpis",o.id],
    queryFn:async()=>{
      const props= await apiGet("/api/entities/properties",{params:{select:"id", owner_id:`eq.${o.id}`}});
      const propIds = (props||[]).map((p:any)=>p.id);
      const units = propIds.length ? await apiGet("/api/entities/units",{params:{select:"id,doorloop_property_id", property_id:`in.(${propIds.join(",")})`}}) : [];
      const leases= propIds.length ? await apiGet("/api/entities/leases",{params:{select:"status,property_id", property_id:`in.(${propIds.join(",")})`}}) : [];
      const activeLeases=(leases||[]).filter((l:any)=>(l?.status||"").toLowerCase()==="active").length;
      return {properties:(props||[]).length, units:(units||[]).length, activeLeases};
    }
  });
}
function OwnerKpiRail({o}:{o:any}){
  const {data}=useOwnerKpis(o)||{};
  return(
    <div className="ecc-object" style={{display:"grid",gridTemplateColumns:"repeat(3,1fr)",gap:12,marginBottom:12}}>
      <div className="ecc-object" style={{padding:12}}><div style={{opacity:.75,fontSize:12}}>Properties</div><div style={{fontSize:20,fontWeight:700}}>{data?.properties ?? "—"}</div></div>
      <div className="ecc-object" style={{padding:12}}><div style={{opacity:.75,fontSize:12}}>Units</div><div style={{fontSize:20,fontWeight:700}}>{data?.units ?? "—"}</div></div>
      <div className="ecc-object" style={{padding:12}}><div style={{opacity:.75,fontSize:12}}>Active Leases</div><div style={{fontSize:20,fontWeight:700}}>{data?.activeLeases ?? "—"}</div></div>
    </div>
  );
}


Mount:

{owner?.id ? <OwnerKpiRail o={owner} /> : null}

Final step

Restart the dev server (or hard refresh) and verify the KPI rails render under each title with live data and the light-grey object surfaces applied across panels.

If anything resists (route overlay, old catch-all), tell me which page and I’ll drop a micro-fix prompt targeted to that file only.