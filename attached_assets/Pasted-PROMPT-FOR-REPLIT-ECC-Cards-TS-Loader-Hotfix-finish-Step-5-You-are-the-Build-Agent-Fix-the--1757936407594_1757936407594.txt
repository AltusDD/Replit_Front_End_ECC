PROMPT FOR REPLIT — “ECC Cards: TS Loader Hotfix (finish Step 5)”

You are the Build Agent. Fix the TypeScript loader so the API starts on :8787. Do not change any code outside the items below. Stop on the first error and print it.

1) Verify dev:api uses a TS loader

Open package.json and ensure the script is one of these (pick the first that works in this repo):

{
  "scripts": {
    "dev:api": "tsx --watch server/index.ts"
    // or: "dev:api": "node --loader tsx server/index.ts"
  }
}


If it says node server/index.ts (no loader), change it to one of the above. Do not change other scripts.

2) Ensure we’re not bypassing the loader in code

Open server/index.ts:

Use ESM imports, not require. Example:

import express from "express";
import rpc from "./routes/rpc"; // <-- ESM import, no extension required
// app.use("/api/rpc", rpc) must be present


Open server/routes/rpc.ts:

Must export an Express Router, not an app:

import { Router } from "express";
const rpc = Router();

// rpc.get("/get_property_card", ...)
// rpc.get("/get_unit_card", ...)
// rpc.get("/get_lease_card", ...)
// rpc.get("/get_owner_card", ...)
// rpc.get("/get_tenant_card", ...)

export default rpc;


Do not attach /api/rpc here; it’s mounted in server/index.ts.

3) Clean caches & run API alone (to see real errors)
pkill -f "tsx server/index.ts" || true
pkill -f vite || true
rm -rf .vite node_modules/.vite dist .cache .parcel-cache 2>/dev/null || true

# Run API only with the loader
npm run dev:api || pnpm run dev:api || npx tsx server/index.ts


If you still see SyntaxError: Unexpected token ':' coming from rpc.ts, it means the loader still isn’t active. Re-check Step 1 (script) and Step 2 (imports).

If it boots, you should see:
[EnvLock] { …sanitized keys… } and [Dev API] Listening on :8787.

4) Verify endpoints (finish Step 5)
curl -s http://localhost:8787/api/health
curl -s http://localhost:8787/api/diag/env

curl -s "http://localhost:8787/api/rpc/get_property_card?id=52" | jq '{kpis:.kpis}'
curl -s "http://localhost:8787/api/rpc/get_unit_card?id=45"      | jq '{unit:.unit?.id, lease:.lease?.id, tenant:.tenant?.id}'
curl -s "http://localhost:8787/api/rpc/get_lease_card?id=1"      | jq '{lease:.lease?.id, unit:.unit?.id, tenant:.tenant?.id}'
curl -s "http://localhost:8787/api/rpc/get_owner_card?id=11"     | jq '{owner:.owner?.id}'
curl -s "http://localhost:8787/api/rpc/get_tenant_card?id=3"     | jq '{tenant:.tenant?.id, active:.activeLease!=null}'

5) If it still fails, print these quick checks
# Confirm a loader-backed command is actually used
node -v && npx tsx --version

# Is anything bound to 8787?
ss -tulpn | grep 8787 || true

# Verify router export shape
node -e "const m=require('./server/routes/rpc.ts'); console.log('has default router:', !!(m?.default?.use))" || true


End of prompt.