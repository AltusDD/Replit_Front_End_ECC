Replit Chat Prompt — “Owner Transfer Cutover (DoorLoop ↔ ECC)”

ROLE: Senior full-stack engineer.
MISSION: Implement the complete “Owner Transfer” feature exactly to spec.
ABSOLUTE GUARDRAILS (do not violate):

Do not change global theme, nav layout, routes, or existing DataTable UX.

Keep edits surgical: only create/modify files listed here.

Use live data only (no mock). Respect RLS; use SUPABASE_SERVICE_ROLE_KEY on the server only.

All writes to external systems (DoorLoop) must be routed through our server with dry-run support.

Every state change must write an audit_events record.

0) Environment & Libraries

Ensure these env vars exist:
SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, DOORLOOP_BASE_URL, DOORLOOP_API_KEY

Add deps (server only): exceljs (for XLSX), zod (validation), @supabase/supabase-js.

You may add tiny utilities under server/lib/* if needed.

1) Backend — Service + Endpoints

Create server/services/ownerTransferService.ts with:

initiateTransfer(input): Promise<{transferId:number}>

Validate with zod: { propertyIds: number[], newOwnerId: number, effectiveDate: string(YYYY-MM-DD), notes?: string, initiatedBy?: string }

Insert into owner_transfers (status PENDING_ACCOUNTING) and audit_events (event_type='OWNER_TRANSFER_INIT').

Build an entity map for the selected properties:

Collect properties → units → leases → tenants

Include financials: lease_payments, lease_charges, lease_credits

Ops: work_orders, communications, files, notes
(Discover table names by scanning src/server or server data access, or introspect via information_schema. Use the project’s actual names; do not hardcode blindly.)

Insert immutable JSON snapshots into owner_transfer_snapshots(transfer_id, entity_type, entity_id, raw_jsonb). Chunk inserts to avoid timeouts.

generateAccountingReport(transferId): Promise<{buffer:Buffer, filename:string}>

Query income/expenses up to effective_date, pending items after cutoff, and balances.

Build Excel via exceljs (sheets: Summary, Income, Expenses, Pending, Tenants).

Save file to /reports/owner_transfers/${transferId}.xlsx and return buffer too.

Write audit OWNER_TRANSFER_REPORT_BUILT.

markApprovedByAccounting(transferId, actorId?)

Update status to APPROVED_ACCOUNTING + audit OWNER_TRANSFER_APPROVE_ACCOUNTING.

authorizeExecution(transferId, actorId?)

Update status to READY_EXECUTION (admin-only in UI) + audit OWNER_TRANSFER_AUTHORIZED.

executeTransfer(transferId, {dryRun:boolean}): Promise<{applied:boolean, summary:any}>

DB-first: prepare owner and linkage updates for ECC (properties → units → leases).

DoorLoop write-back (only if DOORLOOP_API_KEY present and dryRun=false):

Update property owner, re-link units/leases as needed.

Post adjustments if cutoff requires (charges/expenses), idempotency key: transfer-${transferId}-${isoDate} (send as header).

Log each operation in audit_events (event_type='OWNER_TRANSFER_WRITEBACK') with payload.

On success: set status='COMPLETE', executed_at=now(), audit OWNER_TRANSFER_COMPLETE.

Wire endpoints in server/index.ts (or your server entry) — add routes:

POST /api/owner-transfer/initiate → calls initiateTransfer then generateAccountingReport (returns {transferId, reportUrl}).

POST /api/owner-transfer/approve-accounting → body {transferId}.

POST /api/owner-transfer/authorize → body {transferId} (server enforces admin; see below).

POST /api/owner-transfer/execute → body {transferId, dryRun?:boolean} (default true).

GET /api/owner-transfer/:id/report → streams Excel file if exists.

Server guardrails:

Use Supabase service client on server, never in browser.

Swallow AbortError on HMR.

Validate every request with zod and return 400 on invalid input.

Wrap multi-step updates in a transaction where possible. If not, remain idempotent.

Always write an audit_events row on:

initiate, snapshot complete, report built, approve, authorize, each write-back call, complete, and any error (event_type='OWNER_TRANSFER_ERROR').

2) Frontend — Owner Hub UI (no theme drift)

Create src/features/ownerTransfer/hooks/useOwnerTransfer.ts:

Thin fetchers for the endpoints above, typed with zod schemas.

Expose helper canAuthorize (read from current user claims/role — reuse existing auth logic).

Create src/features/ownerTransfer/components/TransferStepper.tsx:

A modal/stepper (4 steps):

Select new owner: search existing owners (live) OR link “Create in DoorLoop” (opens new tab to existing page if available). Required field.

Effective date: YYYY-MM-DD, required.

Confirm entities: show tree Property → Unit → Lease → Tenant sourced live for the chosen properties; counts only (no heavy detail).

Generate report: call initiate, show link to download XLSX, status chip PENDING_ACCOUNTING.

After accounting reviewed manually, show “Mark Approved” → calls /approve-accounting.

If canAuthorize true, show “Authorize Execution” → /authorize then “Execute Transfer” with a Dry-Run toggle default ON.

Execution result panel: list what would change / changed; always link last 10 audit_events for this transfer.

Integrate into Owner Hub (left rail):

In src/pages/card/owner/[id].tsx (or your owner card page), add a “Transfer Ownership” primary action that opens TransferStepper.

Do not modify global nav, colors, or spacing utilities. Use existing button & panel classes.

3) Security & Roles

Only authenticated users can initiate.

Only accounting role (or service) can approve accounting.

Only admins (Dion/role flag already in app) can authorize & execute.

Server enforces role checks before state transitions; return 403 otherwise.

4) Report & Data Notes

Use existing accounting/transactions data model; if a given table name differs, discover and adapt by searching the codebase.

Report columns must match internal Accounting_Transfer_Report_Template names where possible.

Money/date formatting must reuse existing utils/format.ts helpers.

5) QA Checklist & Smoke Tests (must pass)

DB: insert + read in owner_transfers, owner_transfer_snapshots, audit_events.

API:

POST /api/owner-transfer/initiate with 1 property → 201 + transferId + reportUrl.

GET /api/owner-transfer/:id/report downloads a non-empty XLSX.

POST /approve-accounting flips status to APPROVED_ACCOUNTING.

POST /authorize flips status to READY_EXECUTION (403 if non-admin).

POST /execute with dryRun=true returns a summary; status remains READY_EXECUTION.

POST /execute with dryRun=false (when creds present) sets COMPLETE and logs write-backs.

UI:

“Transfer Ownership” button appears on Owner Hub and opens the stepper.

All steps function and display current status chips.

Admin sees Authorize/Execute; non-admin does not.

AUDIT: events written for every state change; searchable by event_type.

6) Deliverables

New files:

server/services/ownerTransferService.ts

src/features/ownerTransfer/hooks/useOwnerTransfer.ts

src/features/ownerTransfer/components/TransferStepper.tsx

Modified files (surgical):

server/index.ts (add 5 routes only)

src/pages/card/owner/[id].tsx (add action button + render modal)

A short README_OWNER_TRANSFER.md explaining env vars, endpoints, and usage.

When done, post:

A diff summary of new/changed files

Example cURL calls for each endpoint

One screenshot of the stepper modal, and one of the generated Excel (sheet list)