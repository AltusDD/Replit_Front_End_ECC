Replit Chat Prompt — “Genesis Dashboard: Live-Only, Actionable, Polished”

Mode: Read → Plan → Diff → Small PR-sized Writes.
Guardrails (non-negotiable):

Live data only. Do not create or reference any mock/fixture/stub. Fail the build if any mock import exists.

Do not change routes, table schemas, or existing page behavior outside the Dashboard & shared style tokens/components.

Keep brand: Altus Black #0b0e12, Altus Gold #d6b36a.

Replace any brown-tint panels with our approved light grey panel (see CSS tokens below).

Global date format everywhere: Mon D, YYYY (e.g., Sep 5, 2025).

Preserve performance (lazy load, memoization, abort safe).

PHASE 0 — Inventory (read-only; no writes)

Confirm Dashboard file locations and current imports:

src/features/dashboard/pages/DashboardPage.tsx

src/features/dashboard/components/*

src/features/dashboard/hooks/useDashboardData.ts

Confirm live data sources used by the dashboard (Supabase or API endpoints).

Output a list of any references to mock data or /mock-*/__dev__/fixtures (should be zero). If any found, stop and report.

PHASE 1 — Theme & Format Polishing (replace the brown tint)

Create/Update: src/styles/tokens.css (or the project’s global vars file) and src/styles/Dashboard.css.

Add/ensure Genesis tokens (no brown overlay anywhere):

:root {
  --altus-black: #0b0e12;
  --altus-gold:  #d6b36a;

  /* Approved neutrals */
  --panel-bg:   #1a1d21;   /* light grey for cards/panels (replace any brown tint) */
  --panel-elev: #20242a;   /* slightly lighter for elevation layers */
  --line:       #2a2d31;
  --text:       #e6e7ea;
  --text-dim:   #a8adb7;

  /* Chart palette (neutral + gold highlights) */
  --chart-green: #31c48d;
  --chart-red:   #ef5953;
  --chart-blue:  #5aa9e6;
  --chart-gray:  #7b818a;
  --chart-gold:  var(--altus-gold);

  /* Status tags */
  --good:  #31c48d;
  --warn:  #f3c969;
  --bad:   #ef5953;
}


In src/styles/Dashboard.css, make panels look Genesis:

.ecc-panel {
  background: var(--panel-bg);
  border: 1px solid var(--line);
  border-radius: 14px;
  box-shadow: 0 10px 20px rgba(0,0,0,.25);
}

.ecc-panel__title {
  color: var(--text);
  font-weight: 600;
  letter-spacing: .5px;
}

.ecc-kpi {
  background: var(--panel-bg);
  border: 1px solid var(--line);
  border-radius: 12px;
  padding: 14px 16px;
}

.small-label { color: var(--text-dim); text-transform: uppercase; letter-spacing: .8px; }
.number-lg   { color: var(--text); font-weight: 700; font-size: 22px; }
.number-sm   { color: var(--text); font-weight: 600; font-size: 15px; }

.ecc-grid {
  display: grid;
  grid-template-columns: 1.2fr .8fr; /* map 2/3, action 1/3 */
  gap: 16px;
}
@media (max-width: 1200px) { .ecc-grid { grid-template-columns: 1fr; } }


Acceptance: No panel shows brown tint; all panels use --panel-bg.

PHASE 2 — Date/Money/Percent Formatting (global)

Edit or add: src/utils/format.ts

export const fmtDate = (iso?: string | null) =>
  !iso ? "—" : new Date(iso).toLocaleDateString(undefined, { month: "short", day: "numeric", year: "numeric" }); // Mon D, YYYY

export const fmtMoney = (n?: number | null) => {
  if (n == null || Number.isNaN(n)) return "—";
  if (n === 0) return "$0";
  return n.toLocaleString(undefined, { style: "currency", currency: "USD", maximumFractionDigits: 2 });
};

export const fmtPct = (v?: number | null, digits = 1) => (v == null ? "—" : `${v.toFixed(digits)}%`);


Replace all dashboard date/money/percent usages with these helpers.

PHASE 3 — Dashboard Data Hook (live only, rich & typed)

Edit: src/features/dashboard/hooks/useDashboardData.ts

No mocks. Pull from live sources (Supabase or REST).

Return a single object with:

kpis: { occupancyPct, avgTurnDays, collectionRatePct, openHighWorkOrders, noiMTD, trend: { … } }

properties: { id, address, city, state, zip, lat, lng, status, delinquent, currentTenant }[]

incomeVsExpenses: last 6 months { month, income, expenses }[]

valueVsDebt: last 8 quarters { quarter, value, debt }[]

funnel90: { applications, screenings, signed }

occByCity: { city, properties, occUnits, vacUnits, occPct }[]

leasesExpiring45: top 3 { leaseId, tenant, property, endDate }

topDelinquents: top 3 { tenantId, tenant, property, balance }

highPriorityWOs: top 3 { woId, property, summary }

Use stable AbortController and memoization.

If a dataset is empty, return [] (the widget shows a graceful empty state).

PHASE 4 — Widgets (finish + polish + actionability)
4.1 KPI Banner

Edit: src/features/dashboard/components/KpiBanner.tsx

Each KPI shows label, big number, TrendIndicator (+/-), and a tiny sparkline (recharts LineChart with --chart-gold).

Tapping the KPI routes to the relevant filtered page (e.g., collection rate → /accounting?filter=delinquent).

4.2 Map (PortfolioMap.tsx)

Use react-leaflet with marker clustering (e.g., react-leaflet-cluster or own clustering).

Pin colors:

Green = occupied & current

Yellow = vacant

Red = occupied but delinquent

Pin popover shows address, status, tenant (if any) and buttons:

“View Property” → /portfolio/properties?focus={id}

“Open Work Orders” → /construction?property={id}

4.3 Action Center (ActionCenter.tsx)

Three sections, each max 3 items.

Each item has primary actions:

Lease expiring → “Contact Tenant”, “Start Renewal”

Delinquent → “View Ledger”, “Send Reminder”

Work Order → “Assign Vendor”

If a section is empty, show: “No urgent items. You’re in the clear.”

4.4 Financial Snapshot (FinancialSnapshot.tsx)

Bar chart: Income vs Expenses (6 months). Use green for income, gray for expenses. Tooltip shows month + exact values.

Line chart: Portfolio Value vs Debt (8 quarters). Add subtle gradient fill under lines for polish.

Add a top-right range dropdown (“3M / 6M / 12M”) that filters the underlying series (client side).

4.5 Leasing Funnel & Occupancy Breakdown

LeasingFunnel.tsx: Horizontal funnel with steps: Applications → Screenings → Leases Signed; label each step with value and conversion %.

OccupancyBreakdown.tsx: Table with columns: Location, Properties, Occ Units, Vac Units, Occ %. Right-align numerics, progress bar for Occ % using gold.

4.6 Reusable UI

ChartContainer.tsx: Title + right-side controls + consistent padding, uses .ecc-panel.

TrendIndicator.tsx: Green up/red down with ±%.

ActionButton.tsx: Primary (gold), secondary (outline). Use keyboard/focus states.

Empty/Skeleton States:

While loading, show skeleton shimmer rows in each widget (no layout shift).

On error, show .ecc-panel message with “Retry” button.

PHASE 5 — Layout & Responsiveness

Edit: src/features/dashboard/pages/DashboardPage.tsx

Structure:

KPI Banner (full width)

Grid: Map (2/3) + Action Center (1/3)

Financial Snapshot (two charts, 1/2 each)

Leasing Funnel (2/3) + Occupancy Breakdown (1/3)

On small screens, stack vertically.

Keep padding consistent and elevate panels subtly.

PHASE 6 — Performance & DX

All widgets: React.memo, memoized selectors, AbortController cleanup.

Charts only render after data is ready; show skeleton meanwhile.

Add debug mode (?debug=1) to log dataset sizes, join match rates, and any empty series.

PHASE 7 — Acceptance Criteria

Visual / UX

No brown tint. All panels use --panel-bg light grey; crisp contrast.

KPIs with trends + sparkline; tappable to filtered pages.

Map with colored cluster pins + actionable popovers.

Action Center always shows relevant next steps or clear empty states.

Charts are legible, with tooltips and range control.

Date format Mon D, YYYY everywhere.

Data / Behavior

Dashboard uses only live data.

If Tenants/Owners data are empty from DB, widgets show empty copy (not blank/black).

No DOMException/Abort noise in console.

All actions route correctly.

Code

No mock imports exist; build fails if any found.

Components typed, memoized, and abort-safe.

CSS tokens centralized; no inline hardcoded colors (except chart libs where needed).

Commit message

feat(dashboard): Genesis-grade dashboard with live data only; neutral panels (no brown); actionable widgets; trends/sparklines; map clusters; skeletons; fmt Mon D, YYYY

PHASE 8 — Post-Deploy Checklist

Screenshot the dashboard wide and narrow; confirm no overflow/scroll jank.

Paste dataset counts + debug summary (?debug=1).

Paste list of files changed.

ENV required: VITE_SUPABASE_URL, VITE_SUPABASE_ANON_KEY (and/or VITE_API_BASE, VITE_DOORLOOP_TOKEN if REST). If missing, fail with a helpful message; do not substitute mock data.

Notes/Improvements you may add if time permits (optional, not required):

Add a small Cashflow MTD donut in KPI banner hover.

Add Saved Views dropdown for the Dashboard date range.

Add Export PNG/CSV buttons per chart in the overflow menu.

Paste back:

A short diff summary,

Screenshots,

Any configuration warnings (especially env vars),

And confirmation that no mock references remain.

Use this verbatim in Replit Chat. It will push the Dashboard to true Genesis grade, stay 100% live-data, fix the panel color, enforce formatting, and deliver a clean, powerful, actionable command center.