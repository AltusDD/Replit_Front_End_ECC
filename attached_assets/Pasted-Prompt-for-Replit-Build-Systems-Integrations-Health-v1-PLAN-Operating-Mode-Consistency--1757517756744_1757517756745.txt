Prompt for Replit — “Build Systems › Integrations › Health (v1)”

PLAN (Operating Mode: Consistency Enforcer, UI-Nav Engineer)
Goal: Add a persistent health & controls page for integrations with DoorLoop v1 module, designed to be easily extended to Dropbox, M365, CoreLogic.
Nav: Systems → Integrations → Health at /systems/integrations.
Guardrails: Use existing design tokens / Genesis shell; no inline styles; all actions go through existing admin sync APIs; keep the 3-column layout (main, right rail).

FILES TO TOUCH

src/features/systems/integrations/IntegrationsHealthPage.tsx (new)

src/features/systems/integrations/components/* (StatusCard, RunPanel, LastRunTable, ErrorPane)

server/routes/admin/integrations.ts (new lightweight routes if missing)

Reuse: existing /api/admin/sync/* routes and scheduler; reuse centralized DoorLoop client.

SERVER (add only if missing)

GET /api/admin/integrations/doorloop/ping → calls GET /owners?page_size=1 via centralized client; returns {ok, baseUrl, authenticated, sampleCount, elapsedMs}.

GET /api/admin/sync/status → returns scheduler status, next run, last success/failure per entity.

POST /api/admin/sync/run → accepts {entities:[], mode:"delta"|"backfill"}.

UI (Genesis-grade)
Main column:

DoorLoop StatusCard

Big state chip: ✅ Healthy / ⚠️ Degraded / ❌ Failing

Rows: Base URL, Auth OK, Rate Limit (if provided via headers), Last success, Last error summary.

“Ping” button (calls /api/admin/integrations/doorloop/ping)

RunPanel

Toggles: entities (owners, properties, units, leases, tenants)

Buttons: Run now (delta), Backfill, Stop (if a run is active)

Shows live progress (entity → page → rows) using SSE or polling /api/admin/sync/status

LastRunTable

Table of the last 20 runs: time, entity, mode, rows, duration, result, error hint

Row click → ErrorPane drawer with full message + first 2KB response body

Right rail:

Scheduler Card: Enabled, interval, next run, nightly full time; “Save” disabled if env-driven

Config Preview: DOORLOOP_BASE_URL masked, integration flags; shows warning if missing

BEHAVIOR

If any entity has no success in 24h → state = ⚠️ Degraded.

If ping.ok === false → ❌ Failing with actionable hint (base URL or API key).

All actions toast success/failure and write to the existing admin log stream.

VERIFICATION CHECKLIST

/systems/integrations renders with DoorLoop module and live data.

“Ping” returns JSON with ok:true when base URL + token are good.

“Run now (delta)” updates rows in Supabase; “Backfill” processes all pages.

LastRunTable shows new runs; ErrorPane opens with full message on failures.

Scheduler card reflects your current AUTO_SYNC_* env and countdown to next run.

Minimal “Ping” route (drop-in now)

If you want an immediate green/red check, add this tiny server route (uses your centralized client):

// server/routes/admin/integrations.ts
import { Router } from "express";
import { dlGet } from "../../clients/doorloop";

export const integrations = Router();

integrations.get("/doorloop/ping", async (req, res) => {
  const t0 = Date.now();
  try {
    const r = await dlGet<any>("/owners", { page_size: 1 });
    res.json({
      ok: true,
      baseUrl: process.env.DOORLOOP_BASE_URL,
      authenticated: true,
      sampleCount: Array.isArray(r?.data) ? r.data.length : 0,
      elapsedMs: Date.now() - t0,
    });
  } catch (e:any) {
    res.status(502).json({
      ok: false,
      baseUrl: process.env.DOORLOOP_BASE_URL,
      authenticated: false,
      error: String(e).slice(0, 500),
      elapsedMs: Date.now() - t0,
    });
  }
});

// server/index.ts
import { integrations } from "./routes/admin/integrations";
app.use("/api/admin/integrations", integrations);


Test quickly in your browser:
/api/admin/integrations/doorloop/ping → expect { ok: true, … } (JSON, not HTML).

Do we “set and forget” after this?

No. Integrations are living systems. Once we have this page, you won’t need shell scripts—you’ll have:

a one-click Connectivity Ping,

visible scheduler status,

manual Run now / Backfill,

and immediate error surfaces.