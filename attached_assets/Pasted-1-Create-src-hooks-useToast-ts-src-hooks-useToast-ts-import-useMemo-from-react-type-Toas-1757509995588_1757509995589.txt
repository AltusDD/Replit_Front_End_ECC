1) Create src/hooks/useToast.ts
// src/hooks/useToast.ts
import { useMemo } from "react";

type ToastKind = "success" | "error" | "info" | "warn";
export type Toast = {
  id: string;
  kind: ToastKind;
  title?: string;
  message: string;
  timeout?: number; // ms
};

type Listener = (toasts: Toast[]) => void;

const listeners = new Set<Listener>();
let toasts: Toast[] = [];

function emit() {
  for (const l of listeners) l(toasts);
}

export const toastStore = {
  subscribe(fn: Listener) {
    listeners.add(fn);
    fn(toasts);
    return () => listeners.delete(fn);
  },
  push(t: Omit<Toast, "id">) {
    const id =
      (globalThis as any)?.crypto?.randomUUID?.() ??
      Math.random().toString(36).slice(2);
    const toast: Toast = { id, timeout: 3500, ...t };
    toasts = [toast, ...toasts].slice(0, 6);
    emit();
    if (toast.timeout && toast.timeout > 0) {
      setTimeout(() => toastStore.remove(id), toast.timeout);
    }
    return id;
  },
  remove(id: string) {
    toasts = toasts.filter((t) => t.id !== id);
    emit();
  },
  clear() {
    toasts = [];
    emit();
  },
};

export function useToast() {
  return useMemo(
    () => ({
      push: (
        message: string,
        opts?: Partial<Omit<Toast, "id" | "message">>
      ) =>
        toastStore.push({
          message,
          kind: opts?.kind ?? "info",
          title: opts?.title,
          timeout: opts?.timeout,
        }),
      success: (msg: string, title = "Success") =>
        toastStore.push({ message: msg, title, kind: "success" }),
      error: (msg: string, title = "Error") =>
        toastStore.push({ message: msg, title, kind: "error", timeout: 6000 }),
      info: (msg: string, title = "Info") =>
        toastStore.push({ message: msg, title, kind: "info" }),
      warn: (msg: string, title = "Warning") =>
        toastStore.push({ message: msg, title, kind: "warn" }),
      dismiss: (id: string) => toastStore.remove(id),
      clear: () => toastStore.clear(),
    }),
    []
  );
}

2) Create src/components/ui/ToastContainer.tsx
// src/components/ui/ToastContainer.tsx
import { useEffect, useState } from "react";
import { toastStore, type Toast } from "../../hooks/useToast";

const kindStyles: Record<Toast["kind"], string> = {
  success: "border-emerald-500/40 text-emerald-300",
  error: "border-red-500/40 text-red-300",
  info: "border-sky-500/40 text-sky-300",
  warn: "border-amber-500/40 text-amber-300",
};

export function ToastContainer() {
  const [items, setItems] = useState<Toast[]>([]);
  useEffect(() => toastStore.subscribe(setItems), []);

  return (
    <div className="pointer-events-none fixed bottom-6 right-6 z-[9999] flex w-[360px] flex-col gap-2">
      {items.map((t) => (
        <div
          key={t.id}
          className={`pointer-events-auto rounded-xl border bg-neutral-900/90 backdrop-blur px-4 py-3 shadow-lg ring-1 ring-black/20 ${kindStyles[t.kind]}`}
          role="status"
          aria-live="polite"
        >
          <div className="flex items-start gap-3">
            <div className="mt-0.5 text-xs uppercase opacity-80">
              {t.title ?? t.kind}
            </div>
            <button
              onClick={() => toastStore.remove(t.id)}
              className="ml-auto text-xs opacity-60 hover:opacity-100"
              aria-label="Dismiss notification"
            >
              ✕
            </button>
          </div>
          <div className="mt-1 text-sm leading-snug opacity-90">{t.message}</div>
        </div>
      ))}
    </div>
  );
}

export default ToastContainer;


We export both named and default so your existing import { ToastContainer } from "../../components/ui/ToastContainer"; works.

3) (Optional but nice) Mount once globally

If you’d rather not import the container on every page, add it once near the app root (keep your page import if you prefer it there):

// src/main.tsx or src/App.tsx (where your root layout renders)
import { ToastContainer } from "./components/ui/ToastContainer";
// ...
<>
  {/* ...your layout... */}
  <ToastContainer />
</>

4) Verify

Rebuild. The import error should disappear.

Trigger a toast in your page logic (you likely already call it). Example:

const toast = useToast();
toast.success("Approved. Audit logged.");
toast.error("Authorization failed. Check admin token.");


You should see toasts appear bottom-right, styled for the dark theme.

If you hit any other missing imports (e.g., old toast library references), paste the error and I’ll give you the exact drop-in file(s) to satisfy them.