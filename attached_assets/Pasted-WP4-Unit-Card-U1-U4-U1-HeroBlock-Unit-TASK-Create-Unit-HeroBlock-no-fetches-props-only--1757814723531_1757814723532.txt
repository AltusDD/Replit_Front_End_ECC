WP4 — Unit Card (U1–U4)
U1 — HeroBlock (Unit)
TASK: Create Unit HeroBlock (no fetches, props-only), KPIs + actions.

FILE
- src/pages/card/unit/HeroBlock.tsx  (new)

RULES
- KPIs: Status, Beds/Baths, Market Rent, Active Lease? (Yes/No)
- Actions: [Edit] [Export PDF] (ghost) [Send Notice] (via BFF sendNotice, disabled if !__FEATURES__?.notices)
- No overlays. Inline only.

CODE: src/pages/card/unit/HeroBlock.tsx
---------------------------------------
import React from 'react';
import { KPI, KPIRow } from '@/features/portfolio/components/KPI';
import ActionButton from '@/features/portfolio/components/ActionButton';
import Section from '@/components/Section';
import { fmtMoneyCents } from '@/lib/format';
import { sendNotice } from '@/lib/bff';

type Unit = { id: string|number; unit_number?: string|null; beds?: number|null; baths?: number|null; sqft?: number|null; rent_cents?: number|null; status?: string|null; };
type Lease = { status?: string|null; end_date?: string|null; primary_tenant_id?: string|number|null };

function titleFor(u?: Unit|null) {
  return u?.unit_number ? `Unit ${u.unit_number}` : (u?.id ? `Unit #${u.id}` : 'Unit');
}

export default function HeroBlock({
  unit,
  activeLease,
}: {
  unit?: Unit|null;
  activeLease?: Lease|null;
}) {
  const status = (unit?.status ?? '—') as string;
  const beds = unit?.beds ?? null;
  const baths = unit?.baths ?? null;
  const rentCents = unit?.rent_cents ?? null;
  const hasActive = String(activeLease?.status ?? '').toLowerCase() === 'active';

  const canNotice = (window as any).__FEATURES__?.notices === true;
  const [busy, setBusy] = React.useState(false);

  async function handleNotice() {
    if (!activeLease) return;
    try {
      setBusy(true);
      await sendNotice({ leaseId: String((activeLease as any).id ?? ''), template: 'renewal' });
      (window as any).toast?.success?.('Notice sent') ?? alert('Notice sent');
    } catch (e) {
      (window as any).toast?.error?.('Failed to send notice') ?? alert('Failed to send notice');
      console.error(e);
    } finally {
      setBusy(false);
    }
  }

  return (
    <Section title={titleFor(unit)} actions={
      <div className="flex gap-2">
        <ActionButton label="Edit" icon="✏️" variant="secondary" />
        <ActionButton label="Export PDF" icon="📄" variant="ghost" />
        <ActionButton label={busy ? 'Sending…' : 'Send Notice'} icon="📨" onClick={handleNotice} disabled={busy} comingSoon={!canNotice} />
      </div>
    }>
      <KPIRow>
        <KPI label="Status" value={status || '—'} />
        <KPI label="Beds/Baths" value={[beds!=null?`${beds}`:'—', baths!=null?`${baths}`:'—'].join(' / ')} />
        <KPI label="Market Rent" value={rentCents!=null ? (fmtMoneyCents?fmtMoneyCents(rentCents):`$${(rentCents/100).toFixed(0)}`) : '—'} />
        <KPI label="Active Lease" value={hasActive ? 'Yes' : 'No'} />
      </KPIRow>
    </Section>
  );
}

U2 — RightRail (Unit)
TASK: Create Unit RightRail (no map). Parent property mini, maintenance, pinned files.

FILE
- src/pages/card/unit/RightRail.tsx  (new)

CODE: src/pages/card/unit/RightRail.tsx
---------------------------------------
import React from 'react';
import Section from '@/components/Section';
import MiniCard from '@/features/portfolio/components/MiniCard';

export default function RightRail({ property }: { property?: any|null }) {
  return (
    <div className="space-y-3">
      <Section title="Parent Property">
        {property ? (
          <MiniCard title={property.display_name || property.street_1 || `Property #${property.id}`}
                    subtitle={[property.city, property.state].filter(Boolean).join(', ') || undefined}
                    href={`/card/property/${property.id}`} />
        ) : <div className="opacity-70 text-sm">No property linked.</div>}
      </Section>

      <Section title="Maintenance Schedule">
        <div className="text-sm opacity-70">Filter changes, inspections, seasonal checks (placeholder).</div>
      </Section>

      <Section title="Pinned Files">
        <ul className="text-sm list-disc pl-5">
          <li>Floor plan.pdf</li>
          <li>Appliance receipts.zip</li>
        </ul>
      </Section>
    </div>
  );
}

U3 — Tabs (Unit)
TASK: Create 7-tab shell (no fetches). Overview shows unit + property link; Linked shows lease/tenant links.

FILES (new)
- src/pages/card/unit/Tabs.tsx
- src/pages/card/unit/Overview.tsx
- src/pages/card/unit/Details.tsx
- src/pages/card/unit/Financials.tsx
- src/pages/card/unit/Legal.tsx
- src/pages/card/unit/Files.tsx
- src/pages/card/unit/Linked.tsx
- src/pages/card/unit/Activity.tsx

CODE: src/pages/card/unit/Tabs.tsx
----------------------------------
import React from 'react';
export type TabKey = 'overview'|'details'|'financials'|'legal'|'files'|'linked'|'activity';
export interface TabDef { key: TabKey; label: string; content: React.ReactNode; }
export default function UnitTabs({tabs, defaultKey='overview'}:{tabs:TabDef[];defaultKey?:TabKey;}) {
  const [active,setActive]=React.useState<TabKey>(defaultKey);
  return (<div className="ecc-object"><nav className="flex gap-2 mb-3">{tabs.map(t=>
    <button key={t.key} className={`px-3 py-1.5 rounded ${active===t.key?'bg-white/10':'hover:bg-white/5'}`} onClick={()=>setActive(t.key)}>{t.label}</button>)}
  </nav><div>{tabs.find(t=>t.key===active)?.content}</div></div>);
}

CODE: src/pages/card/unit/Overview.tsx
--------------------------------------
import React from 'react';
import { FieldRows } from '@/features/portfolio/components/FieldRows';
export default function Overview({ unit, property }:{ unit?: any|null; property?: any|null; }) {
  const rows = [
    { label:'Property', value: property?.display_name || property?.street_1 || '—', href: property?`/card/property/${property.id}`:undefined },
    { label:'Unit Number', value: unit?.unit_number ?? '—' },
    { label:'Beds', value: unit?.beds ?? '—' },
    { label:'Baths', value: unit?.baths ?? '—' },
    { label:'Sqft', value: unit?.sqft ?? '—' },
    { label:'Market Rent', value: unit?.rent_cents!=null? `$${Math.round(unit.rent_cents/100)}`:'—' },
    { label:'Status', value: unit?.status ?? '—' },
  ];
  return <FieldRows rows={rows} columns={2} />;
}

CODE: src/pages/card/unit/Details.tsx
-------------------------------------
import React from 'react';
import { FieldRows } from '@/features/portfolio/components/FieldRows';
export default function Details({ fields }:{ fields:{label:string;value:any}[] }) { return <FieldRows rows={fields} columns={2} />; }

CODE: src/pages/card/unit/Financials.tsx
----------------------------------------
import React from 'react'; import Section from '@/components/Section';
export default function Financials(){return(<div className="space-y-3"><Section title="Unit Charges & Credits"><div className="text-sm opacity-70">Per-unit ledger (placeholder).</div></Section></div>);}

CODE: src/pages/card/unit/Legal.tsx
-----------------------------------
import React from 'react'; import Section from '@/components/Section';
export default function Legal(){return(<div className="space-y-3"><Section title="Compliance"><div className="text-sm opacity-70">Smoke detector, CO, permits (placeholder).</div></Section></div>);}

CODE: src/pages/card/unit/Files.tsx
-----------------------------------
import React from 'react'; import Section from '@/components/Section';
export default function Files(){return(<div className="space-y-3"><Section title="Files"><div className="text-sm opacity-70">Floor plans, photos, docs (placeholder).</div></Section></div>);}

CODE: src/pages/card/unit/Linked.tsx
------------------------------------
import React from 'react'; import MiniCard from '@/features/portfolio/components/MiniCard';
export default function Linked({ activeLease, tenant }:{ activeLease?: any|null; tenant?: any|null; }) {
  return (
    <div className="grid gap-3">
      <MiniCard title={`Lease ${activeLease?.doorloop_id ?? activeLease?.id ?? '' || '(none)'}`} href={activeLease?`/card/lease/${activeLease.id}`:undefined} />
      <MiniCard title={tenant?.display_name ?? '(no tenant)'} href={tenant?`/card/tenant/${tenant.id}`:undefined} />
    </div>
  );
}

CODE: src/pages/card/unit/Activity.tsx
--------------------------------------
import React from 'react'; import { ActivityList, ActivityItem } from '@/features/portfolio/components/ActivityChip';
export default function Activity({ items }:{ items:ActivityItem[] }){ return <ActivityList items={items}/>; }

U4 — Page assembly + resolver
TASK: Assemble UnitCardPage with single resolver. No null returns.

FILES
- src/pages/card/unit/index.tsx   (update)
- src/lib/ecc-card-queries.ts     (append useUnitCard if missing)

APPEND (if missing): src/lib/ecc-card-queries.ts
------------------------------------------------
import { useQuery } from '@tanstack/react-query';
async function j<T>(u:string){const r=await fetch(u,{credentials:'include'});if(!r.ok)throw new Error(String(r.status));return r.json();}
export function useUnitCard(id:string|number){
  return useQuery({ queryKey:['unit-card',id], queryFn: async ()=>{
    try {
      return await j(`/api/rpc/get_unit_card?id=${id}`);
    } catch {
      const unit = await j(`/api/entities/units/${id}`);
      const property = unit?.doorloop_property_id ? (await j(`/api/entities/properties?doorloop_id=eq.${unit.doorloop_property_id}`))?.[0] ?? null : null;
      const leases = unit?.id!=null ? await j(`/api/entities/leases?unit_id=eq.${unit.id}`) : [];
      const activeLease = Array.isArray(leases) ? leases.find((l:any)=>String(l?.status??'').toLowerCase()==='active') ?? null : null;
      const tenant = activeLease?.primary_tenant_id ? await j(`/api/entities/tenants/${activeLease.primary_tenant_id}`) : null;
      return { unit, property, activeLease, tenant };
    }
  }, staleTime:60000});
}

PATCH: src/pages/card/unit/index.tsx
------------------------------------
import React from 'react';
import { useParams } from 'wouter';
import Section from '@/components/Section';
import HeroBlock from './HeroBlock';
import UnitTabs, { TabDef } from './Tabs';
import Overview from './Overview';
import Details from './Details';
import Financials from './Financials';
import Legal from './Legal';
import Files from './Files';
import Linked from './Linked';
import Activity from './Activity';
import RightRail from './RightRail';
import { useUnitCard } from '@/lib/ecc-card-queries';

export default function UnitCardPage(){
  const { id } = useParams<{id:string}>();
  const { data, isLoading, error } = useUnitCard(id!);
  const unit = data?.unit ?? null, property = data?.property ?? null, activeLease = data?.activeLease ?? null, tenant = data?.tenant ?? null;

  const tabs: TabDef[] = [
    { key:'overview', label:'Overview', content:<Overview unit={unit} property={property}/> },
    { key:'details', label:'Details', content:<Details fields={[{label:'Sqft',value:unit?.sqft??'—'},{label:'Status',value:unit?.status??'—'}]}/> },
    { key:'financials', label:'Financials', content:<Financials/> },
    { key:'legal', label:'Legal', content:<Legal/> },
    { key:'files', label:'Files', content:<Files/> },
    { key:'linked', label:'Linked', content:<Linked activeLease={activeLease} tenant={tenant}/> },
    { key:'activity', label:'Activity', content:<Activity items={[]}/> },
  ];

  return (
    <div className="p-4 space-y-3">
      <HeroBlock unit={unit} activeLease={activeLease}/>
      {!unit && !isLoading && <Section title="Unit not found"><div className="opacity-70">Check the ID and try again.</div></Section>}
      <div className="grid grid-cols-1 lg:grid-cols-[1fr_320px] gap-3">
        <div className="space-y-3"><UnitTabs tabs={tabs}/></div>
        <div className="space-y-3"><RightRail property={property}/></div>
      </div>
    </div>
  );
}

DOD
- tsc (cards) clean.
- Visit /card/unit/45 (or any real ID): Hero KPIs, 7 tabs, RightRail with Parent Property. No map.

WP4 — Lease Card (L1–L4)
L1 — HeroBlock (Lease)
FILE: src/pages/card/lease/HeroBlock.tsx (new)
RULES: KPIs = Status, Term, Rent, Balance (—), Last Payment (—). Actions: Edit, Export, Send Notice (BFF).

CODE:
import React from 'react';
import { KPI, KPIRow } from '@/features/portfolio/components/KPI';
import ActionButton from '@/features/portfolio/components/ActionButton';
import Section from '@/components/Section';
import { fmtMoneyCents } from '@/lib/format';
import { sendNotice } from '@/lib/bff';

type Lease = { id?: string|number; status?: string|null; start_date?: string|null; end_date?: string|null; rent_cents?: number|null; };

export default function HeroBlock({ lease }:{ lease?: Lease|null }){
  const status = lease?.status ?? '—';
  const term = [lease?.start_date, lease?.end_date].filter(Boolean).join(' – ') || '—';
  const rent = lease?.rent_cents!=null ? (fmtMoneyCents?fmtMoneyCents(lease.rent_cents):`$${(lease.rent_cents/100).toFixed(0)}`) : '—';
  const [busy, setBusy] = React.useState(false);
  const canNotice = (window as any).__FEATURES__?.notices === true;
  async function onNotice(){
    try{ setBusy(true); await sendNotice({ leaseId:String(lease?.id??'') , template:'late' }); alert('Notice sent');}
    catch(e){ console.error(e); alert('Failed');} finally{ setBusy(false); }
  }
  return (
    <Section title={`Lease ${lease?.id ?? ''}`}>
      <div className="flex justify-between items-center mb-2">
        <div />
        <div className="flex gap-2">
          <ActionButton label="Edit" icon="✏️" variant="secondary" />
          <ActionButton label="Export PDF" icon="📄" variant="ghost" />
          <ActionButton label={busy?'Sending…':'Send Notice'} icon="📨" onClick={onNotice} disabled={busy} comingSoon={!canNotice}/>
        </div>
      </div>
      <KPIRow>
        <KPI label="Status" value={status}/>
        <KPI label="Term" value={term}/>
        <KPI label="Rent" value={rent}/>
        <KPI label="Balance" value="—"/>
        <KPI label="Last Payment" value="—"/>
      </KPIRow>
    </Section>
  );
}

L2 — RightRail (Lease)
FILE: src/pages/card/lease/RightRail.tsx (new)
CODE:
import React from 'react';
import Section from '@/components/Section';
import MiniCard from '@/features/portfolio/components/MiniCard';

export default function RightRail({ tenant }:{ tenant?: any|null }) {
  return (
    <div className="space-y-3">
      <Section title="Primary Tenant">
        {tenant ? <MiniCard title={tenant.display_name || `Tenant #${tenant.id}`} href={`/card/tenant/${tenant.id}`}/> : <div className="opacity-70 text-sm">No tenant</div>}
      </Section>
      <Section title="Key Dates">
        <div className="text-sm opacity-70">Start/End/Renewal reminders (placeholder).</div>
      </Section>
      <Section title="Pinned Files">
        <ul className="text-sm list-disc pl-5"><li>Lease.pdf</li></ul>
      </Section>
    </div>
  );
}

L3 — Tabs (Lease)
FILES (new): src/pages/card/lease/{Tabs,Overview,Details,Financials,Legal,Files,Linked,Activity}.tsx

Tabs.tsx: same pattern as UnitTabs (rename to LeaseTabs).
Overview.tsx: shows backlinks to property/unit/tenant + basic lease fields.
Financials.tsx: placeholder ledger section.
Legal.tsx: placeholder cases.
Files.tsx: placeholder.
Linked.tsx: MiniCards to Property/Unit/Tenant.
Activity.tsx: ActivityList items.

(Implement exactly like Unit with appropriate labels/links.)

L4 — Page assembly + resolver
FILES
- src/pages/card/lease/index.tsx (update)
- src/lib/ecc-card-queries.ts (append useLeaseCard if missing)

APPEND (if missing): ecc-card-queries.ts
----------------------------------------
export function useLeaseCard(id:string|number){
  return useQuery({ queryKey:['lease-card',id], queryFn: async()=>{
    try { return await j(`/api/rpc/get_lease_card?id=${id}`); }
    catch {
      const lease = await j(`/api/entities/leases/${id}`);
      const property = lease?.property_id!=null ? await j(`/api/entities/properties/${lease.property_id}`) : null;
      const unit = lease?.unit_id!=null ? await j(`/api/entities/units/${lease.unit_id}`) : null;
      const tenant = lease?.primary_tenant_id!=null ? await j(`/api/entities/tenants/${lease.primary_tenant_id}`) : null;
      return { lease, property, unit, tenant };
    }
  }, staleTime:60000});
}

PATCH: src/pages/card/lease/index.tsx
-------------------------------------
Compose HeroBlock, LeaseTabs, RightRail; pass lease, property, unit, tenant; show Not found panel when lease missing; 7 tabs render.

DOD
- tsc clean.
- /card/lease/1 shows KPIs, tabs, RightRail (no map).

WP4 — Tenant Card (T1–T4)
T1 — HeroBlock (Tenant)
FILE: src/pages/card/tenant/HeroBlock.tsx (new)
RULES: KPIs = Current Balance (—), Last Payment (—), Active Lease? Yes/No, Notices YTD (—). Actions: Edit, Export, Send Message (M365 via BFF).

CODE:
import React from 'react';
import { KPI, KPIRow } from '@/features/portfolio/components/KPI';
import ActionButton from '@/features/portfolio/components/ActionButton';
import Section from '@/components/Section';

export default function HeroBlock({ tenant, activeLease }:{ tenant?: any|null; activeLease?: any|null }) {
  const hasActive = !!activeLease;
  return (
    <Section title={tenant?.display_name || `Tenant #${tenant?.id ?? ''}`}>
      <div className="flex justify-between items-center mb-2">
        <div />
        <div className="flex gap-2">
          <ActionButton label="Edit" icon="✏️" variant="secondary" />
          <ActionButton label="Export PDF" icon="📄" variant="ghost" />
          <ActionButton label="Send Message" icon="✉️" comingSoon />
        </div>
      </div>
      <KPIRow>
        <KPI label="Current Balance" value="—" />
        <KPI label="Last Payment" value="—" />
        <KPI label="Active Lease" value={hasActive?'Yes':'No'} />
        <KPI label="Notices YTD" value="—" />
      </KPIRow>
    </Section>
  );
}

T2 — RightRail (Tenant)
FILE: src/pages/card/tenant/RightRail.tsx (new)
CODE:
import React from 'react';
import Section from '@/components/Section';
import MiniCard from '@/features/portfolio/components/MiniCard';

export default function RightRail({ activeLease }:{ activeLease?: any|null }){
  return (
    <div className="space-y-3">
      <Section title="Active Lease">
        {activeLease ? <MiniCard title={`Lease ${activeLease.doorloop_id ?? activeLease.id}`} href={`/card/lease/${activeLease.id}`}/> : <div className="opacity-70 text-sm">No active lease.</div>}
      </Section>
      <Section title="Contact Methods">
        <div className="text-sm opacity-70">Email, phone, SMS preferences (placeholder).</div>
      </Section>
      <Section title="Pinned Files">
        <ul className="text-sm list-disc pl-5"><li>ID Verification.pdf</li></ul>
      </Section>
    </div>
  );
}

T3 — Tabs (Tenant)
FILES (new): src/pages/card/tenant/{Tabs,Overview,Details,Financials,Legal,Files,Linked,Activity}.tsx

Tabs.tsx: same pattern (TenantTabs).
Overview.tsx: contact info fields + primary email/phone; shows leases count.
Financials.tsx: payment history placeholder.
Legal.tsx: notices history placeholder.
Files.tsx: placeholder.
Linked.tsx: list past & current leases MiniCards with backlinks to property/unit.
Activity.tsx: ActivityList.

(Implement like Unit/Lease shells.)

T4 — Page assembly + resolver
FILES
- src/pages/card/tenant/index.tsx (update)
- src/lib/ecc-card-queries.ts (append useTenantCard if missing)

APPEND: ecc-card-queries.ts
---------------------------
export function useTenantCard(id:string|number){
  return useQuery({ queryKey:['tenant-card',id], queryFn: async()=>{
    try { return await j(`/api/rpc/get_tenant_card?id=${id}`); }
    catch {
      const tenant = await j(`/api/entities/tenants/${id}`);
      const leases = tenant?.id!=null ? await j(`/api/entities/leases?primary_tenant_id=eq.${tenant.id}`) : [];
      const activeLease = Array.isArray(leases)? leases.find((l:any)=>String(l?.status??'').toLowerCase()==='active') ?? null : null;
      return { tenant, leases, activeLease };
    }
  }, staleTime:60000});
}

PATCH: src/pages/card/tenant/index.tsx
--------------------------------------
Compose HeroBlock, TenantTabs, RightRail; inputs from useTenantCard; Not found panel if base missing; 7 tabs render.

DOD
- tsc clean.
- /card/tenant/1 shows KPIs, tabs, RightRail (no map).

WP4 — Owner Card (O1–O4)
O1 — HeroBlock (Owner)
FILE: src/pages/card/owner/HeroBlock.tsx (new)
KPIs: Properties (#), Units (#), Occupancy %, Open WOs (—). Actions: Edit, Export, Transfer Ownership (stub).

CODE:
import React from 'react';
import { KPI, KPIRow } from '@/features/portfolio/components/KPI';
import ActionButton from '@/features/portfolio/components/ActionButton';
import Section from '@/components/Section';

export default function HeroBlock({ owner, properties, units }:{ owner?: any|null; properties?: any[]; units?: any[] }){
  const pCount = Array.isArray(properties)?properties.length:0;
  const uCount = Array.isArray(units)?units.length:0;
  const activeLeases = 0; // can be computed when data available
  const occupancy = uCount>0? (activeLeases/uCount)*100 : 0;
  return (
    <Section title={owner?.display_name || `Owner #${owner?.id ?? ''}`} actions={
      <div className="flex gap-2">
        <ActionButton label="Edit" icon="✏️" variant="secondary" />
        <ActionButton label="Export PDF" icon="📄" variant="ghost" />
        <ActionButton label="Transfer Ownership" icon="🔁" comingSoon />
      </div>
    }>
      <KPIRow>
        <KPI label="Properties" value={String(pCount)}/>
        <KPI label="Total Units" value={String(uCount)}/>
        <KPI label="Occupancy" value={`${occupancy.toFixed(1)}%`}/>
        <KPI label="Open WOs" value="—"/>
      </KPIRow>
    </Section>
  );
}

O2 — RightRail (Owner)
FILE: src/pages/card/owner/RightRail.tsx (new)
CODE:
import React from 'react';
import Section from '@/components/Section';

export default function RightRail({ owner }:{ owner?: any|null }){
  return (
    <div className="space-y-3">
      <Section title="Portfolio Summary">
        <div className="text-sm opacity-70">Counts & KPIs (placeholder).</div>
      </Section>
      <Section title="Contact Methods">
        <div className="text-sm opacity-70">Email, phone (placeholder).</div>
      </Section>
      <Section title="Pinned Files">
        <ul className="text-sm list-disc pl-5"><li>Management Agreement.pdf</li></ul>
      </Section>
    </div>
  );
}

O3 — Tabs (Owner)
FILES (new): src/pages/card/owner/{Tabs,Overview,Details,Financials,Legal,Files,Linked,Activity}.tsx

Tabs.tsx: OwnerTabs same pattern.
Overview.tsx: owner identity + contact info.
Portfolio tab (use Details.tsx or Linked.tsx for properties grid with MiniCards linking to /card/property/:id).
Financials/Legal/Files/Activity: placeholders.

O4 — Page assembly + resolver
FILES
- src/pages/card/owner/index.tsx (update)
- src/lib/ecc-card-queries.ts (append useOwnerCard if missing)

APPEND: ecc-card-queries.ts
---------------------------
export function useOwnerCard(id:string|number){
  return useQuery({ queryKey:['owner-card',id], queryFn: async()=>{
    try { return await j(`/api/rpc/get_owner_card?id=${id}`); }
    catch {
      const owner = await j(`/api/entities/owners/${id}`);
      const properties = owner?.id!=null ? await j(`/api/entities/properties?owner_id=eq.${owner.id}`) : [];
      // total units optional until modeled; leave empty array
      return { owner, properties, units: [] };
    }
  }, staleTime:60000});
}

PATCH: src/pages/card/owner/index.tsx
-------------------------------------
Compose HeroBlock(owner, properties, units), OwnerTabs (7 tabs), RightRail(owner). Not found panel when owner missing. No map.

DOD
- tsc clean.
- /card/owner/6 shows KPIs, tabs, RightRail (no map).

Final Verification (for all four packs)

npx tsc -p tsconfig.cards.json → 0 errors

Guardrails pass (overlay + mega)

Demo these routes (use real IDs you have):

/card/unit/45

/card/lease/1

/card/tenant/1

/card/owner/6

Each page shows: Hero KPIs, 7 tabs with visible content, RightRail (no map on non-Property).

No network in components (only in resolvers). No overlays. Never return null.