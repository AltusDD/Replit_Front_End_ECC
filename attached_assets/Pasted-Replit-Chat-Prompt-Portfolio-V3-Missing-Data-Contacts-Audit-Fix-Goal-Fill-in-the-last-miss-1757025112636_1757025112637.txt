Replit Chat Prompt — Portfolio V3 “Missing Data (Contacts) Audit + Fix”

Goal: Fill in the last missing data points (Tenants/Owners phone & email, plus any lingering ZIP/property/unit edges) without altering nav, theme, or table UX. Keep Genesis grade.

ROLE

You are a senior TS/React engineer. You will first audit, then apply minimal surgical fixes to complete data coverage. Treat the UI as production—do not drift style, nav, or component APIs.

HARD GUARDRAILS (do not violate)

Do not change the nav pane, routing, theme tokens, or global styles beyond the table CSS already in place.

Do not change DataTable API/props, pagination options, banding, or header styles.

Do not add libraries or modify build config.

Keep wouter. No router changes.

Keep all table features intact (sort, per-column filters, pagination at bottom [25,50,100,150,200], sticky headers, zebra rows).

Only touch files listed below. No refactors.

Phase 1 — Read-Only API Shape Audit (report first, no code edits)

Call each endpoint and print first item keys (no PII values):

curl -s http://localhost:8787/api/portfolio/properties | node -e "let d='';process.stdin.on('data',c=>d+=c).on('end',()=>{try{const a=JSON.parse(d)||[];const o=a[0]||{};console.log('PROPERTIES:',Object.keys(o).sort())}catch(e){console.error('!bad json')}})"
curl -s http://localhost:8787/api/portfolio/units | node -e "let d='';process.stdin.on('data',c=>d+=c).on('end',()=>{try{const a=JSON.parse(d)||[];const o=a[0]||{};console.log('UNITS:',Object.keys(o).sort())}catch(e){console.error('!bad json')}})"
curl -s http://localhost:8787/api/portfolio/leases | node -e "let d='';process.stdin.on('data',c=>d+=c).on('end',()=>{try{const a=JSON.parse(d)||[];const o=a[0]||{};console.log('LEASES:',Object.keys(o).sort())}catch(e){console.error('!bad json')}})"
curl -s http://localhost:8787/api/portfolio/tenants | node -e "let d='';process.stdin.on('data',c=>d+=c).on('end',()=>{try{const a=JSON.parse(d)||[];const o=a[0]||{};console.log('TENANTS:',Object.keys(o).sort())}catch(e){console.error('!bad json')}})"
curl -s http://localhost:8787/api/portfolio/owners | node -e "let d='';process.stdin.on('data',c=>d+=c).on('end',()=>{try{const a=JSON.parse(d)||[];const o=a[0]||{};console.log('OWNERS:',Object.keys(o).sort())}catch(e){console.error('!bad json')}})"


Then for tenants and owners, if the top level keys don’t show contact info, print a shallow sample of the whole object with keys only (no values) to detect nested arrays/objects like phones, contacts, or profile:

curl -s http://localhost:8787/api/portfolio/tenants | node -e "let d='';process.stdin.on('data',c=>d+=c).on('end',()=>{const a=JSON.parse(d)||[];const o=a[0]||{};const walk=(x,p=[])=>{if(!x||typeof x!=='object')return;const keys=Object.keys(x);console.log('TENANTS PATH',p.join('.')||'<root>', '=>', keys.slice(0,25));keys.forEach(k=>walk(x[k],[...p,k]));};walk(o);})"
curl -s http://localhost:8787/api/portfolio/owners | node -e "let d='';process.stdin.on('data',c=>d+=c).on('end',()=>{const a=JSON.parse(d)||[];const o=a[0]||{};const walk=(x,p=[])=>{if(!x||typeof x!=='object')return;const keys=Object.keys(x);console.log('OWNERS PATH',p.join('.')||'<root>', '=>', keys.slice(0,25));keys.forEach(k=>walk(x[k],[...p,k]));};walk(o);})"


Report back: post the found candidate paths (e.g., email, primary_email, contacts[0].email, phones[0].number, etc.).
Proceed to Phase 2 using sensible fallbacks even if some aren’t present.

Phase 2 — Minimal, Surgical Fixes (files limited below)
Files you may edit (ONLY):

src/pages/portfolio/columns.tsx (mappers only)

src/pages/portfolio/tenants/index.tsx (context enrichment only)

src/pages/portfolio/leases/index.tsx (context enrichment only)

src/pages/portfolio/owners/index.tsx (no layout change, allow enrichment if needed)

src/utils/format.ts (already $0 fix in place; no other changes)

src/utils/ids.ts (normalizeId helper already created—use it)

2A) Owners — company/email/phone fallbacks (mapper only; no UI changes)

In columns.tsx Owners mapper, ensure:

company tries: company_name, companyName, company, businessName, organization, name, ownerName

email tries: email, primary_email, contact_email, owner_email, and nested forms like emails[0].address, contacts[0].email

phone tries: phone, phone_number, phoneNumber, primary_phone, mobile, and nested like phones[0].number, contacts[0].phone

Do not add a giant “properties list” column to Owners.

2B) Tenants — email/phone/type & property/unit context (mapper + index)

email fallbacks: email, primary_email, contact_email, profile.email, contacts[0].email

phone fallbacks: phone, phone_number, phoneNumber, mobile, cell, contacts[0].phone, phones[0].number

type logic (already added): ensure it returns prospect_tenant / lease_tenant / secondary_tenant

Verify unit label fallback: unit_number → label → name

Enrichment (index.tsx): make sure we fill property.name and unit.label via latest active lease and normalizeId() across all maps

2C) Leases — ensure unit.label + multi-tenant stays intact

Keep building tenants[] from primary_tenant_id plus tenant_id (and any extra lease_tenants if available)

Ensure unit.label uses: unit.label → unit_number → number → name

2D) Properties/Units touch-ups (only if QA shows edge blanks)

Properties ZIP: keep the 7-path fallback (includes address_zip which QA confirms)

Units numerics: keep the beds/baths/sqft multi-path; do not hide 0

Units property name: allow property.name → property.displayName → property

2E) Do not change:

Any CSS themes or tokens

DataTable features, props, or layout

Pagination options; keep selector at the bottom

Phase 3 — Verification & Proof

Build + typecheck.

For each page, capture a data presence checklist (✅/❌):

Properties: zip, units, occPct, active

Units: property, unit, beds, baths, sqft, marketRent

Leases: property.name, unit.label, tenants[], rent, start, end, status

Tenants: name, type, email, phone, property.name, unit.label

Owners: company (bold), email, phone, active

Post one example shaped row (keys only) per page proving those fields exist.

Single commit:

git add -A
git commit -m "Portfolio V3: finalize contact field coverage (owners/tenants email/phone fallbacks, joins normalized). No nav/theme/table changes."


Begin.