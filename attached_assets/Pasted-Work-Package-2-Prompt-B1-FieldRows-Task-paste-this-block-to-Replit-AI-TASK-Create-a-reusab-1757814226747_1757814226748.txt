Work Package 2 — Prompt B1 (FieldRows)

Task (paste this block to Replit AI):

TASK: Create a reusable FieldRows component for labeled data display.

FILES TO CREATE/UPDATE
1) src/features/portfolio/components/FieldRows.tsx
2) src/features/portfolio/components/index.ts   (append export)
3) src/dev/AtomsGallery.tsx                     (dev-only gallery for visual QA)
4) src/App.tsx                                  (add /dev/atoms route; no overlays)

REQUIREMENTS
- No data fetching. Pure presentational atom.
- Supports loading (skeleton), empty (—), copyable values, and optional links.
- Grid layout that adapts to 1–3 columns; default 2.
- Uses the .ecc-object surface and never creates backdrop/overlay elements.
- Accessible: <dl>, <dt>, <dd>, labels announced to screen readers.
- No conditional hooks; no return null page-level behavior.
- TypeScript strict.

CODE: src/features/portfolio/components/FieldRows.tsx
---------------------------------------------------
import React from 'react';

export type FieldValue = React.ReactNode | string | number | null | undefined;

export interface FieldRow {
  label: string;
  value?: FieldValue;
  href?: string;          // optional link target for the value
  hint?: string;          // subtle right-aligned hint/help
  copy?: boolean;         // if true, render a small copy affordance
}

export interface FieldRowsProps {
  rows: FieldRow[];
  columns?: 1 | 2 | 3;
  loading?: boolean;
  dense?: boolean;
  className?: string;
  'data-testid'?: string;
}

function cx(...parts: Array<string | false | null | undefined>) {
  return parts.filter(Boolean).join(' ');
}

export const Dash = () => <span className="opacity-60">—</span>;

export default function FieldRows({
  rows,
  columns = 2,
  loading = false,
  dense = false,
  className,
  'data-testid': testid,
}: FieldRowsProps) {
  const colCls =
    columns === 1 ? 'grid-cols-1' : columns === 3 ? 'md:grid-cols-3 grid-cols-1' : 'md:grid-cols-2 grid-cols-1';

  return (
    <div
      className={cx(
        'ecc-object rounded-xl p-4',
        dense ? 'space-y-2' : 'space-y-3',
        className
      )}
      data-testid={testid ?? 'field-rows'}
    >
      <dl className={cx('grid gap-3', colCls)}>
        {(loading ? Array.from({ length: Math.max(4, rows.length || 4) }, (_, i) => ({ label: `…${i}` })) : rows).map(
          (row, idx) => (
            <div key={idx} className="flex flex-col gap-1 min-w-0">
              <dt className="text-xs uppercase tracking-wide opacity-60">{row.label}</dt>
              <dd className="min-h-[1.25rem]">
                {loading ? (
                  <div className="h-4 w-32 rounded bg-white/10 animate-pulse" />
                ) : (
                  <ValueCell value={row.value} href={row.href} copy={row.copy} hint={row.hint} />
                )}
              </dd>
            </div>
          )
        )}
      </dl>
    </div>
  );
}

function ValueCell({
  value,
  href,
  copy,
  hint,
}: {
  value?: FieldValue;
  href?: string;
  copy?: boolean;
  hint?: string;
}) {
  const val =
    value === null || value === undefined || value === '' ? <Dash /> : (
      <span className="truncate">{value as any}</span>
    );

  const content = href ? (
    <a href={href} className="underline underline-offset-2 hover:opacity-90">{val}</a>
  ) : (
    val
  );

  return (
    <div className="flex items-center justify-between gap-3 min-w-0">
      <div className="min-w-0">{content}</div>
      <div className="flex items-center gap-2 shrink-0">
        {hint && <span className="text-xs opacity-60">{hint}</span>}
        {copy && typeof value === 'string' && (
          <button
            type="button"
            title="Copy"
            aria-label="Copy value"
            className="rounded px-1.5 py-0.5 text-xs border border-white/10 hover:bg-white/10"
            onClick={() => navigator.clipboard?.writeText(value)}
          >
            Copy
          </button>
        )}
      </div>
    </div>
  );
}

CODE: src/features/portfolio/components/index.ts (append)
---------------------------------------------------------
export { default as FieldRows } from './FieldRows';

CODE: src/dev/AtomsGallery.tsx
------------------------------
import React from 'react';
import { FieldRows } from '@/features/portfolio/components/FieldRows';

export default function AtomsGallery() {
  const rows = [
    { label: 'Type', value: 'RESIDENTIAL_SINGLE_FAMILY' },
    { label: 'Status', value: 'Active' },
    { label: 'DoorLoop ID', value: '67506d4611d949701aba9927', copy: true },
    { label: 'Owner', value: '—' },
    { label: 'GIS', value: 'Open parcel', href: '#' },
  ];
  return (
    <div className="p-6 space-y-6">
      <h1 className="text-lg font-semibold">Atoms Gallery</h1>
      <FieldRows rows={rows} />
      <FieldRows rows={rows} loading />
      <FieldRows rows={rows} columns={3} dense />
    </div>
  );
}

PATCH: src/App.tsx — add dev route (keep existing imports/structure)
--------------------------------------------------------------------
/* near other imports */
import AtomsGallery from '@/dev/AtomsGallery';

/* inside Routes/Switch */
<Route path="/dev/atoms" component={AtomsGallery} />

DOD / VERIFICATION
- Run: npx tsc -p tsconfig.cards.json → 0 errors.
- Visit /dev/atoms → see three FieldRows blocks (default, loading, 3-column dense).
- No overlays/backdrops in DOM; only .ecc-object surfaces.
- Copy button copies the DoorLoop ID to clipboard.

Work Package 2 — Prompt B2 (KPI)

Task (paste this block to Replit AI):

TASK: Create KPI atom(s) for hero metrics, with loading and trend.

FILES
1) src/features/portfolio/components/KPI.tsx
2) src/features/portfolio/components/index.ts   (append export)
3) src/dev/AtomsGallery.tsx                     (append preview section)

REQUIREMENTS
- <KPI> renders label, value, optional trend (▲/▼ + %), optional onClick.
- <KPIRow> arranges multiple KPIs in a responsive row.
- Loading state shows animated bars; fallback displays "—".
- No new dependencies; no overlays.

CODE: src/features/portfolio/components/KPI.tsx
-----------------------------------------------
import React from 'react';

function cx(...s: Array<string | false | null | undefined>) { return s.filter(Boolean).join(' '); }

export interface KPIProps {
  label: string;
  value?: React.ReactNode;
  trendPct?: number | null;   // e.g., +3.2 or -1.1
  loading?: boolean;
  onClick?: () => void;
  'data-testid'?: string;
}

export function KPI({ label, value, trendPct, loading, onClick, 'data-testid': tid }: KPIProps) {
  const trend =
    typeof trendPct === 'number'
      ? trendPct === 0
        ? <span className="text-xs opacity-60">0%</span>
        : trendPct > 0
          ? <span className="text-xs text-emerald-400">▲ {trendPct.toFixed(1)}%</span>
          : <span className="text-xs text-rose-400">▼ {Math.abs(trendPct).toFixed(1)}%</span>
      : null;

  return (
    <button
      type="button"
      onClick={onClick}
      className={cx(
        'ecc-object rounded-xl p-3 text-left',
        onClick ? 'hover:ring-1 hover:ring-white/15' : 'cursor-default'
      )}
      data-testid={tid ?? 'kpi'}
    >
      <div className="text-xs uppercase tracking-wide opacity-60">{label}</div>
      <div className="mt-1 text-lg font-semibold min-h-[1.5rem]">
        {loading ? <div className="h-5 w-16 rounded bg-white/10 animate-pulse" /> : (value ?? <span className="opacity-60">—</span>)}
      </div>
      {trend && <div className="mt-1">{trend}</div>}
    </button>
  );
}

export function KPIRow({ children }: { children: React.ReactNode }) {
  return <div className="grid grid-cols-2 md:grid-cols-4 gap-3">{children}</div>;
}

CODE: src/features/portfolio/components/index.ts (append)
---------------------------------------------------------
export { KPI, KPIRow } from './KPI';

PATCH: src/dev/AtomsGallery.tsx (append a KPI section)
------------------------------------------------------
/* add below existing content */
import { KPI, KPIRow } from '@/features/portfolio/components/KPI';

{/* KPI Preview */}
<div className="space-y-3">
  <h2 className="text-base font-semibold mt-8">KPI</h2>
  <KPIRow>
    <KPI label="Units" value="178" trendPct={1.2} />
    <KPI label="Active Leases" value="98" />
    <KPI label="Avg Rent" value="$1,245" trendPct={-0.4} />
    <KPI label="Status" value="Active" />
  </KPIRow>
  <KPIRow>
    <KPI label="Loading KPI" loading />
    <KPI label="Loading KPI" loading />
  </KPIRow>
</div>

DOD / VERIFICATION
- npx tsc -p tsconfig.cards.json → 0 errors.
- /dev/atoms shows two KPI rows; first row with values/trends, second with loading.
- Buttons have no overlay/backdrop; only .ecc-object surfaces.

Work Package 2 — Prompt B3 (ActionButton)

Task (paste this block to Replit AI):

TASK: Create ActionButton atom for hero actions, with safe "coming soon" tooltips.

FILES
1) src/features/portfolio/components/ActionButton.tsx
2) src/features/portfolio/components/index.ts   (append export)
3) src/dev/AtomsGallery.tsx                     (append preview block)

REQUIREMENTS
- Variants: primary | secondary | ghost.
- States: disabled, loading, comingSoon (renders title tooltip only; no overlay component).
- Supports left icon via emoji/string (no new deps).
- Accessible labels; no fixed/inset overlays.

CODE: src/features/portfolio/components/ActionButton.tsx
--------------------------------------------------------
import React from 'react';

type Variant = 'primary' | 'secondary' | 'ghost';

export interface ActionButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  label: string;
  icon?: string;          // simple emoji or short text
  variant?: Variant;
  loading?: boolean;
  comingSoon?: boolean;   // disables + title tooltip "Coming soon"
}

export default function ActionButton({
  label,
  icon,
  variant = 'primary',
  loading = false,
  comingSoon = false,
  disabled,
  ...rest
}: ActionButtonProps) {
  const isDisabled = disabled || loading || comingSoon;
  const title = comingSoon ? 'Coming soon' : rest.title;

  const base = 'inline-flex items-center gap-2 rounded-lg px-3 py-2 text-sm border transition';
  const v =
    variant === 'primary'
      ? 'bg-white/10 hover:bg-white/15 border-white/15'
      : variant === 'secondary'
      ? 'bg-transparent hover:bg-white/10 border-white/15'
      : 'bg-transparent hover:bg-white/5 border-transparent';

  return (
    <button
      type="button"
      aria-label={label}
      {...rest}
      title={title}
      disabled={isDisabled}
      className={`${base} ${v} ${isDisabled ? 'opacity-60 cursor-not-allowed' : ''}`}
    >
      {loading ? <span className="h-4 w-4 rounded-full bg-white/30 animate-pulse" /> : icon ? <span>{icon}</span> : null}
      <span>{label}</span>
    </button>
  );
}

CODE: src/features/portfolio/components/index.ts (append)
---------------------------------------------------------
export { default as ActionButton } from './ActionButton';

PATCH: src/dev/AtomsGallery.tsx (append)
----------------------------------------
import ActionButton from '@/features/portfolio/components/ActionButton';

{/* Actions Preview */}
<div className="space-y-3">
  <h2 className="text-base font-semibold mt-8">ActionButton</h2>
  <div className="flex flex-wrap gap-3">
    <ActionButton label="Edit" icon="✏️" variant="secondary" />
    <ActionButton label="Export PDF" icon="📄" variant="ghost" />
    <ActionButton label="New Work Order" icon="🛠️" />
    <ActionButton label="CoreLogic AVM" icon="📈" comingSoon />
    <ActionButton label="Upload" icon="⬆️" loading />
  </div>
</div>

DOD / VERIFICATION
- Typecheck clean.
- /dev/atoms shows 5 buttons; "CoreLogic AVM" is disabled with native title tooltip.
- No overlay/backdrop elements in DOM.

Work Package 2 — Prompt B4 (MiniCard)

Task (paste this block to Replit AI):

TASK: Create MiniCard atom for the Linked tab (small relational cards).

FILES
1) src/features/portfolio/components/MiniCard.tsx
2) src/features/portfolio/components/index.ts   (append export)
3) src/dev/AtomsGallery.tsx                     (append preview)

REQUIREMENTS
- Shows title, subtitle, optional meta (e.g., "Units: 12"), and optional href.
- Optional right-side count badge.
- Clickable entire card when href provided; keyboard accessible.
- Uses .ecc-object surface; no overlays.

CODE: src/features/portfolio/components/MiniCard.tsx
----------------------------------------------------
import React from 'react';

export interface MiniCardProps {
  title: string;
  subtitle?: string;
  meta?: string;
  countBadge?: number;
  href?: string;
}

export default function MiniCard({ title, subtitle, meta, countBadge, href }: MiniCardProps) {
  const Card = (
    <div className="ecc-object rounded-xl p-3 hover:ring-1 hover:ring-white/15 transition">
      <div className="flex items-start justify-between gap-3">
        <div className="min-w-0">
          <div className="font-medium truncate">{title}</div>
          {subtitle && <div className="text-sm opacity-75 truncate">{subtitle}</div>}
          {meta && <div className="text-xs opacity-60 mt-1">{meta}</div>}
        </div>
        {typeof countBadge === 'number' && (
          <span className="shrink-0 inline-flex items-center justify-center rounded-full min-w-[1.75rem] h-7 px-2 text-sm bg-white/10">
            {countBadge}
          </span>
        )}
      </div>
    </div>
  );

  return href ? (
    <a href={href} className="block focus:outline-none focus:ring-2 focus:ring-white/30 rounded-xl">{Card}</a>
  ) : (
    Card
  );
}

CODE: src/features/portfolio/components/index.ts (append)
---------------------------------------------------------
export { default as MiniCard } from './MiniCard';

PATCH: src/dev/AtomsGallery.tsx (append)
----------------------------------------
import MiniCard from '@/features/portfolio/components/MiniCard';

{/* MiniCard Preview */}
<div className="space-y-3">
  <h2 className="text-base font-semibold mt-8">MiniCard</h2>
  <div className="grid md:grid-cols-3 gap-3">
    <MiniCard title="Unit 101" subtitle="2 bed • 1 bath" meta="Market Rent $1,245" href="#" />
    <MiniCard title="Building A" subtitle="Macon, GA" meta="Class B" countBadge={12} href="#" />
    <MiniCard title="Owner: Altus" meta="Properties: 7 • Units: 178" />
  </div>
</div>

DOD / VERIFICATION
- Typecheck clean.
- /dev/atoms shows three MiniCards; keyboard Tab focuses the first card.
- No overlays/backdrops.

Work Package 2 — Prompt B5 (ActivityChip)

Task (paste this block to Replit AI):

TASK: Create ActivityChip + ActivityList atoms for the Activity tab.

FILES
1) src/features/portfolio/components/ActivityChip.tsx
2) src/features/portfolio/components/index.ts   (append export)
3) src/dev/AtomsGallery.tsx                     (append preview)

REQUIREMENTS
- ActivityChip renders icon (emoji), primary text, secondary meta (by, when).
- ActivityList stacks chips by date groups; purely presentational.
- No new dependencies; no overlays.

CODE: src/features/portfolio/components/ActivityChip.tsx
--------------------------------------------------------
import React from 'react';

export type ActivityKind =
  | 'payment'
  | 'notice'
  | 'workorder'
  | 'file'
  | 'legal'
  | 'avm'
  | 'generic';

export interface ActivityItem {
  id: string;
  kind: ActivityKind;
  summary: string;
  when: string | Date;
  by?: string;
}

function iconFor(kind: ActivityKind) {
  switch (kind) {
    case 'payment': return '💵';
    case 'notice': return '📢';
    case 'workorder': return '🛠️';
    case 'file': return '📄';
    case 'legal': return '⚖️';
    case 'avm': return '📈';
    default: return '•';
  }
}

export function ActivityChip({ item }: { item: ActivityItem }) {
  const when = typeof item.when === 'string' ? item.when : item.when.toLocaleString();
  return (
    <div className="ecc-object rounded-xl px-3 py-2 flex items-start gap-3">
      <div className="text-lg leading-none mt-0.5">{iconFor(item.kind)}</div>
      <div className="min-w-0">
        <div className="text-sm">{item.summary}</div>
        <div className="text-xs opacity-60">{[item.by, when].filter(Boolean).join(' • ')}</div>
      </div>
    </div>
  );
}

export function ActivityList({ items }: { items: ActivityItem[] }) {
  return (
    <div className="space-y-2">
      {items.map((it) => <ActivityChip key={it.id} item={it} />)}
    </div>
  );
}

CODE: src/features/portfolio/components/index.ts (append)
---------------------------------------------------------
export { ActivityChip, ActivityList } from './ActivityChip';

PATCH: src/dev/AtomsGallery.tsx (append)
----------------------------------------
import { ActivityList } from '@/features/portfolio/components/ActivityChip';

{/* Activity Preview */}
<div className="space-y-3">
  <h2 className="text-base font-semibold mt-8">Activity</h2>
  <ActivityList
    items={[
      { id: 'a1', kind: 'payment', summary: 'Payment of $1,275 recorded', when: '2025-08-01 09:14', by: 'DoorLoop' },
      { id: 'a2', kind: 'notice', summary: 'Late notice sent', when: '2025-08-03 10:02', by: 'M365' },
      { id: 'a3', kind: 'workorder', summary: 'Work order created: HVAC filter', when: '2025-08-05 14:33', by: 'Field App' },
    ]}
  />
</div>

DOD / VERIFICATION
- Typecheck clean.
- /dev/atoms shows three activity chips with correct icons and meta.
- No overlays/backdrops; only .ecc-object surfaces.

After B1–B5

When all five prompts are executed:

Run npx tsc -p tsconfig.cards.json → should be clean.

Open /dev/atoms and visually verify: FieldRows, KPI, ActionButton, MiniCard, Activity sections render with both normal and loading states.

Confirm no fixed/inset overlays and that everything sits on the .ecc-object surface.