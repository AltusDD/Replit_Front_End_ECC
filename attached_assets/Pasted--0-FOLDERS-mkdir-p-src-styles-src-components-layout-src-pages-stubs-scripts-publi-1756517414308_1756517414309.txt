# ====== 0) FOLDERS ======
mkdir -p src/styles src/components/layout src/pages/_stubs scripts public

# ====== 1) THEME (authoritative tokens) ======
cat > src/styles/theme.css <<'CSS'
:root{
  /* Brand */
  --gold:#F7C948; --success:#32D296; --danger:#E5484D;

  /* Surfaces */
  --bg:#0A0A0A; --surface:#141414; --panel:#141414; --border-1:#2C2C2C;

  /* Type */
  --fg:#FFFFFF; --muted-1:#C2C2C2; --muted-2:#9AA0A6;

  /* Sidebar */
  --nav-bg:var(--surface); --nav-fg:var(--fg);
  --nav-active:var(--gold);
  --nav-hover: color-mix(in srgb, var(--gold) 30%, var(--fg));

  /* Radii / gaps */
  --radius-sm:10px; --radius-md:12px; --radius-lg:14px;
  --gap-1:8px; --gap-2:12px; --gap-3:16px; --gap-4:24px;

  /* Typography */
  --font: ui-sans-serif, system-ui, -apple-system, "Segoe UI", Inter, Roboto, Arial;
  --fs-14:14px; --fs-16:16px; --fs-22:22px; --lh:1.35;

  /* Elevation */
  --shadow-1:0 1px 0 rgba(0,0,0,.35), 0 6px 18px rgba(0,0,0,.22);
}
*{box-sizing:border-box}
html,body,#root{height:100%}
body{margin:0;background:var(--bg);color:var(--fg);font:var(--fs-16)/var(--lh) var(--font);}

a{color:inherit;text-decoration:none}
.panel{background:var(--panel);border:1px solid var(--border-1);border-radius:var(--radius-lg);box-shadow:var(--shadow-1)}
.badge{display:inline-block;border:1px solid var(--border-1);border-radius:999px;padding:4px 8px;font-size:12px;color:var(--muted-1)}
h1{font-size:28px;margin:0 0 12px}
h2{font-size:22px;margin:0 0 10px;color:var(--muted-1)}
/* Sidebar + Shell */
.shell{display:grid;grid-template-columns:260px 1fr;gap:0;height:100%}
.sidebar{background:var(--nav-bg);color:var(--nav-fg);padding:12px;border-right:1px solid var(--border-1)}
.brand{display:flex;align-items:center;gap:10px;margin:6px 6px 12px}
.brand img{width:26px;height:26px}
.group{margin:16px 6px 6px 6px;color:var(--muted-2);font-size:12px;letter-spacing:.04em}
.nav a{display:block;padding:8px 10px;border-radius:8px;color:var(--muted-1)}
.nav a:hover{background:rgba(255,255,255,.04);color:var(--fg)}
.nav a.active{outline:1px solid var(--nav-active);color:var(--fg)}
.main{padding:24px 28px}
.kpi-grid{display:grid;grid-template-columns:repeat(5,minmax(220px,1fr));gap:12px}
.kpi{padding:14px}
.kpi h3{font-size:12px;color:var(--muted-2);margin:0 0 8px}
.kpi .num{font-size:28px}
CSS

# ====== 2) APP CSS (light structure only) ======
cat > src/styles/app.css <<'CSS'
.container{max-width:1400px;margin:0 auto}
.hr{height:1px;background:var(--border-1);margin:10px 0}
CSS

# ====== 3) LOGO ======
cat > public/logo.svg <<'SVG'
<svg viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg" fill="none">
  <rect width="48" height="48" rx="10" fill="#141414"/>
  <path d="M12 28l4-12 8 8 8-8 4 12-12 8-12-8z" stroke="#F7C948" stroke-width="2" fill="none"/>
</svg>
SVG

# ====== 4) CANONICAL NAV TREE (CSV) ======
cat > nav_tree_v3.csv <<'CSV'
section,parent,label,path,type
Primary,,Dashboard,/dashboard,leaf
Portfolio V3,,Portfolio V3,,parent
Portfolio V3,Portfolio V3,Properties,/portfolio/properties,leaf
Portfolio V3,Portfolio V3,Units,/portfolio/units,leaf
Portfolio V3,Portfolio V3,Leases,/portfolio/leases,leaf
Portfolio V3,Portfolio V3,Tenants,/portfolio/tenants,leaf
Portfolio V3,Portfolio V3,Owners,/portfolio/owners,leaf
Cards,,Cards,,parent
Cards,Cards,Property Card,/card/property/:id,leaf
Cards,Cards,Unit Card,/card/unit/:id,leaf
Cards,Cards,Lease Card,/card/lease/:id,leaf
Cards,Cards,Tenant Card,/card/tenant/:id,leaf
Cards,Cards,Owner Card,/card/owner/:id,leaf
Operations,,Accounting,,parent
Operations,Accounting,Overview,/ops/accounting/overview,leaf
Operations,Accounting,Rent Collection,/ops/accounting/rent-collection,leaf
Operations,Accounting,Expenses,/ops/accounting/expenses,leaf
Operations,Accounting,Financial Reports,/ops/accounting/financial-reports,leaf
Operations,Accounting,Tenant Ledgers,/ops/accounting/tenant-ledgers,leaf
Operations,Accounting,Collections Dashboard,/ops/accounting/collections-dashboard,leaf
Operations,Accounting,Collections Log,/ops/accounting/collections-log,leaf
Operations,Accounting,Payment Plans,/ops/accounting/payment-plans,leaf
Operations,Accounting,Deposits,/ops/accounting/deposits,leaf
Operations,Accounting,Transfers,/ops/accounting/transfers,leaf
Operations,Accounting,Subsidized Housing,/ops/accounting/subsidized-housing,leaf
Operations,Accounting,Assistance Programs,/ops/accounting/assistance-programs,leaf
Operations,,AI Analytics,,parent
Operations,AI Analytics,Risk Summary,/ops/ai/risk-summary,leaf
Operations,AI Analytics,Renewal Forecasting,/ops/ai/renewal-forecasting,leaf
Operations,AI Analytics,Vacancy Analytics,/ops/ai/vacancy-analytics,leaf
Operations,AI Analytics,ML Leasing Logs,/ops/ai/ml-leasing-logs,leaf
Operations,,Legal Tracker,,parent
Operations,Legal Tracker,Case Manager,/ops/legal/case-manager,leaf
Operations,Legal Tracker,Advanced Legal Ops,/ops/legal/advanced,leaf
Operations,Legal Tracker,Legal Docs,/ops/legal/docs,leaf
Operations,Legal Tracker,Attorney Reports,/ops/legal/attorney-reports,leaf
Operations,,Communication,,parent
Operations,Communication,Queue,/ops/comms/queue,leaf
Operations,Communication,Templates,/ops/comms/templates,leaf
Operations,Communication,Logs,/ops/comms/logs,leaf
Operations,,Work Orders,,parent
Operations,Work Orders,Work Orders,/ops/work/work-orders,leaf
Operations,Work Orders,Vendors,/ops/work/vendors,leaf
Operations,Work Orders,Materials & Inventory,/ops/work/materials-inventory,leaf
Operations,Work Orders,Smart Routing,/ops/work/smart-routing,leaf
Operations,Work Orders,AI Intelligence,/ops/work/ai-intelligence,leaf
Operations,Work Orders,Build/Repair Projects,/ops/work/build-repair-projects,leaf
Operations,Work Orders,Capital Projects,/ops/work/capital-projects,leaf
Operations,,Reports,/ops/reports,leaf
Growth,,Inventory,/growth/inventory,leaf
Growth,,Marketing,/growth/marketing,leaf
System,,Automation,/system/automation,leaf
System,,Settings,/system/settings,leaf
Data Management,,Data Management,,parent
Data Management,Data Management,Sync Audit,/data/sync-audit,leaf
Data Management,Data Management,Sync Management,/data/sync-management,leaf
Data Management,Data Management,Raw Data,/data/raw,leaf
Data Management,Data Management,Sync Logs,/data/sync-logs,leaf
Data Management,Data Management,System Settings,/data/system-settings,leaf
Investor Portal,,Investor Portal,,parent
Investor Portal,Investor Portal,Dashboard,/investor/dashboard,leaf
Investor Portal,Investor Portal,Portfolio Analytics,/investor/portfolio-analytics,leaf
Investor Portal,Investor Portal,Financial Reports,/investor/financial-reports,leaf
Integrations,,Integrations,,parent
Integrations,Integrations,Dropbox Files,/integrations/dropbox,leaf
Integrations,Integrations,CoreLogic / MLS Grid,/integrations/corelogic,leaf
Integrations,Integrations,Field App Link,/integrations/field-app,leaf
Integrations,Integrations,Deal Room Link,/integrations/deal-room,leaf
CSV

# ====== 5) GENERATOR: build navConfig + stubs + routes from CSV ======
cat > scripts/gen-nav.mjs <<'JS'
import fs from "node:fs";

const csv = fs.readFileSync("nav_tree_v3.csv","utf8").trim().split(/\r?\n/).slice(1)
  .map(l=>l.split(/,(?=(?:[^"]*"[^"]*")*[^"]*$)/).map(s=>s.trim()));
const rows = csv.map(([section,parent,label,path,type])=>({section,parent,label,path,type}));

// Build tree (section groups can repeat)
const sections = {};
for (const r of rows) {
  if (!sections[r.section]) sections[r.section] = { label:r.section, items:[] };
}
function ensureParent(sec, parent){
  const s = sections[sec]; if (!parent) return s;
  let p = s.items.find(x=>x.type==="parent" && x.label===parent);
  if(!p){ p = {type:"parent", label:parent, items:[]}; s.items.push(p); }
  return p;
}

const leafs = [];
for (const r of rows) {
  if (r.type==="parent"){ ensureParent(r.section, r.parent); continue; }
  const bucket = ensureParent(r.section, r.parent);
  const item = {type:"leaf", label:r.label, path:r.path};
  bucket.items.push(item); leafs.push(item);
}

// Write navConfig.ts
const nav = Object.values(sections);
fs.mkdirSync("src/components/layout",{recursive:true});
fs.writeFileSync("src/components/layout/navConfig.ts",
`export type NavLeaf = { type:"leaf"; label:string; path:string };
export type NavParent = { type:"parent"; label:string; items:(NavLeaf)[] };
export type NavSection = { label:string; items:(NavParent)[] };
export const NAV: NavSection[] = ${JSON.stringify(nav, null, 2)};\n`);

// Create stub pages for every leaf if missing
function stub(path,label){
  // convert /ops/accounting/overview -> src/pages/ops/accounting/overview.tsx
  const clean = path.replace(/^\/+/,'').replace(/:([a-zA-Z]+)/g,'$1'); // :id -> id
  const file = `src/pages/${clean || "index"}.tsx`;
  const dir = file.split('/').slice(0,-1).join('/');
  fs.mkdirSync(dir,{recursive:true});
  if (!fs.existsSync(file)) {
    fs.writeFileSync(file,
`import React from 'react';
export default function Page(){ return (
  <div className="panel" style={{padding:16}}>
    <h1>${label}</h1>
    <p className="badge">Stub â€¢ ${path}</p>
  </div>
); }`);
  }
}
leafs.forEach(l => stub(l.path, l.label));

// Write route map (wouter)
fs.writeFileSync("src/router.tsx",
`import React from 'react';
import { Route, Switch } from 'wouter';
${leafs.map(l=>{
  const imp = l.path.replace(/^\/+/,'').replace(/:([a-zA-Z]+)/g,'$1').replace(/[^a-zA-Z0-9]/g,'_');
  const p   = l.path.replace(/^\/+/,'');
  return `import ${imp} from './pages/${p.replace(/:([a-zA-Z]+)/g,'$1')}';`;
}).join('\n')}

export default function AppRoutes(){
  return (<Switch>
${leafs.map(l=>{
  return `    <Route path="${l.path}" component={${l.path.replace(/^\/+/,'').replace(/:([a-zA-Z]+)/g,'$1').replace(/[^a-zA-Z0-9]/g,'_')}} />`;
}).join('\n')}
    <Route>404 Not Found</Route>
  </Switch>);
}
`);
console.log("âœ” navConfig.ts, router.tsx, and stub pages generated.");
JS

node scripts/gen-nav.mjs

# ====== 6) SIDEBAR + LAYOUT ======
cat > src/components/layout/Sidebar.tsx <<'TS'
import React from 'react';
import { Link, useRoute } from 'wouter';
import { NAV } from './navConfig';

function NavLink({ href, children }:{ href:string, children:React.ReactNode}){
  const [match] = useRoute(href);
  return <Link href={href}><a className={match?'active':''}>{children}</a></Link>;
}

export default function Sidebar(){
  return (
    <aside className="sidebar">
      <div className="brand">
        <img alt="Empire" src="/logo.svg"/><strong>Empire Command Center</strong>
      </div>
      {NAV.map(section=>(
        <div key={section.label} className="nav">
          <div className="group">{section.label.toUpperCase()}</div>
          {section.items.map(parent=>(
            <div key={parent.label} style={{margin:'6px 6px 8px'}}>
              {parent.label !== section.label && <div style={{color:'var(--muted-2)',fontSize:12,margin:'6px 4px'}}>{parent.label}</div>}
              {parent.items.map(leaf=>(
                <NavLink key={leaf.path} href={leaf.path}>{leaf.label}</NavLink>
              ))}
            </div>
          ))}
        </div>
      ))}
      <div className="hr"></div>
      <div className="nav">
        <div className="group">TOOLS</div>
        <NavLink href="/tools/api-probe">API Probe</NavLink>
      </div>
    </aside>
  );
}
TS

cat > src/components/layout/Layout.tsx <<'TS'
import React from 'react';
import Sidebar from './Sidebar';

export default function Layout({children}:{children:React.ReactNode}){
  return (
    <div className="shell">
      <Sidebar/>
      <main className="main">{children}</main>
    </div>
  );
}
TS

# ====== 7) APP + MAIN to use layout/routes and load CSS ======
cat > src/App.tsx <<'TS'
import React from 'react';
import Layout from './components/layout/Layout';
import Routes from './router';

export default function App(){
  return (<Layout><Routes/></Layout>);
}
TS

# Ensure CSS imports are at the root
cat > src/main.tsx <<'TS'
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './styles/theme.css';
import './styles/app.css';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode><App/></React.StrictMode>
);
TS

# ====== 8) DASHBOARD STUB UPGRADE (NO TABLES) ======
mkdir -p src/pages/dashboard
cat > src/pages/dashboard/index.tsx <<'TS'
import React from 'react';
const Card = ({title,value}:{title:string,value:string}) => (
  <div className="panel kpi"><h3>{title}</h3><div className="num">{value}</div></div>
);
export default function Dashboard(){
  return (
    <div className="container">
      <h1>Dashboard</h1>
      <div className="panel" style={{padding:12, marginBottom:12}}>Powered by RPC</div>
      <div className="kpi-grid">
        <Card title="Properties" value="â€¦"/>
        <Card title="Units" value="â€¦"/>
        <Card title="Leases" value="â€¦"/>
        <Card title="Tenants" value="â€¦"/>
        <Card title="Owners" value="â€¦"/>
      </div>
    </div>
  );
}
TS

# ====== 9) API PROBE TOOL (route & stub) ======
mkdir -p src/pages/tools
cat > src/pages/tools/api-probe.tsx <<'TS'
import React from 'react';
export default function ApiProbe(){return <div className="panel" style={{padding:16}}><h1>API Probe</h1><p className="badge">Stub</p></div>}
TS

# ====== 10) SAFETY â€” ensure only our two CSS imports exist ======
grep -RIl --include='*.tsx' --include='*.ts' "import .*\\.css" src | xargs -r sed -n '1,200p'

echo "âœ” Done. Restarting devâ€¦"
pkill -f vite >/dev/null 2>&1 || true
npm run dev
