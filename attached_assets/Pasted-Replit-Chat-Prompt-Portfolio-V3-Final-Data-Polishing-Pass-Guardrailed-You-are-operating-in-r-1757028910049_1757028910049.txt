Replit Chat Prompt — Portfolio V3: Final Data + Polishing Pass (Guardrailed)

You are operating in read → diff → surgical write mode.
Do not restructure routing, state, or the DataTable.
Change only the files and lines specified.
All changes must be incremental, reversible, and fully typed.

GOALS

Tenants page: populate PROPERTY, UNIT, EMAIL, PHONE, TYPE, BALANCE.

Owners page: keep COMPANY (bold), fill best-effort EMAIL, PHONE, and compute TOTAL PROPERTIES KPI by join if possible (otherwise leave KPI logic unchanged, just populate table where data exists).

Dates: format as Mon D, YYYY (e.g., Sep 4, 2025).

Polish: replace “brown tint” chips/cards with approved light-grey contrast while keeping Altus Gold accents for meaningful highlights (bars, active badges).

Observability: add a non-prod debug auditor that prints field coverage % per page and highlights missing keys so we can verify joins without guessing.

PHASE 0 — Quick Read-Only Audit (no writes)

Read these files to understand current shaping and joins:

src/utils/format.ts

src/pages/portfolio/columns.tsx

src/pages/portfolio/properties/index.tsx

src/pages/portfolio/units/index.tsx

src/pages/portfolio/leases/index.tsx

src/pages/portfolio/tenants/index.tsx

src/pages/portfolio/owners/index.tsx

src/features/data/useCollection.ts

src/styles/app.css (and any ecc-* class definitions)

Print a short read-only summary of:

where Tenants property/unit enrichment is done,

where Owners contact fields are mapped,

current date & money formatters,

CSS tokens that color the KPI cards/badges/chips.

Stop here and output the summary before writing.

PHASE 1 — Add a small auditor (dev-only)

Create src/dev/auditPortfolio.ts that exports a runPortfolioAudit() which:

Fetches all five endpoints with the existing useCollection fetcher (or fetch in dev).

For each page’s table columns, compute field coverage % (how many rows produce a non-null, non-empty display value).

For Tenants:

Verify latest-lease resolution (by end_date if present, else start_date), then compute property.name and unit.label.

Report % coverage for name, email, phone, property, unit, type, balance.

For Owners: report % coverage for company, email, phone.

Log first 3 shaped rows per entity (keys only).

Only run when location.search contains debug=1.

Wire it: in src/App.tsx, after app mounts, conditionally import('src/dev/auditPortfolio').then(m => m.runPortfolioAudit()) if ?debug=1.

Guardrail: auditor must not affect prod paths or throw if endpoints fail; catch and noop.

PHASE 2 — Data fixes (surgical)
2A) Tenants enrichment (property/unit + type logic)

In src/pages/portfolio/tenants/index.tsx:

Ensure ID normalization is used for all joins (normalizeId()).

Build maps:

const pById = new Map(props.data.map(p => [normalizeId(p.id), p]));
const uById = new Map(units.data.map(u => [normalizeId(u.id), u]));
const leasesByTenant = new Map<string, any[]>();
for (const l of leases.data) {
  const tid = normalizeId(l.primary_tenant_id ?? l.tenant_id);
  if (!tid) continue;
  const list = leasesByTenant.get(tid) ?? [];
  list.push(l);
  leasesByTenant.set(tid, list);
}


For each tenant t:

pick latestLease = max by end_date (fallback start_date).

derive:

const property = latestLease ? pById.get(normalizeId(latestLease.property_id)) : undefined;
const unit     = latestLease ? uById.get(normalizeId(latestLease.unit_id))     : undefined;
const propertyName = property?.display_name ?? property?.name ?? property?.address_line1 ?? "—";
const unitLabel    = unit?.unit_number ?? unit?.label ?? unit?.name ?? "—";


type: if in any lease → LEASE_TENANT; else PROSPECT_TENANT (keep existing secondary/household logic if present).

shape row fields so columns.tsx finds: property.name, unit.label, email, phone, type, balance.

2B) Owners contact fields (keep best-effort)

In src/pages/portfolio/owners/index.tsx enrichment (or columns.tsx mapper if central):

Keep current company fallback chain.

Expand email fallbacks: email | primary_email | contact_email | owner_email | (emails[0].address) | (contacts[0].email) | null.

Expand phone fallbacks: phone | phone_number | phoneNumber | primary_phone | mobile | (phones[0].number) | (contacts[0].phone) | null.

2C) Dates format (global)

In src/utils/format.ts:

Replace/extend date helper with explicit US short month:

export function shortDate(v?: string | number | Date | null): string {
  if (!v) return "—";
  const d = new Date(v);
  if (isNaN(d.getTime())) return "—";
  return d.toLocaleDateString("en-US", { month: "short", day: "numeric", year: "numeric" }); // e.g., "Sep 4, 2025"
}


Add an overloaded money helper that supports KPIs with cents but keeps 0 decimals in tables by default:

export function money(n?: number | null, opts?: { decimals?: 0 | 2 }): string {
  if (n == null || Number.isNaN(n)) return "—";
  const decimals = opts?.decimals ?? 0;
  return Number(n).toLocaleString(undefined, { style: "currency", currency: "USD", minimumFractionDigits: decimals, maximumFractionDigits: decimals });
}


Update KPI call sites where monthly revenue is computed to use money(total, { decimals: 2 }).
Do not change table column renderers—leave as money(n) (0 decimals).

2D) Leases column renderers

In src/pages/portfolio/columns.tsx:

Ensure START and END columns call shortDate(value) (and not raw string).

Ensure RENT uses money(value) (0 decimals in table).

Keep StatusTag as is.

PHASE 3 — UI polish (light-grey, no “brown tint”)

Edit src/styles/app.css (or the file where .ecc-* classes live). Only touch the classes listed below.

Tokens (add if missing):

:root {
  --altus-black: #0b0e12;
  --altus-panel: #1a1d21;            /* existing panels */
  --altus-grey-600: #2a2d31;         /* APPROVED LIGHT GREY for chips/cards */
  --altus-grey-700: #2f353d;         /* alt zebra / chip hover */
  --altus-gold: #d6b36a;             /* keep for accents and progress */
  --altus-text: #d7dae0;
  --altus-muted: #a0a0a0;
}


KPI / Card base (remove brown tint, use light grey):

.ecc-kpi,
.ecc-card {
  background: var(--altus-grey-600);
  border: 1px solid rgba(255,255,255,0.06);
}


Badges/Chips (neutral → light grey, keep semantic colors):

.ecc-badge { background: var(--altus-grey-600); color: var(--altus-text); }
.ecc-badge--good { background: #1f6f4a; }   /* green for positive */
.ecc-badge--warn { background: var(--altus-gold); color: #111; } /* keep gold for ATTENTION states */
.ecc-badge--bad  { background: #80343a; }   /* red for negative */
.ecc-badge:hover { background: var(--altus-grey-700); }


Progress bar (keep gold fill, darker neutral track):

.ecc-progress { background: #21262c; }
.ecc-progress__fill { background: var(--altus-gold); }


Zebra rows / hover (slightly lighter rows for contrast):

.ecc-row:nth-child(even) { background: #171b20; }
.ecc-row:hover { background: #1e232a; }


Guardrail: do not modify font stacks, spacing, letter-spacing, or header case.

PHASE 4 — Wire dates + verify coverage

Confirm all date renderers (Leases at minimum) now call shortDate.

Build, then run audit mode: open /portfolio/tenants?debug=1 and /portfolio/owners?debug=1.
Auditor must print coverage like:

Tenants coverage: name 100% | email 62% | phone 0% | property 96% | unit 94% | type 100% | balance 100%
Owners coverage: company 100% | email 0% | phone 0%


Paste auditor’s console summary in the output.

PHASE 5 — Output & Diff

Output a concise summary of exactly what you changed (files + line ranges).

Show a short diff of each file you edited (only the touched hunks).

Confirm:

Tenants now show property/unit and correct type chips.

Owners show company (bold) with graceful — for missing contact fields.

All dates render as Mon D, YYYY.

KPI/Badges/Cards have light-grey backgrounds (no brown tint).

Build is green.

Do not touch navigation, routes, column order, or DataTable APIs.
If any API truly lacks contact fields, keep —; do not fake data.

Notes / Context (for you to remember)

ID normalization is mandatory across joins.

Monthly revenue KPI should use cents/100 with 2 decimals; table rents stay at 0 decimals.

Keep Altus Gold for accents like progress fills and “ACTIVE/ATTENTION” states; otherwise use the approved light grey backgrounds.

Copy ends.