Replit Build Prompt — Kill White Screen + Guarantee Visible Errors + Land on Real Pages
0) Verify the root container exists (must be exact)

Open index.html. Ensure the body has this exact root and add the tiny boot sentinel + global error sink above your main module:

<body>
  <div id="root"></div>

  <!-- Boot sentinel: if React never mounts, you'll at least see this -->
  <script>
    (function () {
      var r = document.getElementById('root');
      if (r) r.innerHTML = '<div style="padding:16px;font:14px system-ui;color:#bbb">Booting ECC…</div>';
    })();
  </script>

  <!-- Global error sink: converts any pre-mount runtime error into a visible card -->
  <script>
    (function () {
      function show(msg) {
        var r = document.getElementById('root');
        if (!r) return;
        r.innerHTML =
          '<div style="padding:24px;margin:24px;border-radius:16px;border:1px solid #7f1d1d;background:#450a0a;color:#fecaca;font:14px system-ui">' +
          '<div style="font-weight:600;font-size:16px;margin-bottom:8px">ECC boot error</div>' +
          '<div style="white-space:pre-wrap;color:#fecaca">' + msg + '</div>' +
          '<div style="margin-top:12px;color:#ddd"><a href="/portfolio/properties" style="color:#93c5fd">Go to Properties</a></div>' +
          '</div>';
      }
      window.addEventListener('error', function (e) { show(String(e.error && e.error.message || e.message || e)); });
      window.addEventListener('unhandledrejection', function (e) { show('Unhandled promise rejection: ' + String(e.reason)); });
    })();
  </script>

  <!-- keep your Vite main module below -->
  <script type="module" src="/src/main.tsx"></script>
</body>

1) Fix the ErrorBoundary export & import (named + default)

Open src/components/EccErrorBoundary.tsx and replace contents:

import React from "react";

type State = { hasError: boolean; msg?: string };

class EccErrorBoundary extends React.Component<React.PropsWithChildren, State> {
  state: State = { hasError: false };

  static getDerivedStateFromError(err: any) {
    return { hasError: true, msg: String(err?.message || err) };
  }

  componentDidCatch(error: any, info: any) {
    // eslint-disable-next-line no-console
    console.error("[EccErrorBoundary]", error, info);
    (window as any).__ECC_LAST_ERROR__ = { error, info };
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="p-8">
          <div className="rounded-2xl border border-red-600/40 bg-red-950/20 p-6">
            <h1 className="text-xl font-semibold text-red-300 mb-2">Something went wrong</h1>
            <p className="text-red-200/80 text-sm mb-4">
              {this.state.msg || "An unexpected error occurred while rendering this page."}
            </p>
            <div className="text-sm text-neutral-400">
              Try: <a className="underline" href="/portfolio/properties">/portfolio/properties</a>
            </div>
          </div>
        </div>
      );
    }
    return this.props.children;
  }
}

export default EccErrorBoundary;
export { EccErrorBoundary };


Open src/main.tsx and switch to default import:

- import { EccErrorBoundary } from "./components/EccErrorBoundary";
+ import EccErrorBoundary from "./components/EccErrorBoundary";


Also ensure these imports exist at top:

import React from "react";
import ReactDOM from "react-dom/client";
import "./index.css"; // keep your global styles


And render exactly like this (no custom wrappers removed):

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <EccErrorBoundary>
      {/* your existing Providers / Router / App stay here unchanged */}
    </EccErrorBoundary>
  </React.StrictMode>
);

2) Route safety: always land on a real page + show NotFound

Open src/App.tsx (or wherever top-level routes live) and add these safe routes (non-destructive):

import { Route, useLocation } from "wouter";
import React, { useEffect } from "react";

function HomeRedirect() {
  const [, setLocation] = useLocation();
  useEffect(() => { setLocation("/portfolio/properties"); }, [setLocation]);
  return null;
}

function NotFound() {
  return (
    <div className="p-8 text-center">
      <h1 className="text-2xl font-semibold mb-2">Route not found</h1>
      <div className="flex gap-3 justify-center text-sm">
        <a className="px-3 py-2 rounded-xl border border-neutral-700" href="/portfolio/properties">Properties</a>
        <a className="px-3 py-2 rounded-xl border border-neutral-700" href="/portfolio/units">Units</a>
        <a className="px-3 py-2 rounded-xl border border-neutral-700" href="/portfolio/leases">Leases</a>
      </div>
    </div>
  );
}

export default function App() {
  return (
    <>
      <Route path="/"><HomeRedirect /></Route>
      {/* keep all existing specific routes here */}
      <Route><NotFound /></Route>
    </>
  );
}

3) Dual-export all CardKit primitives (prevents import-style mismatches)

Make sure each of these files exports default and named:

src/components/cardkit/CardPanel.tsx

src/components/cardkit/FieldGroup.tsx

src/components/cardkit/RightRailPanel.tsx

src/components/cardkit/Skeleton.tsx

src/components/cardkit/PrefetchLink.tsx

Pattern for each (example: CardPanel):

const CardPanel = ({ title, children, actions }: { title?: string; actions?: React.ReactNode; children?: React.ReactNode; }) => (
  <section className="rounded-2xl border border-neutral-800 bg-neutral-900 p-4">
    {title && (
      <div className="mb-3 flex items-center justify-between">
        <h2 className="text-sm font-semibold text-neutral-200">{title}</h2>
        <div>{actions}</div>
      </div>
    )}
    <div>{children}</div>
  </section>
);

export default CardPanel;
export { CardPanel };


Do the same structure for the other four.

4) Remove any stray HTML entries that confuse Vite

If test.html exists at repo root, move it:
/test.html → /dev/test.html

5) Run & verify (what to open)

Click Run.

Open / → should redirect to /portfolio/properties.

Open browser console:

If any import/runtime error occurs before React mounts, the boot sentinel will print a red card with the exact message (no more blank).

If an in-app render error occurs, EccErrorBoundary shows it with a helpful link.

Navigate to /card/property/52 (or another known ID).

6) If there’s still a red card: capture the first line

If a red card appears, it means the guardrail is working: you’ll see the exact first error instead of a white page. Copy the first line (e.g., “Cannot read properties of undefined (reading 'kpis')”) and I’ll give you a one-file micro-patch.

Why this fixes the white screen

If React never mounts, you see the boot sentinel and any pre-mount error (window.onerror/unhandledrejection).

If React mounts and something inside crashes, the error boundary renders a visible card.

If routing doesn’t match, a NotFound page renders instead of nothing.

Import export mismatches (named vs default) are neutralized with dual exports.

This keeps all contract behavior intact and gets you back to visible, enriched asset cards—or visible errors you can act on—never a blank screen.