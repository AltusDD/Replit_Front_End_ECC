set -e
git checkout -b fix/early-net-tap || git checkout fix/early-net-tap
mkdir -p src/dev public/__audit tools

############################################
# 1) EARLY NETWORK TAP — loads before React
############################################
cat > src/dev/tap.ts <<'TS'
declare global {
  interface Window { __ECC_NET_CALLS?: any[]; __ECC_TAP_INSTALLED?: boolean; }
}
(function install(){
  const url = new URL(location.href);
  if (url.searchParams.get('debug') !== '1') return;
  if (window.__ECC_TAP_INSTALLED) return;
  window.__ECC_TAP_INSTALLED = true;
  const calls:any[] = window.__ECC_NET_CALLS = [];

  // fetch tap
  const of = window.fetch;
  (window as any).fetch = async (...args:any[]) => {
    const t0 = performance.now();
    try {
      const res = await of(...args as any);
      calls.push({ kind:'fetch', url:String(args[0]), status:res.status, ms:Math.round(performance.now()-t0) });
      return res;
    } catch (e:any) {
      calls.push({ kind:'fetch', url:String(args[0]), error:String(e?.message||e), ms:Math.round(performance.now()-t0) });
      throw e;
    }
  };

  // xhr tap
  const oOpen = XMLHttpRequest.prototype.open, oSend = XMLHttpRequest.prototype.send;
  (XMLHttpRequest.prototype as any).open = function(method:string,url:string){ (this as any).__ecc={method,url,t:performance.now()}; return oOpen.apply(this, arguments as any); };
  (XMLHttpRequest.prototype as any).send = function(){ const x=this as any; const m=x.__ecc||{}; x.addEventListener('loadend',()=>{ calls.push({ kind:'xhr', url:m.url, status:x.status, ms:Math.round(performance.now()-m.t) }); }); return oSend.apply(this, arguments as any); };

  // dump to /__audit on unload (dev)
  window.addEventListener('beforeunload', ()=>{
    try{ navigator.sendBeacon('/__audit?name=net_calls', new Blob([JSON.stringify({ route:location.pathname+location.search, calls, ts:new Date().toISOString() })], {type:'application/json'})); }catch{}
  });
})();
TS

############################################
# 2) Make sure early tap is imported FIRST
############################################
if grep -q "import './dev/tap';" src/main.tsx; then
  echo "tap already imported in src/main.tsx"
else
  sed -i '1i import "./dev/tap";' src/main.tsx
fi

############################################
# 3) Update overlay to READ existing tap, not install late tap
############################################
applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/dev/UiInspector.tsx
@@
-import '../styles/dev-inspector.css';
+import '../styles/dev-inspector.css';
 
@@
-function tapNetwork(){
-  const calls:any[]=[];
-  const of=window.fetch;
-  (window as any).fetch=async (...args:any[])=>{
-    const t0=performance.now();
-    const res=await of(...args as any);
-    calls.push({url:String(args[0]), status:res.status, ms:Math.round(performance.now()-t0), kind:'fetch'});
-    return res;
-  };
-  const oOpen=XMLHttpRequest.prototype.open, oSend=XMLHttpRequest.prototype.send;
-  (XMLHttpRequest.prototype as any).open=function(method:string,url:string){(this as any).__ecc={method,url,t:performance.now()}; return oOpen.apply(this, arguments as any);};
-  (XMLHttpRequest.prototype as any).send=function(){const x=this as any; const m=x.__ecc||{}; x.addEventListener('loadend',()=>calls.push({url:m.url,status:x.status,ms:Math.round(performance.now()-m.t), kind:'xhr'})); return oSend.apply(this, arguments as any);};
-  return calls;
-}
+// Use the early tap if present, else fall back to an empty array
+function getCalls(){ return (window as any).__ECC_NET_CALLS || []; }
 
 export const UiInspector = {
   async mount(target:string){
-    const calls=tapNetwork();
+    const calls=getCalls();
*** End Patch
PATCH

############################################
# 4) Tiny debug beacon for the enhancer (optional)
############################################
applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/features/_enhancer/CardEnhancer.tsx
@@
   const outlookMailHref = email ? `mailto:${email}` : undefined;
   const m365 = !!integrations?.m365;
 
   return (
-    <ErrorBoundary>
+    <ErrorBoundary>
     <div className="p-6">
@@
-          {/* Mounted beacon (visible only when debug=1) */}
-          {new URLSearchParams(location.search).get('debug')==='1' ? (
-            <span className="text-[10px] text-neutral-400 ml-2">enhancer✓</span>
-          ) : null}
+          {/* Mounted beacon (visible only when debug=1) */}
+          {new URLSearchParams(location.search).get('debug')==='1' ? (
+            <span className="text-[10px] text-neutral-400 ml-2">enhancer✓</span>
+          ) : null}
         </div>
*** End Patch
PATCH

############################################
# 5) CLI verify helpers
############################################
cat > tools/ecc_cards_probe.sh <<'SH'
#!/usr/bin/env bash
set -e
mkdir -p public/__audit
echo "[ECC] Probing portfolio APIs…"
for ep in properties units leases tenants owners; do
  echo -n "/api/portfolio/$ep -> "
  code=$(curl -s -o "public/__audit/sample_$ep.json" -w "%{http_code}" "http://localhost:3000/api/portfolio/$ep")
  echo "$code (saved to public/__audit/sample_$ep.json)"
done
SH
chmod +x tools/ecc_cards_probe.sh

git add -A
git commit -m "chore(debug): early network tap (captures initial fetch), overlay reads tap, probes for /api/portfolio/*" || true
echo "✅ Patch applied. Restart the dev server, then run: bash tools/ecc_cards_probe.sh"
