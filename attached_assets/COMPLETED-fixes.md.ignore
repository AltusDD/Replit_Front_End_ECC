FINAL FIX PACK — Asset Cards UI Contract Hardening (Deterministic)

You will apply every change below exactly. Stop on first error, print raw output, fix, and continue. No drift.

PRECHECK — Servers up

Run:

(timeout 120 node scripts/dev-runner.mjs >/tmp/dev.log 2>&1 &); sleep 8
echo "=== VITE ==="; curl -s http://localhost:5173/__vite_ping
echo "=== API ===";  curl -s http://localhost:8787/api/health


If either fails, stop and print /tmp/dev.log.

PATCH 1 — Property Overview: stop crashing FieldGroup

Problem: Property/Overview.tsx passes items=[...] but FieldGroup expects single {label,value}.

Edit: src/pages/card/property/Overview.tsx

Replace any single <FieldGroup items=[...]/> usage with mapped instances:

// BEFORE (crashes)
// <FieldGroup items={[
//   { label: "Type", value: property.type },
//   { label: "Owner", value: owner?.display_name }
// ]} />

// AFTER (safe)
<FieldGroup label="Type"  value={property?.type ?? "—"} />
<FieldGroup label="Owner" value={owner?.display_name ?? "—"} />
<FieldGroup label="Address" value={[property?.address?.line1, property?.address?.city, property?.address?.state, property?.address?.zip].filter(Boolean).join(", ") || "—"} />


Stop & print the diff hunk for this file.

PATCH 2 — Property Hero: address fields optional

Edit: src/pages/card/property/HeroBlock.tsx

Remove any requireField(property.address.city|state|zip) calls.

Use safe fallbacks:

const addr = property?.address ?? {};
const line1 = addr.line1 ?? "";
const city  = addr.city  ?? "";
const state = addr.state ?? "";
const zip   = addr.zip   ?? "";
const addrLine = [line1, city && `${city}${state||zip ? "," : ""}`, state, zip].filter(Boolean).join(" ") || "—";


Render addrLine and keep KPIs showing even if partial address.

Stop & print the changed lines.

PATCH 3 — Unit Hero: do not require numeric fields

Edit: src/pages/card/unit/HeroBlock.tsx

Replace requireField(unit.beds/baths/sqft) with tolerant reads:

const beds  = unit?.beds ?? null;
const baths = unit?.baths ?? null;
const sqft  = unit?.sqft ?? null;

// KPIs
<KPI data-testid="kpi-bedbath" label="Bed/Bath" value={
  (beds ?? "—") + " / " + (baths ?? "—")
} />
<KPI data-testid="kpi-sqft" label="Sq Ft" value={sqft ?? "—"} />


Stop & print the changed lines.

PATCH 4 — Tenant Hero: accept leases array or single lease

Edit: src/pages/card/tenant/HeroBlock.tsx

Normalize input:

const rawLeases = (Array.isArray(data?.leases) ? data?.leases : (data?.lease ? [data.lease] : [])) ?? [];
const active = rawLeases.find(l => (l?.status ?? "").toUpperCase() === "ACTIVE") ?? null;


Use rawLeases.length and active for KPIs. No requireArray.

Stop & print the changed lines.

PATCH 5 — Owner Hero: zero-safe KPIs and null avg rent

Edit: src/pages/card/owner/HeroBlock.tsx

Do not throw on empty properties. Use zeroes.

avgRentCents may be null → display "—":

const props = data?.properties ?? [];
const units = Number(data?.kpis?.units ?? 0);
const activeLeases = Number(data?.kpis?.activeLeases ?? 0);
const occ = units > 0 ? Math.round((activeLeases / units) * 100) : 0;
const avgRentCents = data?.kpis?.avgRentCents ?? null;

<KPI data-testid="kpi-avg-rent" label="Avg Rent" value={avgRentCents == null ? "—" : money(avgRentCents/100)} />


Stop & print the changed lines.

PATCH 6 — Unit Overview props shape

Problem: index.tsx passes data but Overview expects { unit, property }.

Edit: src/pages/card/unit/index.tsx

Find: <Overview data={data} />

Replace: <Overview unit={unit} property={property} />

Stop & print the changed line.

PATCH 7 — Tenant Overview props shape

Problem: index.tsx passes data but Overview expects { tenant, activeLease }.

Edit: src/pages/card/tenant/index.tsx

Find: <Overview data={data} />

Replace: <Overview tenant={tenant} activeLease={activeLease ?? null} />

Stop & print the changed line.

PATCH 8 — Lease dates tolerant (M2M)

Edit: src/pages/card/lease/HeroBlock.tsx

Never requireField start/end. Accept either start_date|start and end_date|end; allow missing:

const lease = data?.lease ?? {};
const start = lease.start_date ?? lease.start ?? null;
const end   = lease.end_date   ?? lease.end   ?? null;

<KPI data-testid="kpi-term" label="Term" value={
  (start ? shortDate(start) : "—") + " → " + (end ? shortDate(end) : "—")
} />


Stop & print the changed lines.

PATCH 9 — Lazy tab files must exist with default exports

Verify/Create defaults for each card’s lazy tabs:

src/pages/card/property/Legal.tsx
src/pages/card/property/Files.tsx
src/pages/card/unit/Legal.tsx
src/pages/card/unit/Files.tsx
src/pages/card/lease/Legal.tsx
src/pages/card/lease/Files.tsx
src/pages/card/tenant/Legal.tsx
src/pages/card/tenant/Files.tsx
src/pages/card/owner/Legal.tsx
src/pages/card/owner/Files.tsx


Template (use for any missing):

export default function Files() {
  return <div data-testid="tab-files">No files</div>;
}

export default function Legal() {
  return <div data-testid="tab-legal">No legal items</div>;
}


Stop & print a list of created/verified files.

PATCH 10 — Zod: soften only the fragile fields

Edit: src/shared/card-contracts.ts (or wherever the card Zod schemas live)

Ensure the following are nullable/defaulted (do not change overall shapes):

property.address.{line1,city,state,zip} → .nullable().default('')

kpis.avgRentCents → .nullable().default(null)

lease.{start_date,end_date} → .nullable().default(null)

tenant.leases → .default([])

owner.properties → .default([])

Stop & print only changed lines.

VERIFICATION — Headless UI proofs (no red overlays)

Install Playwright (first time only):

npx playwright install --with-deps chromium


Create scripts/cards-ui-smoke.mjs:

import { chromium } from "playwright";

const routes = [
  "portfolio/properties",
  "card/property/1",
  "card/unit/1",
  "card/lease/1",
  "card/tenant/1",
  "card/owner/1",
];

const cardTestIds = {
  "card/property": ["kpi-units","kpi-active","kpi-occupancy","kpi-avgrent"],
  "card/unit":     ["kpi-bedbath","kpi-sqft"],
  "card/lease":    ["kpi-lease-status","kpi-term","kpi-rent"],
  "card/tenant":   ["kpi-active-leases"],
  "card/owner":    ["kpi-portfolio-units","kpi-active-leases","kpi-occupancy","kpi-avg-rent"],
};

function expectedFor(path) {
  for (const k of Object.keys(cardTestIds)) if (path.startsWith(k)) return cardTestIds[k];
  return [];
}

(async () => {
  const browser = await chromium.launch();
  const page = await browser.newPage();

  for (const r of routes) {
    const url = `http://localhost:5173/${r}`;
    await page.goto(url, { waitUntil: "networkidle", timeout: 20000 });
    console.log("ROUTE_OK", url);

    const exp = expectedFor(r);
    for (const testid of exp) {
      await page.waitForSelector(`[data-testid="${testid}"]`, { timeout: 8000 });
      console.log("KPI_OK", r, testid);
    }
  }

  await browser.close();
  console.log("ALL_UI_OK");
})();


Run:

(timeout 180 node scripts/dev-runner.mjs >/tmp/dev.log 2>&1 &); sleep 12
node scripts/cards-ui-smoke.mjs


Expected output:

ROUTE_OK http://localhost:5173/portfolio/properties

ROUTE_OK http://localhost:5173/card/property/1 + KPI_OK … kpi-units …

Same for unit/lease/tenant/owner

Final line: ALL_UI_OK

If any step fails, stop, print error, and fix the corresponding patch above.

DONE criteria (must meet all):

No error boundary fallback on any of the 5 cards.

KPIs present (by test IDs) on every card.

Property Overview renders with individual FieldGroup components.

No throws due to missing address/zero properties/null avg rent/missing dates.

Lazy tabs load (default export present).

Execute now.