ECC Replit Fix Plan (Audit → Repair → Verify)

Do this now: copy-paste the shell block into the Replit Shell. It’s safe to re-run (idempotent).

set -e

# ─────────────────────────────────────────────────────────────
# 0) Branch + tools folder
# ─────────────────────────────────────────────────────────────
git checkout -b fix/replit-audit-repair || git checkout fix/replit-audit-repair
mkdir -p tools

# ─────────────────────────────────────────────────────────────
# 1) AUDIT — what’s mounted, what’s missing, what’s stale?
#    (builds on our playbook; prints everything we need)
# ─────────────────────────────────────────────────────────────
cat > tools/replit_audit.sh <<'EOF'
#!/usr/bin/env bash
set -euo pipefail

echo "=== [ECC AUDIT] Replit Agent + UI Mounts ==="

# Package manager & processes
if [ -f package-lock.json ]; then PM="npm"
elif [ -f yarn.lock ]; then PM="yarn"
elif [ -f pnpm-lock.yaml ]; then PM="pnpm"
else PM="npm"; fi
echo "PM: $PM"
echo "Node: $(node -v || true)"
echo "Dev PIDs:"
ps -ef | egrep "node|vite|webpack" | egrep -v "grep" || true
echo

# Entry HTML & boot script
HTML=""
[ -f public/index.html ] && HTML="public/index.html"
[ -z "$HTML" ] && [ -f index.html ] && HTML="index.html"
echo "Entry HTML: ${HTML:-'(none found)'}"
if [ -n "$HTML" ]; then
  if grep -q 'src="/src/boot/mountEnhancer.tsx"' "$HTML"; then
    echo "✅ Boot <script type=module> injected"
  else
    echo "❌ Boot script not injected"
  fi
else
  echo "❌ No entry HTML found"
fi

# TS entry import
for f in src/main.tsx src/index.tsx src/main.jsx src/index.jsx; do
  [ -f "$f" ] || continue
  if grep -q "boot/mountEnhancer" "$f"; then
    echo "✅ Enhancer imported in $f"
  else
    echo "❌ Enhancer NOT imported in $f"
  fi
done

# UI signature (watermark)
rg -n "ECC Enhancer Active" src || echo "ℹ️ Watermark signature not present (optional)"

# Routes quick check
echo
echo "Route probes:"
for ent in property unit lease tenant owner; do
  echo -n "/card/$ent/:id -> "
  curl -s -o /dev/null -w "%{http_code}\n" "http://localhost:3000/card/$ent/test"
done

# Integrations flags
echo
echo "/api/config/integrations"
curl -sS "http://localhost:3000/api/config/integrations" || echo "❌ endpoint not responding"

# Git hygiene
echo
echo "Git status:"
git status --short || true

echo "=== [ECC AUDIT] Complete ==="
EOF
chmod +x tools/replit_audit.sh

# ─────────────────────────────────────────────────────────────
# 2) REPAIR — force-mount enhancer, add fallback script,
#    toggleable watermark, and restart instructions
# ─────────────────────────────────────────────────────────────
cat > tools/replit_repair.sh <<'EOF'
#!/usr/bin/env bash
set -euo pipefail

echo "=== [ECC REPAIR] Mount + Boot Guarantees ==="

# 2.1 Ensure boot script injected into HTML
HTML=""
[ -f public/index.html ] && HTML="public/index.html"
[ -z "$HTML" ] && [ -f index.html ] && HTML="index.html"
if [ -n "$HTML" ]; then
  if ! grep -q 'src="/src/boot/mountEnhancer.tsx"' "$HTML"; then
    # Insert before </body>
    sed -i 's#</body>#  <script type="module" src="/src/boot/mountEnhancer.tsx"></script>\n</body>#' "$HTML"
    echo "🛠 Injected boot script into $HTML"
  else
    echo "✅ Boot script already present in $HTML"
  fi
else
  echo "❌ No entry HTML file to inject into"
fi

# 2.2 Ensure TS entry imports the mount (extra safety)
added_import=0
for f in src/main.tsx src/index.tsx src/main.jsx src/index.jsx; do
  [ -f "$f" ] || continue
  if ! grep -q "boot/mountEnhancer" "$f"; then
    sed -i '1i import "./boot/mountEnhancer";' "$f"
    echo "🛠 Added import to $f"
    added_import=1
  else
    echo "✅ Import already present in $f"
  fi
done
[ "$added_import" = "0" ] && echo "ℹ️ No TS entry file needed changes"

# 2.3 Add debug watermark (toggle with localStorage.ECC_DEBUG=1)
cat > src/boot/mountEnhancer.tsx <<'TSX'
import React from "react";
import { createRoot } from "react-dom/client";
import CardEnhancer from "../features/_enhancer/CardEnhancer";

(function mount(){
  const id = "ecc-card-enhancer-root";
  let host = document.getElementById(id);
  if (!host) {
    host = document.createElement("div");
    host.id = id;
    document.body.appendChild(host);
  }
  const root = createRoot(host);
  root.render(
    <>
      <CardEnhancer />
      {typeof localStorage!=="undefined" && localStorage.getItem("ECC_DEBUG")==="1" ? (
        <div style={{position:"fixed", right:10, bottom:10, zIndex:2147483647}}
             className="text-[10px] text-neutral-400 bg-neutral-900/85 border border-neutral-800 rounded px-2 py-1">
          ECC Enhancer Active
        </div>
      ) : null}
    </>
  );
})();
TSX
echo "✅ mountEnhancer.tsx ensured (with watermark toggle)"

# 2.4 Commit changes
git add -A
git commit -m "fix(replit): force enhancer mount + boot script + watermark toggle" || echo "Nothing to commit"

echo "=== [ECC REPAIR] Done. Restart the dev server. ==="
EOF
chmod +x tools/replit_repair.sh

# ─────────────────────────────────────────────────────────────
# 3) VERIFY — run audit, repair, audit again
# ─────────────────────────────────────────────────────────────
bash tools/replit_audit.sh || true
bash tools/replit_repair.sh
bash tools/replit_audit.sh || true

echo
echo "NEXT STEPS:"
echo "1) Restart the dev server in Replit."
echo "2) In browser console: localStorage.ECC_DEBUG='1'; location.reload();"
echo "3) Visit /card/property/ANY, /card/unit/ANY, /card/lease/ANY, /card/tenant/ANY:"
echo "   - You should see the 'ECC Enhancer Active' watermark"
echo "   - You should see our injected Files + Activity sections"
echo "4) Open /api/config/integrations and confirm flags."

What this does (and why it fixes your pain)

Audits the session so we stop flying blind (entry HTML, enhancer imports, routes, flags, git, processes).

Repairs the #1 and #2 root causes of “UI didn’t change”:

Forces the boot script into index.html (or public/index.html)

Forces the enhancer import into src/main.*

Adds a toggleable watermark so you can instantly tell the enhancer is running

Verifies everything again so Replit must show you proof before claiming the work is “done.”

Operator checklist (your side)

After the script runs, ask Replit to restart the dev server.

In your browser dev tools, run:

localStorage.ECC_DEBUG = "1"; location.reload()


You should see a tiny “ECC Enhancer Active” tag in the bottom-right.

Visit each card route (/card/property/:id, /card/unit/:id, /card/lease/:id, /card/tenant/:id, /card/owner/:id). You should now see the Files and Activity sections (and on Owner/Tenant: Teams/Planner actions when secrets are set).

Open /api/config/integrations. If buttons look disabled, this endpoint will show which secrets are missing (that’s expected gating).

If anything’s still invisible, paste the audit output back to me and I’ll ship a targeted patch.

Keep this in the repo

tools/replit_audit.sh — run before/after any Replit change.

tools/replit_repair.sh — guarantees the UI enhancer mounts in every session.

Reuse this “Audit → Repair → Verify” loop on every UI prompt. It eliminates the “applied but not visible” failure mode and gets us to Genesis-level reliability.