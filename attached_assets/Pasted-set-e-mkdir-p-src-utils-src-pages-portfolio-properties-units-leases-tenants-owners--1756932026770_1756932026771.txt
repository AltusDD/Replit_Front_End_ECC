set -e
mkdir -p src/utils src/pages/portfolio/{properties,units,leases,tenants,owners}

########################################
# 0) tiny helpers
########################################
cat > src/utils/dict.ts <<'TS'
export function indexBy<T extends Record<string, any>>(rows: T[], key: keyof T) {
  const m = new Map<any, T>();
  for (const r of rows || []) m.set(r?.[key], r);
  return m;
}
export function groupBy<T extends Record<string, any>>(rows: T[], key: keyof T) {
  const m = new Map<any, T[]>();
  for (const r of rows || []) {
    const k = r?.[key];
    if (!m.has(k)) m.set(k, []);
    m.get(k)!.push(r);
  }
  return m;
}
export const money = (v: any) =>
  typeof v === "number"
    ? v.toLocaleString(undefined, { style: "currency", currency: "USD" })
    : v == null ? "" : String(v);
TS

########################################
# 1) shared columns (keep maps as identity; pages will enrich)
########################################
cat > src/pages/portfolio/columns.ts <<'TS'
export const PROPERTY_COLUMNS = [
  { key: "name",        header: "Property" },
  { key: "type",        header: "Type" },
  { key: "class",       header: "Class" },
  { key: "state",       header: "State" },
  { key: "city",        header: "City" },
  { key: "unit_count",  header: "Units" },
  { key: "occupancy",   header: "Occ%" },
  { key: "active",      header: "Active" },
];

export const UNIT_COLUMNS = [
  { key: "property",    header: "Property" },
  { key: "unit_number", header: "Unit" },
  { key: "beds",        header: "Bd" },
  { key: "baths",       header: "Ba" },
  { key: "sq_ft",       header: "SqFt" },
  { key: "status",      header: "Status" },
  { key: "market_rent", header: "Market Rent" },
];

export const LEASE_COLUMNS = [
  { key: "tenant_names", header: "Tenant(s)" },
  { key: "property",     header: "Property" },
  { key: "rent",         header: "Rent" },
  { key: "start",        header: "Start" },
  { key: "end",          header: "End" },
  { key: "status",       header: "Status" },
];

export const TENANT_COLUMNS = [
  { key: "name",     header: "Name" },
  { key: "property", header: "Property" },
  { key: "unit",     header: "Unit" },
  { key: "email",    header: "Email" },
  { key: "phone",    header: "Phone" },
  { key: "status",   header: "Status" },
  { key: "balance",  header: "Balance" },
];

export const OWNER_COLUMNS = [
  { key: "name",           header: "Owner" },
  { key: "email",          header: "Email" },
  { key: "phone",          header: "Phone" },
  { key: "property_count", header: "Props" },
  { key: "active",         header: "Active" },
];

// keep signatures the pages expect
export const mapProperty = (r: any) => r;
export const mapUnit      = (r: any) => r;
export const mapLease     = (r: any) => r;
export const mapTenant    = (r: any) => r;
export const mapOwner     = (r: any) => r;
TS

########################################
# 2) PROPERTIES page — enrich from units/leases
########################################
cat > src/pages/portfolio/properties/index.tsx <<'TSX'
import React, { useMemo } from "react";
import { SimpleTable } from "@/components/Table";
import { PROPERTY_COLUMNS, mapProperty } from "../columns";
import { useCollection } from "@/features/data/useCollection";
import { groupBy } from "@/utils/dict";

export default function PropertiesPage() {
  const props = useCollection<any>("properties");
  const units = useCollection<any>("units");
  const leases = useCollection<any>("leases");

  const rows = useMemo(() => {
    const byPropUnits = groupBy(units.data, "property_id");
    const activeByUnit = new Set(
      leases.data.filter(l => String(l?.status || "").toLowerCase() === "active").map(l => l.unit_id)
    );
    return (props.data || []).map((p: any) => {
      const u = byPropUnits.get(p.id) || [];
      const unit_count = p.unit_count ?? u.length ?? 0;
      const occUnitsStatus = u.filter((x:any) => String(x?.status||"").toLowerCase() === "occupied").length;
      const occUnitsLease = u.filter((x:any)=> activeByUnit.has(x.id)).length;
      const occUnits = Math.max(occUnitsStatus, occUnitsLease);
      const occPct = p.occupancy ?? p.occupancy_rate ?? (unit_count ? (occUnits / unit_count) * 100 : null);
      return {
        id: p.id ?? p.doorloop_id,
        doorloop_id: p.doorloop_id,
        name: p.name ?? "",
        type: p.type ?? p.category ?? "",
        class: p.class ?? p.asset_class ?? p.property_class ?? "",
        active: p.active ?? p.isActive ?? false,
        city: p.address_city ?? p.city ?? "",
        state: p.address_state ?? p.state ?? "",
        unit_count,
        occupancy: occPct == null ? "" : `${occPct.toFixed(1)}%`,
      };
    });
  }, [props.data, units.data, leases.data]);

  return (
    <>
      <h1>Properties</h1>
      {props.error && <div style={{ color: "tomato" }}>{String(props.error)}</div>}
      <SimpleTable
        columns={PROPERTY_COLUMNS}
        rows={rows.map(mapProperty)}
        empty={props.loading ? "Loading…" : "No properties"}
      />
    </>
  );
}
TSX

########################################
# 3) UNITS page — join property names
########################################
cat > src/pages/portfolio/units/index.tsx <<'TSX'
import React, { useMemo } from "react";
import { SimpleTable } from "@/components/Table";
import { UNIT_COLUMNS, mapUnit } from "../columns";
import { useCollection } from "@/features/data/useCollection";
import { indexBy } from "@/utils/dict";
import { money } from "@/utils/dict";

export default function UnitsPage() {
  const units = useCollection<any>("units");
  const props = useCollection<any>("properties");

  const rows = useMemo(() => {
    const pById = indexBy(props.data, "id");
    return (units.data || []).map((u: any) => ({
      id: u.id ?? u.doorloop_id,
      doorloop_id: u.doorloop_id,
      property: u.property ?? u.property_name ?? pById.get(u.property_id)?.name ?? "",
      unit_number: u.unit_number ?? u.number ?? u.name ?? "",
      beds: u.beds ?? u.bedrooms ?? "",
      baths: u.baths ?? u.bathrooms ?? "",
      sq_ft: u.sq_ft ?? u.sqft ?? "",
      status: u.status ?? (u.id && u.property_id ? "" : ""),
      market_rent: money(u.market_rent ?? u.rent ?? u.rent_amount ?? (typeof u.rent_cents === "number" ? u.rent_cents/100 : undefined)),
    }));
  }, [units.data, props.data]);

  return (
    <>
      <h1>Units</h1>
      {units.error && <div style={{ color: "tomato" }}>{String(units.error)}</div>}
      <SimpleTable
        columns={UNIT_COLUMNS}
        rows={rows.map(mapUnit)}
        empty={units.loading ? "Loading…" : "No units"}
      />
    </>
  );
}
TSX

########################################
# 4) LEASES page — build tenant names + property
########################################
cat > src/pages/portfolio/leases/index.tsx <<'TSX'
import React, { useMemo } from "react";
import { SimpleTable } from "@/components/Table";
import { LEASE_COLUMNS, mapLease } from "../columns";
import { useCollection } from "@/features/data/useCollection";
import { indexBy } from "@/utils/dict";
import { money } from "@/utils/dict";

export default function LeasesPage() {
  const leases = useCollection<any>("leases");
  const tenants = useCollection<any>("tenants");
  const props = useCollection<any>("properties");

  const rows = useMemo(() => {
    const tById = indexBy(tenants.data, "id");
    const pById = indexBy(props.data, "id");
    return (leases.data || []).map((l: any) => {
      const names =
        l.tenant_names ||
        tById.get(l.primary_tenant_id)?.display_name ||
        tById.get(l.tenant_id)?.display_name ||
        tById.get(l.primary_tenant_id)?.full_name ||
        tById.get(l.tenant_id)?.full_name || "";
      return {
        id: l.id ?? l.doorloop_id,
        doorloop_id: l.doorloop_id,
        tenant_names: names,
        property: l.property ?? pById.get(l.property_id)?.name ?? "",
        rent: money(
          l.rent ?? l.total_recurring_rent ?? (typeof l.rent_cents === "number" ? l.rent_cents / 100 : undefined)
        ),
        start: (l.start ?? l.start_date ?? "").toString().slice(0,10),
        end:   (l.end ?? l.end_date ?? "").toString().slice(0,10),
        status: l.status ?? "",
      };
    });
  }, [leases.data, tenants.data, props.data]);

  return (
    <>
      <h1>Leases</h1>
      {leases.error && <div style={{ color: "tomato" }}>{String(leases.error)}</div>}
      <SimpleTable
        columns={LEASE_COLUMNS}
        rows={rows.map(mapLease)}
        empty={leases.loading ? "Loading…" : "No leases"}
      />
    </>
  );
}
TSX

########################################
# 5) TENANTS page — latest lease → property/unit
########################################
cat > src/pages/portfolio/tenants/index.tsx <<'TSX'
import React, { useMemo } from "react";
import { SimpleTable } from "@/components/Table";
import { TENANT_COLUMNS, mapTenant } from "../columns";
import { useCollection } from "@/features/data/useCollection";
import { indexBy } from "@/utils/dict";
import { money } from "@/utils/dict";

export default function TenantsPage() {
  const tenants = useCollection<any>("tenants");
  const leases = useCollection<any>("leases");
  const units = useCollection<any>("units");
  const props = useCollection<any>("properties");

  const rows = useMemo(() => {
    const uById = indexBy(units.data, "id");
    const pById = indexBy(props.data, "id");

    // Build latest lease per-tenant by updated_at/start_date
    const latest = new Map<any, any>();
    for (const l of leases.data || []) {
      const tids = [l.primary_tenant_id, l.tenant_id].filter(Boolean);
      for (const tid of tids) {
        const cur = latest.get(tid);
        const score = Date.parse(l.updated_at || l.start_date || "") || 0;
        const curScore = cur ? (Date.parse(cur.updated_at || cur.start_date || "") || 0) : -1;
        if (!cur || score >= curScore) latest.set(tid, l);
      }
    }

    return (tenants.data || []).map((t: any) => {
      const l = latest.get(t.id);
      const u = l ? uById.get(l.unit_id) : undefined;
      const p = u ? pById.get(u.property_id) : (l ? pById.get(l.property_id) : undefined);
      const name =
        t.name || t.display_name || t.full_name || [t.first_name, t.last_name].filter(Boolean).join(" ");
      return {
        id: t.id ?? t.doorloop_id,
        doorloop_id: t.doorloop_id,
        name,
        property: p?.name ?? "",
        unit: u?.unit_number ?? u?.number ?? u?.name ?? "",
        email: t.primary_email ?? t.email ?? "",
        phone: t.primary_phone ?? t.phone ?? "",
        status: l?.status ?? t.status ?? t.type ?? "",
        balance: money(t.balance),
      };
    });
  }, [tenants.data, leases.data, units.data, props.data]);

  return (
    <>
      <h1>Tenants</h1>
      {tenants.error && <div style={{ color: "tomato" }}>{String(tenants.error)}</div>}
      <SimpleTable
        columns={TENANT_COLUMNS}
        rows={rows.map(mapTenant)}
        empty={tenants.loading ? "Loading…" : "No tenants"}
      />
    </>
  );
}
TSX

########################################
# 6) OWNERS page — best-effort fill
########################################
cat > src/pages/portfolio/owners/index.tsx <<'TSX'
import React, { useMemo } from "react";
import { SimpleTable } from "@/components/Table";
import { OWNER_COLUMNS, mapOwner } from "../columns";
import { useCollection } from "@/features/data/useCollection";

export default function OwnersPage() {
  const owners = useCollection<any>("owners");

  const rows = useMemo(() => {
    return (owners.data || []).map((o:any) => ({
      id: o.id ?? o.doorloop_id,
      doorloop_id: o.doorloop_id,
      name: o.name ?? o.display_name ?? o.full_name ?? [o.first_name, o.last_name].filter(Boolean).join(" "),
      email: o.primary_email ?? o.email ?? "",
      phone: o.primary_phone ?? o.phone ?? "",
      property_count: o.property_count ?? 0,
      active: o.active ?? o.isActive ?? false,
    }));
  }, [owners.data]);

  return (
    <>
      <h1>Owners</h1>
      {owners.error && <div style={{ color: "tomato" }}>{String(owners.error)}</div>}
      <SimpleTable
        columns={OWNER_COLUMNS}
        rows={rows.map(mapOwner)}
        empty={owners.loading ? "Loading…" : "No owners"}
      />
    </>
  );
}
TSX

echo "✓ Client-side enrichment installed. Reload the app and check all five pages."
