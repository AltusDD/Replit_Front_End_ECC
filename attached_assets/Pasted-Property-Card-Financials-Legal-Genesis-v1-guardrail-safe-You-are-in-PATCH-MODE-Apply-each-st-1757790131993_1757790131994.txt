Property Card: Financials + Legal (Genesis v1, guardrail-safe)

You are in PATCH MODE. Apply each step exactly. Show diffs and the verification outputs at the end.

1) Add reusable Financials components (no new libs)

Create: src/components/ledger/LedgerTable.tsx

import React from "react";
import { moneyCents } from "../../lib/format";

export type LedgerEntry = {
  id: string | number;
  ts: string;                 // ISO datetime
  type: "charge" | "payment" | "credit" | "adjustment";
  memo?: string | null;
  amount_cents: number;       // positive numbers; sign handled by type
  balance_cents?: number | null; // optional running balance if provided by API
};

export default function LedgerTable({
  entries,
  isLoading,
  emptyText = "No transactions found."
}: {
  entries: LedgerEntry[];
  isLoading?: boolean;
  emptyText?: string;
}) {
  if (isLoading) {
    return (
      <div className="ecc-object" style={{ padding: 12 }}>
        <div style={{ opacity: .8 }}>Loading transactions…</div>
      </div>
    );
  }
  if (!entries?.length) {
    return (
      <div className="ecc-object" style={{ padding: 12 }}>
        <div style={{ opacity: .8 }}>{emptyText}</div>
      </div>
    );
  }
  return (
    <div className="ecc-object" style={{ padding: 0 }}>
      <div style={{ display: "grid", gridTemplateColumns: "160px 140px 1fr 140px 140px", gap: 0, fontWeight: 700, padding: "10px 12px", borderBottom: "1px solid var(--ecc-object-border)" }}>
        <div>Date/Time</div><div>Type</div><div>Memo</div><div>Amount</div><div>Balance</div>
      </div>
      <div style={{ maxHeight: 360, overflow: "auto" }}>
        {entries.map((e) => {
          const sign = e.type === "payment" || e.type === "credit" ? -1 : 1;
          const amount = moneyCents(sign * Math.abs(e.amount_cents));
          const ts = new Date(e.ts).toLocaleString();
          return (
            <div key={e.id} style={{ display: "grid", gridTemplateColumns: "160px 140px 1fr 140px 140px", padding: "8px 12px", borderBottom: "1px solid rgba(255,255,255,0.06)" }}>
              <div style={{ opacity: .9 }}>{ts}</div>
              <div style={{ textTransform: "none" }}>{e.type}</div>
              <div style={{ opacity: .9 }}>{e.memo ?? "—"}</div>
              <div style={{ fontWeight: 700 }}>{amount}</div>
              <div style={{ opacity: .9 }}>{e.balance_cents == null ? "—" : moneyCents(e.balance_cents)}</div>
            </div>
          );
        })}
      </div>
    </div>
  );
}


Create: src/components/financials/DelinquencySummary.tsx

import React, { useMemo } from "react";
import { moneyCents } from "../../lib/format";
import type { Lease, Tenant } from "../../lib/ecc-contract";

/** Read-only summary. Does NOT guess. If you lack balances, it renders placeholders. */
export default function DelinquencySummary({
  leases,
  tenants,
  balances
}: {
  leases: Lease[];
  tenants: Tenant[];
  balances?: Record<number, number> | null; // tenantId -> balance_cents (optional)
}) {
  const counts = useMemo(() => {
    if (!balances) return { delinquent: 0, current: tenants.length, totalDue: 0 };
    let delinquent = 0, totalDue = 0;
    for (const t of tenants) {
      const b = balances[t.id] ?? 0;
      if (b > 0) { delinquent++; totalDue += b; }
    }
    return { delinquent, current: tenants.length - delinquent, totalDue };
  }, [balances, tenants]);

  return (
    <div style={{ display: "grid", gridTemplateColumns: "repeat(3, minmax(0,1fr))", gap: 12 }}>
      <div className="ecc-object" style={{ padding: 12 }}>
        <div className="ecc-label">Tenants Current</div>
        <div style={{ fontSize: 20, fontWeight: 800 }}>{counts.current}</div>
      </div>
      <div className="ecc-object" style={{ padding: 12 }}>
        <div className="ecc-label">Tenants Delinquent</div>
        <div style={{ fontSize: 20, fontWeight: 800 }}>{counts.delinquent}</div>
      </div>
      <div className="ecc-object" style={{ padding: 12 }}>
        <div className="ecc-label">Total Past Due</div>
        <div style={{ fontSize: 20, fontWeight: 800 }}>
          {balances ? moneyCents(counts.totalDue) : "—"}
        </div>
      </div>
    </div>
  );
}


Notes:

This does not compute balances client-side. If/when the BFF provides a tenantId → balance_cents map, pass it to balances. Until then, the component shows “—” for dollars but still counts tenants.

2) Add reusable Legal components

Create: src/components/legal/LegalCasesList.tsx

import React from "react";

export type LegalCase = {
  id: string | number;
  case_number: string;
  kind: "eviction" | "damages" | "quiet_title" | "other";
  status: "open" | "pending" | "closed" | "unknown";
  opened_at?: string | null;
};

export default function LegalCasesList({ items }: { items: LegalCase[] }) {
  if (!items?.length) return <div style={{ opacity:.8 }}>No legal cases linked.</div>;
  return (
    <div style={{ display: "grid", gap: 10 }}>
      {items.map(c => (
        <div key={c.id} className="ecc-object" style={{ padding: 12 }}>
          <div style={{ display:"flex", justifyContent:"space-between", alignItems:"center", marginBottom:6 }}>
            <div style={{ fontWeight: 700 }}>{c.case_number}</div>
            <div className="ecc-label">{c.kind} • {c.status}</div>
          </div>
          <div className="ecc-label">{c.opened_at ? new Date(c.opened_at).toLocaleDateString() : "Opened: —"}</div>
        </div>
      ))}
    </div>
  );
}


Create: src/components/legal/AssessorBlock.tsx

import React from "react";

export default function AssessorBlock({
  apn, gisUrl
}: { apn?: string | null; gisUrl?: string | null }) {
  return (
    <div className="ecc-object" style={{ padding: 12 }}>
      <div className="ecc-label">Assessor Parcel (APN)</div>
      <div style={{ fontWeight: 700, marginBottom: 6 }}>{apn ?? "—"}</div>
      <div className="ecc-label">GIS / Assessor Link</div>
      {gisUrl ? <a href={gisUrl} target="_blank" rel="noreferrer">Open GIS</a> : <div style={{ opacity:.8 }}>—</div>}
    </div>
  );
}

3) Wire Financials + Legal into the Property page

Edit: src/pages/card/property/index.tsx

Imports — add:

import LedgerTable, { LedgerEntry } from "../../../components/ledger/LedgerTable";
import DelinquencySummary from "../../../components/financials/DelinquencySummary";
import LegalCasesList, { LegalCase } from "../../../components/legal/LegalCasesList";
import AssessorBlock from "../../../components/legal/AssessorBlock";


Stubs inside component (top, after existing consts):

// BFF-provided (future): map tenantId -> balance_cents
const tenantBalances: Record<number, number> | null = null;

// Placeholder ledger entries (empty until wired)
const ledgerEntries: LedgerEntry[] = [];

// Placeholder legal cases (empty until wired)
const legalCases: LegalCase[] = [];

// Placeholder assessor info; keep as null until wired to CoreLogic/BFF
const assessor = { apn: null as string | null, gisUrl: null as string | null };


Replace the "Financials" tab block with:

{tab==="financials" && (
  <Section title="Financials (Property)">
    <div style={{ display:"grid", gap:12 }}>
      <Section title="Delinquency Summary">
        <DelinquencySummary
          leases={leases}
          tenants={rel.data?.tenants ?? []}
          balances={tenantBalances}
        />
      </Section>

      <Section title="Transactions (12 mo)">
        <LedgerTable entries={ledgerEntries} isLoading={false} />
        <div style={{ display:"flex", gap:8, marginTop:8 }}>
          <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={()=>alert("Stub: Connect ledger via BFF")}>Connect Ledger</button>
          <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={()=>alert("Stub: Export CSV")}>Export CSV</button>
        </div>
      </Section>
    </div>
  </Section>
)}


Replace the "Legal" tab block with:

{tab==="legal" && (
  <Section title="Legal">
    <div style={{ display:"grid", gap:12 }}>
      <AssessorBlock apn={assessor.apn} gisUrl={assessor.gisUrl} />
      <Section title="Compliance">
        <div style={{ opacity:.8 }}>No compliance flags.</div>
      </Section>
      <Section title="Linked Cases">
        <LegalCasesList items={legalCases} />
        <div style={{ display:"flex", gap:8, marginTop:8 }}>
          <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={()=>alert("Stub: Link case")}>Link Case</button>
          <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={()=>alert("Stub: Open Legal Module")}>Open Legal</button>
        </div>
      </Section>
    </div>
  </Section>
)}


(Leave Overview/Relationships/Files/Marketing/Activity as they are from your last patch.)

4) Verify (guardrails + typecheck)

Run:

node scripts/guardrail-mega.mjs
node scripts/guardrail-overlays.mjs
npx tsc -p tsconfig.cards.json


Expected:

Mega guardrail: ✅

Overlay guardrail: ✅

Cards typecheck: ✅ 0 errors

Then open a real Property ID and confirm:

Financials tab shows Delinquency Summary (with “—” for dollars until balances are wired) and Transactions table (empty but visible) with stub buttons

Legal tab shows Assessor block and Linked Cases list (empty but visible) with stub buttons

No overlays, no blank screens, map only on Property

Paste the three command outputs and a quick “Property Financials & Legal visible” confirmation.

After this

With shells in place, the next step is a BFF contract for:

GET /api/bff/financials/property/:id/ledger → LedgerEntry[]

GET /api/bff/financials/property/:id/tenant-balances → { [tenantId:number]: number }

GET /api/bff/legal/property/:id/cases → LegalCase[]
(all read-only, logged to Activity; we’ll add the resolvers once the endpoints exist—no guessing).

When you send the verification, I’ll hand the BFF endpoint stubs + resolvers (read-only) so the tables fill automatically, still guardrail-safe.