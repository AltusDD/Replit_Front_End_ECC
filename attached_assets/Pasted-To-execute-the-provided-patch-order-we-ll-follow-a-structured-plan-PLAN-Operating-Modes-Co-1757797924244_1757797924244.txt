To execute the provided patch order, we'll follow a structured plan:

PLAN
Operating Modes:

Consistency Enforcer: Keeping hook order constant, maintaining existing layouts without adding or removing hooks dynamically.
Debugging Specialist: Ensure no null layouts and consistent data fetching without errors.
Files to Modify:

src/lib/ecc-card-resolvers.ts - Create/update file to include shared resolvers for card data.
src/pages/card/property/index.tsx - Update import and data fetching.
src/pages/card/unit/index.tsx - Update import and data fetching.
src/pages/card/lease/index.tsx - Update import and data fetching.
src/pages/card/tenant/index.tsx - Update import and data fetching.
src/pages/card/owner/index.tsx - Update import and data fetching.
Risks:

Changes might introduce API request errors or shift in rendering behavior if not aligned precisely.
Rollback Plan:

Use the backed-up files to revert changes in case of any unforeseen errors.
BACKUP
For each file to be replaced or updated, make sure to create a .bak file if it doesn't exist.

CHANGESET
Let's implement the patch changes step-by-step:

Create src/lib/ecc-card-resolvers.ts with shared resolvers:

import { useQuery } from '@tanstack/react-query';
import { apiGet } from '../lib/ecc-api'; // existing wrapper
type Id = string | number;
function first<T>(x: T[] | T | null | undefined): T | null {
  if (Array.isArray(x)) return x.length ? (x[0] as T) : null;
  return (x ?? null) as T | null;
}
// Add the resolver functions as defined in the patch order
Update src/pages/card/property/index.tsx:

import { usePropertyCardData } from '../../../lib/ecc-card-resolvers';
// Ensure resolver call is correctly destructured
const { property, units, leases, owner, isLoading, error } = usePropertyCardData(id);
if (import.meta.env.DEV) {
  // eslint-disable-next-line no-console
  console.table({ entity: 'PropertyCard', id, hasProperty: !!property, units: units?.length, leases: leases?.length, error: !!error });
}
Repeat similar updates for unit/index.tsx, lease/index.tsx, tenant/index.tsx, and owner/index.tsx:

Update file imports and hooks just like the property index file.

Map values into their existing sections without changing the UI layout.

TEST PLAN
Compile the project: Ensure no errors in console.
Navigation: Check pages like /card/property/:id and confirm real data is shown.
Console output: Validate console outputs to confirm which data was fetched.
Run guardrails to verify no break in the continuity of the site's functioning.
Type-checking using npx tsc -p tsconfig.cards.json to ensure no typescript errors.
After implementing the changes, verify that nothing breaks and the UI adheres to the defined structure without regression. Monitor any log outputs to detect potential issues for future follow-ups if necessary.