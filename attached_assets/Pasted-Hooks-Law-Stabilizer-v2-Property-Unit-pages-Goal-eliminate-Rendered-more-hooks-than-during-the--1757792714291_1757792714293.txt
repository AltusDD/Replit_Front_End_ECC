Hooks Law Stabilizer v2 (Property+Unit pages)

Goal: eliminate “Rendered more hooks than during the previous render”, land every card page reliably, and show correct shells (no conditionals around hooks, no hooks inside tab renderers).

Apply everything exactly, show diffs, and then run the 3 verification commands at the end.

1) Freeze hook order in resolvers (no conditional or looped hooks)

Edit: src/lib/ecc-resolvers.ts
Do NOT change endpoint paths you already wired—keep your existing apiGet calls. Only make hook calls unconditional and use enabled: to control fetch.

import { useQuery } from "@tanstack/react-query";
import { apiGet } from "./ecc-api";

/** PROPERTY */
export function usePropertyRelations(id?: string | number) {
  const pid = id == null ? "" : String(id);
  const on = Boolean(id);

  const property = useQuery({ queryKey: ["property", pid], queryFn: () => apiGet(`/api/entities/properties/${pid}`), enabled: on });
  const units    = useQuery({ queryKey: ["property", pid, "units"],   queryFn: () => apiGet(`/api/entities/properties/${pid}/units`),    enabled: on });
  const leases   = useQuery({ queryKey: ["property", pid, "leases"],  queryFn: () => apiGet(`/api/entities/properties/${pid}/leases`),   enabled: on });
  const tenants  = useQuery({ queryKey: ["property", pid, "tenants"], queryFn: () => apiGet(`/api/entities/properties/${pid}/tenants`),  enabled: on });
  const owner    = useQuery({ queryKey: ["property", pid, "owner"],   queryFn: () => apiGet(`/api/entities/properties/${pid}/owner`),    enabled: on });

  return {
    property: property.data ?? null,
    units: units.data ?? [],
    leases: leases.data ?? [],
    tenants: tenants.data ?? [],
    owner: owner.data ?? null,
    isLoading: on && [property, units, leases, tenants, owner].some(q => q.isLoading),
    queries: { property, units, leases, tenants, owner },
  };
}

/** UNIT */
export function useUnitRelations(id?: string | number) {
  const uid = id == null ? "" : String(id);
  const on = Boolean(id);

  const unit          = useQuery({ queryKey: ["unit", uid],           queryFn: () => apiGet(`/api/entities/units/${uid}`),            enabled: on });
  const property      = useQuery({ queryKey: ["unit", uid, "property"],queryFn: () => apiGet(`/api/entities/units/${uid}/property`),  enabled: on });
  const activeLease   = useQuery({ queryKey: ["unit", uid, "activeLease"], queryFn: () => apiGet(`/api/entities/units/${uid}/active-lease`), enabled: on });
  const primaryTenant = useQuery({ queryKey: ["unit", uid, "primaryTenant"],queryFn: () => apiGet(`/api/entities/units/${uid}/primary-tenant`), enabled: on });

  return {
    unit: unit.data ?? null,
    property: property.data ?? null,
    activeLease: activeLease.data ?? null,
    primaryTenant: primaryTenant.data ?? null,
    isLoading: on && [unit, property, activeLease, primaryTenant].some(q => q.isLoading),
    queries: { unit, property, activeLease, primaryTenant },
  };
}

/** LEASE */
export function useLeaseRelations(id?: string | number) {
  const lid = id == null ? "" : String(id);
  const on = Boolean(id);

  const lease    = useQuery({ queryKey: ["lease", lid], queryFn: () => apiGet(`/api/entities/leases/${lid}`), enabled: on });
  const property = useQuery({ queryKey: ["lease", lid, "property"], queryFn: () => apiGet(`/api/entities/leases/${lid}/property`), enabled: on });
  const unit     = useQuery({ queryKey: ["lease", lid, "unit"],     queryFn: () => apiGet(`/api/entities/leases/${lid}/unit`),     enabled: on });
  const tenant   = useQuery({ queryKey: ["lease", lid, "tenant"],   queryFn: () => apiGet(`/api/entities/leases/${lid}/tenant`),   enabled: on });

  return {
    lease: lease.data ?? null,
    property: property.data ?? null,
    unit: unit.data ?? null,
    tenant: tenant.data ?? null,
    isLoading: on && [lease, property, unit, tenant].some(q => q.isLoading),
    queries: { lease, property, unit, tenant },
  };
}

/** TENANT */
export function useTenantRelations(id?: string | number) {
  const tid = id == null ? "" : String(id);
  const on = Boolean(id);

  const tenant     = useQuery({ queryKey: ["tenant", tid],           queryFn: () => apiGet(`/api/entities/tenants/${tid}`),          enabled: on });
  const leases     = useQuery({ queryKey: ["tenant", tid, "leases"], queryFn: () => apiGet(`/api/entities/tenants/${tid}/leases`),   enabled: on });
  const properties = useQuery({ queryKey: ["tenant", tid, "properties"], queryFn: () => apiGet(`/api/entities/tenants/${tid}/properties`), enabled: on });

  return {
    tenant: tenant.data ?? null,
    leases: leases.data ?? [],
    properties: properties.data ?? [],
    isLoading: on && [tenant, leases, properties].some(q => q.isLoading),
    queries: { tenant, leases, properties },
  };
}

/** OWNER */
export function useOwnerRelations(id?: string | number) {
  const oid = id == null ? "" : String(id);
  const on = Boolean(id);

  const owner      = useQuery({ queryKey: ["owner", oid],           queryFn: () => apiGet(`/api/entities/owners/${oid}`),           enabled: on });
  const properties = useQuery({ queryKey: ["owner", oid, "properties"], queryFn: () => apiGet(`/api/entities/owners/${oid}/properties`), enabled: on });

  return {
    owner: owner.data ?? null,
    properties: properties.data ?? [],
    isLoading: on && [owner, properties].some(q => q.isLoading),
    queries: { owner, properties },
  };
}

2) Replace PropertyCardPage with a hook-stable, deterministic shell

Edit: src/pages/card/property/index.tsx
Replace the whole component with this minimal, safe render. It uses no hooks inside tab renderers, and no conditional hooks anywhere.

import { useParams } from "wouter";
import Section from "@/components/Section";
import GeoMap from "@/components/GeoMap";
import { humanize, fmtMoneyCents, joinAddress } from "@/lib/format";
import { usePropertyRelations } from "@/lib/ecc-resolvers";
// If your tabs component is aliased, keep your import names consistent:
import AssetTabs, { Tab as AssetTab } from "@/components/Tabs"; // adjust if needed

export default function PropertyCardPage() {
  const { id } = useParams<{ id: string }>();

  // SINGLE top-level data hook (stable order)
  const rel = usePropertyRelations(id);

  // Safe data
  const property = rel.property;
  const units = rel.units;
  const leases = rel.leases;
  const owner = rel.owner;

  const address = joinAddress([
    property?.street_1,
    property?.city,
    property?.state,
    property?.zip,
  ].filter(Boolean) as string[]) || undefined;

  const lat = Number.isFinite((property as any)?.lat) ? (property as any).lat as number : null;
  const lng = Number.isFinite((property as any)?.lng) ? (property as any).lng as number : null;

  // Tabs are pure JSX renderers — NO HOOKS INSIDE
  const tabs: AssetTab[] = [
    {
      key: "overview",
      label: "Overview",
      render: () => (
        <div style={{ display: "grid", gap: 12 }}>
          <Section title="Property Overview">
            <div className="field-rows">
              <div className="ecc-label">Type</div>
              <div>{humanize(property?.property_type ?? "—")}</div>
              <div className="ecc-label">Class</div>
              <div>{humanize(property?.property_class ?? "—")}</div>
              <div className="ecc-label">Status</div>
              <div>{humanize(property?.status ?? "—")}</div>
              <div className="ecc-label">DoorLoop ID</div>
              <div>{property?.doorloop_id ?? "—"}</div>
              <div className="ecc-label">Owner</div>
              <div>{owner?.display_name ? owner.display_name : "—"}</div>
            </div>
          </Section>

          <Section title="Relationships">
            <div style={{ display: "grid", gap: 8 }}>
              <div className="ecc-label">Units</div>
              <div>{Array.isArray(units) ? units.length : 0}</div>
              <div className="ecc-label">Active Leases</div>
              <div>
                {Array.isArray(leases)
                  ? leases.filter((l: any) => l?.status === "active").length
                  : 0}
              </div>
            </div>
          </Section>
        </div>
      ),
    },
    {
      key: "financials",
      label: "Financials",
      render: () => (
        <div style={{ display:"grid", gap:12 }}>
          <Section title="Delinquency Summary">
            <div>—</div>
          </Section>
          <Section title="Transactions">
            <div style={{ opacity:.8 }}>No transactions yet.</div>
          </Section>
        </div>
      ),
    },
    {
      key: "legal",
      label: "Legal",
      render: () => (
        <div style={{ display:"grid", gap:12 }}>
          <Section title="Assessor">
            <div className="field-rows">
              <div className="ecc-label">APN</div>
              <div>{property?.apn ?? "—"}</div>
            </div>
          </Section>
          <Section title="Linked Cases">
            <div style={{ opacity:.8 }}>No cases linked.</div>
          </Section>
        </div>
      ),
    },
    {
      key: "files",
      label: "Files",
      render: () => (
        <div style={{ display:"grid", gap:12 }}>
          <Section title="Files">
            <div style={{ display:"flex", gap:8, flexWrap:"wrap" }}>
              <button className="ecc-object" style={{ padding:"8px 12px" }}>Open DoorLoop Folder</button>
              <button className="ecc-object" style={{ padding:"8px 12px" }}>Open Dropbox</button>
              <button className="ecc-object" style={{ padding:"8px 12px" }}>Upload</button>
            </div>
          </Section>
        </div>
      ),
    },
    {
      key: "activity",
      label: "Activity",
      render: () => (
        <Section title="Activity">
          <div style={{ opacity:.8 }}>No activity yet.</div>
        </Section>
      ),
    },
  ];

  // Not-found panel (never return null)
  if (!rel.isLoading && !property) {
    return (
      <div style={{ padding:24 }}>
        <Section title="Property not found">
          <div style={{ opacity:.8 }}>No data returned for this ID.</div>
        </Section>
      </div>
    );
  }

  // Page layout — 2 columns (main + right rail)
  return (
    <div style={{ padding: 24, display:"grid", gap:12 }}>
      {/* Header rail */}
      <section className="ecc-object">
        <div className="ecc-header">
          <div className="ecc-title">{address ?? "Property"}</div>
          <div className="ecc-actions" style={{ display:"flex", gap:8 }}>
            <button className="ecc-object" style={{ padding:"8px 12px" }}>Edit</button>
            <button className="ecc-object" style={{ padding:"8px 12px" }}>Export PDF</button>
            <button className="ecc-object" style={{ padding:"8px 12px" }}>New Work Order</button>
          </div>
        </div>
        <div style={{ display:"grid", gridTemplateColumns:"repeat(4, minmax(0,1fr))", gap:8 }}>
          <div className="ecc-object" style={{ padding:12 }}>
            <div className="ecc-label">Units</div>
            <div>{Array.isArray(units) ? units.length : 0}</div>
          </div>
          <div className="ecc-object" style={{ padding:12 }}>
            <div className="ecc-label">Active Leases</div>
            <div>{Array.isArray(leases) ? leases.filter((l:any)=>l?.status==="active").length : 0}</div>
          </div>
          <div className="ecc-object" style={{ padding:12 }}>
            <div className="ecc-label">Avg Rent</div>
            <div>{fmtMoneyCents(0)}</div>
          </div>
          <div className="ecc-object" style={{ padding:12 }}>
            <div className="ecc-label">Status</div>
            <div>{humanize(property?.status ?? "—")}</div>
          </div>
        </div>
      </section>

      <div style={{ display:"grid", gridTemplateColumns:"1fr 320px", gap:12 }}>
        <main>
          <section className="ecc-object" style={{ padding: 0 }}>
            <AssetTabs tabs={tabs} initialKey="overview" />
          </section>
        </main>
        <aside style={{ display:"grid", gap:12 }}>
          <Section title="Location">
            <GeoMap title="" lat={lat} lng={lng} address={address} />
          </Section>
          <Section title="Key Dates">
            <div style={{ opacity:.8 }}>No upcoming events.</div>
          </Section>
          <Section title="Pinned Files">
            <div style={{ opacity:.8 }}>None pinned.</div>
          </Section>
        </aside>
      </div>
    </div>
  );
}


Notes:

The only hook here is usePropertyRelations(id) (top-level, constant).

tabs renderers are pure JSX — no hooks inside.

If your Tabs component has different import names, keep them aligned while preserving this behavior.

3) UnitCardPage: lift hooks out of any conditionals

Edit: src/pages/card/unit/index.tsx
Ensure:

useUnitRelations(id) is called once at the top.

No additional hooks are called inside tab/body renderers or conditionals.
If needed, replace unit tabs with simple pure JSX placeholders (similar to Property above) and fill in later.

4) Guardrail: forbid conditional/looped hooks (enforce forever)

Edit: scripts/guardrail-mega.mjs — make sure this block exists (or append it):

/* Hooks must be unconditional */
{
  const hookRx = /(useQuery|useQueries|useMutation|useEffect|useMemo|useState)\s*\(/;
  for (const f of files.filter(p => p.endsWith(".tsx") || p.endsWith(".ts"))) {
    const src = fs.readFileSync(f, "utf8");
    if (/if\s*\([^)]*\)\s*{[\s\S]*?(useQuery|useQueries|useMutation)\s*\(/.test(src)) {
      flag(f, "conditional React Query hooks forbidden – call at top-level and use `enabled:`");
    }
    if (/for\s*\([^)]*\)\s*{[\s\S]*?(useQuery|useQueries|useMutation)\s*\(/.test(src)
      || /\.map\s*\([^)]*=>\s*(?:{[\s\S]*?(useQuery|useQueries|useMutation)\s*\(|(useQuery|useQueries|useMutation)\s*\()/.test(src)) {
      flag(f, "looped React Query hooks forbidden");
    }
  }
}

5) Verify

Run:

node scripts/guardrail-mega.mjs
node scripts/guardrail-overlays.mjs
npx tsc -p tsconfig.cards.json


Expected: all ✅.

Then open real IDs:

/card/property/58 (or any that failed)

/card/unit/45

/card/lease/1

/card/tenant/1

/card/owner/1

Confirm each: renders ✅ / page cover ❌ / map only on property ✅.
Paste a 5-line checklist with results.

What this gives us

The Property card now has a deterministic, hook-stable shell (no hook count drift, no tab-time hooks).

Unit page stabilized the same way.

Guardrails prevent regressions (no conditional/looped hooks).

With the shells stable and rendering, we can resume systematic feature fill (Financials/Legal/Files/Activity + CoreLogic/Dropbox/M365/Field App) without fighting runtime crashes.