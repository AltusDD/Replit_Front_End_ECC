Replit Chat — “FORBID OVERLAYS” (Audit → Purge → Guardrail → Verify)

You are in PATCH MODE. Follow each step exactly. Print findings and diffs. Do not add features or refactor beyond what’s specified.

0) Ground rules

Overlays are forbidden. Anything that can blanket the viewport (black screen, scrim, modal backdrop, full-screen skeleton, Suspense full-screen fallback, etc.) must be removed.

Allowed: local, in-panel skeletons inside .ecc-object only.

Pages must always render content; when loading, show boxed skeletons instead of page covers.

1) Add runtime kill-switch CSS (neutralize any stragglers)

Create: src/styles/no-overlays.css

/* ECC Kill-Switch: disable any "full screen" covers/backdrops */
body > div[id*="overlay"],
body > div[class*="overlay"],
body > div[class*="backdrop"],
body > div[class*="fullscreen"],
body > div[class*="full-screen"],
body > div[class*="loading-screen"],
body > div[class*="page-cover"],
body > div[class*="scrim"],
body > div[class*="modal-backdrop"] {
  display: none !important;
}

/* Any element trying to cover the viewport with fixed/absolute + high z-index */
*[style*="position:fixed"][style*="top: 0"][style*="left: 0"][style*="height: 100vh"],
*[style*="position:fixed"][style*="inset: 0"],
*[style*="position:absolute"][style*="inset: 0"][style*="z-index:"] {
  display: none !important;
}

/* Ensure app content remains interactable */
#root, #app { isolation: isolate; }


Edit: src/main.tsx (ensure this import is present once)

import "./styles/no-overlays.css";

2) Add guardrail script that fails if overlay code exists

Create: scripts/guardrail-overlays.mjs

import fs from "fs";
import path from "path";
const ROOT = path.resolve(process.cwd(), "src");

const GLOB_EXT = [".tsx", ".ts", ".css", ".scss", ".less", ".jsx", ".js"];
const SUSPECT_NAMES = [
  "overlay", "backdrop", "fullscreen", "full-screen", "page-cover", "loading-screen",
  "screen-cover", "scrim", "modal-backdrop", "blocking-screen", "block-ui"
];

const SUSPECT_JSX_REGEX = [
  /position:\s*["']?(fixed|absolute)["']?/i,
  /inset:\s*0/i, /top:\s*0/i, /left:\s*0/i, /right:\s*0/i, /bottom:\s*0/i,
  /height:\s*["']?(100vh|100%)["']?/i, /width:\s*["']?(100vw|100%)["']?/i,
  /z-?index:\s*[^;\n]*([5-9]\d{1,}|[1-9]\d{2,})/i // >=50 or 100+
];

const SUSPECT_CLASS_REGEX = new RegExp(SUSPECT_NAMES.join("|"), "i");

const offenders = [];

function walk(dir) {
  for (const f of fs.readdirSync(dir)) {
    const full = path.join(dir, f);
    const stat = fs.statSync(full);
    if (stat.isDirectory()) walk(full);
    else if (GLOB_EXT.includes(path.extname(full))) scan(full);
  }
}

function scan(file) {
  const src = fs.readFileSync(file, "utf8");
  let hit = false;

  // name-based flags
  if (SUSPECT_CLASS_REGEX.test(src)) hit = true;

  // style/JSX flags
  if (!hit) for (const rx of SUSPECT_JSX_REGEX) if (rx.test(src)) { hit = true; break; }

  // Suspense full-screen fallbacks
  if (!hit && /<Suspense[\s\S]*fallback=.*(Full|FullScreen|Screen|Cover|Overlay)/i.test(src)) hit = true;

  // Components named to cover
  if (!hit && /(FullScreen|Fullscreen|FullPage|PageCover|Backdrop|Overlay|BlockingScreen|ModalBackdrop)\s*[\(\{]/i.test(src)) hit = true;

  if (hit) offenders.push(file);
}

walk(ROOT);

if (offenders.length) {
  console.error("❌ FORBIDDEN OVERLAYS DETECTED:\n" + offenders.map(f => " - " + path.relative(process.cwd(), f)).join("\n"));
  process.exit(2);
} else {
  console.log("✅ No forbidden overlays detected.");
}


Edit: package.json – add a script

{
  "scripts": {
    "guardrail:overlays": "node scripts/guardrail-overlays.mjs"
  }
}

3) Replace any full-screen loaders/fallbacks with boxed skeletons

Run this guided codemod (textual patch). For every match below, apply replacement in place:

3a) Suspense fallbacks

Find (globally):
fallback={<FullScreen or fallback={<Full or fallback={<LoadingScreen

Replace with:
fallback={<div/>}

(We don’t render global fallbacks; each page already has boxed skeletons.)

3b) Components that render page-wide covers

Search names (case-insensitive):
FullScreen, Fullscreen, FullPage, PageCover, Overlay, Backdrop, BlockingScreen, ModalBackdrop, ScreenCover, LoadingScreen

For each component definition you find, replace the implementation body with a boxed skeleton:

// OLD (example)
// export function FullScreenLoader() { return <div style={{position:'fixed', inset:0, background:'#000'}}/>; }

// NEW
export function FullScreenLoader() {
  return (
    <section className="ecc-object">
      <div className="ecc-header"><div style={{width:160,height:16,opacity:.5}}/></div>
      <div style={{height:96, opacity:.3}}/>
    </section>
  );
}


(If the component is unused, delete it.)

3c) CSS that creates full-screen covers

Find in any CSS/SCSS/LESS:
position: fixed; (or absolute;) combined with inset: 0; or top: 0; left: 0; right: 0; bottom: 0; and a background color

Delete the rule or confine it to a specific, non-global container (never body/html/top-level app shells).

4) Page gates must never blank the screen

For each card page under src/pages/card/**/index.tsx:

If you see return null; or a component that covers the entire screen on error/load, replace with an in-panel skeleton inside .ecc-object, like we already use on Property/Unit.

Example allowed pattern:

if (q.isLoading) return (
  <section className="ecc-object">
    <div className="ecc-header"><div style={{width:200,height:16,opacity:.6}}/></div>
    <div style={{height:120,opacity:.3}}/>
  </section>
);
if (q.isError) return <section className="ecc-object">Error loading.</section>;

5) Run audits & print results

Execute these and paste the full outputs:

npm run guardrail:overlays

npm run guardrail (your existing guardrails)

npx tsc --noEmit

Then open and confirm (no blank screens, content visible, map only on Property):

/card/property/<known_id>

/card/unit/<known_id>

/card/lease/<known_id>

/card/tenant/<known_id>

/card/owner/<known_id>

Return:

The three command outputs,

A checklist per route: renders content ✅ / ❌, any page cover ✅ / ❌ (must be ❌), map present (Property only) ✅ / ❌.

6) Make it permanent (CI/local pre-push)

Finally, wire the overlay guardrail into the dev and build lifecycle:

Add to package.json scripts used by dev/build (wherever your existing guardrail runs), e.g.:

{
  "scripts": {
    "predev": "npm run guardrail:overlays",
    "prebuild": "npm run guardrail:overlays && npm run guardrail"
  }
}

Definition of Done (DoD)

No file in src/** contains overlay patterns (script passes).

No Suspense full-screen fallbacks remain.

No CSS rules exist that can blanket the viewport.

All asset pages render visible boxed content/skeletons (never a blank/black screen).

Property is the only card with a map.

If any violations show up in step 5, list the exact files/lines and apply the replacements above; re-run until all green.