PROMPT FOR REPLIT — “ECC Cards Truth-Verification Suite (API + UI)”

You are the Build Agent. Add a lightweight verification suite for asset cards. Do not modify app logic, ports, schemas, or guardrails. Stop on the first error and print it.

0) Guardrails

Keep WEB on 5173, API on 8787.

Only add files under scripts/ and tests/, and update package.json.

Use existing diag route: /api/rpc/diag/ids (or fallback /api/diag/ids).

1) Add API smoke test (Node fetch, no deps)

Create scripts/cards-smoke.mjs:

// Node 18+ has global fetch
const API = "http://localhost:8787";
const GET = (p) => fetch(`${API}${p}`).then(r => r.json());

const diagIds = async () => {
  try {
    const r = await GET("/api/rpc/diag/ids");
    if (r && (r.properties || r.units)) return r;
  } catch {}
  return GET("/api/diag/ids");
};

const assert = (cond, msg) => {
  if (!cond) throw new Error(msg);
};

const log = (k, v) => console.log(k.padEnd(28), v);

(async () => {
  console.log("=== ECC Cards: API Smoke ===");
  const h = await GET("/api/health").catch(()=>null);
  assert(h && h.ok, "API /health not ok");
  log("health", "OK");

  const env = await GET("/api/diag/env");
  log("env.SUPABASE_URL_KEY", env.SUPABASE_URL_KEY || "NA");

  const ids = await diagIds();
  assert(ids, "No diag IDs route");
  const pick = (arr) => Array.isArray(arr) && arr.length ? arr[0] : null;

  const P = pick(ids.properties);
  const U = pick(ids.units);
  const L = pick(ids.leases);
  const O = pick(ids.owners);
  const T = pick(ids.tenants);

  log("IDs", JSON.stringify({ P, U, L, O, T }));

  // Property
  if (P != null) {
    const r = await GET(`/api/rpc/get_property_card?id=${P}`);
    assert(r && r.property, "Property card missing property");
    assert(r.kpis && "units" in r.kpis && "occupancyPct" in r.kpis, "Property KPIs incomplete");
    log("property", "PASS");
  } else log("property", "SKIP (no properties)");

  // Unit
  if (U != null) {
    const r = await GET(`/api/rpc/get_unit_card?id=${U}`);
    assert(r && r.unit, "Unit card missing unit");
    log("unit", `PASS (lease:${r.lease?.id ?? "none"} tenant:${r.tenant?.id ?? "none"})`);
  } else log("unit", "SKIP (no units)");

  // Lease
  if (L != null) {
    const r = await GET(`/api/rpc/get_lease_card?id=${L}`);
    assert(r && r.lease, "Lease card missing lease");
    log("lease", `PASS (unit:${r.unit?.id ?? "none"} tenant:${r.tenant?.id ?? "none"})`);
  } else log("lease", "SKIP (no leases)");

  // Owner
  if (O != null) {
    const r = await GET(`/api/rpc/get_owner_card?id=${O}`);
    assert(r && r.owner, "Owner card missing owner");
    assert(Array.isArray(r.properties), "Owner card missing properties array");
    log("owner", `PASS (props:${r.properties.length})`);
  } else log("owner", "SKIP (no owners)");

  // Tenant
  if (T != null) {
    const r = await GET(`/api/rpc/get_tenant_card?id=${T}`);
    assert(r && r.tenant, "Tenant card missing tenant");
    log("tenant", `PASS (activeLease:${r.activeLease ? "yes" : "no"})`);
  } else log("tenant", "SKIP (no tenants)");

  console.log("=== DONE ===");
})().catch((e) => {
  console.error("SMOKE FAIL:", e?.message || e);
  process.exit(1);
});

2) Add minimal UI smoke (Playwright) for rendered KPIs/tabs/rail

Install once:

npm i -D @playwright/test
npx playwright install --with-deps


Create tests/cards.spec.ts:

import { test, expect } from "@playwright/test";

const WEB = process.env.WEB || "http://localhost:5173";
const API = process.env.API || "http://localhost:8787";

async function pickIds(request: any) {
  let r = await request.get(`${API}/api/rpc/diag/ids`);
  if (!r.ok()) r = await request.get(`${API}/api/diag/ids`);
  const data = await r.json();
  const pick = (a?: number[]) => Array.isArray(a) && a.length ? a[0] : null;
  return {
    P: pick(data.properties), U: pick(data.units),
    L: pick(data.leases), O: pick(data.owners), T: pick(data.tenants)
  };
}

test.describe("ECC Asset Cards (UI smoke)", () => {
  test("property card renders hero KPIs, tabs, right rail", async ({ page, request }) => {
    const { P } = await pickIds(request);
    test.skip(P == null, "No property IDs in this environment");

    await page.goto(`${WEB}/card/property/${P}`);
    await expect(page.getByTestId("kpi-units")).toBeVisible();
    await expect(page.getByTestId("kpi-occupancy")).toBeVisible();
    await expect(page.getByTestId("kpi-avgrent")).toBeVisible();

    await expect(page.getByTestId("tab-overview")).toBeVisible();
    await expect(page.getByTestId("tab-financials")).toBeVisible();
    await expect(page.getByTestId("tab-legal")).toBeVisible();
    await expect(page.getByTestId("tab-files")).toBeVisible();

    await page.getByTestId("tab-financials").click();
    await expect(page.getByTestId("tab-financials")).toHaveAttribute("aria-selected", /true|/); // lazy loaded ok

    // right rail panel testids as you added
    await expect(page.getByTestId("rr-dates")).toBeVisible();
  });

  for (const type of ["unit","lease","owner","tenant"] as const) {
    test(`${type} card basic render`, async ({ page, request }) => {
      const ids = await pickIds(request);
      const id = ids[type[0].toUpperCase() as "U"|"L"|"O"|"T"];
      test.skip(id == null, `No ${type} IDs in this environment`);

      await page.goto(`${WEB}/card/${type}/${id}`);
      // At least tabs visible (Overview exists) and hero KPIs common testids by card type:
      await expect(page.getByTestId(/tab-overview/)).toBeVisible();

      // Sample KPI checks per card type (soft, since KPIs vary)
      const maybe = [
        "kpi-lease-status","kpi-rent","kpi-bedbath","kpi-sqft",
        "kpi-active-leases","kpi-current-balance","kpi-on-time-rate","kpi-open-workorders",
        "kpi-portfolio-units","kpi-occupancy","kpi-avgrent"
      ];
      let seen = 0;
      for (const id2 of maybe) {
        const locator = page.getByTestId(id2);
        if (await locator.count()) { await expect(locator.first()).toBeVisible(); seen++; }
      }
      expect(seen).toBeGreaterThan(0);
    });
  }
});

3) Wire npm scripts

Update package.json:

{
  "scripts": {
    "check:api": "node scripts/cards-smoke.mjs",
    "test:e2e": "playwright test --reporter=list"
  }
}

4) How to run (two shells)

Shell A: click Run (this starts Vite + API and keeps them up).

Shell B:

npm run check:api
npm run test:e2e


Passing criteria

check:api prints PASS lines for each entity that exists in your DB.

test:e2e shows each card page renders hero KPIs, tabs (with lazy switch), and right rail.

If any test fails:

Do not change code — paste the failing JSON from check:api or the failing Playwright assertion text. I’ll give you a one-file micro-patch targeted at that exact failure.

Optional (nightly sanity)

If you want a single command to re-run API smoke every hour while Run is up:

while true; do date; npm run check:api || true; sleep 3600; done

What you get

A repeatable proof that your asset cards are returning enriched data (API) and rendering KPIs/tabs/rail (UI).

Zero drift: only adds tests + scripts.

When something regresses, you’ll know exactly what and where without guessing.

When you’re back, post the test output (or the one failing line), and I’ll close the loop.