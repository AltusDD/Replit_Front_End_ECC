#!/usr/bin/env bash
set -euo pipefail

APP_NAME="empirecommandcenter-altus-staging"
RG="$(az functionapp show --name "$APP_NAME" --query resourceGroup -o tsv)"

echo "Using Function App: $APP_NAME (RG: $RG)"

# 1) Set admin token and enable CORS for Replit preview origin
#    â†³ replace YOUR_STRONG_TOKEN with a real secret string you also set in Replit as VITE_ADMIN_SYNC_TOKEN
ADMIN_TOKEN="${ADMIN_TOKEN:-YOUR_STRONG_TOKEN}"

az functionapp config appsettings set -g "$RG" -n "$APP_NAME" \
  --settings ADMIN_SYNC_TOKEN="$ADMIN_TOKEN" > /dev/null

# Optional: allow your Replit preview origin (adjust if your preview URL changes)
# Example origin pattern (replace with your actual Replit preview URL root if needed):
# az functionapp cors add -g "$RG" -n "$APP_NAME" --allowed-origins "https://*.replit.dev"

# 2) Build a minimal Functions project with the endpoints ECC expects
rm -rf /tmp/ecc-api && mkdir -p /tmp/ecc-api
cd /tmp/ecc-api

cat > host.json <<'JSON'
{
  "version": "2.0",
  "extensionBundle": {
    "id": "Microsoft.Azure.Functions.ExtensionBundle",
    "version": "[3.*, 4.0.0)"
  }
}
JSON

# --- shared admin validator
mkdir -p api/_lib
cat > api/_lib/admin.py <<'PY'
import os
from azure.functions import HttpRequest, HttpResponse

def require_admin(req: HttpRequest):
    expect = os.getenv("ADMIN_SYNC_TOKEN", "")
    got = req.headers.get("x-admin-token", "")
    if not expect or got != expect:
        return HttpResponse("unauthorized", status_code=401)
    return None
PY

# --- /api/entities/properties?id=42
mkdir -p entities-properties
cat > entities-properties/__init__.py <<'PY'
import azure.functions as func, json
def main(req: func.HttpRequest) -> func.HttpResponse:
    pid = req.params.get("id") or req.route_params.get("id")
    if not pid:
        return func.HttpResponse("missing id", status_code=400)
    # TODO: replace with Supabase query
    obj = {"id": pid, "name": f"Property #{pid}", "address": {"city":"TBD","state":"IN"}, "units": [], "meta":{"source":"stub"}}
    return func.HttpResponse(json.dumps(obj), mimetype="application/json")
PY
cat > entities-properties/function.json <<'JSON'
{
  "bindings": [
    { "authLevel": "anonymous", "type": "httpTrigger", "direction": "in",
      "name": "req", "methods": ["get"], "route": "entities/properties" },
    { "type": "http", "direction": "out", "name": "res" }
  ]
}
JSON

# --- /api/owners/transferContext?id=<ownerId>
mkdir -p owners-transferContext
cat > owners-transferContext/__init__.py <<'PY'
import azure.functions as func, json
def main(req: func.HttpRequest) -> func.HttpResponse:
    oid = req.params.get("id") or req.route_params.get("id")
    ctx = {"ownerId": oid, "properties": [], "units": [], "leases": []}
    return func.HttpResponse(json.dumps(ctx), mimetype="application/json")
PY
cat > owners-transferContext/function.json <<'JSON'
{
  "bindings": [
    { "authLevel": "anonymous", "type": "httpTrigger", "direction": "in",
      "name": "req", "methods": ["get"], "route": "owners/transferContext" },
    { "type": "http", "direction": "out", "name": "res" }
  ]
}
JSON

# --- /api/owners/initiateTransfer (POST)
mkdir -p owners-initiateTransfer
cat > owners-initiateTransfer/__init__.py <<'PY'
import azure.functions as func, json
def main(req: func.HttpRequest) -> func.HttpResponse:
    payload = {}
    try:
        payload = req.get_json()
    except Exception:
        pass
    return func.HttpResponse(json.dumps({"id": "ot-demo-1", "status": "initiated", "echo": payload}), mimetype="application/json")
PY
cat > owners-initiateTransfer/function.json <<'JSON'
{
  "bindings": [
    { "authLevel": "anonymous", "type": "httpTrigger", "direction": "in",
      "name": "req", "methods": ["post"], "route": "owners/initiateTransfer" },
    { "type": "http", "direction": "out", "name": "res" }
  ]
}
JSON

# --- /api/owners/approveTransfer (POST, admin)
mkdir -p owners-approveTransfer
cat > owners-approveTransfer/__init__.py <<'PY'
import azure.functions as func
from api._lib.admin import require_admin
def main(req: func.HttpRequest) -> func.HttpResponse:
    unauth = require_admin(req)
    if unauth: return unauth
    return func.HttpResponse("ok")
PY
cat > owners-approveTransfer/function.json <<'JSON'
{
  "bindings": [
    { "authLevel": "anonymous", "type": "httpTrigger", "direction": "in",
      "name": "req", "methods": ["post"], "route": "owners/approveTransfer" },
    { "type": "http", "direction": "out", "name": "res" }
  ]
}
JSON

# --- /api/owners/authorizeTransfer (POST, admin)
mkdir -p owners-authorizeTransfer
cat > owners-authorizeTransfer/__init__.py <<'PY'
import azure.functions as func
from api._lib.admin import require_admin
def main(req: func.HttpRequest) -> func.HttpResponse:
    unauth = require_admin(req)
    if unauth: return unauth
    return func.HttpResponse("ok")
PY
cat > owners-authorizeTransfer/function.json <<'JSON'
{
  "bindings": [
    { "authLevel": "anonymous", "type": "httpTrigger", "direction": "in",
      "name": "req", "methods": ["post"], "route": "owners/authorizeTransfer" },
    { "type": "http", "direction": "out", "name": "res" }
  ]
}
JSON

# --- /api/owners/executeTransfer (POST, admin)
mkdir -p owners-executeTransfer
cat > owners-executeTransfer/__init__.py <<'PY'
import azure.functions as func
from api._lib.admin import require_admin
def main(req: func.HttpRequest) -> func.HttpResponse:
    unauth = require_admin(req)
    if unauth: return unauth
    return func.HttpResponse("ok")
PY
cat > owners-executeTransfer/function.json <<'JSON'
{
  "bindings": [
    { "authLevel": "anonymous", "type": "httpTrigger", "direction": "in",
      "name": "req", "methods": ["post"], "route": "owners/executeTransfer" },
    { "type": "http", "direction": "out", "name": "res" }
  ]
}
JSON

# 3) Zip deploy directly to the ECC Function App
zip -qr /tmp/ecc-api.zip .
az functionapp deployment source config-zip -g "$RG" -n "$APP_NAME" --src /tmp/ecc-api.zip 1>/dev/null

# 4) Quick smoke tests
BASE="https://$APP_NAME.azurewebsites.net"
echo "BASE: $BASE"
echo "GET transferContext:"
curl -sS "$BASE/api/owners/transferContext?id=test" | head -c 200; echo
echo "POST initiateTransfer:"
curl -sS -X POST "$BASE/api/owners/initiateTransfer" -H "Content-Type: application/json" -d '{"demo":true}' | head -c 200; echo
echo "POST approveTransfer (expect 401 without header):"
curl -sS -i -X POST "$BASE/api/owners/approveTransfer" | head -n 1
echo "POST approveTransfer with header (expect 200):"
curl -sS -i -X POST "$BASE/api/owners/approveTransfer" -H "x-admin-token: '"$ADMIN_TOKEN"'" | head -n 1
echo "GET property entity (id=42):"
curl -sS "$BASE/api/entities/properties?id=42" | head -c 200; echo

echo "=== ECC API stubs deployed to $BASE and app settings applied. Set the SAME token in Replit as VITE_ADMIN_SYNC_TOKEN. ==="
