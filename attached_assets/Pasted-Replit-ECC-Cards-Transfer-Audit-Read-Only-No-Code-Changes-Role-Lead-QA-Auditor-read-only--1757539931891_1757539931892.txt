Replit — ECC Cards & Transfer Audit (Read-Only, No Code Changes)

Role: Lead QA Auditor (read-only)
Scope: Empire Command Center (ECC) repo only
Do NOT modify code. Only run commands and report findings.

Objectives

Confirm the exact API paths the UI calls for each card:

property, unit, lease, tenant, owner

Compare them to the Azure stubs we deployed:

✅ /api/entities/properties?id=42 (working)

➕ /api/entities/units?id=…

➕ /api/entities/leases?id=…

➕ /api/entities/tenants?id=…

➕ /api/entities/owners?id=…

Validate environment usage (VITE_API_BASE_URL, VITE_ADMIN_SYNC_TOKEN) at runtime.

Record any non-200 responses and the exact request URLs the UI is hitting.

Confirm whether Owner Transfer still requires ?id= or if Typeahead is present.

Guardrails

No code edits, no git commit, no formatting changes.

Produce a single markdown report at the end.

Part A — Runtime env & base URL sanity

Run in the Replit shell:

# Show env vars the app uses at build/run time
echo "VITE_API_BASE_URL=${VITE_API_BASE_URL}"
echo "VITE_ADMIN_SYNC_TOKEN is set? " && [ -n "${VITE_ADMIN_SYNC_TOKEN}" ] && echo "YES" || echo "NO"

# Curl each Azure stub directly (back end)
BASE="${VITE_API_BASE_URL}"
echo "BASE=$BASE"
echo "[Azure] integrations:" && curl -sS "$BASE/api/config/integrations" ; echo
echo "[Azure] property:"      && curl -sS "$BASE/api/entities/properties?id=42" ; echo
echo "[Azure] unit:"          && curl -sS "$BASE/api/entities/units?id=45" ; echo
echo "[Azure] lease:"         && curl -sS "$BASE/api/entities/leases?id=1" ; echo
echo "[Azure] tenant:"        && curl -sS "$BASE/api/entities/tenants?id=1" ; echo
echo "[Azure] owner:"         && curl -sS "$BASE/api/entities/owners?id=1" ; echo


Record any non-JSON output or HTTP errors.

Part B — What paths does the UI actually call?

Search the code for fetchers and endpoints:

# Central API helper & places it’s used
rg -n "export function api|function api\\(|const api =" src

# All places cards/owners hit /api/…  (show 2 lines of context)
rg -n "/api/" src | sed -n '1,200p'

# Focused: portfolio & cards hooks for entity loads (show surrounding lines)
rg -n "entities/(property|unit|lease|tenant|owner)" -S src | sed -n '1,200p'

# In case singular endpoints are used accidentally (unit vs units, etc.)
rg -n "entities/(property|unit|lease|tenant|owner)\\b" -S src | sed -n '1,200p'


Deliverables:

For each entity (unit/lease/tenant/owner) paste:

the exact path string found in code (e.g., /api/entities/unit/${id} or /api/entities/units?id=${id})

the file:line where it’s defined.

I suspect some pages are calling singular forms (/entities/unit/:id) while Azure exposes plural+query (/entities/units?id=). We need the exact strings.

Part C — What errors does the UI log?

Open the running preview and, for each failing page:

/card/unit/45

/card/lease/1

/card/tenant/1

/card/owner/1

Then in Replit’s Console (or browser DevTools → Network), capture:

Request URL the page called

HTTP status returned

Response body (first 200 chars)

If Replit can’t access browser DevTools, run this in the UI console (Application tab → Console), or provide a small log overlay result if the app prints errors. If that’s not possible, just paste the Network error text shown on screen.

Part D — Owner Transfer UX check

Visit /owners/transfer without ?id=.

Does a Source Owner and Target Owner typeahead render? (Yes/No)

Try typing Altus:

Does it request GET /api/owners/search?q=Altus? (Yes/No + URL seen)

If there’s a “Create Owner ‘Altus’” action, does it call POST /api/owners with header x-admin-token? (Yes/No)

Paste any errors (status + message body).

Part E — Produce a single markdown report

Create ECC_AUDIT_REPORT.md with:

# ECC Audit — Cards & Transfer (Read-Only)
Date/Time (UTC): <fill>

## A. Environment
- VITE_API_BASE_URL: <value>
- ADMIN token present: <YES/NO>

## B. Azure stub smoke tests (curl)
- /api/config/integrations: <HTTP status + first 120 chars>
- /api/entities/properties?id=42: <status + first 120 chars>
- /api/entities/units?id=45: <status + first 120 chars>
- /api/entities/leases?id=1: <status + first 120 chars>
- /api/entities/tenants?id=1: <status + first 120 chars>
- /api/entities/owners?id=1: <status + first 120 chars>

## C. UI code paths (exact strings)
- Property: <path string> — <file:line>
- Unit: <path string> — <file:line>
- Lease: <path string> — <file:line>
- Tenant: <path string> — <file:line>
- Owner: <path string> — <file:line>

## D. Live page calls (from Network/Console)
- /card/unit/45 → <requested URL> → <HTTP status> → <first 120 chars of response>
- /card/lease/1 → …
- /card/tenant/1 → …
- /card/owner/1 → …

## E. Owner Transfer (no ?id=)
- Typeahead rendered: <Yes/No>
- Search request: <URL + status + body first 120 chars>
- Create request: <URL + status + body first 120 chars>
- Notes:

## F. Likely root causes
(brief bullets comparing UI path strings vs Azure stub paths; note singular/plural mismatches)


Return the full contents of ECC_AUDIT_REPORT.md here.

What I’ll do with the report

If it’s path mismatches (very likely), I’ll give you a single-file patch mapping the UI to the working Azure paths (e.g., change /api/entities/unit/${id} → /api/entities/units?id=${id}), plus a graceful response adapter so your cards render even with stub data.

If it’s CORS or status errors, I’ll hand you one-line Azure fixes.

If Owner Transfer still requires ?id=, I’ll give you the Typeahead build card so it works without query params.