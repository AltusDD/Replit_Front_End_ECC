Replit Shell — ECC Contract Auditor + Property Card Repair (idempotent)

Paste this entire block into the Replit Shell and run it.

#!/bin/bash
set -euo pipefail

echo "== ECC Contract Auditor + Property Repair =="

# --- Helpers ---
rg() { command -v ripgrep >/dev/null 2>&1 && command ripgrep "$@" || command grep -R "$@"; }

root="src"
styles="$root/styles"
components="$root/components"
lib="$root/lib"

mkdir -p "$styles" "$components" "$lib" "$root/pages"

# 0) Confirm router + CSS imports (no new libs)
main_guess="$root/main.tsx"
[ -f "$root/app/main.tsx" ] && main_guess="$root/app/main.tsx"

if [ -f "$main_guess" ]; then
  cp "$main_guess" "$main_guess.bak" || true
  if ! grep -qE "import .*/styles/theme.css" "$main_guess"; then
    sed -i '1i import "@/styles/theme.css";' "$main_guess" || sed -i '1i import "./styles/theme.css";' "$main_guess"
    echo "• Injected theme.css import into $main_guess"
  fi
  if ! grep -qE "import .*/styles/card-enhancer.css" "$main_guess"; then
    sed -i '1i import "@/styles/card-enhancer.css";' "$main_guess" || sed -i '1i import "./styles/card-enhancer.css";' "$main_guess"
    echo "• Injected card-enhancer.css import into $main_guess"
  fi
else
  echo "WARN: main entry not found; continuing."
fi

# 1) Enforce canonical tokens + normalizer
mkdir -p "$styles"
if [ -f "$styles/theme.css" ]; then cp "$styles/theme.css" "$styles/theme.css.bak"; fi
cat > "$styles/theme.css" <<'EOF'
/* --- ECC Object Surface Tokens (canonical) --- */
:root, .theme-ecc, [data-theme="ecc"] {
  --ecc-object-bg: #2A2F38;           /* light grey (on dark) for inner boxes */
  --ecc-object-border: rgba(255,255,255,0.08);
  --ecc-object-radius: 16px;
  --ecc-object-pad: 16px;
}
/* shimmer keyframes for skeletons */
@keyframes ecc-shimmer { 0%{background-position:0% 0} 100%{background-position:200% 0} }
EOF

cat > "$styles/card-enhancer.css" <<'EOF'
/* ECC — Card/Panel/Section normalizer (canonical) */
.ecc-object,
.section,
.card,
.panel,
.gen-card,
.gen-panel {
  background: var(--ecc-object-bg);
  border: 1px solid var(--ecc-object-border);
  border-radius: var(--ecc-object-radius);
  padding: var(--ecc-object-pad);
}
/* standard header row */
.ecc-object .ecc-header {
  display: flex; align-items: center; justify-content: space-between;
  gap: 12px; margin-bottom: 12px;
}
/* keep natural case everywhere inside boxes */
.ecc-object, .ecc-object * { text-transform: none; }
.ecc-label { opacity: .75; font-size: 12px; }
EOF

echo "• Tokens + normalizer enforced"

# 2) Ensure shared components exist (Section, FieldRows, Skeleton, GeoMap)
mkdir -p "$components"

cat > "$components/Section.tsx" <<'EOF'
import React from "react";
export default function Section({
  title, actions, children, className = "",
}: { title?: React.ReactNode; actions?: React.ReactNode; children: React.ReactNode; className?: string; }) {
  return (
    <section className={`ecc-object ${className}`}>
      {(title || actions) && (
        <div className="ecc-header">
          <div className="ecc-title">{title}</div>
          <div className="ecc-actions">{actions}</div>
        </div>
      )}
      {children}
    </section>
  );
}
EOF

cat > "$components/FieldRows.tsx" <<'EOF'
import React from "react";
export function FieldRows({ rows }: { rows: { label: string; value?: React.ReactNode }[] }) {
  return (
    <div style={{ display: "grid", gap: 8 }}>
      {rows.map((r, i) => (
        <div key={i} style={{ display: "grid", gridTemplateColumns: "160px 1fr", gap: 8 }}>
          <div className="ecc-label">{r.label}</div>
          <div>{r.value ?? "—"}</div>
        </div>
      ))}
    </div>
  );
}
EOF

cat > "$components/Skeleton.tsx" <<'EOF'
import React from "react";
export function Line({ w = "100%", h = 12 }: { w?: number | string; h?: number }) {
  return (
    <div className="ecc-object" style={{
      height: h, width: typeof w === "number" ? `${w}px` : w,
      background: "linear-gradient(90deg, rgba(255,255,255,0.06), rgba(255,255,255,0.14), rgba(255,255,255,0.06))",
      backgroundSize: "200% 100%", animation: "ecc-shimmer 1.2s linear infinite", opacity: 0.35 }} />
  );
}
export function Block({ h = 96 }: { h?: number }) { return <div className="ecc-object" style={{ height: h, opacity: 0.35 }} />; }
EOF

cat > "$components/GeoMap.tsx" <<'EOF'
import React from "react";
import Section from "./Section";
import { isFiniteNumber } from "../lib/format";

const mapsHref = (addr: string) => `https://www.google.com/maps?q=${encodeURIComponent(addr)}`;

export default function GeoMap({
  title = "Location", address, lat, lng,
}: { title?: string; address?: string; lat?: number | null; lng?: number | null; }) {
  const hasAddr = !!address && address !== "—";
  const hasCoords = isFiniteNumber(lat) && isFiniteNumber(lng);
  let src: string | null = null;
  if (hasCoords) {
    const pad = 0.005;
    const bbox = [lng! - pad, lat! - pad, lng! + pad, lat! + pad].join(",");
    src = `https://www.openstreetmap.org/export/embed.html?bbox=${bbox}&layer=mapnik&marker=${lat},${lng}`;
  } else if (hasAddr) {
    src = `https://www.google.com/maps?q=${encodeURIComponent(address!)}&output=embed`;
  }
  return (
    <Section title={title} actions={hasAddr ? <a href={mapsHref(address!)} target="_blank" rel="noreferrer">Open in Maps</a> : null}>
      {src ? (
        <div style={{ borderRadius: 12, overflow: "hidden" }}>
          <iframe title="map" src={src} style={{ width: "100%", height: 260, border: 0 }} loading="lazy" />
        </div>
      ) : (<div style={{ opacity: 0.8 }}>No coordinates or address available.</div>)}
    </Section>
  );
}
EOF

# 3) Formatting helpers
cat > "$lib/format.ts" <<'EOF'
export function titleCase(s?: string | null) {
  if (!s) return "—"; return s.replace(/_/g," ").toLowerCase().replace(/\b\w/g, c=>c.toUpperCase());
}
export function humanize(s?: string | null) { return titleCase(s); }
export function joinAddress(parts: Array<string | null | undefined>) {
  const v = parts.filter(Boolean).join(", "); return v || "—";
}
export function isFiniteNumber(n: any): n is number { return typeof n === "number" && Number.isFinite(n); }
export function moneyCents(n?: number | null) {
  if (n == null) return "—"; const d = Math.round(n)/100;
  try { return d.toLocaleString(undefined,{style:"currency",currency:"USD",maximumFractionDigits:0}); }
  catch { return `$${Math.round(d)}`; }
}
EOF

echo "• Shared components + format helpers present"

# 4) Locate the actual Property route target file
echo "Scanning for Property route/component..."
candidates=$(grep -RIn "card/property" "$root" || true)
echo "$candidates"
# best guess priority
target=""
if echo "$candidates" | grep -q "pages/card/property"; then
  target="$root/pages/card/property/index.tsx"
  # normalize if alt exists
  if ! [ -f "$target" ]; then
    # pick first hit under pages/card/property
    alt=$(echo "$candidates" | grep "pages/card/property" | head -n1 | cut -d: -f1)
    [ -n "$alt" ] && target="$alt"
  fi
fi
# fallback: first TSX file that exports a property page
if [ -z "$target" ]; then
  hit=$(echo "$candidates" | head -n1 | cut -d: -f1)
  [ -n "$hit" ] && target="$hit"
fi
# last resort: conventional path
[ -z "$target" ] && target="$root/pages/card/property/index.tsx"
mkdir -p "$(dirname "$target")"

echo "• Property page target: $target"

# 5) Replace Property page with safe, self-contained implementation
cp "$target" "$target.bak" 2>/dev/null || true
cat > "$target" <<'EOF'
import React from "react";
import { useParams, Link } from "wouter";
import { useQuery } from "@tanstack/react-query";
import { apiGet } from "../../../lib/ecc-api";

import Section from "../../../components/Section";
import { FieldRows } from "../../../components/FieldRows";
import GeoMap from "../../../components/GeoMap";
import { Line, Block } from "../../../components/Skeleton";
import { humanize, joinAddress, moneyCents, isFiniteNumber } from "../../../lib/format";

/* ----------------------------- qs + fetchOne ----------------------------- */
function qs(parts: Record<string, string | number | null | undefined>) {
  return Object.entries(parts)
    .filter(([, v]) => v !== undefined && v !== null && v !== "")
    .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(String(v))}`)
    .join("&");
}
async function fetchOneBy(path: string, field: string, value: string) {
  const url = `${path}?${qs({ select: "*", [field]: `eq.${value}`, limit: 1 })}`;
  const rows = await apiGet(url);
  return Array.isArray(rows) && rows[0] ? rows[0] : null;
}

/* ----------------------------- Data Hooks ----------------------------- */
type PropertyRow = {
  id: number;
  doorloop_id?: string | null;
  street_1?: string | null; city?: string | null; state?: string | null; zip?: string | null;
  type?: string | null; class?: string | null; status?: string | null;
  lat?: number | null; lng?: number | null; latitude?: number | null; longitude?: number | null;
  units_count?: number | null; active_leases_count?: number | null; primary_tenants_count?: number | null;
  owner_id?: number | null;
};
function usePropertyByRouteId(id: string) {
  return useQuery({
    queryKey: ["property", id],
    queryFn: async (): Promise<PropertyRow | null> =>
      (await fetchOneBy("/api/entities/properties", "id", id)) ||
      (await fetchOneBy("/api/entities/properties", "doorloop_id", id)),
  });
}
function usePropertyKpis(p?: PropertyRow | null) {
  return useQuery({
    enabled: !!p?.id,
    queryKey: ["property-kpis", p?.id, p?.doorloop_id],
    queryFn: async () => {
      const units = p?.doorloop_id
        ? await apiGet(`/api/entities/units?${qs({ select: "id,rent_cents,doorloop_property_id", doorloop_property_id: `eq.${p!.doorloop_id}` })}`)
        : await apiGet(`/api/entities/units?${qs({ select: "id,rent_cents,property_id", property_id: `eq.${p!.id}` })}`);
      const leases = p?.id
        ? await apiGet(`/api/entities/leases?${qs({ select: "status,rent_cents,property_id,unit_id,primary_tenant_id,doorloop_id", property_id: `eq.${p!.id}` })}`)
        : [];

      const unitCount = Array.isArray(units) ? units.length : 0;
      const activeLeases = (leases || []).filter((l: any) => (l?.status || "").toLowerCase() === "active").length;
      const occupancyPct = unitCount ? Math.round((Math.min(activeLeases, unitCount) / unitCount) * 100) : null;

      const rents = (arr: any[]) => arr.map((x: any) => x?.rent_cents).filter((v: any) => typeof v === "number");
      const unitRents = rents(units || []), leaseRents = rents(leases || []);
      const avgRentCents = unitRents.length
        ? Math.round(unitRents.reduce((a: number, b: number) => a + b, 0) / unitRents.length)
        : leaseRents.length
        ? Math.round(leaseRents.reduce((a: number, b: number) => a + b, 0) / leaseRents.length)
        : null;

      return { unitCount, activeLeases, occupancyPct, avgRentCents };
    },
  });
}

/* ----------------------------- Skeleton ----------------------------- */
function PropertySkeleton() {
  return (
    <div style={{ display: "grid", gridTemplateColumns: "1fr 340px", gap: 16, alignItems: "start" }}>
      <section className="ecc-object">
        <div className="ecc-header"><Line w={280} /><div /></div>
        <Block h={96} />
      </section>
      <aside style={{ display: "grid", gap: 12 }}>
        <Section title={<Line w={160} />}><Block h={260} /></Section>
        <Section title={<Line w={120} />}><Block h={96} /></Section>
      </aside>
    </div>
  );
}

/* ----------------------------- Page ----------------------------- */
export default function PropertyCardPage() {
  const { id } = useParams<{ id: string }>();
  const q = usePropertyByRouteId(id);

  if (q.isLoading) return <PropertySkeleton />;
  if (q.isError) return <section className="ecc-object">Error loading property.</section>;
  if (!q.data) return <section className="ecc-object">Property not found.</section>;

  const p = q.data;
  const addr = joinAddress([p.street_1, p.city, p.state, p.zip]);
  const type = humanize(p.type), klass = humanize(p.class), status = humanize(p.status);
  const lat = isFiniteNumber(p.lat) ? p.lat : isFiniteNumber(p.latitude) ? p.latitude! : null;
  const lng = isFiniteNumber(p.lng) ? p.lng : isFiniteNumber(p.longitude) ? p.longitude! : null;

  const k = usePropertyKpis(p).data;

  return (
    <div style={{ display: "grid", gridTemplateColumns: "1fr 340px", gap: 16, alignItems: "start" }}>
      <div>
        <section className="ecc-object" style={{ marginBottom: 12 }}>
          <div className="ecc-header">
            <div className="ecc-title" style={{ fontSize: 20, fontWeight: 700 }}>
              {addr !== "—" ? addr : `Property #${p.id}`}
            </div>
            <div className="ecc-actions" style={{ display: "flex", gap: 8 }}>
              <button className="ecc-object" style={{ padding: "8px 12px" }}>Edit</button>
              <button className="ecc-object" style={{ padding: "8px 12px" }}>Export PDF</button>
              <button className="ecc-object" style={{ padding: "8px 12px" }}>New Work Order</button>
            </div>
          </div>

          <div style={{ display: "grid", gridTemplateColumns: "repeat(4, minmax(0,1fr))", gap: 12 }}>
            <div className="ecc-object" style={{ padding: 12 }}>
              <div className="ecc-label">Units</div>
              <div style={{ fontSize: 20, fontWeight: 700 }}>{k?.unitCount ?? p.units_count ?? "—"}</div>
            </div>
            <div className="ecc-object" style={{ padding: 12 }}>
              <div className="ecc-label">Occupancy</div>
              <div style={{ fontSize: 20, fontWeight: 700 }}>{k?.occupancyPct == null ? "—" : `${k.occupancyPct}%`}</div>
            </div>
            <div className="ecc-object" style={{ padding: 12 }}>
              <div className="ecc-label">Active Leases</div>
              <div style={{ fontSize: 20, fontWeight: 700 }}>{k?.activeLeases ?? p.active_leases_count ?? "—"}</div>
            </div>
            <div className="ecc-object" style={{ padding: 12 }}>
              <div className="ecc-label">Avg Rent</div>
              <div style={{ fontSize: 20, fontWeight: 700 }}>{moneyCents(k?.avgRentCents ?? null)}</div>
            </div>
          </div>
        </section>

        <Section title="Property Overview">
          <FieldRows rows={[
            { label: "Address", value: addr },
            { label: "Type", value: type },
            { label: "Class", value: klass },
            { label: "Status", value: status },
            { label: "IDs", value: <>#{p.id}{p.doorloop_id ? <> • DL {p.doorloop_id}</> : null}</> },
          ]}/>
        </Section>

        <Section title="Related">
          <div style={{ display: "flex", flexWrap: "wrap", gap: 8 }}>
            {p.owner_id ? (
              <Link href={`/card/owner/${p.owner_id}`}>
                <a className="ecc-object" style={{ padding: 8 }}>Open Owner</a>
              </Link>
            ) : null}
            <Link href="/portfolio">
              <a className="ecc-object" style={{ padding: 8 }}>Back to Properties</a>
            </Link>
          </div>
        </Section>
      </div>

      <aside style={{ display: "grid", gap: 12 }}>
        <GeoMap title="Location" address={addr} lat={lat} lng={lng} />
        <Section title="Risk Score">
          <div style={{ fontSize: 28, fontWeight: 800 }}>—</div>
          <div className="ecc-label">Key Factors</div>
          <div style={{ opacity: 0.8 }}>None listed.</div>
        </Section>
        <Section title="Key Dates">
          <div style={{ opacity: 0.8 }}>No upcoming events.</div>
        </Section>
      </aside>
    </div>
  );
}
EOF

echo "• Property page replaced: $target"

# 6) Quick verification output
echo
echo "== Verification =="
[ -f "$target" ] && echo "✓ Property page present: $target" || echo "✗ Property page missing"
grep -q -- "--ecc-object-bg: #2A2F38" "$styles/theme.css" && echo "✓ Token color set" || echo "✗ Token missing"
grep -q "ecc-object" "$styles/card-enhancer.css" && echo "✓ Normalizer active" || echo "✗ Normalizer missing"
grep -R "export default function PropertyCardPage" -n "$root" || true
echo "Open a real property route: /card/property/<id> and hard refresh the preview."

What this delivers (now)

A known-good Property page that fetches by id and falls back to doorloop_id, shows hero KPIs, Overview, Related, and Map, all on the light-grey object surface.

Guaranteed presence of Section, FieldRows, Skeleton, GeoMap, tokens, and CSS imports.

Zero reliance on any enhancer or prior Tabs code that could collide.

If you want me to baseline the other four asset cards to this safe pattern immediately (so we stop hitting the same class of bugs), say: “Baseline all asset cards too” and I’ll provide a one-shot shell that finds each real route target and applies the same guardrail pattern.