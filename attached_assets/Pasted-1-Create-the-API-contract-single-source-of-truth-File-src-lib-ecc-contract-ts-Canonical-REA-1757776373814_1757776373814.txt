1) Create the API contract (single source of truth)

File: src/lib/ecc-contract.ts

// Canonical READ endpoints (ordered; first that answers wins)
export const ECC_ENDPOINTS = {
  properties: [
    "/api/entities/properties",     // canonical
    "/api/portfolio/properties",    // view (fallback)
  ],
  units: [
    "/api/entities/units",
    "/api/portfolio/units",
  ],
  leases: ["/api/entities/leases"],
  tenants: ["/api/entities/tenants"],
  owners: ["/api/entities/owners"],
} as const;

// Normalizers (unify field names so the UI never cares which endpoint responded)
export type PropertyNorm = {
  id: number;
  doorloop_id?: string | null;
  street_1?: string | null;
  city?: string | null;
  state?: string | null;
  zip?: string | null;
  type?: string | null;
  class?: string | null;
  status?: string | null;
  lat?: number | null;
  lng?: number | null;
  units_count?: number | null;
  active_leases_count?: number | null;
  primary_tenants_count?: number | null;
  owner_id?: number | null;
};

export function normalizeProperty(r: any): PropertyNorm {
  return {
    id: Number(r?.id),
    doorloop_id: r?.doorloop_id ?? r?.dl_id ?? null,
    street_1: r?.street_1 ?? r?.street ?? r?.address ?? null,
    city: r?.city ?? null,
    state: r?.state ?? null,
    zip: r?.zip ?? r?.postal_code ?? null,
    type: r?.type ?? r?.property_type ?? null,
    class: r?.class ?? r?.property_class ?? null,
    status: r?.status ?? null,
    lat: r?.lat ?? r?.latitude ?? null,
    lng: r?.lng ?? r?.longitude ?? null,
    units_count: r?.units_count ?? null,
    active_leases_count: r?.active_leases_count ?? null,
    primary_tenants_count: r?.primary_tenants_count ?? null,
    owner_id: r?.owner_id ?? null,
  };
}

2) Create resolvers (no more endpoint drift)

File: src/lib/ecc-resolvers.ts

import { useQuery } from "@tanstack/react-query";
import { apiGet } from "./ecc-api";
import { ECC_ENDPOINTS, normalizeProperty, PropertyNorm } from "./ecc-contract";

// tiny qs util (string → string)
export function qs(parts: Record<string, string | number | null | undefined>) {
  return Object.entries(parts)
    .filter(([, v]) => v !== undefined && v !== null && v !== "")
    .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(String(v))}`)
    .join("&");
}

// Try endpoints in order; return first hit
async function fetchOneAcross(endpoints: string[], field: string, value: string) {
  for (const base of endpoints) {
    const url = `${base}?${qs({ select: "*", [field]: `eq.${value}`, limit: 1 })}`;
    try {
      const rows = await apiGet(url);
      if (Array.isArray(rows) && rows[0]) return rows[0];
    } catch {/* keep trying */}
  }
  return null;
}

// PUBLIC: get a normalized Property by route id (id or doorloop_id)
export async function getPropertyByRouteId(routeId: string): Promise<PropertyNorm | null> {
  const raw =
    (await fetchOneAcross(ECC_ENDPOINTS.properties, "id", routeId)) ??
    (await fetchOneAcross(ECC_ENDPOINTS.properties, "doorloop_id", routeId));
  return raw ? normalizeProperty(raw) : null;
}

// PUBLIC: relationships for a property (normalized contract)
export async function getPropertyRelations(p: PropertyNorm) {
  // Units: prefer doorloop_property_id when we have DL id; else property_id
  const unitsUrl = p.doorloop_id
    ? `${ECC_ENDPOINTS.units[0]}?${qs({
        select: "id,unit_number,beds,baths,doorloop_property_id,property_id",
        doorloop_property_id: `eq.${p.doorloop_id}`,
      })}`
    : `${ECC_ENDPOINTS.units[0]}?${qs({
        select: "id,unit_number,beds,baths,property_id",
        property_id: `eq.${p.id}`,
      })}`;
  const units = (await apiGet(unitsUrl)) ?? [];

  const leases = (await apiGet(
    `${ECC_ENDPOINTS.leases[0]}?${qs({
      select: "doorloop_id,property_id,unit_id,primary_tenant_id,start_date,end_date,rent_cents,status",
      property_id: `eq.${p.id}`,
    })}`
  )) ?? [];

  const tenantIds = Array.from(
    new Set(
      (leases as any[])
        .map((l) => l?.primary_tenant_id)
        .filter((v) => typeof v === "number")
    )
  );
  const tenants =
    tenantIds.length > 0
      ? await apiGet(
          `${ECC_ENDPOINTS.tenants[0]}?${qs({
            select: "id,display_name,primary_email,primary_phone",
            id: `in.(${tenantIds.join(",")})`,
          })}`
        )
      : [];

  return { units, leases, tenants };
}

/* ---------------- React Query Hooks ---------------- */

export function usePropertyResolved(routeId: string) {
  return useQuery({
    queryKey: ["property-resolved", routeId],
    queryFn: () => getPropertyByRouteId(routeId),
  });
}

export function usePropertyRelationsResolved(p?: PropertyNorm | null) {
  return useQuery({
    enabled: !!p?.id,
    queryKey: ["property-relations", p?.id, p?.doorloop_id],
    queryFn: () => getPropertyRelations(p as PropertyNorm),
  });
}

3) Replace the Property page to use the resolvers (stable UI)

File: src/pages/card/property/index.tsx
Replace entire file with:

import React from "react";
import { useParams, Link } from "wouter";

import Section from "../../../components/Section";
import { FieldRows } from "../../../components/FieldRows";
import GeoMap from "../../../components/GeoMap";
import { Line, Block } from "../../../components/Skeleton";
import { humanize, joinAddress, moneyCents, isFiniteNumber } from "../../../lib/format";
import { usePropertyResolved, usePropertyRelationsResolved } from "../../../lib/ecc-resolvers";

/* ---------------- Skeleton ---------------- */
function PropertySkeleton() {
  return (
    <div style={{ display:"grid", gridTemplateColumns:"1fr 340px", gap:16, alignItems:"start" }}>
      <section className="ecc-object"><div className="ecc-header"><Line w={280}/><div/></div><Block h={96}/></section>
      <aside style={{ display:"grid", gap:12 }}>
        <Section title={<Line w={160}/>}><Block h={260}/></Section>
        <Section title={<Line w={120}/>}><Block h={96}/></Section>
      </aside>
    </div>
  );
}

/* ---------------- Page ---------------- */
export default function PropertyCardPage() {
  const { id } = useParams<{ id: string }>();
  const qp = usePropertyResolved(id);

  if (qp.isLoading) return <PropertySkeleton />;
  if (qp.isError) return <section className="ecc-object">Error loading property.</section>;
  if (!qp.data) return <section className="ecc-object">Property not found.</section>;

  const p = qp.data;
  const addr = joinAddress([p.street_1, p.city, p.state, p.zip]);
  const type = humanize(p.type), klass = humanize(p.class), status = humanize(p.status);
  const lat = isFiniteNumber(p.lat) ? p.lat : null;
  const lng = isFiniteNumber(p.lng) ? p.lng : null;

  const rel = usePropertyRelationsResolved(p);
  const kpi = (() => {
    const unitCount = p.units_count ?? (rel.data?.units?.length ?? null);
    const leases = rel.data?.leases ?? [];
    const activeLeases = leases.filter((l:any)=>(l?.status||"").toLowerCase()==="active").length || null;
    const occupancyPct = unitCount ? Math.round((Math.min(activeLeases||0, unitCount)/unitCount)*100) : null;

    const rents = (arr:any[]) => arr.map((x:any)=>x?.rent_cents).filter((n:number)=>typeof n==="number");
    const avgRentCents = (() => {
      const lr = rents(leases); if (!lr.length) return null;
      return Math.round(lr.reduce((a:number,b:number)=>a+b,0)/lr.length);
    })();

    return { unitCount, activeLeases, occupancyPct, avgRentCents };
  })();

  return (
    <div style={{ display:"grid", gridTemplateColumns:"1fr 340px", gap:16, alignItems:"start" }}>
      {/* LEFT */}
      <div>
        <section className="ecc-object" style={{ marginBottom:12 }}>
          <div className="ecc-header">
            <div className="ecc-title" style={{ fontSize:20, fontWeight:700 }}>
              {addr !== "—" ? addr : `Property #${p.id}`}
            </div>
            <div className="ecc-actions" style={{ display:"flex", gap:8 }}>
              <button className="ecc-object" style={{ padding:"8px 12px" }}>Edit</button>
              <button className="ecc-object" style={{ padding:"8px 12px" }}>Export PDF</button>
              <button className="ecc-object" style={{ padding:"8px 12px" }}>New Work Order</button>
            </div>
          </div>

          <div style={{ display:"grid", gridTemplateColumns:"repeat(4, minmax(0,1fr))", gap:12 }}>
            <div className="ecc-object" style={{ padding:12 }}>
              <div className="ecc-label">Units</div>
              <div style={{ fontSize:20, fontWeight:700 }}>{kpi.unitCount ?? "—"}</div>
            </div>
            <div className="ecc-object" style={{ padding:12 }}>
              <div className="ecc-label">Occupancy</div>
              <div style={{ fontSize:20, fontWeight:700 }}>{kpi.occupancyPct == null ? "—" : `${kpi.occupancyPct}%`}</div>
            </div>
            <div className="ecc-object" style={{ padding:12 }}>
              <div className="ecc-label">Active Leases</div>
              <div style={{ fontSize:20, fontWeight:700 }}>{kpi.activeLeases ?? "—"}</div>
            </div>
            <div className="ecc-object" style={{ padding:12 }}>
              <div className="ecc-label">Avg Rent</div>
              <div style={{ fontSize:20, fontWeight:700 }}>{moneyCents(kpi.avgRentCents)}</div>
            </div>
          </div>
        </section>

        {/* Tabs-lite: Overview + Relationships */}
        <section className="ecc-object" style={{ padding:8, marginBottom:12 }}>
          <strong>Overview</strong>
        </section>
        <Section title="Property Overview">
          <FieldRows rows={[
            { label:"Address", value: addr },
            { label:"Type", value: type },
            { label:"Class", value: klass },
            { label:"Status", value: status },
            { label:"IDs", value: <>#{p.id}{p.doorloop_id ? <> • DL {p.doorloop_id}</> : null}</> },
          ]}/>
        </Section>

        <section className="ecc-object" style={{ padding:8, marginTop:12, marginBottom:12 }}>
          <strong>Relationships</strong>
        </section>
        <Section title="Units → Active Lease → Primary Tenant">
          {rel.isLoading ? (
            <Block h={96} />
          ) : (rel.data?.units?.length ?? 0) === 0 ? (
            <div style={{ opacity:0.8 }}>No units found for this property.</div>
          ) : (
            <div style={{ display:"grid", gridTemplateColumns:"repeat(auto-fill, minmax(260px,1fr))", gap:12 }}>
              {rel.data!.units.map((u:any) => {
                const lease = (rel.data!.leases as any[]).find(
                  (l) => l?.unit_id === u.id && (l?.status || "").toLowerCase() === "active"
                );
                const tenant = lease
                  ? (rel.data!.tenants as any[]).find((t) => t?.id === lease.primary_tenant_id)
                  : null;
                return (
                  <div key={u.id} className="ecc-object" style={{ padding:12 }}>
                    <div style={{ fontWeight:700, marginBottom:6 }}>Unit {u.unit_number ?? u.id}</div>
                    <div style={{ fontSize:12, opacity:0.8, marginBottom:8 }}>
                      {u.beds ?? "—"} bd • {u.baths ?? "—"} ba
                    </div>
                    <div style={{ display:"grid", gap:6 }}>
                      <div><span className="ecc-label">Active Lease:</span> {lease ? `#${lease.doorloop_id ?? lease.unit_id}` : "None"}</div>
                      <div>
                        <span className="ecc-label">Primary Tenant:</span>{" "}
                        {tenant ? <Link href={`/card/tenant/${tenant.id}`}><a>{tenant.display_name ?? `Tenant #${tenant.id}`}</a></Link> : "—"}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </Section>

        {/* Files & Activity stubs (non-breaking) */}
        <section className="ecc-object" style={{ padding:8, marginTop:12, marginBottom:12 }}>
          <strong>Files</strong>
        </section>
        <Section title="Files">
          <div style={{ display:"flex", gap:8, flexWrap:"wrap" }}>
            <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={()=>alert("Stub: Open DoorLoop files")}>DoorLoop</button>
            <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={()=>alert("Stub: Open Dropbox folder")}>Dropbox</button>
          </div>
        </Section>

        <section className="ecc-object" style={{ padding:8, marginTop:12, marginBottom:12 }}>
          <strong>Activity</strong>
        </section>
        <Section title="Activity">
          <div style={{ opacity:0.8 }}>No activity yet.</div>
        </Section>
      </div>

      {/* RIGHT */}
      <aside style={{ display:"grid", gap:12 }}>
        <GeoMap title="Location" address={addr} lat={lat} lng={lng} />
        <Section title="Risk Score">
          <div style={{ fontSize:28, fontWeight:800 }}>—</div>
          <div className="ecc-label">Key Factors</div>
          <div style={{ opacity:0.8 }}>None listed.</div>
        </Section>
        <Section title="Key Dates">
          <div style={{ opacity:0.8 }}>No upcoming events.</div>
        </Section>
      </aside>
    </div>
  );
}

What this fixes right now

No endpoint drift: Property reads try /api/entities/properties first, then gracefully fall back to /api/portfolio/properties.

Stable relationships: Units, Leases, Tenants fetched with the correct join keys; UI doesn’t guess.

Consistent UI: Light-grey boxes, humanized labels, Map, KPIs, Overview, Relationships, Files, Activity.