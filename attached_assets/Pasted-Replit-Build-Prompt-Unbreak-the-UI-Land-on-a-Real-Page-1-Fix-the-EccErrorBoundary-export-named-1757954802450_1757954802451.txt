Replit Build Prompt — Unbreak the UI + Land on a Real Page
1) Fix the EccErrorBoundary export (named + default)

Open src/components/EccErrorBoundary.tsx and replace the file contents with this:

import React from "react";

type State = { hasError: boolean; msg?: string };

class EccErrorBoundary extends React.Component<React.PropsWithChildren, State> {
  state: State = { hasError: false };

  static getDerivedStateFromError(err: any) {
    return { hasError: true, msg: String(err?.message || err) };
  }

  componentDidCatch(error: any, info: any) {
    // Keep visible in dev
    // eslint-disable-next-line no-console
    console.error("[EccErrorBoundary]", error, info);
    (window as any).__ECC_LAST_ERROR__ = { error, info };
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="p-8">
          <div className="rounded-2xl border border-red-600/40 bg-red-950/20 p-6">
            <h1 className="text-xl font-semibold text-red-300 mb-2">
              Something went wrong
            </h1>
            <p className="text-red-200/80 text-sm mb-4">
              {this.state.msg || "An unexpected error occurred while rendering this page."}
            </p>
            <div className="text-sm text-neutral-400">
              Try: <a className="underline" href="/portfolio/properties">/portfolio/properties</a>
            </div>
          </div>
        </div>
      );
    }
    return this.props.children;
  }
}

export default EccErrorBoundary;
export { EccErrorBoundary };


Why: Vite’s error shows No matching export … for import "EccErrorBoundary". This makes both import EccErrorBoundary … and import { EccErrorBoundary } … valid.

2) Import it as a default (most robust)

Open src/main.tsx and change the import to default:

- import { EccErrorBoundary } from "./components/EccErrorBoundary";
+ import EccErrorBoundary from "./components/EccErrorBoundary";


No other changes in this file.

3) Keep the “no blank page” safety net (if not already in place)

Open src/App.tsx and ensure these routes exist (add if missing; safe change):

import { Route, useLocation } from "wouter";
import React, { useEffect } from "react";

function HomeRedirect() {
  const [, setLocation] = useLocation();
  useEffect(() => { setLocation("/portfolio/properties"); }, [setLocation]);
  return null;
}

function NotFound() {
  return (
    <div className="p-8 text-center">
      <h1 className="text-2xl font-semibold mb-2">Route not found</h1>
      <div className="flex gap-3 justify-center">
        <a className="px-3 py-2 rounded-xl border border-neutral-700" href="/portfolio/properties">Properties</a>
        <a className="px-3 py-2 rounded-xl border border-neutral-700" href="/portfolio/units">Units</a>
        <a className="px-3 py-2 rounded-xl border border-neutral-700" href="/portfolio/leases">Leases</a>
      </div>
    </div>
  );
}

export default function App() {
  return (
    <>
      <Route path="/"><HomeRedirect /></Route>
      {/* …your existing routes… */}
      <Route><NotFound /></Route>
    </>
  );
}


Why: If a route doesn’t match, Wouter renders nothing. This guarantees a real landing page and a visible fallback.

4) (Optional but recommended) Stop Vite scanning a stray HTML entry

If you see Vite mentioning /home/runner/workspace/test.html, rename that file so Vite doesn’t treat it as an entry:

Rename test.html → dev/test.html (or delete if unused)

5) Run & verify

Click Run (keep both WEB and API running).

Hard-refresh the preview tab (disable cache if you can).

Open /portfolio/properties.

Then test a known card route (e.g. /card/property/52).

If anything still fails, the red error card from the boundary will now show you the first error message instead of a blank screen. Send me just that first line and I’ll give you a one-file micro-patch.