Perfect. I’m executing your plan exactly as written—back up the five files, purge legacy rails, and rebuild a single canonical sidebar + clean 2-pane layout. Here are two drop-in options. Use either the Replit Agent brief or the Shell script.

Option A — Replit Agent brief (paste as a single message)

Role: Debugging Specialist, UI-Nav Engineer
Guardrails: wouter-only; do not touch routes/pages/data/theme tokens; CSS must be scoped to .sidebar; back up before replace.

BACKUP (create *.bak next to each file):

src/components/layout/Layout.tsx

src/components/layout/navConfig.ts

src/components/Sidebar.tsx

src/styles/_ecc-override.css

src/main.tsx

CHANGESET (idempotent):

Ensure wouter is installed.

Move/archive any non-canonical “sidebar/side/nav” components & CSS (except _ecc-override.css) into .archive/legacy-<stamp>/.

Replace the five files below with the provided canonical versions:

src/components/layout/Layout.tsx — clean 2-pane layout that mounts exactly one <Sidebar />.

src/components/layout/navConfig.ts — sections for Dashboard, Portfolio V3, Cards, Operations.

src/components/Sidebar.tsx — wouter-only, data-ecc="primary", collapse/persist, independent scroll, active highlight, inline visited-link fix.

src/styles/_ecc-override.css — fixed rail, hidden scrollbar, collapsed icon-only mode, kill-switch: .sidebar:not([data-ecc="primary"]) { display:none !important; }, global left padding via --ecc-sidepad.

src/main.tsx — import order: theme.css → app.css → _ecc-override.css; no router wrappers.

Run dev server and verify:

Only one rail visible, content padded ~280px expanded / ~76px collapsed.

Active highlight works; pin/collapse persists; scrollbar hidden.

ROLLBACK: unzip the most recent .archive/ecc-snapshot-*.zip to the project root.

Option B — Replit Shell (paste all at once)
set -e

APP_ARCHIVE_DIR=".archive"
STAMP="$(date +%Y%m%d-%H%M%S)"
SNAP="${APP_ARCHIVE_DIR}/ecc-snapshot-${STAMP}.zip"
LEGACY_DIR="${APP_ARCHIVE_DIR}/legacy-${STAMP}"

echo "==> Snapshot → ${SNAP}"
mkdir -p "${APP_ARCHIVE_DIR}"
zip -qr "${SNAP}" . -x "node_modules/*" -x ".git/*"
echo "Snapshot complete."

echo "==> Ensure wouter"
npm pkg get dependencies.wouter >/dev/null 2>&1 || npm i wouter

echo "==> Back up target files"
for f in \
  src/components/layout/Layout.tsx \
  src/components/layout/navConfig.ts \
  src/components/Sidebar.tsx \
  src/styles/_ecc-override.css \
  src/main.tsx \
; do
  [ -f "$f" ] && cp "$f" "$f.bak" || true
done

echo "==> Archive legacy sidebar/nav components & CSS (non-canonical)"
mkdir -p "${LEGACY_DIR}"
# components
rg -n --glob 'src/**/{*Side*,*Nav*,*sidenav*,*leftnav*}.tsx' -g '!src/components/Sidebar.tsx' -g '!node_modules' -g '!**/*.bak' | cut -d: -f1 | sort -u | while read -r f; do
  [ -f "$f" ] || continue
  mkdir -p "${LEGACY_DIR}/$(dirname "$f")"; mv "$f" "${LEGACY_DIR}/${f}"; echo " archived: $f"
done
# css
rg -n --glob 'src/**/*.css' 'sidebar' -g '!src/styles/_ecc-override.css' -g '!node_modules' | cut -d: -f1 | sort -u | while read -r f; do
  [ -f "$f" ] || continue
  mkdir -p "${LEGACY_DIR}/$(dirname "$f")"; mv "$f" "${LEGACY_DIR}/${f}"; echo " archived CSS: $f"
done

echo "==> Write Layout.tsx"
mkdir -p src/components/layout src/styles
cat > src/components/layout/Layout.tsx <<'TSX'
import React from "react";
import Sidebar from "@/components/Sidebar";

/** Canonical 2-pane layout: one fixed rail + main content */
export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <div className="ecc-layout" data-ecc="layout">
      <Sidebar />
      <main className="ecc-main" data-ecc="main" role="main" style={{ minHeight: "100vh" }}>
        {children}
      </main>
    </div>
  );
}
TSX

echo "==> Write navConfig.ts"
cat > src/components/layout/navConfig.ts <<'TS'
export type Leaf = { label: string; to: string };
export type Group = { label: string; children: Leaf[] };
export type Item = Leaf | Group;
export type Section = { title?: string; items: Item[] };

const sections: Section[] = [
  { title: "Dashboard", items: [{ label: "Home", to: "/dashboard" }] },
  {
    title: "Portfolio V3",
    items: [
      { label: "Properties", to: "/portfolio/properties" },
      { label: "Units", to: "/portfolio/units" },
      { label: "Leases", to: "/portfolio/leases" },
      { label: "Tenants", to: "/portfolio/tenants" },
      { label: "Owners", to: "/portfolio/owners" },
    ],
  },
  {
    title: "Cards",
    items: [
      { label: "Overview", to: "/cards/overview" },
      { label: "Delinquencies", to: "/cards/delinquencies" },
      { label: "Vacancy", to: "/cards/vacancy" },
    ],
  },
  {
    title: "Operations",
    items: [
      { label: "Accounting", to: "/operations/accounting" },
      { label: "Leasing", to: "/operations/leasing" },
      { label: "Maintenance", to: "/operations/maintenance" },
      { label: "Marketing", to: "/operations/marketing" },
    ],
  },
];

export { sections };
export default sections;
TS

echo "==> Write Sidebar.tsx"
cat > src/components/Sidebar.tsx <<'TSX'
import React, { useEffect, useMemo, useState } from "react";
import { Link, useLocation } from "wouter";

type Leaf = { label: string; to: string };
type Group = { label?: string; children: Leaf[] };
type Item = Leaf | Group;
type Section = { title?: string; items: Item[] };
const isGroup = (i: Item): i is Group => (i as Group)?.children !== undefined;

import * as Nav from "@/components/layout/navConfig";
const RAW: any = (Nav as any).sections ?? (Nav as any).default ?? [];
const DEFAULT_SECTIONS: Section[] = [{ title: "Dashboard", items: [{ label: "Home", to: "/dashboard" }] }];
const SECTIONS: Section[] = Array.isArray(RAW) && RAW.length ? RAW : DEFAULT_SECTIONS;

export default function Sidebar() {
  const [location] = useLocation();
  const current = location || "/";

  const [collapsed, setCollapsed] = useState<boolean>(() => {
    try { return localStorage.getItem("ecc:nav:collapsed") === "1"; } catch { return false; }
  });
  useEffect(() => {
    try { localStorage.setItem("ecc:nav:collapsed", collapsed ? "1" : "0"); } catch {}
  }, [collapsed]);

  // reserve body space so content never slides under the rail
  useEffect(() => {
    document.documentElement.setAttribute("data-sidebar-mounted", "1");
    const w = getComputedStyle(document.documentElement).getPropertyValue("--ecc-sidebar-w").trim() || "280px";
    const wc = getComputedStyle(document.documentElement).getPropertyValue("--ecc-sidebar-w-collapsed").trim() || "76px";
    document.documentElement.style.setProperty("--ecc-sidepad", collapsed ? wc : w);
  }, [collapsed]);

  const initialExpanded = useMemo(() => {
    const map = new Map<string, boolean>();
    SECTIONS.forEach((section, s) => {
      (section.items || []).forEach((it, i) => {
        if (isGroup(it)) {
          const open = (it.children || []).some((c) => current.startsWith(c.to));
          map.set(`${s}:${i}`, open);
        }
      });
    });
    return map;
  }, [current]);
  const [expanded, setExpanded] = useState(initialExpanded);
  useEffect(() => setExpanded(initialExpanded), [initialExpanded]);

  const toggle = (k: string) => setExpanded((p) => new Map(p).set(k, !p.get(k)));

  return (
    <aside className={`sidebar ${collapsed ? "collapsed" : ""}`} data-ecc="primary" aria-label="Primary">
      <div className="brand">
        <img src="/logo.png" alt="Altus" className="brand-logo" onError={(e) => { (e.currentTarget as HTMLImageElement).style.display = "none"; }} />
        <button className="pinBtn" onClick={() => setCollapsed(!collapsed)}>{collapsed ? "Unpin" : "Pin"}</button>
      </div>

      <div className="sidebar-scroll">
        <nav role="navigation" aria-label="Main">
          {SECTIONS.map((section, sIdx) => (
            <div className="section" key={section.title || sIdx}>
              {section.title && <div className="section-title">{section.title}</div>}
              {(section.items || []).map((it, iIdx) => {
                const key = `${sIdx}:${iIdx}`;
                if (isGroup(it)) {
                  const open = expanded.get(key) ?? false;
                  return (
                    <div className="group" key={key}>
                      <button type="button" className="nav-row group-row" aria-expanded={open} onClick={() => toggle(key)}>
                        <span className="icon">•</span>
                        <span className="label">{(it as any).label ?? "Group"}</span>
                        <span className="expand" aria-hidden>▾</span>
                      </button>
                      <div className="leafList" hidden={!open}>
                        {(it.children || []).map((ch) => {
                          const active = current.startsWith(ch.to);
                          return (
                            <Link key={ch.to} href={ch.to} className={`nav-row leaf ${active ? "active" : ""}`} aria-current={active ? "page" : undefined}>
                              <span className="icon">•</span>
                              <span className="label">{ch.label}</span>
                              <span className="expand" />
                            </Link>
                          );
                        })}
                      </div>
                    </div>
                  );
                }
                const leaf = it as Leaf;
                const active = current.startsWith(leaf.to);
                return (
                  <Link key={leaf.to} href={leaf.to} className={`nav-row leaf ${active ? "active" : ""}`} aria-current={active ? "page" : undefined}>
                    <span className="icon">•</span>
                    <span className="label">{leaf.label}</span>
                    <span className="expand" />
                  </Link>
                );
              })}
            </div>
          ))}
        </nav>
      </div>

      {/* visited-link kill inside sidebar only */}
      <style>{`
        .sidebar[data-ecc="primary"] a,
        .sidebar[data-ecc="primary"] a:link,
        .sidebar[data-ecc="primary"] a:visited,
        .sidebar[data-ecc="primary"] a:active { color: var(--ecc-text) !important; text-decoration: none !important; }
      `}</style>
    </aside>
  );
}
TSX

echo "==> Write _ecc-override.css"
cat > src/styles/_ecc-override.css <<'CSS'
:root{
  --ecc-sidebar-w: 280px;
  --ecc-sidebar-w-collapsed: 76px;
  --ecc-bg:#0e0f11; --ecc-panel:#121316; --ecc-seam:#222428;
  --ecc-text:#d7d9dd; --ecc-dim:#a6a8ac; --ecc-gold:#ffd400;
}

/* Reserve rail space globally */
html[data-sidebar-mounted="1"] body{
  padding-left:var(--ecc-sidepad, var(--ecc-sidebar-w)) !important;
  box-sizing:border-box;
}

.sidebar{
  position:fixed; top:0; left:0; height:100vh; z-index:50;
  width:var(--ecc-sidebar-w);
  background:var(--ecc-panel);
  color:var(--ecc-text);
  display:flex; flex-direction:column;
  border-right:1px solid var(--ecc-seam);
}
.sidebar.collapsed{ width:var(--ecc-sidebar-w-collapsed); }

.sidebar .brand{ display:flex; align-items:center; gap:10px; padding:14px 12px 8px; }
.sidebar .brand-logo{ height:42px; width:auto; }
.sidebar .pinBtn{ margin-left:auto; font-size:12px; border:1px solid var(--ecc-seam); background:transparent; color:var(--ecc-dim); border-radius:10px; padding:4px 10px; }
.sidebar.collapsed .pinBtn{ font-size:10px; padding:2px 8px; }

.sidebar .sidebar-scroll{
  height:calc(100vh - 70px);
  overflow-y:auto; -webkit-overflow-scrolling:touch; overscroll-behavior:contain;
  scrollbar-width:none;
}
.sidebar .sidebar-scroll::-webkit-scrollbar{ width:0; height:0; }

.sidebar .section{ padding:6px 8px; }
.sidebar .section-title{ color:var(--ecc-dim); font-size:12px; letter-spacing:.08em; padding:8px 10px 6px; }

.sidebar .nav-row{
  display:grid; grid-template-columns:18px minmax(0,1fr) auto;
  align-items:center; column-gap:10px; padding:8px 10px;
  border-radius:10px; text-decoration:none; color:inherit;
}
.sidebar .nav-row:hover{ background:#17181b; }
.sidebar .leaf.active{ background:#17181b; box-shadow:inset 0 0 0 2px var(--ecc-gold); }
.sidebar .icon{ width:18px; min-width:18px; text-align:center; color:var(--ecc-gold); }
.sidebar .label{ white-space:nowrap; overflow:hidden; text-overflow:ellipsis; }
.sidebar .expand{ opacity:.5; }

.sidebar .group-row{ width:100%; text-align:left; background:transparent; border:0; color:inherit; }
.sidebar .leafList{ padding-left:20px; }

.sidebar.collapsed .nav-row{ grid-template-columns:18px; justify-items:center; padding-left:10px; padding-right:8px; }
.sidebar.collapsed .label,
.sidebar.collapsed .expand,
.sidebar.collapsed .section-title{ display:none; }
.sidebar.collapsed .leafList{ display:none; }

/* Kill any non-canonical rails */
.sidebar:not([data-ecc="primary"]) { display:none !important; visibility:hidden !important; }

/* Main content padding */
.ecc-main{ padding:24px; }
CSS

echo "==> Ensure import order in main.tsx"
cat > src/main.tsx <<'TS'
import "@/styles/theme.css";
import "@/styles/app.css";
import "@/styles/_ecc-override.css";

if (import.meta.env.DEV) {
  import("@/debug/crash-overlay");
}

import React from "react";
import ReactDOM from "react-dom/client";
import App from "@/App";

document.documentElement.setAttribute("data-theme", "altus");

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
TS

echo "==> Dev server (ignore if already running)"
npm run dev --silent >/dev/null 2>&1 || true

echo "✅ Purge + Rebuild done. Refresh your app."
echo "   Archived legacy files → ${LEGACY_DIR}"

Rollback (one command)
unzip -o .archive/ecc-snapshot-*.zip -d .


This is a true “nuke & pave” under guardrails—exactly your PLAN, with backups and a clean 2-pane rebuild so the ghost rail and 3-column drift are gone.