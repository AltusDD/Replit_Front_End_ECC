PROMPT FOR REPLIT — “ECC App: Startup Unblocker (Cards-Only)”

You are the Build Agent. Apply these steps exactly. Don’t touch schemas, card logic, or ports. Stop on the first error and print it.

0) Guardrails

Keep WEB on 5173 and API on 8787.

Scope of edits: package.json, src/components/layout/navConfig.ts, .replit (run config only).

1) Fix dev script (pnpm→npm) so “Run” actually launches both servers

Open package.json and set these scripts exactly (only this section):

{
  "scripts": {
    "guardrail": "node scripts/guardrail-check.mjs",
    "dev:web": "vite",
    "dev:api": "tsx server/index.ts",
    "dev": "npm run guardrail && concurrently -k -n WEB,API -c blue,magenta \"npm:dev:web\" \"npm:dev:api\""
  }
}


If concurrently, tsx, or vite aren’t installed, run npm i after saving.

2) Provide the missing navigation config the Sidebar expects

Create src/components/layout/navConfig.ts (new file) with a compat layer that satisfies either default or named imports, and won’t crash if routes are absent. Do not import app code here.

// src/components/layout/navConfig.ts
// Minimal, contract-safe nav model that Sidebar can consume.
// Exports both `default` and named to satisfy any import style.

export type NavLink = {
  label: string;
  to: string;
  testid?: string;
};

export type NavSection = {
  title: string;
  items: NavLink[];
};

export const navSections: NavSection[] = [
  {
    title: "Portfolio",
    items: [
      { label: "Dashboard", to: "/dashboard", testid: "nav-dashboard" },
      { label: "Properties", to: "/portfolio/properties", testid: "nav-properties" },
      { label: "Units", to: "/portfolio/units", testid: "nav-units" },
      { label: "Leases", to: "/portfolio/leases", testid: "nav-leases" },
      { label: "Tenants", to: "/portfolio/tenants", testid: "nav-tenants" },
      { label: "Owners", to: "/portfolio/owners", testid: "nav-owners" }
    ],
  },
  {
    title: "Cards",
    items: [
      // These are examples; the pages resolve the actual IDs.
      { label: "Property Card", to: "/card/property/1", testid: "nav-card-property" },
      { label: "Unit Card", to: "/card/unit/1", testid: "nav-card-unit" },
      { label: "Lease Card", to: "/card/lease/1", testid: "nav-card-lease" },
      { label: "Tenant Card", to: "/card/tenant/1", testid: "nav-card-tenant" },
      { label: "Owner Card", to: "/card/owner/1", testid: "nav-card-owner" }
    ],
  },
];

// Some code prefers a flat list; provide both shapes:
export const navItems: NavLink[] = navSections.flatMap(s => s.items);

// Default export for Sidebar variants that expect default:
const navConfig = { sections: navSections, items: navItems };
export default navConfig;


This file only defines data. No side effects. If the Sidebar imports default or named, this will satisfy both.

3) Make the green Run button start both servers (and keep them up)

Create/update .replit at repo root:

run = "bash -lc 'npm i --silent && npm run dev'"
entrypoint = "package.json"


This ensures Replit installs deps if needed and runs the long-lived npm run dev (WEB+API) in the foreground so Replit doesn’t kill them.

4) Clean caches, start, and verify

In the shell:

# kill any strays
pkill -f "tsx server/index.ts" || true
pkill -f vite || true
rm -rf .vite node_modules/.vite dist .cache .parcel-cache 2>/dev/null || true

# start from the green Run button (not a workflow)


Expected console:

[EnvLock] { … } (your alias-aware env summary)

[Dev API] Listening on :8787

VITE v5.x ready ➜ Local: http://localhost:5173/

Sanity checks (leave Run open):

# in another shell
curl -s http://localhost:8787/api/health
curl -s http://localhost:8787/api/diag/env | jq .

# if you added the diag IDs route already:
curl -s http://localhost:8787/api/rpc/diag/ids | jq . || curl -s http://localhost:8787/api/diag/ids | jq .


Open the app preview and confirm the Sidebar renders (no import error) and cards load.

5) Leave dashboards/tables alone (for now)

You identified placeholders in src/features/dashboard/hooks/useDashboardData.ts. They are not needed to boot the app or render the asset cards. Do not change them in this pass. We’ll request a separate, precise audit/fix for tables later.

6) If anything still fails at startup

Copy the last 50 lines from the Run console,

Or paste the first thrown stack trace (stop at first error),

And I’ll give you a one-file micro-patch with zero drift.

Why this solves your blockers

The pnpm→npm fix makes concurrently actually spawn WEB+API, matching your environment.

The navConfig.ts file resolves the missing import so the build doesn’t die at compile time.

.replit ensures Replit keeps the processes alive (Workflows are ephemeral; Run is persistent).

Once you see the three expected console lines and /api/health responds, you’re back in business.