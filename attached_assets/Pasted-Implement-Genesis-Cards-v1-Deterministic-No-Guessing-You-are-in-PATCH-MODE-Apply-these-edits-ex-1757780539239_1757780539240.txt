Implement Genesis Cards v1 (Deterministic, No-Guessing)

You are in PATCH MODE. Apply these edits exactly. If a file exists, overwrite it. After patching, run the verification block at the end and return the outputs. Do not “improve” beyond what’s written.

0) Canonical Contracts (types + endpoints + relationship rules)

File: src/lib/ecc-contract.ts (overwrite)

/** Canonical ECC Read Endpoints (no guessing) */
export const ECC_API = {
  entities: {
    properties: "/api/entities/properties",
    units: "/api/entities/units",
    leases: "/api/entities/leases",
    tenants: "/api/entities/tenants",
    owners: "/api/entities/owners",
  },
} as const;

/** Canonical shapes (only fields we actually use in UI) */
export type Property = {
  id: number;
  doorloop_id?: string | null;
  street_1?: string | null;
  city?: string | null;
  state?: string | null;
  zip?: string | null;
  type?: string | null;
  class?: string | null;
  status?: string | null;
  lat?: number | null;
  lng?: number | null;
  owner_id?: number | null;
};
export type Unit = {
  id: number;
  doorloop_id?: string | null;
  doorloop_property_id?: string | null; // join to Property via doorloop_id
  property_id?: number | null;          // optional backfill
  unit_number?: string | null;
  beds?: number | null;
  baths?: number | null;
  sqft?: number | null;
  rent_cents?: number | null;
  status?: string | null;
};
export type Lease = {
  doorloop_id: string;
  property_id: number;
  unit_id: number | null;
  primary_tenant_id: number | null;
  start_date?: string | null;
  end_date?: string | null;
  rent_cents?: number | null;
  status?: string | null;
};
export type Tenant = {
  id: number;
  doorloop_id?: string | null;
  display_name?: string | null;
  primary_email?: string | null;
  primary_phone?: string | null;
};
export type Owner = {
  id: number;
  doorloop_id?: string | null;
  display_name?: string | null;
  primary_email?: string | null;
  primary_phone?: string | null;
};

/** Relationship contract (do not change) */
export const ECC_REL = {
  property_to_units: "units.doorloop_property_id === properties.doorloop_id",
  property_to_leases: "leases.property_id === properties.id",
  unit_to_active_lease: "leases.unit_id === units.id AND status='active'",
  lease_to_primary_tenant: "tenants.id === leases.primary_tenant_id",
  owner_to_properties: "properties.owner_id === owners.id",
} as const;

1) Deterministic Resolvers (React Query, no raw fetch in pages)

File: src/lib/ecc-resolvers.ts (overwrite)

import { useQuery } from "@tanstack/react-query";
import { apiGet } from "./ecc-api";
import { ECC_API, Property, Unit, Lease, Tenant, Owner } from "./ecc-contract";

/** qs helper */
function qs(parts: Record<string,string|number|null|undefined>) {
  return Object.entries(parts)
    .filter(([,v])=>v!==undefined&&v!==null&&v!=="")
    .map(([k,v])=>`${encodeURIComponent(k)}=${encodeURIComponent(String(v))}`).join("&");
}

/** strict fetch-one by ECC id (no fallbacks, no _relations) */
async function fetchOneById<T>(endpoint:string, id:string|number): Promise<T|null> {
  const url = `${endpoint}?${qs({ select:"*", id:`eq.${id}`, limit:1 })}`;
  const rows = await apiGet(url);
  return Array.isArray(rows) && rows[0] ? rows[0] as T : null;
}

/** collections per contract */
async function unitsForProperty(p: Property): Promise<Unit[]> {
  if (!p.doorloop_id) return [];
  const url = `${ECC_API.entities.units}?${qs({
    select:"id,doorloop_id,doorloop_property_id,property_id,unit_number,beds,baths,sqft,rent_cents,status",
    doorloop_property_id:`eq.${p.doorloop_id}`
  })}`;
  const rows = await apiGet(url);
  return Array.isArray(rows) ? rows as Unit[] : [];
}
async function leasesForProperty(p: Property): Promise<Lease[]> {
  const url = `${ECC_API.entities.leases}?${qs({
    select:"doorloop_id,property_id,unit_id,primary_tenant_id,start_date,end_date,rent_cents,status",
    property_id:`eq.${p.id}`
  })}`;
  const rows = await apiGet(url);
  return Array.isArray(rows) ? rows as Lease[] : [];
}
async function tenantsByIds(ids:number[]): Promise<Tenant[]> {
  if (!ids.length) return [];
  const url = `${ECC_API.entities.tenants}?${qs({
    select:"id,doorloop_id,display_name,primary_email,primary_phone",
    id:`in.(${ids.join(",")})`
  })}`;
  const rows = await apiGet(url);
  return Array.isArray(rows) ? rows as Tenant[] : [];
}
async function propertiesByOwner(ownerId:number): Promise<Property[]> {
  const url = `${ECC_API.entities.properties}?${qs({
    select:"id,doorloop_id,street_1,city,state,zip,type,class,status,lat,lng,owner_id",
    owner_id:`eq.${ownerId}`
  })}`;
  const rows = await apiGet(url);
  return Array.isArray(rows) ? rows as Property[] : [];
}

/* --------- public hooks (ID = ECC internal id) --------- */
export function usePropertyById(id:string) {
  return useQuery({ queryKey:["prop", id], queryFn:()=>fetchOneById<Property>(ECC_API.entities.properties, id) });
}
export function useUnitById(id:string) {
  return useQuery({ queryKey:["unit", id], queryFn:()=>fetchOneById<Unit>(ECC_API.entities.units, id) });
}
export function useLeaseById(id:string) {
  return useQuery({ queryKey:["lease", id], queryFn:()=>fetchOneById<Lease>(ECC_API.entities.leases, id) });
}
export function useTenantById(id:string) {
  return useQuery({ queryKey:["tenant", id], queryFn:()=>fetchOneById<Tenant>(ECC_API.entities.tenants, id) });
}
export function useOwnerById(id:string) {
  return useQuery({ queryKey:["owner", id], queryFn:()=>fetchOneById<Owner>(ECC_API.entities.owners, id) });
}

/* --------- relationship hooks (explicit joins) --------- */
export function usePropertyRelations(p?:Property|null) {
  return useQuery({
    enabled: !!p?.id,
    queryKey:["prop-rel", p?.id, p?.doorloop_id],
    queryFn: async ()=>{
      if (!p) return { units:[], leases:[], tenants:[] as Tenant[] };
      const [units, leases] = await Promise.all([unitsForProperty(p), leasesForProperty(p)]);
      const tenantIds = Array.from(new Set(leases.map(l=>l.primary_tenant_id).filter((v):v is number=>typeof v==="number")));
      const tenants = await tenantsByIds(tenantIds);
      return { units, leases, tenants };
    }
  });
}
export function useUnitRelations(u?:Unit|null) {
  return useQuery({
    enabled: !!u?.id,
    queryKey:["unit-rel", u?.id, u?.doorloop_property_id],
    queryFn: async ()=>{
      if (!u) return { property:null as Property|null, activeLease:null as Lease|null, tenant:null as Tenant|null };
      let property: Property|null = null;
      if (u.doorloop_property_id) {
        const url = `${ECC_API.entities.properties}?${qs({
          select:"id,doorloop_id,street_1,city,state,zip,type,class,status,lat,lng,owner_id",
          doorloop_id:`eq.${u.doorloop_property_id}`, limit:1
        })}`;
        const rows = await apiGet(url);
        property = Array.isArray(rows)&&rows[0]? rows[0] as Property : null;
      }
      const leaseUrl = `${ECC_API.entities.leases}?${qs({
        select:"doorloop_id,property_id,unit_id,primary_tenant_id,start_date,end_date,rent_cents,status",
        unit_id:`eq.${u.id}`, status:"eq.active", limit:1
      })}`;
      const lr = await apiGet(leaseUrl);
      const activeLease: Lease|null = Array.isArray(lr)&&lr[0]? lr[0] as Lease : null;

      let tenant: Tenant|null = null;
      if (activeLease?.primary_tenant_id) {
        const tUrl = `${ECC_API.entities.tenants}?${qs({
          select:"id,doorloop_id,display_name,primary_email,primary_phone",
          id:`eq.${activeLease.primary_tenant_id}`, limit:1
        })}`;
        const tr = await apiGet(tUrl);
        tenant = Array.isArray(tr)&&tr[0]? tr[0] as Tenant : null;
      }
      return { property, activeLease, tenant };
    }
  });
}
export function useOwnerRelations(o?:Owner|null) {
  return useQuery({
    enabled: !!o?.id,
    queryKey:["owner-rel", o?.id],
    queryFn: async ()=>({ properties: o ? await propertiesByOwner(o.id) : [] })
  });
}
export function useLeaseRelations(l?:Lease|null) {
  return useQuery({
    enabled: !!l,
    queryKey:["lease-rel", l?.property_id, l?.unit_id, l?.primary_tenant_id],
    queryFn: async ()=>{
      if (!l) return { property:null as Property|null, unit:null as Unit|null, tenant:null as Tenant|null };
      const [property, unit, tenant] = await Promise.all([
        fetchOneById<Property>(ECC_API.entities.properties, l.property_id),
        l.unit_id ? fetchOneById<Unit>(ECC_API.entities.units, l.unit_id) : Promise.resolve(null),
        l.primary_tenant_id ? fetchOneById<Tenant>(ECC_API.entities.tenants, l.primary_tenant_id) : Promise.resolve(null),
      ]);
      return { property, unit, tenant };
    }
  });
}
export function useTenantRelations(t?:Tenant|null) {
  return useQuery({
    enabled: !!t?.id,
    queryKey:["tenant-rel", t?.id],
    queryFn: async ()=>{
      if (!t) return { leases:[] as Lease[], properties:[] as Property[], units:[] as Unit[] };
      const leasesUrl = `${ECC_API.entities.leases}?${qs({
        select:"doorloop_id,property_id,unit_id,primary_tenant_id,start_date,end_date,rent_cents,status",
        primary_tenant_id:`eq.${t.id}`
      })}`;
      const leases = await apiGet(leasesUrl) as Lease[] || [];
      const propIds = Array.from(new Set(leases.map(l=>l.property_id).filter(Boolean))) as number[];
      const unitIds = Array.from(new Set(leases.map(l=>l.unit_id).filter((v):v is number=>typeof v==="number")));
      const props = propIds.length
        ? await apiGet(`${ECC_API.entities.properties}?${qs({ select:"id,doorloop_id,street_1,city,state,zip,type,class,status,lat,lng,owner_id", id:`in.(${propIds.join(",")})` })}`)
        : [];
      const units = unitIds.length
        ? await apiGet(`${ECC_API.entities.units}?${qs({ select:"id,doorloop_id,doorloop_property_id,property_id,unit_number,beds,baths,sqft,rent_cents,status", id:`in.(${unitIds.join(",")})` })}`)
        : [];
      return { leases, properties: props as Property[], units: units as Unit[] };
    }
  });
}

2) Tabs & Sections (Genesis v1 shells, asset-specific)

We’ll put deterministic tabs into each page using a tiny local tab helper to avoid naming collisions. (No maps except Property.)

2a) Property page

File: src/pages/card/property/index.tsx (overwrite)

import React, { useState, useMemo } from "react";
import { useParams, Link } from "wouter";
import Section from "../../../components/Section";
import { FieldRows } from "../../../components/FieldRows";
import GeoMap from "../../../components/GeoMap";
import { Line, Block } from "../../../components/Skeleton";
import { humanize, joinAddress, moneyCents, isFiniteNumber } from "../../../lib/format";
import { usePropertyById, usePropertyRelations } from "../../../lib/ecc-resolvers";

/* tiny local tabs (no collisions) */
type PTabKey = "overview"|"relationships"|"financials"|"legal"|"files"|"marketing"|"activity";
const PTABS: {key:PTabKey; label:string}[] = [
  { key:"overview", label:"Overview" },
  { key:"relationships", label:"Relationships" },
  { key:"financials", label:"Financials" },
  { key:"legal", label:"Legal" },
  { key:"files", label:"Files" },
  { key:"marketing", label:"Marketing" },
  { key:"activity", label:"Activity" },
];

function Skeleton() {
  return (
    <div style={{ display:"grid", gridTemplateColumns:"1fr 340px", gap:16 }}>
      <section className="ecc-object"><div className="ecc-header"><Line w={240}/></div><Block h={96}/></section>
      <aside style={{ display:"grid", gap:12 }}>
        <Section title={<Line w={160}/>}><Block h={260}/></Section>
        <Section title={<Line w={120}/>}><Block h={96}/></Section>
      </aside>
    </div>
  );
}

export default function PropertyCardPage(){
  const { id } = useParams<{ id:string }>();
  const q = usePropertyById(id);
  if (q.isLoading) return <Skeleton/>;
  if (q.isError) return <section className="ecc-object">Error loading property.</section>;
  if (!q.data) return <section className="ecc-object">Property not found. (ECC id expected)</section>;

  const p = q.data;
  const rel = usePropertyRelations(p);
  const addr = joinAddress([p.street_1, p.city, p.state, p.zip]);
  const lat = isFiniteNumber(p.lat) ? p.lat : null;
  const lng = isFiniteNumber(p.lng) ? p.lng : null;

  const leases = rel.data?.leases || [];
  const unitCount = rel.data?.units?.length ?? null;
  const activeLeases = leases.filter(l => (l.status||"").toLowerCase()==="active").length || null;
  const occ = unitCount ? Math.round((Math.min(activeLeases||0, unitCount)/unitCount)*100) : null;
  const avgRentCents = useMemo(()=>{
    const nums = leases.map(l=>l.rent_cents).filter((n):n is number=>typeof n==="number");
    return nums.length ? Math.round(nums.reduce((a,b)=>a+b,0)/nums.length) : null;
  }, [leases]);

  const [tab, setTab] = useState<PTabKey>("overview");

  return (
    <div style={{ display:"grid", gridTemplateColumns:"1fr 340px", gap:16 }}>
      <div>
        {/* Header + KPIs */}
        <section className="ecc-object" style={{ marginBottom:12 }}>
          <div className="ecc-header">
            <div className="ecc-title" style={{ fontSize:20, fontWeight:700 }}>{addr!=="—"?addr:`Property #${p.id}`}</div>
            <div className="ecc-actions" style={{ display:"flex", gap:8 }}>
              <button className="ecc-object" style={{ padding:"8px 12px" }}>Edit</button>
              <button className="ecc-object" style={{ padding:"8px 12px" }}>Export PDF</button>
              <button className="ecc-object" style={{ padding:"8px 12px" }}>New Work Order</button>
            </div>
          </div>
          <div style={{ display:"grid", gridTemplateColumns:"repeat(4, minmax(0,1fr))", gap:12 }}>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Units</div><div style={{ fontSize:20, fontWeight:700 }}>{unitCount ?? "—"}</div></div>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Occupancy</div><div style={{ fontSize:20, fontWeight:700 }}>{occ==null?"—":`${occ}%`}</div></div>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Active Leases</div><div style={{ fontSize:20, fontWeight:700 }}>{activeLeases ?? "—"}</div></div>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Avg Rent</div><div style={{ fontSize:20, fontWeight:700 }}>{moneyCents(avgRentCents)}</div></div>
          </div>
        </section>

        {/* Tab header */}
        <section className="ecc-object" style={{ padding:8, marginBottom:12 }}>
          <div style={{ display:"flex", gap:8, flexWrap:"wrap" }}>
            {PTABS.map(t=>(
              <button key={t.key}
                onClick={()=>setTab(t.key)}
                className="ecc-object"
                style={{ padding:"6px 10px", fontWeight: tab===t.key ? 700 : 500 }}>
                {t.label}
              </button>
            ))}
          </div>
        </section>

        {/* Tab panels */}
        {tab==="overview" && (
          <Section title="Overview">
            <FieldRows rows={[
              { label:"Address", value: addr },
              { label:"Type", value: humanize(p.type) },
              { label:"Class", value: humanize(p.class) },
              { label:"Status", value: humanize(p.status) },
              { label:"IDs", value: <>#{p.id}{p.doorloop_id ? <> • DL {p.doorloop_id}</> : null}</> },
              { label:"Owner", value: p.owner_id ? <Link href={`/card/owner/${p.owner_id}`}><a>Open Owner</a></Link> : "—" },
            ]}/>
          </Section>
        )}

        {tab==="relationships" && (
          <Section title="Units → Active Lease → Primary Tenant">
            {rel.isLoading ? <Block h={96}/> :
              (rel.data?.units?.length ?? 0) === 0 ? <div style={{ opacity:.8 }}>No units linked via DoorLoop.</div> :
              <div style={{ display:"grid", gridTemplateColumns:"repeat(auto-fill, minmax(260px,1fr))", gap:12 }}>
                {rel.data!.units.map(u=>{
                  const lease = leases.find(l=>l.unit_id===u.id && (l.status||"").toLowerCase()==="active");
                  const tenant = lease ? (rel.data!.tenants||[]).find(t=>t.id===lease.primary_tenant_id) : null;
                  return (
                    <div key={u.id} className="ecc-object" style={{ padding:12 }}>
                      <div style={{ fontWeight:700, marginBottom:6 }}>Unit {u.unit_number ?? u.id}</div>
                      <div style={{ fontSize:12, opacity:.8, marginBottom:8 }}>{u.beds ?? "—"} bd • {u.baths ?? "—"} ba</div>
                      <div><span className="ecc-label">Active Lease:</span> {lease ? `#${lease.doorloop_id}` : "None"}</div>
                      <div><span className="ecc-label">Primary Tenant:</span> {tenant ? <Link href={`/card/tenant/${tenant.id}`}><a>{tenant.display_name ?? `Tenant #${tenant.id}`}</a></Link> : "—"}</div>
                    </div>
                  );
                })}
              </div>
            }
          </Section>
        )}

        {tab==="financials" && (
          <Section title="Financials (Property)">
            <div className="ecc-object" style={{ padding:12, marginBottom:12 }}>
              <div className="ecc-label">Cashflow (12 mo)</div>
              <div style={{ opacity:.8 }}>Placeholder chart.</div>
            </div>
            <Section title="Delinquency Summary">
              <div style={{ opacity:.8 }}>Placeholder table (tenant delinquency rollup).</div>
            </Section>
          </Section>
        )}

        {tab==="legal" && (
          <Section title="Legal">
            <FieldRows rows={[
              { label:"Assessor Parcel (APN)", value:"—" },
              { label:"Compliance Flags", value:"—" },
            ]}/>
            <div className="ecc-object" style={{ padding:12, marginTop:12 }}>
              <div className="ecc-label">Linked Cases</div>
              <div style={{ opacity:.8 }}>None linked.</div>
            </div>
          </Section>
        )}

        {tab==="files" && (
          <Section title="Files (DoorLoop / Dropbox)">
            <div style={{ display:"flex", gap:8, flexWrap:"wrap" }}>
              <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={()=>alert("Stub: DoorLoop Files")}>DoorLoop</button>
              <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={()=>alert("Stub: Dropbox Folder")}>Dropbox</button>
              <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={()=>alert("Stub: Upload")}>Upload</button>
            </div>
          </Section>
        )}

        {tab==="marketing" && (
          <Section title="Marketing">
            <FieldRows rows={[
              { label:"Brochure", value:"—" },
              { label:"Photos", value:"—" },
              { label:"Campaigns", value:"—" },
            ]}/>
          </Section>
        )}

        {tab==="activity" && (
          <Section title="Activity">
            <div style={{ opacity:.8 }}>No activity yet.</div>
          </Section>
        )}
      </div>

      {/* RIGHT (Property is the ONLY card with a map) */}
      <aside style={{ display:"grid", gap:12 }}>
        <GeoMap title="Location" address={addr} lat={lat} lng={lng} />
        <Section title="Risk Score"><div style={{ fontSize:28, fontWeight:800 }}>—</div><div className="ecc-label">Key Factors</div><div style={{ opacity:.8 }}>None listed.</div></Section>
        <Section title="Key Dates"><div style={{ opacity:.8 }}>No upcoming events.</div></Section>
        <Section title="Pinned Files"><div style={{ opacity:.8 }}>None pinned.</div></Section>
      </aside>
    </div>
  );
}

2b) Unit page (no map; tabs aligned to unit content)

File: src/pages/card/unit/index.tsx (overwrite)

import React, { useState } from "react";
import { useParams, Link } from "wouter";
import Section from "../../../components/Section";
import { FieldRows } from "../../../components/FieldRows";
import { Line, Block } from "../../../components/Skeleton";
import { humanize, moneyCents } from "../../../lib/format";
import { useUnitById, useUnitRelations } from "../../../lib/ecc-resolvers";

type UTabKey = "overview"|"lease_tenant"|"utilities"|"equipment"|"maintenance"|"marketing";
const UTABS = [
  { key:"overview", label:"Overview" },
  { key:"lease_tenant", label:"Lease & Tenant" },
  { key:"utilities", label:"Utilities" },
  { key:"equipment", label:"Equipment" },
  { key:"maintenance", label:"Maintenance" },
  { key:"marketing", label:"Marketing" },
] as const;

function Skeleton(){ return <section className="ecc-object"><div className="ecc-header"><Line w={220}/></div><Block h={120}/></section>; }

export default function UnitCardPage(){
  const { id } = useParams<{ id: string }>();
  const q = useUnitById(id);
  if (q.isLoading) return <Skeleton/>;
  if (q.isError) return <section className="ecc-object">Error loading unit.</section>;
  if (!q.data) return <section className="ecc-object">Unit not found. (ECC id expected)</section>;

  const u = q.data;
  const rel = useUnitRelations(u);
  const [tab, setTab] = useState<UTabKey>("overview");

  const title = `Unit ${u.unit_number ?? u.id}`;
  const rent = moneyCents(u.rent_cents ?? null);

  return (
    <div style={{ display:"grid", gridTemplateColumns:"1fr 340px", gap:16 }}>
      <div>
        <section className="ecc-object" style={{ marginBottom:12 }}>
          <div className="ecc-header">
            <div className="ecc-title" style={{ fontSize:20, fontWeight:700 }}>{title}</div>
            <div className="ecc-actions" style={{ display:"flex", gap:8 }}>
              <button className="ecc-object" style={{ padding:"8px 12px" }}>Edit</button>
              <button className="ecc-object" style={{ padding:"8px 12px" }}>Export PDF</button>
            </div>
          </div>
          <div style={{ display:"grid", gridTemplateColumns:"repeat(3, minmax(0,1fr))", gap:12 }}>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Status</div><div style={{ fontSize:20, fontWeight:700 }}>{humanize(u.status)}</div></div>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Beds/Baths</div><div style={{ fontSize:20, fontWeight:700 }}>{u.beds ?? "—"} / {u.baths ?? "—"}</div></div>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Market Rent</div><div style={{ fontSize:20, fontWeight:700 }}>{rent}</div></div>
          </div>
        </section>

        <section className="ecc-object" style={{ padding:8, marginBottom:12 }}>
          <div style={{ display:"flex", gap:8, flexWrap:"wrap" }}>
            {UTABS.map(t=>(
              <button key={t.key} onClick={()=>setTab(t.key)} className="ecc-object" style={{ padding:"6px 10px", fontWeight: tab===t.key?700:500 }}>
                {t.label}
              </button>
            ))}
          </div>
        </section>

        {tab==="overview" && (
          <Section title="Overview">
            <FieldRows rows={[
              { label:"Property", value: rel.data?.property ? <Link href={`/card/property/${rel.data.property.id}`}><a>Open Property</a></Link> : "—" },
              { label:"Unit Number", value: u.unit_number ?? "—" },
              { label:"Square Feet", value: u.sqft ?? "—" },
              { label:"Market Rent", value: rent },
              { label:"DoorLoop ID", value: u.doorloop_id ?? "—" },
            ]}/>
          </Section>
        )}

        {tab==="lease_tenant" && (
          <Section title="Lease & Tenant">
            {rel.isLoading ? <Block h={96}/> : (
              <>
                <div><span className="ecc-label">Active Lease:</span> {rel.data?.activeLease ? `#${rel.data.activeLease.doorloop_id}` : "None"}</div>
                <div><span className="ecc-label">Primary Tenant:</span> {rel.data?.tenant ? <Link href={`/card/tenant/${rel.data.tenant.id}`}><a>{rel.data.tenant.display_name ?? `Tenant #${rel.data.tenant.id}`}</a></Link> : "—"}</div>
              </>
            )}
          </Section>
        )}

        {tab==="utilities" && (
          <Section title="Utilities (Unit)">
            <FieldRows rows={[
              { label:"Electric (Responsible)", value:"Tenant — Provider: —" },
              { label:"Gas (Responsible)", value:"Tenant — Provider: —" },
              { label:"Water/Sewer (Responsible)", value:"Tenant — Provider: —" },
            ]}/>
          </Section>
        )}

        {tab==="equipment" && (
          <Section title="Equipment & Serials">
            <FieldRows rows={[
              { label:"Furnace Serial", value:"—" },
              { label:"Water Heater Serial", value:"—" },
              { label:"Appliances (Range/Fridge)", value:"—" },
              { label:"Filter Size", value:"—" },
            ]}/>
          </Section>
        )}

        {tab==="maintenance" && (
          <Section title="Maintenance & Schedules">
            <FieldRows rows={[
              { label:"Air Filter Change", value:"—" },
              { label:"Smoke/CO Detector Check", value:"—" },
              { label:"Appliance Service", value:"—" },
            ]}/>
          </Section>
        )}

        {tab==="marketing" && (
          <Section title="Marketing & Media">
            <FieldRows rows={[
              { label:"Floor Plan", value:"—" },
              { label:"Photos", value:"—" },
              { label:"Listing Terms", value:"—" },
            ]}/>
            <div style={{ marginTop:8, display:"flex", gap:8, flexWrap:"wrap" }}>
              <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={()=>alert("Stub: DoorLoop Unit Files")}>DoorLoop</button>
              <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={()=>alert("Stub: Dropbox Folder")}>Dropbox</button>
            </div>
          </Section>
        )}
      </div>

      {/* RIGHT (no map on Unit) */}
      <aside style={{ display:"grid", gap:12 }}>
        <Section title="Parent Property">
          {rel.isLoading ? <Block h={64}/> :
            rel.data?.property ? <Link href={`/card/property/${rel.data.property.id}`}><a>Open Property</a></Link> : <div style={{ opacity:.8 }}>None linked.</div>}
        </Section>
        <Section title="Upcoming Tasks"><div style={{ opacity:.8 }}>None scheduled.</div></Section>
        <Section title="Pinned Files"><div style={{ opacity:.8 }}>None pinned.</div></Section>
      </aside>
    </div>
  );
}

2c) Lease, Tenant, Owner pages

Add/keep header actions (Edit, Export PDF, plus Send Notice on Lease/Tenant if present).

No GeoMap imports on these pages.

Ensure they use resolvers only.
(If any of these files still import GeoMap, remove the import and the usage.)

3) Guardrails: keep map on Property only (and resolvers-only pages)

File: scripts/guardrail-check.mjs — ensure this block exists (add if missing)

// Only Property page may import GeoMap
const reImportGeoMap = /from\s+["''][^"']*components\/GeoMap["'']/;
const isPropertyPage = rel.replace(/\\/g,"/") === "src/pages/card/property/index.tsx";
if (reImportGeoMap.test(src) && !isPropertyPage) {
  violations.push({ file: rel, rule: "GEO_MAP_ONLY_ON_PROPERTY", msg: "Only Property page may import GeoMap." });
}


(Keep the existing rules: no "/api/" strings, no lib/ecc-api imports, no apiGet( calls in card pages, must import lib/ecc-resolvers.)

4) Verification (run and paste outputs)

npm run guardrail

npx tsc --noEmit

Open these routes and confirm visible content (no blank pages, no placeholders outside the specified stubs):

/card/property/<real_id>

/card/unit/<real_id>

/card/lease/<real_id>

/card/tenant/<real_id>

/card/owner/<real_id>

Return:

Guardrail output,

tsc output,

A quick note for each route: “renders KPIs + tabs” (yes/no), “map present” (property only), “header actions present” (yes).

Why this works

Matches Gemini’s UI plan but fixes the resolver contract (no _relations, no raw routes; query-only to /api/entities/*).

Eliminates guessing: all reads funnel through ecc-resolvers, and guardrail enforces it.

Locks map to Property via code + guardrail.

Gives us feature-complete tab shells to populate next (Financials tables, Legal links, Files integrations, etc.) without breaking layout.

When you send me the verification output, I’ll hand you the next patch set: Financials/Legal table components + BFF action stubs (Record Payment, Send Notice, Work Order, Upload File) wired to the Activity log, still 100% deterministic.