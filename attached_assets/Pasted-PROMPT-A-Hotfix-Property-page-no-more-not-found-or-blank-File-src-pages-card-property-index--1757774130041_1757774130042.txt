PROMPT A — Hotfix Property page (no more “not found” or blank)

File: src/pages/card/property/index.tsx
Action: Replace the entire file with this safe, self-contained version.

import React from "react";
import { useParams, Link } from "wouter";
import { useQuery } from "@tanstack/react-query";
import { apiGet } from "../../../lib/ecc-api";

import Section from "../../../components/Section";
import { FieldRows } from "../../../components/FieldRows";
import GeoMap from "../../../components/GeoMap";
import { Line, Block } from "../../../components/Skeleton";
import { humanize, joinAddress, moneyCents, isFiniteNumber } from "../../../lib/format";

/* ----------------------------- Utilities ----------------------------- */

function qs(parts: Record<string, string | number | null | undefined>) {
  return Object.entries(parts)
    .filter(([, v]) => v !== undefined && v !== null && v !== "")
    .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(String(v))}`)
    .join("&");
}

async function fetchOneBy(path: string, field: string, value: string) {
  // Use query-string directly to avoid helper signature drift
  const url = `${path}?${qs({ select: "*", [field]: `eq.${value}`, limit: 1 })}`;
  try {
    const rows = await apiGet(url);
    if (Array.isArray(rows) && rows[0]) return rows[0];
  } catch (err) {
    if (import.meta?.env?.DEV) console.warn("[ECC] fetchOneBy error", { path, field, value, err });
  }
  return null;
}

/* ----------------------------- Data Hooks ---------------------------- */

type PropertyRow = {
  id: number;
  doorloop_id?: string | null;
  street_1?: string | null;
  city?: string | null;
  state?: string | null;
  zip?: string | null;
  type?: string | null;
  class?: string | null;
  status?: string | null;
  lat?: number | null;
  lng?: number | null;
  latitude?: number | null;
  longitude?: number | null;
  units_count?: number | null;
  active_leases_count?: number | null;
  primary_tenants_count?: number | null;
  owner_id?: number | null;
};

function usePropertyByRouteId(id: string) {
  return useQuery({
    queryKey: ["property", id],
    queryFn: async (): Promise<PropertyRow | null> => {
      // 1) Try by internal id
      const byId = await fetchOneBy("/api/entities/properties", "id", id);
      if (byId) return byId as PropertyRow;
      // 2) Fallback: some links may carry DL id
      const byDL = await fetchOneBy("/api/entities/properties", "doorloop_id", id);
      return (byDL as PropertyRow) ?? null;
    },
  });
}

function usePropertyKpis(p?: PropertyRow | null) {
  return useQuery({
    enabled: !!p?.id,
    queryKey: ["property-kpis", p?.id, p?.doorloop_id],
    queryFn: async () => {
      const units = p?.doorloop_id
        ? await apiGet(`/api/entities/units?${qs({
            select: "id,rent_cents,doorloop_property_id",
            doorloop_property_id: `eq.${p!.doorloop_id}`,
          })}`)
        : [];
      const leases = p?.id
        ? await apiGet(`/api/entities/leases?${qs({
            select: "status,rent_cents,property_id",
            property_id: `eq.${p!.id}`,
          })}`)
        : [];

      const unitCount = Array.isArray(units) ? units.length : 0;
      const activeLeases = (leases || []).filter(
        (l: any) => (l?.status || "").toLowerCase() === "active"
      ).length;
      const occupancyPct =
        unitCount > 0 ? Math.round((Math.min(activeLeases, unitCount) / unitCount) * 100) : null;

      const rents = (arr: any[]) =>
        arr.map((x: any) => x?.rent_cents).filter((v: any) => typeof v === "number");
      const unitRents = rents(units);
      const leaseRents = rents(leases);
      const avgRentCents =
        unitRents.length
          ? Math.round(unitRents.reduce((a: number, b: number) => a + b, 0) / unitRents.length)
          : leaseRents.length
          ? Math.round(leaseRents.reduce((a: number, b: number) => a + b, 0) / leaseRents.length)
          : null;

      return { unitCount, activeLeases, occupancyPct, avgRentCents };
    },
  });
}

/* ----------------------------- Skeleton UI --------------------------- */

function PropertySkeleton() {
  return (
    <div style={{ display: "grid", gridTemplateColumns: "1fr 340px", gap: 16, alignItems: "start" }}>
      <section className="ecc-object">
        <div className="ecc-header"><Line w={280} /><div /></div>
        <Block h={96} />
      </section>
      <aside style={{ display: "grid", gap: 12 }}>
        <Section title={<Line w={160} />}><Block h={260} /></Section>
        <Section title={<Line w={120} />}><Block h={96} /></Section>
      </aside>
    </div>
  );
}

/* ------------------------------ Page -------------------------------- */

export default function PropertyCardPage() {
  const { id } = useParams<{ id: string }>();
  const q = usePropertyByRouteId(id);

  if (q.isLoading) return <PropertySkeleton />;
  if (q.isError) return <section className="ecc-object">Error loading property.</section>;
  if (!q.data) return <section className="ecc-object">Property not found.</section>;

  const p = q.data;
  const addr = joinAddress([p.street_1, p.city, p.state, p.zip]);
  const type = humanize(p.type);
  const klass = humanize(p.class);
  const status = humanize(p.status);
  const lat = isFiniteNumber(p.lat) ? p.lat : isFiniteNumber(p.latitude) ? p.latitude! : null;
  const lng = isFiniteNumber(p.lng) ? p.lng : isFiniteNumber(p.longitude) ? p.longitude! : null;

  const k = usePropertyKpis(p).data;

  return (
    <div style={{ display: "grid", gridTemplateColumns: "1fr 340px", gap: 16, alignItems: "start" }}>
      {/* LEFT */}
      <div>
        <section className="ecc-object" style={{ marginBottom: 12 }}>
          <div className="ecc-header">
            <div className="ecc-title" style={{ fontSize: 20, fontWeight: 700 }}>
              {addr !== "—" ? addr : `Property #${p.id}`}
            </div>
            <div className="ecc-actions" style={{ display: "flex", gap: 8 }}>
              <button className="ecc-object" style={{ padding: "8px 12px" }}>Edit</button>
              <button className="ecc-object" style={{ padding: "8px 12px" }}>Export PDF</button>
              <button className="ecc-object" style={{ padding: "8px 12px" }}>New Work Order</button>
            </div>
          </div>

          {/* KPIs */}
          <div style={{ display: "grid", gridTemplateColumns: "repeat(4, minmax(0,1fr))", gap: 12 }}>
            <div className="ecc-object" style={{ padding: 12 }}>
              <div className="ecc-label">Units</div>
              <div style={{ fontSize: 20, fontWeight: 700 }}>{k?.unitCount ?? p.units_count ?? "—"}</div>
            </div>
            <div className="ecc-object" style={{ padding: 12 }}>
              <div className="ecc-label">Occupancy</div>
              <div style={{ fontSize: 20, fontWeight: 700 }}>{k?.occupancyPct == null ? "—" : `${k.occupancyPct}%`}</div>
            </div>
            <div className="ecc-object" style={{ padding: 12 }}>
              <div className="ecc-label">Active Leases</div>
              <div style={{ fontSize: 20, fontWeight: 700 }}>{k?.activeLeases ?? p.active_leases_count ?? "—"}</div>
            </div>
            <div className="ecc-object" style={{ padding: 12 }}>
              <div className="ecc-label">Avg Rent</div>
              <div style={{ fontSize: 20, fontWeight: 700 }}>{moneyCents(k?.avgRentCents ?? null)}</div>
            </div>
          </div>
        </section>

        {/* Overview */}
        <Section title="Property Overview">
          <FieldRows rows={[
            { label: "Address", value: addr },
            { label: "Type", value: type },
            { label: "Class", value: klass },
            { label: "Status", value: status },
            { label: "IDs", value: <>#{p.id}{p.doorloop_id ? <> • DL {p.doorloop_id}</> : null}</> },
          ]}/>
        </Section>

        {/* Related */}
        <Section title="Related">
          <div style={{ display: "flex", flexWrap: "wrap", gap: 8 }}>
            {p.owner_id ? (
              <Link href={`/card/owner/${p.owner_id}`}>
                <a className="ecc-object" style={{ padding: 8 }}>Open Owner</a>
              </Link>
            ) : null}
            <Link href="/portfolio">
              <a className="ecc-object" style={{ padding: 8 }}>Back to Properties</a>
            </Link>
          </div>
        </Section>
      </div>

      {/* RIGHT */}
      <aside style={{ display: "grid", gap: 12 }}>
        <GeoMap title="Location" address={addr} lat={lat} lng={lng} />
        <Section title="Risk Score">
          <div style={{ fontSize: 28, fontWeight: 800 }}>—</div>
          <div className="ecc-label">Key Factors</div>
          <div style={{ opacity: 0.8 }}>None listed.</div>
        </Section>
        <Section title="Key Dates">
          <div style={{ opacity: 0.8 }}>No upcoming events.</div>
        </Section>
      </aside>
    </div>
  );
}


Why this works

We build the query as a full URL with query string (/api/entities/...?...) so it works regardless of how apiGet merges params.

We try id first, then doorloop_id as a fallback.

All hooks are guarded; no conditional-hook errors; no blank screen on failures.

Keeps your light-grey boxes, humanized labels, Map, and hero KPIs.

PROMPT B — (Optional) Baseline the other 4 pages to the same safe pattern

If you want to prevent this class of bug elsewhere right now, run this one-shot shell patch. It creates minimal, safe pages for Unit, Lease, Tenant, Owner that fetch by :id, show a header, a small KPI rail, an Overview box, and a Right Rail Map when possible. No routes or libraries touched.

Paste in Replit Shell:

set -e

mkpage() {
  f="$1"; name="$2"; entity="$3"; idfield="$4"
  mkdir -p "src/pages/card/$entity"
  cat > "src/pages/card/$entity/index.tsx" <<'EOF'
import React from "react";
import { useParams, Link } from "wouter";
import { useQuery } from "@tanstack/react-query";
import { apiGet } from "../../../lib/ecc-api";
import Section from "../../../components/Section";
import { FieldRows } from "../../../components/FieldRows";
import GeoMap from "../../../components/GeoMap";
import { Line, Block } from "../../../components/Skeleton";
import { humanize, joinAddress, isFiniteNumber } from "../../../lib/format";

function qs(parts: Record<string, string | number | null | undefined>) {
  return Object.entries(parts).filter(([,v])=>v!==undefined&&v!==null&&v!=="")
    .map(([k,v])=>`${encodeURIComponent(k)}=${encodeURIComponent(String(v))}`).join("&");
}
async function fetchOne(path:string, field:string, value:string){
  const url = `${path}?${qs({select:"*", [field]:`eq.${value}`, limit:1})}`;
  const rows = await apiGet(url); return Array.isArray(rows) ? rows[0] ?? null : null;
}

export default function Page(){
  const { id } = useParams<{id:string}>();
  const q = useQuery({
    queryKey: ["ENTITY", id],
    queryFn: async()=> {
      // Try by id then by doorloop_id (covers DL links)
      return (await fetchOne("/api/entities/ENTITY", "id", id))
          || (await fetchOne("/api/entities/ENTITY", "doorloop_id", id));
    }
  });

  if(q.isLoading) return <section className="ecc-object"><div className="ecc-header"><Line w={200}/></div><Block h={96}/></section>;
  if(q.isError || !q.data) return <section className="ecc-object">ENTITY not found.</section>;
  const e:any = q.data;

  // best-effort address (for map)
  const addr = joinAddress([e.street_1, e.city, e.state, e.zip]);
  const lat = isFiniteNumber(e.lat) ? e.lat : isFiniteNumber(e.latitude) ? e.latitude! : null;
  const lng = isFiniteNumber(e.lng) ? e.lng : isFiniteNumber(e.longitude) ? e.longitude! : null;

  return (
    <div style={{ display:"grid", gridTemplateColumns:"1fr 340px", gap:16, alignItems:"start" }}>
      <div>
        <section className="ecc-object" style={{ marginBottom: 12 }}>
          <div className="ecc-header">
            <div className="ecc-title" style={{ fontSize:20, fontWeight:700 }}>
              NAME #{e.id}
            </div>
            <div className="ecc-actions" style={{ display:"flex", gap:8 }}>
              <button className="ecc-object" style={{ padding:"8px 12px" }}>Edit</button>
              <button className="ecc-object" style={{ padding:"8px 12px" }}>Export PDF</button>
            </div>
          </div>
          <div style={{ display:"grid", gridTemplateColumns:"repeat(3, minmax(0,1fr))", gap:12 }}>
            <div className="ecc-object" style={{ padding:12 }}>
              <div className="ecc-label">Status</div>
              <div style={{ fontSize:20, fontWeight:700 }}>{humanize(e.status)}</div>
            </div>
            <div className="ecc-object" style={{ padding:12 }}>
              <div className="ecc-label">Type</div>
              <div style={{ fontSize:20, fontWeight:700 }}>{humanize(e.type || e.unit_type)}</div>
            </div>
            <div className="ecc-object" style={{ padding:12 }}>
              <div className="ecc-label">DoorLoop ID</div>
              <div style={{ fontSize:20, fontWeight:700 }}>{e.doorloop_id ?? "—"}</div>
            </div>
          </div>
        </section>

        <Section title="Overview">
          <FieldRows rows={[
            { label:"ID", value: e.id },
            { label:"DoorLoop ID", value: e.doorloop_id ?? "—" },
            { label:"Status", value: humanize(e.status) },
          ]}/>
        </Section>

        <Section title="Related">
          <div style={{ display:"flex", flexWrap:"wrap", gap:8 }}>
            <Link href="/portfolio"><a className="ecc-object" style={{ padding:8 }}>Back</a></Link>
          </div>
        </Section>
      </div>

      <aside style={{ display:"grid", gap:12 }}>
        <GeoMap title="Location" address={addr} lat={lat} lng={lng} />
        <Section title="Notes"><div style={{ opacity:.8 }}>—</div></Section>
      </aside>
    </div>
  );
}
EOF
  # replace placeholders
  sed -i "s/ENTITY/$entity/g" "src/pages/card/$entity/index.tsx"
  sed -i "s/NAME/$name/g" "src/pages/card/$entity/index.tsx"
}

mkpage unit    "Unit"    "unit" 
mkpage lease   "Lease"   "lease"
mkpage tenant  "Tenant"  "tenant"
mkpage owner   "Owner"   "owner"

echo "Baseline pages for Unit/Lease/Tenant/Owner written."


This gives each page the same safe baseline (header + 3 KPIs + Overview + Map right rail) using the same robust fetch-by-id/doorloop_id approach, with the light-grey surface and humanized labels. We can then grow each one feature-by-feature—without breaking routing or page state.