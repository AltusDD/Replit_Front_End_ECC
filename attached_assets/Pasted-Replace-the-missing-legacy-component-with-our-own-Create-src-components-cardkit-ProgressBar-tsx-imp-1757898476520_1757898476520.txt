Replace the missing legacy component with our own
Create: src/components/cardkit/ProgressBar.tsx
import React from "react";

/** Contract-safe progress bar (Altus black/gold) with flexible props */
export default function ProgressBar({
  percent,
  value,
  max = 100,
  testid = "progress",
  ariaLabel,
}: {
  /** If provided, use directly (0–100). Otherwise computed from value/max. */
  percent?: number | null;
  /** Optional raw value to compute percentage against max. */
  value?: number | null;
  max?: number;
  testid?: string;
  ariaLabel?: string;
}) {
  let p = typeof percent === "number" ? percent : Number(value ?? 0) / Number(max || 100) * 100;
  if (!Number.isFinite(p)) p = 0;
  p = Math.max(0, Math.min(100, Math.round(p)));

  // Altus gold with safe fallback
  const gold = "var(--altus-gold, #C8A948)";

  return (
    <div className="w-full h-2 rounded bg-neutral-800 overflow-hidden" data-testid={testid} aria-label={ariaLabel || "progress"}>
      <div className="h-full" style={{ width: `${p}%`, backgroundColor: gold }} />
    </div>
  );
}

2) Fix the broken import in your table columns
Edit: src/pages/portfolio/columns.tsx

Find the legacy import and replace it:

- import ProgressBar from "../../features/portfolio/components/ProgressBar";
+ import ProgressBar from "@/components/cardkit/ProgressBar";


This is the import that Vite can’t resolve since we deleted the legacy folder (as intended).

3) Ban this class of break forever (guardrail)
Append to scripts/guardrail-check.mjs

(Add to the existing guardrail; this catches relative legacy imports too.)

// Legacy relative paths detector
import fs from "fs"; import path from "path"; import glob from "glob";
const ROOT = process.cwd();
let failures = globalThis.failuresSum || 0;

for (const rel of glob.sync("src/**/*.{ts,tsx,js,jsx}", { cwd: ROOT })) {
  const s = fs.readFileSync(path.join(ROOT, rel), "utf8");
  // catch any relative path into features/portfolio/components
  if (/\.\.\/(?:\.\.\/)+features\/portfolio\/components\//.test(s) || s.includes("features/portfolio/components/")) {
    console.error("[guardrail] forbidden relative legacy import in", rel);
    failures++;
  }
}
globalThis.failuresSum = failures;


(We already banned alias imports like @/features/portfolio/components/*; this adds relative import detection so this never happens again.)

4) Clean restart to clear HMR/cache drift
npm run guardrail   # should FAIL before you fix imports; should PASS after the edits above
rm -rf node_modules/.vite .vite dist .cache .parcel-cache 2>/dev/null || true
npm run dev

5) Runtime proof

Open: http://localhost:5173/portfolio/properties
You should see the table render without Vite errors; any occupancy/health columns that use ProgressBar will now load from the new component.

Open: http://localhost:5173/card/property/42 (or a real id)
Confirm the hero KPIs render and no console errors about legacy imports.

Re-run guardrail:

npm run guardrail


Expected: PASS (no legacy dirs, no alias or relative legacy imports, route + ID coercion enforced, required test IDs present).

Why this fixes it (and keeps it fixed)

The error came from a leftover import to a deleted legacy file. We replace it with a first-party CardKit ProgressBar and update the import path.

We extended the guardrail to catch relative references to features/portfolio/components, closing the hole that allowed this to slip past the alias-based ban.

The ProgressBar component is contract-safe (no orange, Altus gold via CSS variable, zero dependency on legacy portfolio code).

If another file throws a similar “Failed to resolve import …/features/portfolio/components/…” error, repeat step 2 for that file (point it at @/components/cardkit/ProgressBar) and the guardrail will prevent any new occurrences going forward.