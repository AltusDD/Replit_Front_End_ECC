Replit — “Genesis v4: Native-feel Cards (data-driven actions)”
set -e
git checkout -b feat/genesis-pack-v4 || git checkout feat/genesis-pack-v4

############################################
# 1) SERVER — Entity read endpoints (Supabase)
############################################
mkdir -p server/routes
applypatch <<'PATCH'
*** Begin Patch
*** Add File: server/routes/entities.ts
+import express from "express";
+import { sbAdmin } from "../lib/supabaseAdmin";
+
+const router = express.Router();
+
+async function getSingle(table:string, id:number){
+  // Select a pragmatic set of columns; your table may have more.
+  // We try common phone/email fields to power actions.
+  const cols: Record<string,string> = {
+    properties: "id, address, line1, line2, city, state, postal_code, contact_name, contact_email, contact_phone, manager_email, manager_phone, lat, lng",
+    units:      "id, label, property_id, contact_name, contact_email, contact_phone",
+    leases:     "id, unit_id, tenant_id, start_date, end_date, status",
+    tenants:    "id, display_name, name, email, phone"
+  };
+  const sel = cols[table] || "*";
+  const { data, error } = await sbAdmin.from(table).select(sel).eq("id", id).maybeSingle();
+  if (error) throw new Error(error.message);
+  return data || null;
+}
+
+router.get("/api/entities/:table/:id", async (req, res) => {
+  try {
+    const table = String(req.params.table);
+    const id = Number(req.params.id);
+    if (!["properties","units","leases","tenants"].includes(table)) return res.status(400).send("bad table");
+    if (!id) return res.status(400).send("bad id");
+    const row = await getSingle(table, id);
+    if (!row) return res.status(404).send("not found");
+    return res.json({ ok:true, item: row });
+  } catch (e:any) {
+    return res.status(500).send(String(e.message||e));
+  }
+});
+
+export default router;
*** End Patch
PATCH

applypatch <<'PATCH'
*** Begin Patch
*** Update File: server/index.ts
@@
 import filesRouter from "./routes/files";
 import m365Router from "./routes/m365";
+import entitiesRouter from "./routes/entities";
@@
 app.use(configRouter);
 app.use(filesRouter);
 app.use(m365Router);
+app.use(entitiesRouter);
*** End Patch
PATCH

############################################
# 2) FRONTEND — Upgrade CardEnhancer to use real data
############################################
applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/features/_enhancer/CardEnhancer.tsx
@@
-import React, { useMemo, useState, useEffect } from "react";
+import React, { useMemo, useState, useEffect } from "react";
 import { useLocation } from "wouter";
 import SourceBadges from "../../components/ui/SourceBadges";
 import { useIntegrations } from "../../lib/useIntegrations";
 import FilesTab from "../files/FilesTab";
 import ActivityFeed from "../activity/ActivityFeed";
@@
 export default function CardEnhancer(){
   const [location] = useLocation();
   const integrations = useIntegrations();
   const match = useMemo(()=>{
     // Expect /card/<entity>/:id
     const m = location?.match(/^\/card\/(property|unit|lease|tenant)\/([^\/]+)$/i);
     if (!m) return null;
     return { entity: m[1].toLowerCase(), id: m[2] };
   }, [location]);
 
   // Never render on owner (prevents duplicates where we already injected UI)
   if (!match) return null;
 
+  const tableMap: Record<string,string> = { property:"properties", unit:"units", lease:"leases", tenant:"tenants" };
+  const refTable = match ? (tableMap[match.entity] || (match.entity + "s")) : "";
+
+  // ---- Load entity details for hero/actions (phone/email/title)
+  const [item, setItem] = useState<any>(null);
+  const [loading, setLoading] = useState<boolean>(false);
+  useEffect(()=>{ (async()=>{
+    if (!refTable) return;
+    setLoading(true);
+    try{
+      const r = await fetch(`/api/entities/${refTable}/${encodeURIComponent(match.id)}`);
+      if (r.ok){ const j = await r.json(); setItem(j.item); } else { setItem(null); }
+    }catch{ setItem(null); }
+    finally{ setLoading(false); }
+  })(); },[refTable, match?.id]);
+
+  // Derive title + comms
+  function pick(...keys:string[]){
+    for (const k of keys){ if (item && item[k]) return String(item[k]); }
+    return "";
+  }
+  const title = (() => {
+    if (refTable==="properties") {
+      const line1 = pick("line1","address"); const city = pick("city"); const st = pick("state"); const zip = pick("postal_code");
+      return [line1, [city,st].filter(Boolean).join(", "), zip].filter(Boolean).join(" · ");
+    }
+    if (refTable==="units") return pick("label") || `Unit #${match.id}`;
+    if (refTable==="leases") return `Lease #${match.id}`;
+    if (refTable==="tenants") return pick("display_name","name") || `Tenant #${match.id}`;
+    return `${match.entity} #${match.id}`;
+  })();
+  const phone = pick("phone","contact_phone","manager_phone","primary_phone");
+  const email = pick("email","contact_email","manager_email","primary_email");
+  const telHref = phone ? `tel:${phone}` : undefined;
+  const teamsMsgHref = email ? `https://teams.microsoft.com/l/chat/0/0?users=${encodeURIComponent(email)}` : undefined;
+  const outlookMailHref = email ? `mailto:${email}` : undefined;
+  const m365 = !!integrations?.m365;
+
   return (
     <div className="p-6">
-      {/* Hero strip: source badges + quick actions */}
-      <div className="mb-3 flex items-center justify-between">
+      {/* Hero strip: title + source badges + quick actions */}
+      <div className="mb-3 flex items-center justify-between">
         <div className="flex items-center gap-3">
-          <div className="text-sm text-neutral-400">Integrations</div>
+          <div>
+            <div className="text-base font-semibold">{title || `Card #${match.id}`}</div>
+            <div className="text-xs text-neutral-500 mt-0.5 capitalize">{match.entity}</div>
+          </div>
           <SourceBadges
             doorloop={!!integrations?.doorloop}
             corelogic={!!integrations?.corelogic}
             m365={!!integrations?.m365}
             dropbox={!!integrations?.dropbox}
           />
         </div>
         <div className="flex items-center gap-2">
-          {/* We don't know the entity's phone/email at this layer (data belongs to the existing page),
-             so keep buttons informational here. The Owner/Tenant pages already got real actions. */}
-          <button className="btn btn-sm opacity-60 cursor-not-allowed" title="Actions on this card will light up as we connect entity data.">Actions</button>
+          <a className={`btn btn-sm ${telHref?'':'opacity-50 cursor-not-allowed'}`} href={telHref} title={telHref? 'Call via system dialer' : (loading?'Loading…':'No phone on file')}>Call</a>
+          <a className={`btn btn-sm ${m365 && teamsMsgHref?'':'opacity-50 cursor-not-allowed'}`} href={m365 && teamsMsgHref ? teamsMsgHref : undefined} title={m365? (teamsMsgHref?'Open Teams chat':'No email on file') : 'Microsoft 365 not configured'}>Message (Teams)</a>
+          <a className={`btn btn-sm ${outlookMailHref?'':'opacity-50 cursor-not-allowed'}`} href={outlookMailHref} title={outlookMailHref?'Compose email':'No email on file'}>Email</a>
         </div>
       </div>
 
       {/* Files + Activity (always useful; they work off global integrations/audit) */}
       <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
         <div className="card bg-neutral-900 border border-neutral-800">
           <div className="card-header px-4 py-3 border-b border-neutral-800">
             <div className="text-sm font-semibold">Files</div>
           </div>
           <div className="card-content p-4">
             {integrations ? (
               <FilesTab
                 doorloop={integrations.doorloop}
                 dropbox={integrations.dropbox}
                 sharepoint={integrations.sharepoint}
                 dlFiles={[]}
                 dbxFiles={[]}
                 spFiles={[]}
               />
             ) : (
               <div className="text-sm text-neutral-400">Loading integrations…</div>
             )}
           </div>
         </div>
 
         <div className="card bg-neutral-900 border border-neutral-800">
           <div className="card-header px-4 py-3 border-b border-neutral-800">
             <div className="text-sm font-semibold">Activity</div>
           </div>
           <div className="card-content p-4">
-            {/* We don’t have the DB primary key from URL-to-table mapping here,
-               so use a safe fallback (empty). Once your existing card page exposes
-               ref table+id into a DOM data-attr, we can read it and filter to that entity. */}
-            <ActivityFeed table={refTable} refId={String(match.id)} />
+            <ActivityFeed table={refTable} refId={String(match.id)} />
           </div>
         </div>
       </div>
     </div>
   );
 }
*** End Patch
PATCH

############################################
# 3) (Optional) tiny CSS polish to make hero stand out
############################################
mkdir -p src/styles
grep -q ".ecc-hero" src/styles/card-enhancer.css 2>/dev/null || cat > src/styles/card-enhancer.css <<'CSS'
.ecc-hero .btn.btn-sm { padding: 6px 10px; }
CSS
if [ -f src/main.tsx ]; then
  grep -q "styles/card-enhancer.css" src/main.tsx || sed -i "1i import './styles/card-enhancer.css';" src/main.tsx
fi

git add -A
git commit -m "feat(cards): entity-backed hero actions (call/teams/email), title, and data endpoints for property/unit/lease/tenant"

What this gives you, right now

On /card/property/:id, /card/unit/:id, /card/lease/:id, /card/tenant/:id:

Hero shows a real title (address, unit label, tenant name, or lease id)

Call / Teams / Email buttons are enabled when the entity has phone/email; disabled with friendly tooltips when not

Files + Activity sections remain, with dark-theme consistency and no layout shift

Safe behavior:

If a record isn’t found, the hero still renders the badges; actions remain disabled.

No impact on Owner pages (which already have native actions & Transfer).

Quick smoke checklist for Replit (copy/paste)

Restart app.

Visit each:

/card/property/<an existing id> → see title, and actions enabled if contact_phone/email exist

/card/unit/<id> → unit label title + actions

/card/lease/<id> → Lease #… and (likely) disabled actions unless your schema exposes contact fields

/card/tenant/<id> → tenant name + enabled actions if phone/email present

Hover disabled buttons → verify helpful tooltips (e.g., “No email on file”, “Microsoft 365 not configured”).

/api/entities/properties/<id> returns JSON; same for units/leases/tenants.