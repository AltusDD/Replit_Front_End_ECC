PROMPT FOR REPLIT CHAT (VERBATIM)

ROLE (STRICT):
Make only the surgical data fixes below. Do NOT change styles, CSS classes, tokens, components, routes, DataTable API, column definitions, pagination, or nav. No refactors/“improvements.” Keep behavior and visuals identical; just fix data.

GOAL:

Properties: show real ZIP, calculate Units and Occupancy % from the Units endpoint (normalized ID joins).

Leases: compute Monthly Revenue KPI correctly (cents → dollars, active leases only).

Add a safe debug switch (?debug=1) to log one sample payload per endpoint to the console.

Keep Tenants/Owners contact blanks as “—” if API doesn’t provide them.

0) Pre-flight

Ensure npm run build passes before and after. No ESLint/type errors introduced.

If not present, create helper: src/utils/ids.ts

export const normalizeId = (v: unknown): string => {
  if (v === null || v === undefined) return "";
  return String(v);
};

1) Properties → ZIP column must check address_zip first

File: src/pages/portfolio/columns.tsx
Function: the mapProperty(...) mapper — only edit the zip mapping.

Replace the current zip: line with:

zip: String(
  getPath(src, "address_zip") ??            // new, highest-priority
  getPath(src, "address.zipCode") ??
  getPath(src, "zipcode") ??
  getPath(src, "postal_code") ??
  getPath(src, "address.zip") ??
  getPath(src, "zip") ??
  dash
),


No other mapper lines here should change.

2) Properties page → compute Units & Occupancy % from Units (not API’s nulls)

File: src/pages/portfolio/properties/index.tsx

Actions:

Import normalizeId helper.

Build two maps from the Units collection:
unitsByProp (total units) and occByProp (occupied units).
“Occupied” statuses: "occupied", "occ", "active" (case-insensitive).

For each property row, override units and occPct using those maps.

KPI “TOTAL UNITS” must be the sum of rows.units (not from API).

Add/replace the enrichment block where rows & KPIs are built:

import { normalizeId } from "../../../utils/ids";

// existing: const { data: properties } = useCollection(...), const { data: units } = useCollection(...)
const props = properties?.data ?? [];
const unitsArr = units?.data ?? [];

const unitsByProp = new Map<string, number>();
const occByProp   = new Map<string, number>();

for (const u of unitsArr) {
  const pid = normalizeId(u?.property_id ?? u?.propertyId ?? u?.property?.id);
  if (!pid) continue;
  const status = String(u?.status ?? "").toLowerCase();
  unitsByProp.set(pid, (unitsByProp.get(pid) ?? 0) + 1);
  if (status === "occupied" || status === "occ" || status === "active") {
    occByProp.set(pid, (occByProp.get(pid) ?? 0) + 1);
  }
}

const rows = (props || []).map((p: any) => {
  const pid    = normalizeId(p?.id);
  const total  = unitsByProp.get(pid) ?? 0;
  const occ    = occByProp.get(pid) ?? 0;
  const occPct = total > 0 ? Math.round((occ / total) * 100) : 0;
  const base   = mapProperty(p); // keep existing call
  return { ...base, units: total, occPct };
});

// KPIs derived from rows
const totalUnitsKpi = rows.reduce((sum, r) => sum + (r.units ?? 0), 0);
// use totalUnitsKpi in the existing KPI card in place of any API value


Don’t change DataTable wiring/columns. Only enrich the data and KPI.

3) Leases page → fix Monthly Revenue KPI (cents → dollars, active only)

File: src/pages/portfolio/leases/index.tsx

Replace the revenue KPI calculation with:

const monthlyRevenue = (leases.data ?? [])
  .filter(l => String(l?.status ?? "").toLowerCase() === "active")
  .reduce((sum, l) => {
    const cents = Number(l?.rent_cents ?? l?.rent ?? 0);
    return sum + (Number.isFinite(cents) ? cents : 0);
  }, 0) / 100;


Use this monthlyRevenue value in the KPI card (no other UI changes).

4) Tenants & Owners contact fields

If the API does not provide email/phone, leave as “—” (existing fallback).
Do not synthesize or change renderers/styles.

5) Add safe debug switch (read-only)

File: src/features/data/useCollection.ts
After you parse the JSON, add console sampling only when ?debug=1 is in the URL:

const debug = typeof location !== "undefined" &&
  new URLSearchParams(location.search).get("debug") === "1";
if (debug && Array.isArray(json) && json.length) {
  // eslint-disable-next-line no-console
  console.log(endpoint, "sample:", json[0]);
}


No UI is added; this only helps verify field names safely.

6) Acceptance Criteria (you must verify & report)

Properties → ZIP shows real ZIPs (e.g., “31216”).

Properties KPI “TOTAL UNITS” equals the count of Unit rows (~177) and per-row Units matches the property’s unit count.

Properties Occupancy bars reflect computed occPct from Unit statuses.

Leases KPI “MONTHLY REVENUE” is a realistic dollars sum of active leases only (rent_cents ÷ 100).

No changes to styling, table structure, filters, pagination, or routes. No new TS/console errors. npm run build passes.

Provide a short confirmation with:
– Final KPI numbers,
– One example property row { id, units, occPct, zip },
– Confirmation that ZIPs populate and revenue KPI looks correct.