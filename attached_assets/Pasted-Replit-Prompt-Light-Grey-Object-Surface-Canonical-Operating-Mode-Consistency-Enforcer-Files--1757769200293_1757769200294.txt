Replit Prompt — “Light-Grey Object Surface (Canonical)”

Operating Mode: Consistency Enforcer
Files to Touch:

src/styles/theme.css

src/styles/card-enhancer.css (create/overwrite)

src/components/Section.tsx (normalize wrapper)

src/main.tsx (ensure CSS imports)
Guardrails: wouter only; no routes/data edits; backup any file we change as *.bak; tokens only (no raw hex elsewhere).

CHANGESET (contract)

Define canonical tokens (light-grey surface) in theme.css.

Normalize all card/panel/section containers to use the surface via card-enhancer.css.

Ensure the shared Section wrapper always renders the surface.

Make sure global CSS is actually imported (fixes “styles not showing” regressions).

Apply with idempotent shell patch + quick verification.

1) Shell Patch (paste this whole block into Replit’s Shell)
#!/bin/bash
set -e

echo "== ECC Light-Grey Object Surface: Canonical Patch =="

mkdir -p src/styles src/components

# 1) Append/refresh tokens at the bottom of theme.css
if [ -f src/styles/theme.css ]; then cp src/styles/theme.css src/styles/theme.css.bak; fi
awk '1; END{
  print "\n/* --- ECC Object Surface Tokens (canonical) --- */"
  print ":root, .theme-ecc, [data-theme=\"ecc\"] {"
  print "  --ecc-object-bg: #2A2F38;"            # light grey (on dark) inner surfaces
  print "  --ecc-object-border: rgba(255,255,255,0.08);"
  print "  --ecc-object-radius: 16px;"
  print "  --ecc-object-pad: 16px;"
  print "}"
}' src/styles/theme.css 2>/dev/null | sed '/ECC Object Surface Tokens (canonical)/,$d' > /tmp/theme.new || true
# If theme.css didn't exist, /tmp/theme.new will be empty; create fresh
if [ ! -s /tmp/theme.new ]; then
  cat > /tmp/theme.new <<'EOF'
/* --- ECC Object Surface Tokens (canonical) --- */
:root, .theme-ecc, [data-theme="ecc"] {
  --ecc-object-bg: #2A2F38;           /* light grey (on dark) for inner boxes */
  --ecc-object-border: rgba(255,255,255,0.08);
  --ecc-object-radius: 16px;
  --ecc-object-pad: 16px;
}
EOF
fi
mv /tmp/theme.new src/styles/theme.css

# 2) Normalize all card-like containers
cat > src/styles/card-enhancer.css <<'EOF'
/* ECC — Card/Panel/Section normalizer (canonical) */
.ecc-object,
.section,
.card,
.panel,
.gen-card,
.gen-panel {
  background: var(--ecc-object-bg);
  border: 1px solid var(--ecc-object-border);
  border-radius: var(--ecc-object-radius);
  padding: var(--ecc-object-pad);
}

/* Standard header row inside cards (title + actions) */
.ecc-object .ecc-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 12px;
  margin-bottom: 12px;
}
EOF

# 3) Ensure Section wrapper uses the surface
if [ -f src/components/Section.tsx ]; then cp src/components/Section.tsx src/components/Section.tsx.bak; fi
cat > src/components/Section.tsx <<'EOF'
import React from "react";

export default function Section({
  title,
  actions,
  children,
  className = "",
}: {
  title?: React.ReactNode;
  actions?: React.ReactNode;
  children: React.ReactNode;
  className?: string;
}) {
  return (
    <section className={`ecc-object ${className}`}>
      {(title || actions) && (
        <div className="ecc-header">
          <div className="ecc-title">{title}</div>
          <div className="ecc-actions">{actions}</div>
        </div>
      )}
      {children}
    </section>
  );
}
EOF

# 4) Guarantee imports are present (tries both alias and relative)
ensure_import() {
  local file="$1"
  local import_line="$2"
  if [ -f "$file" ]; then
    cp "$file" "$file.bak"
    if ! grep -qF "$import_line" "$file"; then
      { echo "$import_line"; cat "$file"; } > "$file.tmp" && mv "$file.tmp" "$file"
      echo "Injected import into $file -> $import_line"
    else
      echo "Import already present in $file -> $import_line"
    fi
  fi
}

# Prefer main.tsx as the global import point
MAIN_TSX=""
[ -f src/main.tsx ] && MAIN_TSX="src/main.tsx"
[ -z "$MAIN_TSX" ] && [ -f src/app/main.tsx ] && MAIN_TSX="src/app/main.tsx"

if [ -n "$MAIN_TSX" ]; then
  ensure_import "$MAIN_TSX" "import '@/styles/theme.css';"
  ensure_import "$MAIN_TSX" "import '@/styles/card-enhancer.css';"
  # Fallback if alias '@' is not configured
  if ! grep -q "@/styles/theme.css" "$MAIN_TSX"; then
    ensure_import "$MAIN_TSX" "import './styles/theme.css';"
  fi
  if ! grep -q "@/styles/card-enhancer.css" "$MAIN_TSX"; then
    ensure_import "$MAIN_TSX" "import './styles/card-enhancer.css';"
  fi
else
  echo "WARNING: Could not locate src/main.tsx. Please add the two CSS imports to your app entry."
fi

echo "== Patch applied. Reload the preview if it doesn't hot-refresh =="

2) (If you prefer direct code instead of shell)
A) src/styles/theme.css (append this block at the end)
/* --- ECC Object Surface Tokens (canonical) --- */
:root, .theme-ecc, [data-theme="ecc"] {
  --ecc-object-bg: #2A2F38;           /* light grey (on dark) for inner boxes */
  --ecc-object-border: rgba(255,255,255,0.08);
  --ecc-object-radius: 16px;
  --ecc-object-pad: 16px;
}

B) src/styles/card-enhancer.css
/* ECC — Card/Panel/Section normalizer (canonical) */
.ecc-object,
.section,
.card,
.panel,
.gen-card,
.gen-panel {
  background: var(--ecc-object-bg);
  border: 1px solid var(--ecc-object-border);
  border-radius: var(--ecc-object-radius);
  padding: var(--ecc-object-pad);
}

.ecc-object .ecc-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 12px;
  margin-bottom: 12px;
}

C) src/components/Section.tsx
export default function Section({
  title,
  actions,
  children,
  className = "",
}: {
  title?: React.ReactNode;
  actions?: React.ReactNode;
  children: React.ReactNode;
  className?: string;
}) {
  return (
    <section className={`ecc-object ${className}`}>
      {(title || actions) && (
        <div className="ecc-header">
          <div className="ecc-title">{title}</div>
          <div className="ecc-actions">{actions}</div>
        </div>
      )}
      {children}
    </section>
  );
}

D) Ensure imports (at the top of src/main.tsx)
import '@/styles/theme.css';
import '@/styles/card-enhancer.css';
/* If '@' alias is not available, use relative: 
   import './styles/theme.css';
   import './styles/card-enhancer.css';
*/

3) Quick Verification Checklist (copy/paste for yourself)

Open /card/property/42 (or any real ID):

All card/panel/section surfaces show the lighter #2A2F38 interior.

Borders are subtle and consistent.

Header rows inside these boxes align title + actions left/right.

Flip through Unit/Lease/Tenant/Owner cards—same surface everywhere.

Open any page that used .section, .card, .panel, .gen-card, .gen-panel: all now pick up the light-grey surface.

DevTools → Elements: confirm computed background-color: rgb(42, 47, 56) (≈ #2A2F38) for those boxes.

4) Why this locks it (so Replit stops drifting)

We centralize the color in tokens (--ecc-object-bg) and apply only via classes (ecc-object + normalized selectors).

We guarantee imports at app entry so styles actually load.

We don’t touch routes, data, or admin flows—pure presentation.

Future visual changes = one token edit; everywhere updates automatically.