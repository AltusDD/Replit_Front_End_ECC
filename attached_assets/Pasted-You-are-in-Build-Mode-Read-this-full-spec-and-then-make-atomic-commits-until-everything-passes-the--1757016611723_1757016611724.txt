You are in Build Mode. Read this full spec and then make atomic commits until everything passes the checks at the end. Keep all changes inside /src only (no package.json or backend changes).

========================
PROJECT CONTEXT (DO NOT CHANGE)
========================
• Stack: React + Vite + TypeScript.
• Portfolio pages live at:
  - /src/pages/portfolio/properties/index.tsx
  - /src/pages/portfolio/units/index.tsx
  - /src/pages/portfolio/leases/index.tsx
  - /src/pages/portfolio/tenants/index.tsx
  - /src/pages/portfolio/owners/index.tsx
• Shared table columns + mappers: /src/pages/portfolio/columns.tsx
• Shared table component: /src/components/DataTable.tsx
• Data utilities: /src/features/data/useCollection.ts
• Formatters: /src/utils/format.tsx (must export: money, percent, shortDate, boolBadge)
• Stylesheet for tables: /src/styles/table.css (Genesis theme tokens already exist; enhance, don’t replace).
• API: pages call useCollection(url) with endpoints like /api/portfolio/{properties|units|leases|tenants|owners}. API may return either an array or an object with { data: [...] }.

========================
BUGS TO FIX (HARD REQUIREMENTS)
========================
A) “No data” across all portfolio pages + AbortError in console.
   1) In /src/features/data/useCollection.ts:
      - Export BOTH a named and default export: `export function useCollection...` AND `export default useCollection`.
      - Accept either array or {data:[...]} and always normalize to Array<any>.
      - Swallow/ignore AbortError on unmount to avoid noisy logs and HMR loops.
      - Return a stable shape: { data: any[], loading: boolean, error: string | null }.

   2) In every portfolio page, verify imports:
      - `import useCollection from "../../../features/data/useCollection";`
      - `import DataTable from "../../../components/DataTable";`
      - From "../columns": import the proper column config AND the mapper:
        properties:  PROPERTY_COLUMNS, mapProperty
        units:       UNIT_COLUMNS, mapUnit
        leases:      LEASE_COLUMNS, mapLease
        tenants:     TENANT_COLUMNS, mapTenant
        owners:      OWNER_COLUMNS, mapOwner

   3) In /src/pages/portfolio/columns.tsx:
      - Ensure the following NAMED exports exist: PROPERTY_COLUMNS, UNIT_COLUMNS, LEASE_COLUMNS, TENANT_COLUMNS, OWNER_COLUMNS and mapProperty, mapUnit, mapLease, mapTenant, mapOwner.
      - Keep column keys aligned with page data (IDs, names, etc.) and ensure numeric columns have `align: "right"`.

   4) In /src/components/DataTable.tsx:
      - Ensure DEFAULT export: `export default function DataTable(...) { ... }`
      - No named export called DataTable. Consumers import default.

B) “The requested module … does not provide an export named 'DataTable' / 'useCollection'”
   • Addressed by A(1) and A(4). Also run a global import check to ensure pages import defaults as specified above.

========================
GENESIS DESIGN & UX UPLIFT (IMPLEMENT FULLY)
========================
(You will implement the features below DIRECTLY into DataTable.tsx + table.css and use them from the five portfolio pages without asking the user to paste props later. Provide sensible defaults so everything works immediately.)

1) Visual polish (table.css + DataTable DOM)
   - Lighter dark theme contrast (keep brand): rows alternate banding, body text brighter, subtle lines.
   - Increase row vertical padding to improve scan.
   - Right-align numeric cells; left-align text.
   - Sticky header AND sticky filter row (two sticky rows).
   - Clear row hover (slightly brighter background).
   - “Genesis” summary KPI strip at the top of each page (uses existing counters on the page).

2) Per-column filters (zero-config)
   - Show a filter row under headers automatically:
     • text columns → <input placeholder="Filter…">
     • enum columns → <select> auto-populated from data (add “All”)
     • number columns → min/max inputs (two inputs in one cell)
   - Filtering happens client-side.
   - Combine with global search input above the table.

3) Sorting
   - Single-column toggle sort by header click.
   - (Optional but implement) Shift+Click to add secondary sorts.
   - Numeric sort for numeric columns; localeCompare for strings; dates by valueOf.

4) Pagination
   - Move page-size select to the FOOTER next to Prev / Next.
   - Page size options: [25, 50, 100, 200]. Default 25.
   - Footer shows “X results” and current slice.

5) Row interactivity (batteries included)
   - Clicking a row (single click) highlights row.
   - Double-click opens a right-side Drawer with an “Asset Card” (read-only summary using the file ecc_portfolio_card_standard.md as UX reference — show a clean card with title, address, badges, and a stats grid).
   - Also add a trailing “⋯” actions menu column with at least:
     • View details (opens the same Drawer)
     • Copy row link (copies path `/portfolio/{section}/{id}` to clipboard if id exists)
     • Export row JSON (downloads client-side JSON file of the row)
   - Provide resilient empty-value placeholders (“—”).

6) CSV Export
   - Button top-right “Export CSV” exports current filtered+sorted+paged selection (or provide toggle to export all filtered rows). Use safe CSV escaping.

7) Loading / Empty / Error states
   - Skeleton rows while loading.
   - Empty state: centered icon + “No results.”
   - Error state: inline alert and a “Retry” button that re-calls useCollection.

8) Accessibility
   - Semantic table roles, focus outlines for filter fields and action menu.
   - aria-labels on buttons and inputs.

========================
DATA FLOW GUARANTEES
========================
• useCollection(url) must:
  - Abort previous fetch on URL change/unmount (AbortController).
  - Accept both array and {data:[...]} response shapes; normalize to array.
  - Handle fetch failures gracefully: set error string and data=[].
  - Never throw AbortError; ignore it.

• Pages must:
  - Call useCollection with the correct endpoint.
  - Map raw items through the provided mappers (mapProperty, mapUnit, etc) BEFORE handing to DataTable. Mappers must return flat rows with the keys the columns expect.

========================
FILES TO EDIT (ONLY THESE)
========================
1) /src/features/data/useCollection.ts
   - Implement robust hook as specified; default + named export.

2) /src/components/DataTable.tsx
   - Default export only.
   - Implement features #1–#7.
   - Props API (keep simple):
     interface Column {
       key: string;
       header: string;
       align?: "left" | "right";
       type?: "text" | "enum" | "number" | "date";
       enumValues?: string[]; // optional override, else infer
     }
     type DataTableProps = {
       rows: any[];
       columns: Column[];
       initialSort?: { key: string; dir: "asc" | "desc" }[];
       getRowId?: (r:any)=>string | number | undefined; // default tries r.id
       drawerTitle?: (r:any)=>string; // optional
     }

3) /src/pages/portfolio/columns.tsx
   - Ensure all five column arrays + all five mappers exist and are exported (named).
   - Column typing includes proper `type` and `align`.

4) /src/pages/portfolio/*/index.tsx (five pages)
   - Use the normalized imports and DataTable defaults.
   - Build the page header KPIs (use counts from the fetched arrays).
   - Wire DataTable with rows={mapped} columns={…} and drawerTitle derived from the row (e.g., property address or tenant name).
   - Remove any leftover per-page filter UIs that duplicate DataTable’s built-in filters.

5) /src/styles/table.css
   - Keep existing variables and extend with:
     • lighter zebra banding (two tones)
     • sticky header + sticky filter row styles
     • row hover, padding, typography weight
     • footer layout (page size selector at bottom)
   - Ensure contrast/readability is improved (Genesis black/gold, but not “too dark”).

========================
GUARDRAILS
========================
• Do NOT change backend endpoints, env handling, or anything outside /src.
• Do NOT remove existing exports from format.tsx (money, percent, shortDate, boolBadge) — only use them.
• Do NOT rename public props used by pages unless you update all call sites.
• Keep DataTable as DEFAULT export only; keep useCollection with BOTH default and named export.
• Keep the code TypeScript-clean (no any leakage where avoidable).
• Keep the theme tokens; only enhance table.css (no Tailwind, no external CSS libs).

========================
ACCEPTANCE CHECKS (RUN MANUALLY AND FIX UNTIL GREEN)
========================
1) HMR stable: no red console errors on edits; no “export missing” errors.
2) Navigate to each page:
   • /portfolio/properties
   • /portfolio/units
   • /portfolio/leases
   • /portfolio/tenants
   • /portfolio/owners
   All show >0 rows (assuming API responds) OR show skeleton then data. If API returns {data:[…]}, rows still render.
3) Sorting works on text/number/date columns. Shift+Click builds multi-sort.
4) Column filters work: text contains; enum selects; number min/max ranges.
5) Global search input filters all visible columns.
6) Pagination footer shows Prev/Next + page-size select (25, 50, 100, 200). Default 25.
7) CSV export downloads a file with the currently filtered+sorted rows.
8) Row hover is visible; double-click opens a right Drawer with an Asset Card using the row data. “⋯” menu works (view, copy link, export row JSON).
9) Numeric columns are right-aligned. Visual contrast lighter than before; zebra banding present; headers sticky; filter row sticky.
10) No AbortError spam in console when navigating or HMRing. No uncaught errors.

========================
COMMIT PLAN
========================
Make small, clear commits:
  feat(data): harden useCollection and normalize API shapes
  feat(table): Genesis DataTable (filters, sorting, pagination, drawer, actions)
  feat(columns): add typed column configs + mappers for all 5 pages
  feat(pages): wire pages to new DataTable + KPIs
  style(table): Genesis polish (banding, spacing, sticky, footer)
Include brief notes in each commit message about what changed.

Begin now.
