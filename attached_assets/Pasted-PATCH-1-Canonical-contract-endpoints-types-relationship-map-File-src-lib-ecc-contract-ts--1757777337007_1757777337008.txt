PATCH 1 — Canonical contract (endpoints + types + relationship map)

File: src/lib/ecc-contract.ts

/** ECC Canonical API Contract
 *  All card pages MUST use these endpoints and these relationship rules.
 *  No fallbacks, no guessing, no alternative views.
 */

export const ECC_API = {
  entities: {
    properties: "/api/entities/properties",
    units: "/api/entities/units",
    leases: "/api/entities/leases",
    tenants: "/api/entities/tenants",
    owners: "/api/entities/owners",
  },
} as const;

/** Canonical field lists (read-only) */
export type Property = {
  id: number;
  doorloop_id?: string | null;
  street_1?: string | null;
  city?: string | null;
  state?: string | null;
  zip?: string | null;
  type?: string | null;
  class?: string | null;
  status?: string | null;
  lat?: number | null;
  lng?: number | null;
  owner_id?: number | null; // optional until backfill
};

export type Unit = {
  id: number;
  doorloop_id?: string | null;
  doorloop_property_id?: string | null; // canonical link to Property via doorloop_id
  property_id?: number | null;          // optional until backfill completes
  unit_number?: string | null;
  beds?: number | null;
  baths?: number | null;
  sqft?: number | null;
  rent_cents?: number | null;
  status?: string | null;
};

export type Lease = {
  doorloop_id: string;
  property_id: number;
  unit_id: number | null;
  primary_tenant_id: number | null;
  start_date?: string | null;
  end_date?: string | null;
  rent_cents?: number | null;
  status?: string | null;
};

export type Tenant = {
  id: number;
  doorloop_id?: string | null;
  display_name?: string | null;
  primary_email?: string | null;
  primary_phone?: string | null;
};

export type Owner = {
  id: number;
  doorloop_id?: string | null;
  display_name?: string | null;
  primary_email?: string | null;
  primary_phone?: string | null;
};

/** Canonical relationship mapping (DO NOT CHANGE WITHOUT PM APPROVAL)
 *  - Property → Units: units.doorloop_property_id === properties.doorloop_id
 *  - Property → Leases: leases.property_id === properties.id
 *  - Unit → Active Lease: leases.unit_id === units.id AND leases.status = 'active'
 *  - Lease → Primary Tenant: tenants.id === leases.primary_tenant_id
 *  - Owner → Properties: properties.owner_id === owners.id (if missing, treat as empty)
 */
export const ECC_REL = {
  property_to_units: "units.doorloop_property_id ⇄ properties.doorloop_id",
  property_to_leases: "leases.property_id     ⇄ properties.id",
  unit_to_active_lease: "leases.unit_id         ⇄ units.id & status='active'",
  lease_to_primary_tenant: "tenants.id           ⇄ leases.primary_tenant_id",
  owner_to_properties: "properties.owner_id    ⇄ owners.id",
} as const;

PATCH 2 — Deterministic resolvers (no endpoint drift, no fallback)

File: src/lib/ecc-resolvers.ts

import { useQuery } from "@tanstack/react-query";
import { apiGet } from "./ecc-api";
import { ECC_API, Property, Unit, Lease, Tenant, Owner } from "./ecc-contract";

/** Tiny QS util */
export function qs(parts: Record<string, string | number | null | undefined>) {
  return Object.entries(parts)
    .filter(([, v]) => v !== undefined && v !== null && v !== "")
    .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(String(v))}`)
    .join("&");
}

/** STRICT fetch-one-by-id (ECC internal id only) */
async function fetchOneById<T>(endpoint: string, id: string | number): Promise<T | null> {
  const url = `${endpoint}?${qs({ select: "*", id: `eq.${id}`, limit: 1 })}`;
  const rows = await apiGet(url);
  return Array.isArray(rows) && rows[0] ? (rows[0] as T) : null;
}

/** Collections (strict, by explicit relationships) */
async function fetchUnitsForProperty(p: Property): Promise<Unit[]> {
  if (!p.doorloop_id) return []; // canonical rule uses DoorLoop linkage
  const url = `${ECC_API.entities.units}?${qs({
    select: "id,doorloop_id,doorloop_property_id,property_id,unit_number,beds,baths,sqft,rent_cents,status",
    doorloop_property_id: `eq.${p.doorloop_id}`,
  })}`;
  const rows = await apiGet(url);
  return Array.isArray(rows) ? (rows as Unit[]) : [];
}

async function fetchLeasesForProperty(p: Property): Promise<Lease[]> {
  const url = `${ECC_API.entities.leases}?${qs({
    select: "doorloop_id,property_id,unit_id,primary_tenant_id,start_date,end_date,rent_cents,status",
    property_id: `eq.${p.id}`,
  })}`;
  const rows = await apiGet(url);
  return Array.isArray(rows) ? (rows as Lease[]) : [];
}

async function fetchTenantsByIds(ids: number[]): Promise<Tenant[]> {
  if (!ids.length) return [];
  const url = `${ECC_API.entities.tenants}?${qs({
    select: "id,doorloop_id,display_name,primary_email,primary_phone",
    id: `in.(${ids.join(",")})`,
  })}`;
  const rows = await apiGet(url);
  return Array.isArray(rows) ? (rows as Tenant[]) : [];
}

async function fetchPropertiesByOwner(ownerId: number): Promise<Property[]> {
  const url = `${ECC_API.entities.properties}?${qs({
    select: "id,doorloop_id,street_1,city,state,zip,type,class,status,lat,lng,owner_id",
    owner_id: `eq.${ownerId}`,
  })}`;
  const rows = await apiGet(url);
  return Array.isArray(rows) ? (rows as Property[]) : [];
}

/* ---------------------- Public resolvers (ID ONLY) ---------------------- */
// Card pages must call these; router :id is ECC internal id for all entities.

export function usePropertyById(id: string) {
  return useQuery({
    queryKey: ["prop", id],
    queryFn: () => fetchOneById<Property>(ECC_API.entities.properties, id),
  });
}
export function useUnitById(id: string) {
  return useQuery({
    queryKey: ["unit", id],
    queryFn: () => fetchOneById<Unit>(ECC_API.entities.units, id),
  });
}
export function useLeaseById(id: string) {
  // lease route uses doorloop_id OR numeric synthetic id? We standardize: ECC id is doorloop_id not guaranteed.
  // Our router must pass ECC internal id. If your leases table doesn't have numeric id, use doorloop_id in route
  // and change here accordingly (field rename). For now: id = doorloop_id is NOT supported by contract.
  return useQuery({
    queryKey: ["lease", id],
    queryFn: () => fetchOneById<Lease>(ECC_API.entities.leases, id),
  });
}
export function useTenantById(id: string) {
  return useQuery({
    queryKey: ["tenant", id],
    queryFn: () => fetchOneById<Tenant>(ECC_API.entities.tenants, id),
  });
}
export function useOwnerById(id: string) {
  return useQuery({
    queryKey: ["owner", id],
    queryFn: () => fetchOneById<Owner>(ECC_API.entities.owners, id),
  });
}

/* ----------------- Relationship helpers (explicit rules) ----------------- */

export function usePropertyRelations(p?: Property | null) {
  return useQuery({
    enabled: !!p?.id,
    queryKey: ["prop-rel", p?.id, p?.doorloop_id],
    queryFn: async () => {
      if (!p) return { units: [], leases: [], tenants: [] as Tenant[] };
      const [units, leases] = await Promise.all([
        fetchUnitsForProperty(p),       // units.doorloop_property_id === property.doorloop_id
        fetchLeasesForProperty(p),      // leases.property_id === property.id
      ]);
      const tenantIds = Array.from(
        new Set(
          leases.map((l) => l.primary_tenant_id).filter((v): v is number => typeof v === "number")
        )
      );
      const tenants = await fetchTenantsByIds(tenantIds);
      return { units, leases, tenants };
    },
  });
}

export function useUnitRelations(u?: Unit | null) {
  return useQuery({
    enabled: !!u?.id,
    queryKey: ["unit-rel", u?.id],
    queryFn: async () => {
      if (!u) return { property: null as Property | null, activeLease: null as Lease | null, tenant: null as Tenant | null };
      // Property via doorloop linkage (explicit)
      let property: Property | null = null;
      if (u.doorloop_property_id) {
        const url = `${ECC_API.entities.properties}?${qs({
          select: "id,doorloop_id,street_1,city,state,zip,type,class,status,lat,lng,owner_id",
          doorloop_id: `eq.${u.doorloop_property_id}`,
          limit: 1,
        })}`;
        const rows = await apiGet(url);
        property = Array.isArray(rows) && rows[0] ? (rows[0] as Property) : null;
      }
      // Active lease
      const leaseUrl = `${ECC_API.entities.leases}?${qs({
        select: "doorloop_id,property_id,unit_id,primary_tenant_id,start_date,end_date,rent_cents,status",
        unit_id: `eq.${u.id}`,
        status: "eq.active",
        limit: 1,
      })}`;
      const lr = await apiGet(leaseUrl);
      const activeLease: Lease | null = Array.isArray(lr) && lr[0] ? (lr[0] as Lease) : null;

      // Primary tenant
      let tenant: Tenant | null = null;
      if (activeLease?.primary_tenant_id) {
        const tUrl = `${ECC_API.entities.tenants}?${qs({
          select: "id,doorloop_id,display_name,primary_email,primary_phone",
          id: `eq.${activeLease.primary_tenant_id}`, limit: 1,
        })}`;
        const tr = await apiGet(tUrl);
        tenant = Array.isArray(tr) && tr[0] ? (tr[0] as Tenant) : null;
      }
      return { property, activeLease, tenant };
    },
  });
}

export function useOwnerRelations(o?: Owner | null) {
  return useQuery({
    enabled: !!o?.id,
    queryKey: ["owner-rel", o?.id],
    queryFn: async () => {
      if (!o) return { properties: [] as Property[] };
      const properties = await fetchPropertiesByOwner(o.id);
      return { properties };
    },
  });
}

export function useLeaseRelations(l?: Lease | null) {
  return useQuery({
    enabled: !!l,
    queryKey: ["lease-rel", l?.property_id, l?.unit_id, l?.primary_tenant_id],
    queryFn: async () => {
      if (!l) return { property: null as Property | null, unit: null as Unit | null, tenant: null as Tenant | null };
      const [property, unit, tenant] = await Promise.all([
        fetchOneById<Property>(ECC_API.entities.properties, l.property_id),
        l.unit_id ? fetchOneById<Unit>(ECC_API.entities.units, l.unit_id) : Promise.resolve(null),
        l.primary_tenant_id ? fetchOneById<Tenant>(ECC_API.entities.tenants, l.primary_tenant_id) : Promise.resolve(null),
      ]);
      return { property, unit, tenant };
    },
  });
}

export function useTenantRelations(t?: Tenant | null) {
  return useQuery({
    enabled: !!t?.id,
    queryKey: ["tenant-rel", t?.id],
    queryFn: async () => {
      if (!t) return { leases: [] as Lease[], properties: [] as Property[], units: [] as Unit[] };
      // recent leases for tenant
      const leasesUrl = `${ECC_API.entities.leases}?${qs({
        select: "doorloop_id,property_id,unit_id,primary_tenant_id,start_date,end_date,rent_cents,status",
        primary_tenant_id: `eq.${t.id}`,
        // optional: order by end_date desc if available
      })}`;
      const leases = (await apiGet(leasesUrl)) as Lease[] | undefined || [];
      // fetch properties/units referenced
      const propIds = Array.from(new Set(leases.map(l => l.property_id).filter(Boolean))) as number[];
      const unitIds = Array.from(new Set(leases.map(l => l.unit_id).filter((v): v is number => typeof v === "number")));
      const props = propIds.length
        ? await apiGet(`${ECC_API.entities.properties}?${qs({ select: "id,doorloop_id,street_1,city,state,zip,type,class,status,lat,lng,owner_id", id: `in.(${propIds.join(",")})` })}`)
        : [];
      const units = unitIds.length
        ? await apiGet(`${ECC_API.entities.units}?${qs({ select: "id,doorloop_id,doorloop_property_id,property_id,unit_number,beds,baths,sqft,rent_cents,status", id: `in.(${unitIds.join(",")})` })}`)
        : [];
      return { leases, properties: props as Property[], units: units as Unit[] };
    },
  });
}

PATCH 3 — Baseline pages (ALL 5) using strict resolvers

These are safe, read-only shells with KPIs, Overview, Relationships, and Right Rail (Map where deterministically possible). They only call the resolvers above and expect internal IDs in the route.

3.1 Property (replace existing)

File: src/pages/card/property/index.tsx

import React from "react";
import { useParams, Link } from "wouter";
import Section from "../../../components/Section";
import { FieldRows } from "../../../components/FieldRows";
import GeoMap from "../../../components/GeoMap";
import { Line, Block } from "../../../components/Skeleton";
import { humanize, joinAddress, moneyCents, isFiniteNumber } from "../../../lib/format";
import { usePropertyById, usePropertyRelations } from "../../../lib/ecc-resolvers";

function Skeleton() {
  return (
    <div style={{ display:"grid", gridTemplateColumns:"1fr 340px", gap:16 }}>
      <section className="ecc-object"><div className="ecc-header"><Line w={240}/><div/></div><Block h={96}/></section>
      <aside style={{ display:"grid", gap:12 }}><Section title={<Line w={160}/>}><Block h={260}/></Section></aside>
    </div>
  );
}

export default function PropertyCardPage(){
  const { id } = useParams<{ id: string }>();
  const q = usePropertyById(id);
  if (q.isLoading) return <Skeleton />;
  if (q.isError) return <section className="ecc-object">Error loading property.</section>;
  if (!q.data) return <section className="ecc-object">Property not found. (Route expects internal ECC id)</section>;

  const p = q.data;
  const addr = joinAddress([p.street_1, p.city, p.state, p.zip]);
  const type = humanize(p.type), klass = humanize(p.class), status = humanize(p.status);
  const lat = isFiniteNumber(p.lat) ? p.lat : null, lng = isFiniteNumber(p.lng) ? p.lng : null;

  const rel = usePropertyRelations(p);
  const leases = rel.data?.leases || [];
  const unitCount = rel.data?.units?.length ?? null;
  const activeLeases = leases.filter(l => (l.status||"").toLowerCase()==="active").length || null;
  const occ = unitCount ? Math.round((Math.min(activeLeases||0, unitCount)/unitCount)*100) : null;
  const avgRent = (() => {
    const nums = leases.map(l=>l.rent_cents).filter((n): n is number => typeof n==="number");
    if (!nums.length) return null;
    return Math.round(nums.reduce((a,b)=>a+b,0)/nums.length);
  })();

  return (
    <div style={{ display:"grid", gridTemplateColumns:"1fr 340px", gap:16 }}>
      <div>
        <section className="ecc-object" style={{ marginBottom:12 }}>
          <div className="ecc-header">
            <div className="ecc-title" style={{ fontSize:20, fontWeight:700 }}>{addr !== "—" ? addr : `Property #${p.id}`}</div>
            <div className="ecc-actions" style={{ display:"flex", gap:8 }}>
              <button className="ecc-object" style={{ padding:"8px 12px" }}>Edit</button>
              <button className="ecc-object" style={{ padding:"8px 12px" }}>Export PDF</button>
              <button className="ecc-object" style={{ padding:"8px 12px" }}>New Work Order</button>
            </div>
          </div>
          <div style={{ display:"grid", gridTemplateColumns:"repeat(4, minmax(0,1fr))", gap:12 }}>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Units</div><div style={{ fontSize:20, fontWeight:700 }}>{unitCount ?? "—"}</div></div>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Occupancy</div><div style={{ fontSize:20, fontWeight:700 }}>{occ==null?"—":`${occ}%`}</div></div>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Active Leases</div><div style={{ fontSize:20, fontWeight:700 }}>{activeLeases ?? "—"}</div></div>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Avg Rent</div><div style={{ fontSize:20, fontWeight:700 }}>{moneyCents(avgRent)}</div></div>
          </div>
        </section>

        <Section title="Property Overview">
          <FieldRows rows={[
            { label:"Address", value: addr },
            { label:"Type", value: type },
            { label:"Class", value: klass },
            { label:"Status", value: status },
            { label:"IDs", value: <>#{p.id}{p.doorloop_id ? <> • DL {p.doorloop_id}</> : null}</> },
          ]}/>
        </Section>

        <Section title="Units → Active Lease → Primary Tenant" >
          {rel.isLoading ? <Block h={96}/> :
           (rel.data?.units?.length ?? 0) === 0 ? <div style={{ opacity:.8 }}>No units linked via DoorLoop.</div> :
           <div style={{ display:"grid", gridTemplateColumns:"repeat(auto-fill, minmax(260px,1fr))", gap:12 }}>
            {rel.data!.units.map(u => {
              const lease = leases.find(l => l.unit_id===u.id && (l.status||"").toLowerCase()==="active");
              const tenant = lease ? (rel.data!.tenants || []).find(t => t.id===lease.primary_tenant_id) : null;
              return (
                <div key={u.id} className="ecc-object" style={{ padding:12 }}>
                  <div style={{ fontWeight:700, marginBottom:6 }}>Unit {u.unit_number ?? u.id}</div>
                  <div style={{ fontSize:12, opacity:.8, marginBottom:8 }}>{u.beds ?? "—"} bd • {u.baths ?? "—"} ba</div>
                  <div><span className="ecc-label">Active Lease:</span> {lease ? `#${lease.doorloop_id}` : "None"}</div>
                  <div><span className="ecc-label">Primary Tenant:</span> {tenant ? <Link href={`/card/tenant/${tenant.id}`}><a>{tenant.display_name ?? `Tenant #${tenant.id}`}</a></Link> : "—"}</div>
                </div>
              );
            })}
           </div>
          }
        </Section>
      </div>

      <aside style={{ display:"grid", gap:12 }}>
        <GeoMap title="Location" address={addr} lat={lat} lng={lng} />
        <Section title="Risk Score"><div style={{ fontSize:28, fontWeight:800 }}>—</div><div className="ecc-label">Key Factors</div><div style={{ opacity:.8 }}>None listed.</div></Section>
        <Section title="Key Dates"><div style={{ opacity:.8 }}>No upcoming events.</div></Section>
      </aside>
    </div>
  );
}

3.2 Unit

File: src/pages/card/unit/index.tsx

import React from "react";
import { useParams, Link } from "wouter";
import Section from "../../../components/Section";
import { FieldRows } from "../../../components/FieldRows";
import GeoMap from "../../../components/GeoMap";
import { Line, Block } from "../../../components/Skeleton";
import { humanize, moneyCents, isFiniteNumber, joinAddress } from "../../../lib/format";
import { useUnitById, useUnitRelations } from "../../../lib/ecc-resolvers";

function Skeleton(){ return <section className="ecc-object"><div className="ecc-header"><Line w={220}/></div><Block h={120}/></section>; }

export default function UnitCardPage(){
  const { id } = useParams<{ id: string }>();
  const q = useUnitById(id);
  if (q.isLoading) return <Skeleton/>;
  if (q.isError) return <section className="ecc-object">Error loading unit.</section>;
  if (!q.data) return <section className="ecc-object">Unit not found. (Route expects internal ECC id)</section>;

  const u = q.data;
  const rel = useUnitRelations(u);

  const title = `Unit ${u.unit_number ?? u.id}`;
  const rent = moneyCents(u.rent_cents ?? null);

  return (
    <div style={{ display:"grid", gridTemplateColumns:"1fr 340px", gap:16 }}>
      <div>
        <section className="ecc-object" style={{ marginBottom:12 }}>
          <div className="ecc-header"><div className="ecc-title" style={{ fontSize:20, fontWeight:700 }}>{title}</div></div>
          <div style={{ display:"grid", gridTemplateColumns:"repeat(3, minmax(0,1fr))", gap:12 }}>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Status</div><div style={{ fontSize:20, fontWeight:700 }}>{humanize(u.status)}</div></div>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Beds/Baths</div><div style={{ fontSize:20, fontWeight:700 }}>{u.beds ?? "—"} / {u.baths ?? "—"}</div></div>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Rent</div><div style={{ fontSize:20, fontWeight:700 }}>{rent}</div></div>
          </div>
        </section>

        <Section title="Overview">
          <FieldRows rows={[
            { label:"Unit Number", value: u.unit_number ?? "—" },
            { label:"DoorLoop ID", value: u.doorloop_id ?? "—" },
            { label:"Property Link", value: rel.data?.property ? <Link href={`/card/property/${rel.data.property.id}`}><a>Open Property</a></Link> : "—" },
          ]}/>
        </Section>

        <Section title="Lease & Tenant">
          {rel.isLoading ? <Block h={96}/> : (
            <>
              <div><span className="ecc-label">Active Lease:</span> {rel.data?.activeLease ? `#${rel.data.activeLease.doorloop_id}` : "None"}</div>
              <div><span className="ecc-label">Primary Tenant:</span> {rel.data?.tenant ? <Link href={`/card/tenant/${rel.data.tenant.id}`}><a>{rel.data.tenant.display_name ?? `Tenant #${rel.data.tenant.id}`}</a></Link> : "—"}</div>
            </>
          )}
        </Section>
      </div>

      <aside style={{ display:"grid", gap:12 }}>
        <GeoMap title="Location"
          address={rel.data?.property ? joinAddress([rel.data.property.street_1, rel.data.property.city, rel.data.property.state, rel.data.property.zip]) : undefined}
          lat={isFiniteNumber(rel.data?.property?.lat||null) ? (rel.data!.property!.lat as number): null}
          lng={isFiniteNumber(rel.data?.property?.lng||null) ? (rel.data!.property!.lng as number): null}
        />
      </aside>
    </div>
  );
}

3.3 Lease

File: src/pages/card/lease/index.tsx

import React from "react";
import { useParams, Link } from "wouter";
import Section from "../../../components/Section";
import { FieldRows } from "../../../components/FieldRows";
import { Line, Block } from "../../../components/Skeleton";
import { humanize, moneyCents } from "../../../lib/format";
import { useLeaseById, useLeaseRelations } from "../../../lib/ecc-resolvers";

function Skeleton(){ return <section className="ecc-object"><div className="ecc-header"><Line w={220}/></div><Block h={120}/></section>; }

export default function LeaseCardPage(){
  const { id } = useParams<{ id: string }>();
  const q = useLeaseById(id);
  if (q.isLoading) return <Skeleton/>;
  if (q.isError) return <section className="ecc-object">Error loading lease.</section>;
  if (!q.data) return <section className="ecc-object">Lease not found. (Route expects internal ECC id)</section>;

  const l = q.data;
  const rel = useLeaseRelations(l);

  return (
    <div style={{ display:"grid", gridTemplateColumns:"1fr 340px", gap:16 }}>
      <div>
        <section className="ecc-object" style={{ marginBottom:12 }}>
          <div className="ecc-header"><div className="ecc-title" style={{ fontSize:20, fontWeight:700 }}>Lease #{l.doorloop_id ?? "—"}</div></div>
          <div style={{ display:"grid", gridTemplateColumns:"repeat(3, minmax(0,1fr))", gap:12 }}>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Status</div><div style={{ fontSize:20, fontWeight:700 }}>{humanize(l.status)}</div></div>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Rent</div><div style={{ fontSize:20, fontWeight:700 }}>{moneyCents(l.rent_cents ?? null)}</div></div>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Term</div><div style={{ fontSize:20, fontWeight:700 }}>{l.start_date ?? "—"} → {l.end_date ?? "—"}</div></div>
          </div>
        </section>

        <Section title="Relationships">
          {rel.isLoading ? <Block h={96}/> : (
            <FieldRows rows={[
              { label:"Property", value: rel.data?.property ? <Link href={`/card/property/${rel.data.property.id}`}><a>Open Property</a></Link> : "—" },
              { label:"Unit", value: rel.data?.unit ? <Link href={`/card/unit/${rel.data.unit.id}`}><a>Open Unit</a></Link> : "—" },
              { label:"Primary Tenant", value: rel.data?.tenant ? <Link href={`/card/tenant/${rel.data.tenant.id}`}><a>{rel.data.tenant.display_name ?? `Tenant #${rel.data.tenant.id}`}</a></Link> : "—" },
            ]}/>
          )}
        </Section>
      </div>
      <aside />
    </div>
  );
}

3.4 Tenant

File: src/pages/card/tenant/index.tsx

import React from "react";
import { useParams, Link } from "wouter";
import Section from "../../../components/Section";
import { FieldRows } from "../../../components/FieldRows";
import { Line, Block } from "../../../components/Skeleton";
import { useTenantById, useTenantRelations } from "../../../lib/ecc-resolvers";

function Skeleton(){ return <section className="ecc-object"><div className="ecc-header"><Line w={220}/></div><Block h={120}/></section>; }

export default function TenantCardPage(){
  const { id } = useParams<{ id: string }>();
  const q = useTenantById(id);
  if (q.isLoading) return <Skeleton/>;
  if (q.isError) return <section className="ecc-object">Error loading tenant.</section>;
  if (!q.data) return <section className="ecc-object">Tenant not found. (Route expects internal ECC id)</section>;

  const t = q.data;
  const rel = useTenantRelations(t);

  return (
    <div style={{ display:"grid", gridTemplateColumns:"1fr 340px", gap:16 }}>
      <div>
        <section className="ecc-object" style={{ marginBottom:12 }}>
          <div className="ecc-header"><div className="ecc-title" style={{ fontSize:20, fontWeight:700 }}>{t.display_name ?? `Tenant #${t.id}`}</div></div>
        </section>

        <Section title="Contact">
          <FieldRows rows={[
            { label:"Email", value: t.primary_email ?? "—" },
            { label:"Phone", value: t.primary_phone ?? "—" },
          ]}/>
        </Section>

        <Section title="Leases">
          {rel.isLoading ? <Block h={96}/> :
            (rel.data?.leases?.length ?? 0) === 0 ? <div style={{ opacity:.8 }}>No leases found.</div> :
            <div style={{ display:"grid", gap:8 }}>
              {rel.data!.leases.map((l) => (
                <div key={l.doorloop_id} className="ecc-object" style={{ padding:8 }}>
                  Lease #{l.doorloop_id} — <Link href={`/card/property/${l.property_id}`}><a>Open Property</a></Link>
                  {l.unit_id ? <> • <Link href={`/card/unit/${l.unit_id}`}><a>Open Unit</a></Link></> : null}
                </div>
              ))}
            </div>
          }
        </Section>
      </div>
      <aside />
    </div>
  );
}

3.5 Owner

File: src/pages/card/owner/index.tsx

import React from "react";
import { useParams, Link } from "wouter";
import Section from "../../../components/Section";
import { FieldRows } from "../../../components/FieldRows";
import { Line, Block } from "../../../components/Skeleton";
import { useOwnerById, useOwnerRelations } from "../../../lib/ecc-resolvers";

function Skeleton(){ return <section className="ecc-object"><div className="ecc-header"><Line w={220}/></div><Block h={120}/></section>; }

export default function OwnerCardPage(){
  const { id } = useParams<{ id: string }>();
  const q = useOwnerById(id);
  if (q.isLoading) return <Skeleton/>;
  if (q.isError) return <section className="ecc-object">Error loading owner.</section>;
  if (!q.data) return <section className="ecc-object">Owner not found. (Route expects internal ECC id)</section>;

  const o = q.data;
  const rel = useOwnerRelations(o);

  return (
    <div style={{ display:"grid", gridTemplateColumns:"1fr 340px", gap:16 }}>
      <div>
        <section className="ecc-object" style={{ marginBottom:12 }}>
          <div className="ecc-header"><div className="ecc-title" style={{ fontSize:20, fontWeight:700 }}>{o.display_name ?? `Owner #${o.id}`}</div></div>
          <div style={{ display:"grid", gridTemplateColumns:"repeat(3, minmax(0,1fr))", gap:12 }}>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Properties</div><div style={{ fontSize:20, fontWeight:700 }}>{rel.data?.properties?.length ?? "—"}</div></div>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Email</div><div style={{ fontSize:20, fontWeight:700 }}>{o.primary_email ?? "—"}</div></div>
            <div className="ecc-object" style={{ padding:12 }}><div className="ecc-label">Phone</div><div style={{ fontSize:20, fontWeight:700 }}>{o.primary_phone ?? "—"}</div></div>
          </div>
        </section>

        <Section title="Contact">
          <FieldRows rows={[
            { label:"Email", value: o.primary_email ?? "—" },
            { label:"Phone", value: o.primary_phone ?? "—" },
          ]}/>
        </Section>

        <Section title="Properties">
          {rel.isLoading ? <Block h={96}/> :
            (rel.data?.properties?.length ?? 0) === 0 ? <div style={{ opacity:.8 }}>No linked properties.</div> :
            <div style={{ display:"grid", gap:8 }}>
              {rel.data!.properties.map((p) => (
                <div key={p.id} className="ecc-object" style={{ padding:8 }}>
                  <Link href={`/card/property/${p.id}`}><a>{p.street_1 ?? `Property #${p.id}`}</a></Link>
                </div>
              ))}
            </div>
          }
        </Section>
      </div>
      <aside />
    </div>
  );
}

Final guardrails (so Replit can’t drift)

All card pages import from ecc-resolvers.ts only. If you see any apiGet("/api/...") directly in a card file, delete and replace with the proper resolver.

Routes must pass ECC internal IDs. If a teammate navigates with DoorLoop IDs, they’ll see our explicit message; do not add fallbacks.

Relationships are fixed in ecc-contract.ts comments and implemented exactly in resolvers. If the upstream schema changes, we update one place (contract + resolvers), not page code.