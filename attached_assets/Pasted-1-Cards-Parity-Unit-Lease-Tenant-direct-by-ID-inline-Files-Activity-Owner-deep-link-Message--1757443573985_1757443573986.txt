1) Cards Parity: Unit/Lease/Tenant direct-by-ID + inline Files & Activity, Owner deep-link

Message to Replit (paste & run):

set -e
git checkout -b feat/cards-parity || git checkout feat/cards-parity

# Shared UI already exists: FilesTab, ActivityFeed, SourceBadges, styles.
# Add direct-by-id helpers + pages for Unit/Lease/Tenant; wire Owner deep-link.

mkdir -p src/pages/card/unit src/pages/card/lease src/pages/card/tenant

cat > src/pages/card/unit/api.ts <<'TS'
export type UnitRecord={id:number; label?:string; property_id?:number; status?:string; market_rent?:number; current_rent?:number; [k:string]:any};
async function getJSON(u:string){const r=await fetch(u); if(!r.ok) return {ok:false,status:r.status}; try{return await r.json()}catch{return {ok:true,json:null}}}
export async function fetchUnitById(raw:string|number):Promise<UnitRecord|null>{
  const id=Number(raw); if(!Number.isFinite(id)) return null;
  const byId=await getJSON(`/api/entities/units/${id}`); if((byId as any).ok && (byId as any).item) return (byId as any).item as UnitRecord;
  const list=await getJSON(`/api/portfolio/units`); const items=(list as any).items||(list as any).data||[]; return (items||[]).find((x:any)=>Number(x?.id)===id)||null;
}
export const unitTitle=(u:UnitRecord|null)=>u?.label?String(u.label):u?`Unit #${u.id}`:"";
TS

cat > src/pages/card/unit/index.tsx <<'TSX'
import React,{useEffect,useState,useMemo} from "react";
import {fetchUnitById,unitTitle,UnitRecord} from "./api";
import {useIntegrations} from "../../../lib/useIntegrations";
import FilesTab from "../../../features/files/FilesTab";
import ActivityFeed from "../../../features/activity/ActivityFeed";
import SourceBadges from "../../../components/ui/SourceBadges";

export default function UnitCardPage(){
  const [rec,setRec]=useState<UnitRecord|null>(null); const [loading,setLoading]=useState(true);
  const integrations=useIntegrations();
  const m=typeof window!=="undefined"?window.location.pathname.match(/\/card\/unit\/(\d+)/i):null; const id=m?.[1]||null;
  useEffect(()=>{(async()=>{ if(!id){setRec(null);setLoading(false);return;} setLoading(true); setRec(await fetchUnitById(id)); setLoading(false); })()},[id]);
  const title=useMemo(()=>unitTitle(rec),[rec]);
  if(loading) return <div className="card ecc-enhancer-block"><div className="card-header"><h1 className="text-base">Loading unit…</h1></div></div>;
  if(!rec) return <div className="card ecc-enhancer-block"><div className="card-header"><h1 className="text-base">Unit Not Found</h1></div></div>;
  return (
    <div className="ecc-enhancer-block">
      <div className="card bg-neutral-900 border border-neutral-800 mb-4">
        <div className="px-4 py-4 flex items-start justify-between">
          <div className="min-w-0">
            <h1 className="text-xl font-semibold truncate">{title||`Unit #${rec.id}`}</h1>
            <div className="text-xs text-neutral-500 mt-1">ID: {rec.id}{rec.status?<> · {rec.status}</>:null}</div>
            <div className="mt-2"><SourceBadges doorloop={!!integrations?.doorloop} corelogic={!!integrations?.corelogic} m365={!!integrations?.m365} dropbox={!!integrations?.dropbox}/></div>
          </div>
        </div>
      </div>
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
        <FilesTab doorloop={!!integrations?.doorloop} dropbox={!!integrations?.dropbox} entity="units" refId={rec.id}/>
        <ActivityFeed table="units" refId={rec.id}/>
      </div>
    </div>
  );
}
TSX

cat > src/pages/card/lease/api.ts <<'TS'
export type LeaseRecord={id:number; start_date?:string; end_date?:string; tenant_id?:number; property_id?:number; [k:string]:any};
async function getJSON(u:string){const r=await fetch(u); if(!r.ok) return {ok:false,status:r.status}; try{return await r.json()}catch{return {ok:true,json:null}}}
export async function fetchLeaseById(raw:string|number):Promise<LeaseRecord|null>{
  const id=Number(raw); if(!Number.isFinite(id)) return null;
  const byId=await getJSON(`/api/entities/leases/${id}`); if((byId as any).ok&&(byId as any).item) return (byId as any).item as LeaseRecord;
  const list=await getJSON(`/api/portfolio/leases`); const items=(list as any).items||(list as any).data||[]; return (items||[]).find((x:any)=>Number(x?.id)===id)||null;
}
export const leaseTitle=(l:LeaseRecord|null)=>l?(l.start_date && l.end_date?`${l.start_date} – ${l.end_date}`:`Lease #${l.id}`):"";
TS

cat > src/pages/card/lease/index.tsx <<'TSX'
import React,{useEffect,useState,useMemo} from "react";
import {fetchLeaseById,leaseTitle,LeaseRecord} from "./api";
import {useIntegrations} from "../../../lib/useIntegrations";
import FilesTab from "../../../features/files/FilesTab";
import ActivityFeed from "../../../features/activity/ActivityFeed";
import SourceBadges from "../../../components/ui/SourceBadges";

export default function LeaseCardPage(){
  const [rec,setRec]=useState<LeaseRecord|null>(null); const [loading,setLoading]=useState(true);
  const integrations=useIntegrations();
  const m=typeof window!=="undefined"?window.location.pathname.match(/\/card\/lease\/(\d+)/i):null; const id=m?.[1]||null;
  useEffect(()=>{(async()=>{ if(!id){setRec(null);setLoading(false);return;} setLoading(true); setRec(await fetchLeaseById(id)); setLoading(false); })()},[id]);
  const title=useMemo(()=>leaseTitle(rec),[rec]);
  if(loading) return <div className="card ecc-enhancer-block"><div className="card-header"><h1 className="text-base">Loading lease…</h1></div></div>;
  if(!rec) return <div className="card ecc-enhancer-block"><div className="card-header"><h1 className="text-base">Lease Not Found</h1></div></div>;
  return (
    <div className="ecc-enhancer-block">
      <div className="card bg-neutral-900 border border-neutral-800 mb-4">
        <div className="px-4 py-4 flex items-start justify-between">
          <div className="min-w-0">
            <h1 className="text-xl font-semibold truncate">{title||`Lease #${rec.id}`}</h1>
            <div className="text-xs text-neutral-500 mt-1">ID: {rec.id}</div>
            <div className="mt-2"><SourceBadges doorloop={!!integrations?.doorloop} corelogic={!!integrations?.corelogic} m365={!!integrations?.m365} dropbox={!!integrations?.dropbox}/></div>
          </div>
        </div>
      </div>
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
        <FilesTab doorloop={!!integrations?.doorloop} dropbox={!!integrations?.dropbox} entity="leases" refId={rec.id}/>
        <ActivityFeed table="leases" refId={rec.id}/>
      </div>
    </div>
  );
}
TSX

cat > src/pages/card/tenant/api.ts <<'TS'
export type TenantRecord={id:number; display_name?:string; email?:string; phone?:string; [k:string]:any};
async function getJSON(u:string){const r=await fetch(u); if(!r.ok) return {ok:false,status:r.status}; try{return await r.json()}catch{return {ok:true,json:null}}}
export async function fetchTenantById(raw:string|number):Promise<TenantRecord|null>{
  const id=Number(raw); if(!Number.isFinite(id)) return null;
  const byId=await getJSON(`/api/entities/tenants/${id}`); if((byId as any).ok&&(byId as any).item) return (byId as any).item as TenantRecord;
  const list=await getJSON(`/api/portfolio/tenants`); const items=(list as any).items||(list as any).data||[]; return (items||[]).find((x:any)=>Number(x?.id)===id)||null;
}
export const tenantTitle=(t:TenantRecord|null)=>t?.display_name|| (t?`Tenant #${t.id}`:"");
TS

cat > src/pages/card/tenant/index.tsx <<'TSX'
import React,{useEffect,useState,useMemo} from "react";
import {fetchTenantById,tenantTitle,TenantRecord} from "./api";
import {useIntegrations} from "../../../lib/useIntegrations";
import FilesTab from "../../../features/files/FilesTab";
import ActivityFeed from "../../../features/activity/ActivityFeed";
import SourceBadges from "../../../components/ui/SourceBadges";

export default function TenantCardPage(){
  const [rec,setRec]=useState<TenantRecord|null>(null); const [loading,setLoading]=useState(true);
  const integrations=useIntegrations();
  const m=typeof window!=="undefined"?window.location.pathname.match(/\/card\/tenant\/(\d+)/i):null; const id=m?.[1]||null;
  useEffect(()=>{(async()=>{ if(!id){setRec(null);setLoading(false);return;} setLoading(true); setRec(await fetchTenantById(id)); setLoading(false); })()},[id]);
  const title=useMemo(()=>tenantTitle(rec),[rec]);
  const email=rec?.email; const phone=rec?.phone;
  const telHref=phone?`tel:${phone}`:undefined; const mailHref=email?`mailto:${email}`:undefined;
  const teamsHref=email?`https://teams.microsoft.com/l/chat/0/0?users=${encodeURIComponent(email)}`:undefined;
  const m365=!!integrations?.m365;
  if(loading) return <div className="card ecc-enhancer-block"><div className="card-header"><h1 className="text-base">Loading tenant…</h1></div></div>;
  if(!rec) return <div className="card ecc-enhancer-block"><div className="card-header"><h1 className="text-base">Tenant Not Found</h1></div></div>;
  return (
    <div className="ecc-enhancer-block">
      <div className="card bg-neutral-900 border border-neutral-800 mb-4">
        <div className="px-4 py-4 flex items-start justify-between">
          <div className="min-w-0">
            <h1 className="text-xl font-semibold truncate">{title}</h1>
            <div className="text-xs text-neutral-500 mt-1">ID: {rec.id}</div>
            <div className="mt-2"><SourceBadges doorloop={!!integrations?.doorloop} corelogic={!!integrations?.corelogic} m365={!!integrations?.m365} dropbox={!!integrations?.dropbox}/></div>
          </div>
          <div className="flex items-center gap-2 ml-4">
            <a className={`btn btn-sm ${telHref?'':'opacity-50 cursor-not-allowed'}`} href={telHref}>Call</a>
            <a className={`btn btn-sm ${m365&&teamsHref?'':'opacity-50 cursor-not-allowed'}`} href={m365&&teamsHref?teamsHref:undefined}>Message (Teams)</a>
            <a className={`btn btn-sm ${mailHref?'':'opacity-50 cursor-not-allowed'}`} href={mailHref}>Email</a>
          </div>
        </div>
      </div>
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
        <FilesTab doorloop={!!integrations?.doorloop} dropbox={!!integrations?.dropbox} entity="tenants" refId={rec.id}/>
        <ActivityFeed table="tenants" refId={rec.id}/>
      </div>
    </div>
  );
}
TSX

# Owner deep link: Transfer button → /owners/transfer?ownerId=X
applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/pages/card/owner/index.tsx
@@
-        <div className="flex items-center gap-2 ml-4">
-          <button className="btn btn-sm" disabled>New Task</button>
-          <button className="btn btn-sm btn-gold">Transfer Ownership</button>
-        </div>
+        <div className="flex items-center gap-2 ml-4">
+          <button className="btn btn-sm" disabled>New Task</button>
+          {owner?.id ? (
+            <a className="btn btn-sm btn-gold" href={`/owners/transfer?ownerId=${owner.id}`}>Transfer Ownership</a>
+          ) : <button className="btn btn-sm btn-gold opacity-50 cursor-not-allowed">Transfer Ownership</button>}
+        </div>
*** End Patch
PATCH

git add -A
git commit -m "feat(cards): unit/lease/tenant by-id pages with Files/Activity; owner deep-link to transfer" || true
echo "✅ Cards parity patch applied. Restart the dev server and visit /card/unit/1, /card/lease/1, /card/tenant/1 (adjust ids)."

2) Transfer Detail: Approve / Authorize / Execute (server-side proxy; no secrets in browser)

Message to Replit (paste & run):

set -e
git checkout -b feat/transfer-admin-actions || git checkout feat/transfer-admin-actions
mkdir -p src/features/owners/pages server/routes

# Server proxy routes attach ADMIN_SYNC_TOKEN on admin calls
cat > server/routes/ownerTransferUi.ts <<'TS'
import express from "express";
import fetch from "node-fetch";
const router = express.Router();
function adminHeaders(){ const t=process.env.ADMIN_SYNC_TOKEN; return t?{ Authorization:`Bearer ${t}`, "content-type":"application/json"}:{"content-type":"application/json"}; }
router.post("/api/ui/owner-transfer/approve-accounting", async (req,res)=>{
  const r=await fetch("http://localhost:3000/api/owner-transfer/approve-accounting",{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify(req.body)});
  const j=await r.json(); res.status(r.status).json(j);
});
router.post("/api/ui/owner-transfer/authorize", async (req,res)=>{
  const r=await fetch("http://localhost:3000/api/owner-transfer/authorize",{method:"POST",headers:adminHeaders(),body:JSON.stringify(req.body)});
  const j=await r.json(); res.status(r.status).json(j);
});
router.post("/api/ui/owner-transfer/execute", async (req,res)=>{
  const r=await fetch("http://localhost:3000/api/owner-transfer/execute",{method:"POST",headers:adminHeaders(),body:JSON.stringify(req.body)});
  const j=await r.json(); res.status(r.status).json(j);
});
export default router;
TS

applypatch <<'PATCH'
*** Begin Patch
*** Update File: server/index.ts
@@
-import entitiesRouter from "./routes/entities";
+import entitiesRouter from "./routes/entities";
+import ownerTransferUiRouter from "./routes/ownerTransferUi";
@@
 app.use(filesRouter);
 app.use(entitiesRouter);
+app.use(ownerTransferUiRouter);
*** End Patch
PATCH

# Frontend Transfer Detail page with gated admin buttons
cat > src/features/owners/pages/OwnerTransferDetailPage.tsx <<'TSX'
import React,{useEffect,useState} from "react";
type T={id:number; status:string; old_owner_id:number; new_owner_id:number; effective_date?:string; created_at?:string};
async function getJSON(u:string){const r=await fetch(u); if(!r.ok) return {ok:false,status:r.status}; try{return await r.json()}catch{return {ok:true}}}
async function post(u:string,body:any){const r=await fetch(u,{method:"POST",headers:{"content-type":"application/json"},body:JSON.stringify(body)}); const j=await r.json().catch(()=>({})); return {status:r.status,body:j};}
export default function OwnerTransferDetailPage(){
  const m=typeof window!=="undefined"?new URLSearchParams(location.search):new URLSearchParams(); const id=Number(m.get("id")||"");
  const [x,setX]=useState<T|null>(null); const [loading,setLoading]=useState(true); const [busy,setBusy]=useState(false); const [err,setErr]=useState<string>("");
  useEffect(()=>{(async()=>{ setLoading(true); const j:any=await getJSON(`/api/owner-transfer/${id}`); setX((j?.item)||j||null); setLoading(false); })()},[id]);
  async function doApprove(){ setBusy(true); setErr(""); const r=await post("/api/ui/owner-transfer/approve-accounting",{transfer_id:id}); if(r.status>=400) setErr(JSON.stringify(r.body)); setBusy(false); reload(); }
  async function doAuthorize(){ setBusy(true); setErr(""); const r=await post("/api/ui/owner-transfer/authorize",{transfer_id:id}); if(r.status>=400) setErr(JSON.stringify(r.body)); setBusy(false); reload(); }
  async function doExecute(){ setBusy(true); setErr(""); const r=await post("/api/ui/owner-transfer/execute",{transfer_id:id}); if(r.status>=400) setErr(JSON.stringify(r.body)); setBusy(false); reload(); }
  function reload(){ setTimeout(async()=>{ const j:any=await getJSON(`/api/owner-transfer/${id}`); setX((j?.item)||j||null); },200); }
  if(!id) return <div className="p-6">Missing id.</div>;
  if(loading) return <div className="p-6">Loading transfer…</div>;
  if(!x) return <div className="p-6">Transfer not found.</div>;
  const s=(x.status||"").toUpperCase();
  const canApprove = s==="PENDING_ACCOUNTING";
  const canAuthorize = s==="PENDING_AUTHORIZATION" || s==="PENDING_ACCOUNTING";
  const canExecute = s==="READY_EXECUTION";
  return (
    <div className="ecc-enhancer-block">
      <div className="card bg-neutral-900 border border-neutral-800 mb-4">
        <div className="px-4 py-4">
          <div className="text-xl font-semibold">Owner Transfer #{x.id}</div>
          <div className="text-xs text-neutral-500 mt-1">Status: {x.status} · Effective: {x.effective_date||"N/A"}</div>
          <div className="mt-3 flex gap-2">
            <button className={`btn btn-sm ${canApprove?'':'opacity-50 cursor-not-allowed'}`} disabled={!canApprove||busy} onClick={doApprove}>Approve Accounting</button>
            <button className={`btn btn-sm ${canAuthorize?'':'opacity-50 cursor-not-allowed'}`} disabled={!canAuthorize||busy} onClick={doAuthorize}>Authorize</button>
            <button className={`btn btn-sm ${canExecute?'':'opacity-50 cursor-not-allowed'}`} disabled={!canExecute||busy} onClick={doExecute}>Execute Now</button>
          </div>
          {err ? <div className="mt-3 text-red-400 text-xs">{err}</div> : null}
        </div>
      </div>
    </div>
  );
}
TSX

# (If routes file exists) gently remind to add this page to /owners/transfer/detail
echo "➡️  Add route: /owners/transfer/detail → OwnerTransferDetailPage (src/features/owners/pages/OwnerTransferDetailPage.tsx)"
git add -A
git commit -m "feat(transfer): UI detail page with Approve/Authorize/Execute via server proxy" || true
echo "✅ Transfer admin buttons patch applied. Register route /owners/transfer/detail in your router if not present."


Quick test:

Go to /owners/transfer/detail?id=<a real transfer id>.

Buttons should enable/disable by status; Authorize/Execute go through the server (no secret in browser).

3) Auto-Geocode: run during sync + background tick (2 req/sec, audit “GEOCODE_AUTO”)

Message to Replit (paste & run):

set -e
git checkout -b feat/auto-geocode || git checkout feat/auto-geocode
mkdir -p server/lib server/jobs server/routes

# Geocoder helper (Google default)
cat > server/lib/geocoder.ts <<'TS'
import fetch from "node-fetch";
type Geo = { lat:number, lng:number };
const CACHE = new Map<string, Geo>();
export async function geocodeAddress(addr:string):Promise<Geo|null>{
  if(!addr) return null;
  const key = (addr||"").trim().toLowerCase();
  if(CACHE.has(key)) return CACHE.get(key)!;
  const provider = (process.env.GEOCODER_PROVIDER||"google").toLowerCase();
  try{
    if(provider==="google"){
      const apiKey = process.env.GOOGLE_MAPS_API_KEY;
      if(!apiKey) return null;
      const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(addr)}&key=${apiKey}`;
      const r = await fetch(url); const j:any = await r.json();
      const res = j?.results?.[0]?.geometry?.location;
      if(res && typeof res.lat==="number" && typeof res.lng==="number"){
        const out = {lat:res.lat, lng:res.lng}; CACHE.set(key,out); return out;
      }
      return null;
    }
    // OSM fallback omitted for brevity; default to null
    return null;
  }catch{ return null; }
}
TS

# Background tick: fills missing lat/lng gradually
cat > server/jobs/geocodeTick.ts <<'TS'
import { sbAdmin } from "../lib/supabaseAdmin";
import { geocodeAddress } from "../lib/geocoder";
import { audit } from "../lib/audit"; // assume existing audit helper; else inline insert

function buildAddress(p:any){
  const parts=[p.line1||p.address, p.city, p.state, p.postal_code].filter(Boolean);
  return parts.join(", ");
}
export async function geocodeTick(batch=2){
  const { data:list } = await sbAdmin.from("properties").select("id,line1,address,city,state,postal_code,lat,lng").is("lat",null).limit(batch);
  if(!list || !list.length) return 0;
  let done=0;
  for(const p of list){
    const addr = buildAddress(p); if(!addr) continue;
    const geo = await geocodeAddress(addr);
    if(geo){
      await sbAdmin.from("properties").update({lat:geo.lat,lng:geo.lng}).eq("id",p.id);
      await sbAdmin.from("audit_events").insert({event_type:"GEOCODE_AUTO", ref_table:"properties", ref_id:p.id, payload:{addr,lat:geo.lat,lng:geo.lng}, label:"GEOCODE_AUTO"});
      done++;
      await new Promise(r=>setTimeout(r, 500)); // ~2 req/sec
    }
  }
  return done;
}
TS

# Hook tick into server boot (5-min cadence already exists for transfers; we add 30s tick)
applypatch <<'PATCH'
*** Begin Patch
*** Update File: server/index.ts
@@
 import entitiesRouter from "./routes/entities";
 import ownerTransferUiRouter from "./routes/ownerTransferUi";
+import { geocodeTick } from "./jobs/geocodeTick";
@@
 app.use(filesRouter);
 app.use(entitiesRouter);
 app.use(ownerTransferUiRouter);
@@
 setInterval(() => runDueTransfersTick(), 5*60*1000)
+// Auto-geocode background tick (every 30s)
+if (process.env.GOOGLE_MAPS_API_KEY) {
+  setInterval(async () => { try { await geocodeTick(2); } catch {} }, 30*1000);
+}
*** End Patch
PATCH

# During property sync: enqueue geocode for records missing lat/lng
applypatch <<'PATCH'
*** Begin Patch
*** Update File: server/lib/sync/properties.ts
@@
 import { sbAdmin } from "../../lib/supabaseAdmin";
+import { geocodeAddress } from "../../lib/geocoder";
@@
   // ... existing ingest logic mapping DoorLoop → properties
   // After upsert, opportunistically geocode new/changed records missing lat/lng
-  // (no-op placeholder previously)
+  const toGeo = upserts.filter((p:any)=> p && (p.lat==null || p.lng==null));
+  for (const p of toGeo.slice(0,2)) { // light touch during sync
+    const addr=[p.line1||p.address,p.city,p.state,p.postal_code].filter(Boolean).join(", ");
+    if(!addr) continue;
+    try{
+      const g = await geocodeAddress(addr);
+      if(g){
+        await sbAdmin.from("properties").update({lat:g.lat,lng:g.lng}).eq("id",p.id);
+        await sbAdmin.from("audit_events").insert({event_type:"GEOCODE_AUTO", ref_table:"properties", ref_id:p.id, payload:{addr,lat:g.lat,lng:g.lng}, label:"GEOCODE_AUTO"});
+      }
+    }catch{}
+  }
*** End Patch
PATCH

# Optional: manual kick endpoint (admin)
cat > server/routes/geocodeAdmin.ts <<'TS'
import express from "express";
import { geocodeTick } from "../jobs/geocodeTick";
const router = express.Router();
router.post("/api/admin/geocode/run", async (_req,res)=>{ const n=await geocodeTick(5); res.json({ok:true, updated:n}); });
export default router;
TS

applypatch <<'PATCH'
*** Begin Patch
*** Update File: server/index.ts
@@
-import ownerTransferUiRouter from "./routes/ownerTransferUi";
+import ownerTransferUiRouter from "./routes/ownerTransferUi";
+import geocodeAdminRouter from "./routes/geocodeAdmin";
@@
 app.use(ownerTransferUiRouter);
+app.use(geocodeAdminRouter);
*** End Patch
PATCH

git add -A
git commit -m "feat(geocode): auto-geocode during sync + background tick (2 rps), audit GEOCODE_AUTO; admin endpoint" || true
echo "✅ Auto-geocode patch applied. Set GOOGLE_MAPS_API_KEY and watch lat/lng fill in over time."

Quick verification checklist

Cards:

/card/unit/<id>, /card/lease/<id>, /card/tenant/<id> render hero + Files + Activity.

Owner Card “Transfer Ownership” deep-link goes to /owners/transfer?ownerId=<id>.

Transfer detail:

/owners/transfer/detail?id=<id> shows the 3 admin buttons with proper enable/disable based on status.

Authorize/Execute succeed without exposing tokens in the browser (proxy routes used).

Geocode:

Run POST /api/admin/geocode/run once, then query DB (or refresh Dashboard Map) to see pins begin to appear.

audit_events includes GEOCODE_AUTO rows.

If any step balks, send me the exact console/server error (or the inspector JSON) and I’ll give you a small focused patch.