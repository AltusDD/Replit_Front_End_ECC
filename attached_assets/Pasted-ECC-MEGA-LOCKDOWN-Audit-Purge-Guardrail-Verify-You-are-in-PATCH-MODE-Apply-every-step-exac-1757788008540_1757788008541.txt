ECC MEGA LOCKDOWN (Audit → Purge → Guardrail → Verify)

You are in PATCH MODE. Apply every step exactly. Show file diffs and the outputs of the verification commands. Do not add features or “improve” beyond these instructions.

0) Import the runtime kill-switch (hide any stray overlays)

Create/ensure: src/styles/no-overlays.css (append if exists)

/* === ECC Kill-Switch: never allow viewport covers (dev or prod) === */
#vite-error-overlay, .vite-error-overlay { display: none !important; } /* Vite/React overlays */
body > div[id*="overlay"], body > div[class*="overlay"],
body > div[class*="backdrop"], body > div[class*="fullscreen"],
body > div[class*="full-screen"], body > div[class*="loading-screen"],
body > div[class*="page-cover"], body > div[class*="scrim"],
body > div[class*="modal-backdrop"] { display: none !important; }

/* Any element attempting a fixed full-viewport cover */
*[style*="position:fixed"][style*="inset: 0"],
*[style*="position:fixed"][style*="top: 0"][style*="left: 0"][style*="right: 0"][style*="bottom: 0"],
*[style*="position:absolute"][style*="inset: 0"][style*="z-index:"] { display: none !important; }

/* Keep app surface interactive */
#root, #app { isolation: isolate; }


Edit: src/main.tsx → ensure these 3 imports exist once (no duplicates)

import "./styles/theme.css";
import "./styles/card-enhancer.css";
import "./styles/no-overlays.css";

1) Hard delete & neuter known cover sources

Delete file: src/debug/crash-overlay.ts (global black screen on error).

Edit: src/styles/table.css → ensure drawer/backdrop can’t overlay viewport:

.ecc-drawer{ position: static; inset: auto; z-index: auto; }
.ecc-drawer__backdrop{ display: none !important; }
.ecc-drawer__panel{ position: relative; width: 100%; max-width: 100%; height: auto; }


Edit (if present): src/styles/transfer-modal.css → inline-only:

.modal{ position: static; inset: auto; background: transparent; display: block; z-index: auto; }
.modal-card{ background: var(--panel-elev); border: 1px solid var(--line); border-radius: 10px; max-width: 900px; padding: 20px; box-shadow:none; }


Edit (if present): src/features/m365/PlannerModal.tsx + any other “modal” using fixed inset-0 → render as an inline .ecc-object panel; remove any backdrop and position:fixed wrappers.

2) Add a MEGA guardrail (fails CI if drift reappears)

Create: scripts/guardrail-mega.mjs

import fs from "fs"; import path from "path";
const ROOT = path.resolve("src");
const offenders = [];
const allowFixedSelectors = [
  // allowlisted fixed elements here if any (e.g., a mini tooltip). Keep empty to be strict.
];
const bannedDeps = [
  "react-router-dom","tailwindcss","bootstrap","antd","@mui/","material-ui",
  "chakra-ui","semantic-ui","mantine","bulma","sweetalert2","react-modal","next","gatsby"
];
const pagesGlob = /src[\/\\]pages[\/\\]/i;
const cardPages = /src[\/\\]pages[\/\\]card[\/\\](property|unit|lease|tenant|owner)[\/\\]index\.tsx$/i;

const files = [];
(function walk(dir){ for(const f of fs.readdirSync(dir)){
  const full = path.join(dir,f); const s=fs.statSync(full);
  if(s.isDirectory()) walk(full); else files.push(full);
}})(ROOT);

function flag(file,msg){ offenders.push(`- ${file.replace(process.cwd()+path.sep,"")}: ${msg}`); }

/* 1) No viewport covers */
for(const f of files){
  const ext = path.extname(f).toLowerCase();
  if(![".tsx",".ts",".css",".scss",".less",".jsx",".js"].includes(ext)) continue;
  const src = fs.readFileSync(f,"utf8");
  const badName = /(overlay|backdrop|fullscreen|full-screen|loading-screen|page-cover|scrim|modal-backdrop)/i;
  const badStyle = /(position\s*:\s*(fixed|absolute)[^;{]*)(inset\s*:\s*0|top\s*:\s*0[\s\S]*left\s*:\s*0[\s\S]*right\s*:\s*0[\s\S]*bottom\s*:\s*0)/i;
  const badSuspense = /<Suspense[\s\S]*fallback=.*(Full|Screen|Cover|Overlay|Loading)/i;
  if(badName.test(src) || badStyle.test(src) || badSuspense.test(src)){
    // allow minor fixed tooltips if whitelisted
    if(!allowFixedSelectors.some(sel=>src.includes(sel))) flag(f,"forbidden overlay/backdrop/fullscreen pattern");
  }
}

/* 2) No maps except Property card */
for(const f of files){
  if(!/src[\/\\]pages[\/\\]card[\/\\].+\.tsx$/.test(f)) continue;
  const src = fs.readFileSync(f,"utf8");
  const importsGeo = /from\s+["'].*components\/GeoMap["']/i.test(src) || /<GeoMap\b/.test(src);
  if(importsGeo && !/src[\/\\]pages[\/\\]card[\/\\]property[\/\\]index\.tsx$/.test(f)){
    flag(f,"GeoMap allowed only on Property card");
  }
}

/* 3) No raw /api/ usage in pages; use resolvers only */
for(const f of files){
  if(!pagesGlob.test(f)) continue;
  const src = fs.readFileSync(f,"utf8");
  if(/["']\/api\//.test(src)) flag(f,"raw /api/ usage in page (must use lib/ecc-resolvers)");
  if(/apiGet\s*\(/.test(src) || /from\s+["'].*lib\/ecc-api["']/.test(src)) flag(f,"direct apiGet/ecc-api in page");
}

/* 4) No Suspense in pages unless fallback is trivial inline */
for(const f of files){
  if(!pagesGlob.test(f)) continue;
  const src = fs.readFileSync(f,"utf8");
  if(/<Suspense/i.test(src)){
    if(!/fallback\s*=\s*{<\s*div\s*\/?\s*>}/.test(src)) flag(f,"Suspense fallback must be {<div/>} in pages");
  }
}

/* 5) No 'return null;' in card page components (causes blank screens) */
for(const f of files){
  if(!cardPages.test(f)) continue;
  const src = fs.readFileSync(f,"utf8");
  if(/return\s+null\s*;/.test(src)) flag(f,"return null forbidden in card pages; render boxed content");
}

/* 6) No react-router-dom; Wouter only */
for(const f of files){
  const src = fs.readFileSync(f,"utf8");
  if(/from\s+["']react-router-dom["']/.test(src)) flag(f,"react-router-dom forbidden; use Wouter");
}

/* 7) Theme tokens lock: verify object surface tokens */
(function(){
  const theme = path.resolve("src/styles/theme.css");
  if(fs.existsSync(theme)){
    const css = fs.readFileSync(theme,"utf8");
    if(!/--ecc-object-bg:\s*#2A2F38/i.test(css)) flag(theme,"--ecc-object-bg must be #2A2F38");
    if(!/--ecc-object-radius:\s*16px/i.test(css)) flag(theme,"--ecc-object-radius must be 16px");
    if(!/--ecc-object-pad:\s*16px/i.test(css)) flag(theme,"--ecc-object-pad must be 16px");
  } else {
    flag("src/styles/theme.css","theme.css missing");
  }
})();

/* 8) Dependency drift lock */
(function(){
  const pkg = JSON.parse(fs.readFileSync("package.json","utf8"));
  const allDeps = {...(pkg.dependencies||{}), ...(pkg.devDependencies||{})};
  for(const name of Object.keys(allDeps)){
    if(bannedDeps.some(b => name===b || (b.endsWith("/") && name.startsWith(b)))){
      offenders.push(`- package.json: banned dependency "${name}"`);
    }
  }
})();

/* 9) Ensure main.tsx imports required styles */
(function(){
  const main = path.resolve("src/main.tsx");
  if(fs.existsSync(main)){
    const s = fs.readFileSync(main,"utf8");
    if(!/styles\/theme\.css/.test(s)) flag(main,"missing import of styles/theme.css");
    if(!/styles\/card-enhancer\.css/.test(s)) flag(main,"missing import of styles/card-enhancer.css");
    if(!/styles\/no-overlays\.css/.test(s)) flag(main,"missing import of styles/no-overlays.css");
  } else flag("src/main.tsx","main.tsx missing");
})();

if(offenders.length){
  console.error("❌ MEGA GUARDRAIL VIOLATIONS:\n"+offenders.join("\n"));
  process.exit(2);
} else {
  console.log("✅ MEGA GUARDRAIL: all checks passed.");
}


Edit: package.json → add scripts (preserve existing)

{
  "scripts": {
    "guardrail:overlays": "node scripts/guardrail-overlays.mjs",
    "guardrail:mega": "node scripts/guardrail-mega.mjs",
    "predev": "npm run guardrail:mega && npm run guardrail:overlays",
    "prebuild": "npm run guardrail:mega && npm run guardrail:overlays && npm run guardrail"
  }
}

3) Codemods: remove lingering page-blanking patterns

Run these global search/replace patches:

A) Suspense fallbacks in pages
Find (regex):

fallback=\{<[^>]*Full[^>]*>\s*<\/[^>]+>\}

fallback=\{<[^>]*Screen[^>]*>\s*<\/[^>]+>\}

fallback=\{<[^>]*Overlay[^>]*>\s*<\/[^>]+>\}

fallback=\{<[^>]*Loading[^>]*>\s*<\/[^>]+>\}
Replace with: fallback={<div/>}

B) Raw /api/ in pages
Find in src/pages/**: "/api/ → replace by calling resolvers from lib/ecc-resolvers (do not leave any string literals). If a quick fix is needed, stub with a TODO and fail the guardrail until replaced—do not bypass the rule.

C) return null; in card pages
In each src/pages/card/*/index.tsx replace return null; with:

return <section className="ecc-object"><div className="ecc-header"><div className="ecc-title">Not available</div></div><div style={{opacity:.7}}>This section could not be rendered.</div></section>;


D) Remove fixed/backdrop wrappers
Search for className="fixed inset-0" or style={{ position: 'fixed', inset: 0 and replace those wrappers with inline .ecc-object containers. Never leave any backdrop.

4) Map-only rule (Property card)

Confirm no GeoMap import outside src/pages/card/property/index.tsx. If found anywhere else, remove the import and usage. The guardrail will catch this.

5) Verify & report (must paste outputs)

Run:

npm run guardrail:mega
npm run guardrail:overlays
npx tsc --noEmit


Open and confirm (no blank screens, content visible; map only on Property):

/card/property/:id → renders, map visible, no page cover

/card/unit/:id → renders, no map, no page cover

/card/lease/:id → renders, no map, no page cover

/card/tenant/:id → renders, no map, no page cover

/card/owner/:id → renders, no map, no page cover

Return:

Outputs of the three commands

5-line checklist (one per route): renders ✅ / page cover ❌ / map (Property only) ✅

Notes (why this blocks future regressions)

MEGA guardrail enforces: no overlays, no Suspense abuse, no return null, no map drift, no raw endpoints in pages, no router drift, no theme token changes, no banned UI libraries, required styles present.

Kill-switch CSS neutralizes any overlay that might slip in via a library or dev overlay.

Predev/Prebuild wiring means no one can run or ship the app unless all rules pass.

Once you paste the outputs, we’ll proceed with the next safe patch set (Financials tables + Legal links + BFF stubs) on top of this locked foundation.