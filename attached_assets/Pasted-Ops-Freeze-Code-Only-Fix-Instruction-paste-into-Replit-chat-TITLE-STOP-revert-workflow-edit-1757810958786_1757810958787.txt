Ops Freeze + ✅ Code-Only Fix Instruction (paste into Replit chat)

TITLE: STOP: revert workflow edits; keep code-only Fix-Pack

INSTRUCTIONS (follow exactly):

Halt & Revert Unauthorized Ops Changes

❌ Do not rename or create workflows.

❌ Do not edit .replit, package.json, replit.nix, vite.config.*, or Git config.

Revert any changes you made to .replit (including workflow names like “Start application”), and do not touch package.json.

If you created or modified .replit workflows, undo those edits now.

Allowed Files for this task (code-only):

✅ src/lib/ecc-api-client.ts

✅ src/lib/ecc-card-queries.ts

✅ src/pages/card/**/index.tsx (only import wiring to the one-hook queries and simple field mapping; no new hooks)

❌ No other files may be added/changed.

Keep the Fix-Pack code exactly as architected

One useQuery per card page (no conditional hooks).

Resilient client that tries /entities/* then /api/entities/*.

Map shown only on Property.

Pages must never return null. Show inline .ecc-object error panels.

Install an Ops Freeze guardrail (read-only; no runtime effect)

Create scripts/ops-freeze.mjs:

// Guardrail: fail if ops files change without approval
import { createHash } from 'crypto';
import { readFileSync, writeFileSync, existsSync } from 'fs';

const files = ['.replit','package.json','replit.nix','vite.config.ts','vite.config.js'];
const stampPath = 'scripts/ops-freeze.json';

function sha(s){ return createHash('sha1').update(s).digest('hex'); }

const mode = process.argv.includes('--record') ? 'record' : 'check';

if (mode==='record'){
  const stamp = {};
  for (const f of files){
    try { stamp[f] = sha(readFileSync(f,'utf8')); } catch { stamp[f] = null; }
  }
  writeFileSync(stampPath, JSON.stringify(stamp,null,2));
  console.log('Recorded ops-freeze baseline.');
  process.exit(0);
}

if (!existsSync(stampPath)){
  console.error('ops-freeze baseline missing. Run: node scripts/ops-freeze.mjs --record');
  process.exit(2);
}

const baseline = JSON.parse(readFileSync(stampPath,'utf8'));
let bad = false;
for (const f of files){
  const curr = (()=>{ try{return sha(readFileSync(f,'utf8'))}catch{return null} })();
  const base = baseline[f] ?? null;
  if (curr !== base){
    bad = true;
    console.error(`UNAUTHORIZED_CHANGE: ${f}`);
  }
}
if (bad) process.exit(3);
console.log('Ops freeze check passed.');


Do not add it to any dev/build scripts yet. Just create it.

Demonstrate only the code changes (no workflow changes)

Show diffs for the four card index files wired to:

usePropertyCard, useUnitCard, useLeaseCard, useTenantCard, useOwnerCard from @/lib/ecc-card-queries.

Confirm no other files changed besides the two libs and the five index.tsx pages.

Run-time expectation (unchanged dev setup)

Use the existing project’s way to start the app. Do not rename workflows or replace runners. If the dev server is already running, use it. If it isn’t, tell me (don’t change ops files).

Demo checklist (must pass)

/card/property/42 shows real units count, active leases count, and non-placeholder address/title (avg rent may be “—” if no rents).

/card/property/57 renders without crashing.

/card/unit/45 shows beds/baths (or “—”), and either an active lease row or visible “—”.

/card/lease/1 renders Status, Rent, Term fields (or “—”).

/card/tenant/1 renders a Leases list (empty allowed but visible).

/card/owner/6 renders a Portfolio list (empty allowed but visible).

Stop after those screenshots. Do not do any further refactors or add components.