Replit: Implement ECC Full UI Inspector + Audit (no questions; ship & verify)

Mission: Implement the complete debugging suite now. Don’t ask me anything—just apply the patch, restart, verify, and return the artifacts listed at the end.

Constraints:

Keep Altus/ECC dark theme; no new UI frameworks.

Idempotent patch (safe to re-run).

Only touch files listed in the patch.

Do not remove existing code; add fallbacks.

1) Apply this Shell patch (copy/paste into the Replit Shell)
set -e
git checkout -b fix/ui-inspector-audit || git checkout fix/ui-inspector-audit

mkdir -p tools public/__audit src/dev src/pages/dev src/styles server/routes

############################################
# A) Server endpoint to capture audits
############################################
cat > server/routes/devAudit.ts <<'TS'
import express from "express";
import fs from "fs";
import path from "path";

const router = express.Router();

const auditDir = path.join(process.cwd(), "public", "__audit");
function ensureDir() {
  try { fs.mkdirSync(auditDir, { recursive: true }); } catch {}
}

router.post("/__audit", express.json({ limit: "1mb" }), async (req, res) => {
  try {
    ensureDir();
    const name = (req.query.name as string) || "ui_audit_live";
    const file = path.join(auditDir, `${name}.json`);
    fs.writeFileSync(file, JSON.stringify(req.body || {}, null, 2));
    return res.json({ ok: true, saved: `/__audit/${name}.json` });
  } catch (e:any) {
    return res.status(500).json({ ok: false, error: String(e.message||e) });
  }
});

export default router;
TS

applypatch <<'PATCH'
*** Begin Patch
*** Update File: server/index.ts
@@
-import filesRouter from "./routes/files";
+import filesRouter from "./routes/files";
+import devAuditRouter from "./routes/devAudit";
@@
 app.use(filesRouter);
+app.use(devAuditRouter);
*** End Patch
PATCH

############################################
# B) UI Inspector overlay (toggle with ?debug=1)
############################################
cat > src/styles/dev-inspector.css <<'CSS'
.ecc-inspector{position:fixed;right:16px;bottom:16px;z-index:99999;background:#0f0f10;color:#eaeaea;border:1px solid #27272a;border-radius:12px;width:420px;max-height:70vh;overflow:auto;box-shadow:0 10px 30px rgba(0,0,0,.5);font:13px/1.4 system-ui,sans-serif}
.ecc-inspector header{display:flex;align-items:center;justify-content:space-between;padding:10px 12px;border-bottom:1px solid #27272a}
.ecc-inspector .badge{display:inline-block;padding:2px 8px;border-radius:999px;background:#1b1b1f;margin-left:6px}
.ecc-inspector pre{white-space:pre-wrap;word-break:break-word;background:transparent;margin:0;padding:8px 12px}
CSS

cat > src/dev/UiInspector.tsx <<'TSX'
import '../styles/dev-inspector.css';

function h(tag:string, props:any={}, ...children:any[]){
  const el = document.createElement(tag);
  Object.entries(props||{}).forEach(([k,v])=>{
    if(k==='className') el.setAttribute('class', String(v));
    else if(k.startsWith('on')) (el as any)[k.toLowerCase()] = v;
    else el.setAttribute(k, String(v));
  });
  children.flat().forEach((c:any)=> el.appendChild(typeof c==='string'?document.createTextNode(c):c));
  return el;
}

function selectorOf(el:Element){
  if(el.id) return '#'+el.id;
  const cls=(el.getAttribute('class')||'').split(/\s+/).filter(Boolean).slice(0,3).map(c=>'.'+c).join('');
  return el.tagName.toLowerCase()+cls;
}

function collectOverlays(){
  const out:any[]=[];
  for(const el of Array.from(document.querySelectorAll<HTMLElement>('body *'))){
    const cs=getComputedStyle(el);
    const zi=parseInt(cs.zIndex||'0',10)||0;
    if(cs.position==='fixed' || cs.position==='sticky' || zi>=1000){
      const r = el.getBoundingClientRect();
      out.push({selector:selectorOf(el), position:cs.position, zIndex:zi, w:Math.round(r.width), h:Math.round(r.height)});
    }
  }
  return out;
}

async function getFlags(){
  try{ const r=await fetch('/api/config/integrations'); return await r.json(); }catch{return {error:'flags-unavailable'};}
}

function scanCSS(){
  const needles=['.card','.card-shell','.kpi-row','.left-rail','.right-rail','owner-card','property-card','unit-card','lease-card','tenant-card'];
  const hits=new Set<string>();
  for(const ss of Array.from(document.styleSheets)){
    try{
      const rules=(ss as CSSStyleSheet).cssRules||[];
      for(const rr of Array.from(rules)){
        const txt=(rr as CSSStyleRule).cssText||'';
        if(needles.some(n=>txt.includes(n))) hits.add((ss as any).href||'inline');
      }
    }catch{}
  }
  return Array.from(hits);
}

function tapNetwork(){
  const calls:any[]=[];
  const of=window.fetch;
  (window as any).fetch=async (...args:any[])=>{
    const t0=performance.now();
    const res=await of(...args as any);
    calls.push({url:String(args[0]), status:res.status, ms:Math.round(performance.now()-t0), kind:'fetch'});
    return res;
  };
  const oOpen=XMLHttpRequest.prototype.open, oSend=XMLHttpRequest.prototype.send;
  (XMLHttpRequest.prototype as any).open=function(method:string,url:string){(this as any).__ecc={method,url,t:performance.now()}; return oOpen.apply(this, arguments as any);};
  (XMLHttpRequest.prototype as any).send=function(){const x=this as any; const m=x.__ecc||{}; x.addEventListener('loadend',()=>calls.push({url:m.url,status:x.status,ms:Math.round(performance.now()-m.t), kind:'xhr'})); return oSend.apply(this, arguments as any);};
  return calls;
}

export const UiInspector = {
  async mount(target:string){
    const calls=tapNetwork();
    const wrap=h('div',{className:'ecc-inspector'});
    wrap.appendChild(h('header',{}, h('strong',{},'ECC UI Inspector'), h('span',{className:'badge'},'debug=1')));
    const body=h('div'); wrap.appendChild(body); document.querySelector(target)?.appendChild(wrap);

    const route=location.pathname+location.search;
    const flags=await getFlags();
    const overlays=collectOverlays();
    const styles=scanCSS();

    const audit={ route, flags, overlays, styles, calls, timestamp:new Date().toISOString() };
    (window as any).__ECC_UI_AUDIT__=audit;
    body.appendChild(h('pre',{}, JSON.stringify(audit,null,2)));

    try{ await fetch('/__audit?name=ui_audit_live', {method:'POST', headers:{'content-type':'application/json'}, body: JSON.stringify(audit)}); }catch{}
  }
};
TSX

cat > src/dev/index.ts <<'TS'
export async function enableInspector(){
  const p=new URL(location.href);
  if(p.searchParams.get('debug')!=='1') return;
  const { UiInspector } = await import('./UiInspector');
  const host=document.createElement('div'); host.id='ecc-ui-inspector-root'; document.body.appendChild(host);
  UiInspector.mount('#ecc-ui-inspector-root');
}
enableInspector();
TS

############################################
# C) Ensure boot import(s) exist
############################################
if [ -f src/main.tsx ]; then
  grep -q "./boot/mountEnhancer" src/main.tsx || sed -i '1i import "./boot/mountEnhancer";' src/main.tsx
  grep -q "./dev/index" src/main.tsx || sed -i '1i import "./dev/index";' src/main.tsx
elif [ -f src/index.tsx ]; then
  grep -q "./boot/mountEnhancer" src/index.tsx || sed -i '1i import "./boot/mountEnhancer";' src/index.tsx
  grep -q "./dev/index" src/index.tsx || sed -i '1i import "./dev/index";' src/index.tsx
fi

############################################
# D) Public HTML fallback (only if present)
############################################
if [ -f public/index.html ]; then
  if ! grep -q 'src="/src/boot/mountEnhancer' public/index.html; then
    sed -i 's#</body>#  <script type="module" src="/src/boot/mountEnhancer.tsx"></script>\n</body>#' public/index.html
  fi
  if ! grep -q 'src="/src/dev/index' public/index.html; then
    sed -i 's#</body>#  <script type="module" src="/src/dev/index.ts"></script>\n</body>#' public/index.html
  fi
fi

############################################
# E) CLI audit & verify scripts
############################################
cat > tools/ecc_ui_audit.sh <<'AUD'
#!/usr/bin/env bash
set -e
mkdir -p public/__audit
PM="npm"; [ -f pnpm-lock.yaml ] && PM="pnpm"; [ -f yarn.lock ] && PM="yarn"
BOOT=$(grep -q 'type="module"' public/index.html 2>/dev/null && echo present || echo maybe)
ENH=$(rg -n 'mountEnhancer|CardEnhancer' src 2>/dev/null || true)
ROUTES=$(rg -n '/card/(owner|property|unit|lease|tenant)' src 2>/dev/null || true)
FLAGS=$(curl -sS http://localhost:3000/api/config/integrations || echo '{}')
ZSCAN=$(rg -n 'z-index\s*:\s*([1-9][0-9]{2,})' src/styles src/features 2>/dev/null || true)
GITBR=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo 'N/A')
GITHASH=$(git rev-parse --short HEAD 2>/dev/null || echo 'N/A')
DIRTY=$(git status --porcelain | wc -l | tr -d ' ')
cat > public/__audit/ui_audit.json <<JSON
{
  "pm":"$PM",
  "bootloader":"$BOOT",
  "enhancer_refs": ${ENH@Q},
  "routes_refs": ${ROUTES@Q},
  "flags": $FLAGS,
  "zindex_hits": ${ZSCAN@Q},
  "git": { "branch":"$GITBR", "last":"$GITHASH", "dirty": "$DIRTY" },
  "ts": "$(date -Iseconds)"
}
JSON
echo "Wrote public/__audit/ui_audit.json"
AUD
chmod +x tools/ecc_ui_audit.sh

cat > tools/ecc_ui_verify.sh <<'VER'
#!/usr/bin/env bash
set -e
bash tools/ecc_ui_audit.sh
echo "===== QUICK SUMMARY ====="
jq '.bootloader, .flags, .git' public/__audit/ui_audit.json || cat public/__audit/ui_audit.json
echo "========================="
VER
chmod +x tools/ecc_ui_verify.sh

git add -A
git commit -m "chore(debug): UI Inspector overlay, /__audit sink, boot guarantees, CLI audit/verify" || true

2) Restart the dev server

Fully stop & start the server so new routes (/__audit) and imports load.

3) Verify (run in Replit Shell)
bash tools/ecc_ui_verify.sh


You should see public/__audit/ui_audit.json written and a summary printed.

4) Live inspection steps (you do this in the browser)

Visit (with ?debug=1 appended):

/card/owner/1?debug=1

/card/property/1?debug=1

/card/unit/1?debug=1

/card/lease/1?debug=1

/card/tenant/1?debug=1

The ECC UI Inspector panel should appear bottom-right and show:

route, flags (feature booleans), overlays (z-index/position), styles (CSS sheets), and network calls.

The Inspector will also POST JSON to public/__audit/ui_audit_live.json via the new POST /__audit.

5) Return these deliverables in this chat

Paste the output of: bash tools/ecc_ui_verify.sh

Paste the contents of: public/__audit/ui_audit.json and public/__audit/ui_audit_live.json

Screenshots of each /card/*?debug=1 page with the panel visible

This is the baseline we’ll use to pinpoint the exact culprit(s) and ship the targeted patch.