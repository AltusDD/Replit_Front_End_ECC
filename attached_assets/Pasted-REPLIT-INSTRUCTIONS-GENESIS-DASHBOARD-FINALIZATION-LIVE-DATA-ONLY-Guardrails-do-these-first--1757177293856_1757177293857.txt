REPLIT INSTRUCTIONS ‚Äî GENESIS DASHBOARD FINALIZATION (LIVE DATA ONLY)
üîí Guardrails (do these first)

No mock data anywhere. If a function generates or randomizes values, remove it. Treat missing data as empty states with guidance.

Genesis palette only: Altus Black #0b0e12 background, panels in cool gray (see tokens below), Altus Gold #d6b36a for highlights/trend lines only (never as a panel fill).

Dates: all dates fmtDate ‚Üí Mon D, YYYY (e.g., Nov 7, 2025).

Error discipline: swallow AbortErrors (React StrictMode), log real errors once with context.

1) Sync the file set

Replace the project‚Äôs /src with the attached structure (these paths exist in the zip). Keep your existing router and app shell.

/src/styles/tokens.css
/src/styles/Dashboard.css
/src/utils/format.ts
/src/utils/net.ts
/src/features/dashboard/hooks/useDashboardData.ts
/src/features/dashboard/components/ActionButton.tsx
/src/features/dashboard/components/ChartContainer.tsx
/src/features/dashboard/components/KpiTicker.tsx
/src/features/dashboard/components/PortfolioGoogleMap.tsx
/src/features/dashboard/components/PriorityActionFeed.tsx
/src/features/dashboard/components/FinancialsAndLeasing.tsx
/src/features/dashboard/components/OccupancyByCity.tsx
/src/features/dashboard/pages/DashboardPage.tsx


Router: ensure path /dashboard renders DashboardPage.

2) Packages & env
npm i @vis.gl/react-google-maps @googlemaps/markerclusterer recharts


Add an env var:

VITE_GOOGLE_MAPS_API_KEY=<your key>


If missing at runtime, the Map widget must show a friendly inline callout, not an exception.

3) Live-data only net helpers

src/utils/net.ts should export:

export async function fetchJSON<T>(url: string, signal?: AbortSignal): Promise<T> {
  const res = await fetch(url, { signal, headers: { "Accept": "application/json" } });
  if (!res.ok) throw new Error(`${res.status} ${res.statusText} @ ${url}`);
  return res.json() as Promise<T>;
}

export const isAbortError = (e: unknown) =>
  (e as any)?.name === "AbortError" || /aborted|abort/i.test((e as any)?.message || "");


Endpoints used by the dashboard (must exist server-side):

/api/portfolio/properties      // includes { id, address, city, state, lat, lng, status, owner_id }
/api/portfolio/units           // includes { id, property_id, status, rent_ready }
/api/portfolio/leases          // includes { id, unit_id, property_id, start_date, end_date, status, tenant_id }
/api/portfolio/tenants         // includes { id, display_name, balance_cents, delinquent_days }
/api/portfolio/workorders      // includes { id, property_id, priority, created_at, assigned_to }
/api/portfolio/transactions    // includes { id, type: 'income'|'expense'|'rent', amount_cents, posted_on }

4) Fix the data hook (useDashboardData.ts)

Remove the coordinate ‚Äújitter.‚Äù In generateMapProperties() delete the random offset:

// BEFORE
lat: coords.lat + (Math.random() - 0.5) * 0.01,
lng: coords.lng + (Math.random() - 0.5) * 0.01,

// AFTER
lat: coords.lat,
lng: coords.lng,


Swallow AbortError everywhere we await fetches. Wrap all awaits in try/catch and ignore isAbortError(e):

try {
  const [properties, units, leases, tenants, workorders, txns] = await Promise.all([
    fetchJSON<Props[]>("/api/portfolio/properties", ac.signal),
    fetchJSON<Units[]>("/api/portfolio/units", ac.signal),
    fetchJSON<Leases[]>("/api/portfolio/leases", ac.signal),
    fetchJSON<Tenants[]>("/api/portfolio/tenants", ac.signal),
    fetchJSON<WOs[]>("/api/portfolio/workorders", ac.signal),
    fetchJSON<Txns[]>("/api/portfolio/transactions", ac.signal),
  ]);
  // ‚Ä¶derive KPIs, action feed, series, occ-by-city here‚Ä¶
} catch (e) {
  if (isAbortError(e)) return;             // <-- suppress StrictMode noise
  console.error("[dashboard] load failed", e);
  setError(e as Error);
} finally {
  if (!ac.signal.aborted) setLoading(false);
}


Zero mock data: delete any remaining generators or Math.random() in this file. If a field is missing upstream, surface it as an empty state in the widget (e.g., ‚ÄúNo delinquent tenants üéâ‚Äù).

Use fmtDate, fmtMoney, fmtPct on all user-facing labels.

5) Genesis visuals ‚Äî remove ‚Äúbrown tint boxes‚Äù

Use the cool gray panel tokens and reserve Altus Gold for accents only.

src/styles/tokens.css (ensure these exact values):

:root{
  --altus-black:#0b0e12;
  --altus-gold:#d6b36a;

  /* Cool gray surfaces */
  --panel-bg:#1a1d21;     /* primary panel */
  --panel-elev:#20242a;   /* elevated surface */
  --line:#2a2d31;         /* borders */
  --neutral:#7b818a;

  /* Text */
  --text:#e6e7ea;
  --text-dim:#a8adb7;

  /* Semantics */
  --good:#31c48d;  /* green */
  --warn:#f3c969;  /* yellow */
  --bad:#ef5953;   /* red */
}


src/styles/Dashboard.css

Panels use .ecc-panel { background: var(--panel-bg); border:1px solid var(--line); }

No gold backgrounds. Keep gold only for highlight lines (NOI), donuts‚Äô progress stroke, and subtle focus rings.

KPI hover/focus: maintain subtle scale/shadow, not color fills.

6) Widgets (actionable by design)

KpiTicker.tsx

4 cards: Occupancy %, Rent Ready/ Vacant, Collections MTD %, Critical WOs.

Each card clicks through to the exact filtered page:

Occupancy ‚Üí /portfolio/properties?city=ALL&vacant=1

Rent Ready ‚Üí /portfolio/units?status=vacant&rent_ready=1

Collections ‚Üí /accounting?scope=MTD

Critical WOs ‚Üí /maintenance?priority=high,critical

Donut % = live (not mocked). Sparkline points come from the last 12 weekly occupancy datapoints (derive from leases/units).

PortfolioGoogleMap.tsx

@vis.gl/react-google-maps + clusterer.

Pin color rules:

Green occupied & current (tenant balance ‚â§ $50 and lease active)

Yellow vacant & rent ready

Orange vacant, not rent ready (open WO or turn-in-progress)

Red occupied but delinquent (balance > $50)

InfoWindow: address, current status, three ActionButtons:

View Details ‚Üí /card/property/{id}

View Unit(s) ‚Üí /portfolio/units?property_id={id}

New WO ‚Üí /maintenance/new?property_id={id}

If VITE_GOOGLE_MAPS_API_KEY missing ‚Üí inline callout card explaining how to set it.

PriorityActionFeed.tsx

Delinquency Alerts (top 3): tenant, property, balance in red, days overdue. Actions: ‚ÄúView Ledger‚Äù, ‚ÄúSend Reminder‚Äù.

Lease Renewals (‚â§45d): tenant, property, expires fmtDate. Actions: ‚ÄúPrepare Renewal‚Äù, ‚ÄúDo Not Renew‚Äù.

Maintenance Hotlist: critical/high or open >7 days. Action: ‚ÄúAssign Vendor‚Äù.

All actions deep-link into existing modules.

FinancialsAndLeasing.tsx

Cash Flow (last 90 days): bar (Income vs Expenses), gold NOI line.

Leasing Funnel (last 30 days): Leads ‚Üí Tours ‚Üí Applications ‚Üí Approved ‚Üí Signed; shows step conversion % on bars.

Use recharts tooltips with fmtMoney/fmtPct.

OccupancyByCity.tsx

Table with sortable columns: City | # Properties | Occupied | Vacant | Occupancy %

Gold micro-progress bar in the last column.

Clicking a row deep-links to /portfolio/properties?city={name}.

7) Global formatting

src/utils/format.ts must export:

export const fmtDate = (iso?: string | Date | null) =>
  !iso ? "‚Äî" : new Date(iso).toLocaleDateString(undefined, { month:"short", day:"numeric", year:"numeric" });

export const fmtMoney = (n?: number | null) =>
  (n==null || Number.isNaN(n)) ? "‚Äî" : (n===0 ? "$0" :
    (typeof n==="number"?n:n).toLocaleString(undefined,{style:"currency",currency:"USD",maximumFractionDigits:0}));

export const fmtPct = (n?: number | null, digits=1) =>
  (n==null || Number.isNaN(n)) ? "‚Äî" : `${n.toFixed(digits)}%`;

8) Dev ergonomics

Remove eruda import entirely from src/main.tsx (it caused the Vite import error). If you insist on mobile console, put it behind a dev-only try { const { default: eruda } = await import(/* @vite-ignore */ 'eruda'); } and add it as a devDependency.

Keep ?debug=1 QA overlay if desired, but default off in prod builds.

9) Verification checklist (copy into PR description)

 No network call uses mock data or randomization.

 KPI values reconcile with Portfolio pages (spot-check 3 properties).

 Collections MTD = sum(receipts rent)/sum(billed rent) for current month.

 NOI chart = income ‚àí expenses per period; tooltips show both.

 Map pins visible only for properties with real lat/lng; missing count shown in map footer.

 No console noise: no AbortError logs during navigation.

 Date strings everywhere are Mon D, YYYY.

 Contrast checked: panels are cool gray; no brown/gold panel fills.

 All action buttons deep-link correctly and pre-filter target tables.

10) Likely data gotchas to triple-check

Delinquency: define threshold (e.g., balance_cents > 5000 = $50).

Rent-ready: ensure FE uses the Unit field your API sets (rent_ready: boolean).

Active lease: (lease.status === 'active') AND start_date <= today <= end_date.

Occupancy: units table is source-of-truth; don‚Äôt infer from leases when units exist.

City grouping: normalize case/whitespace on city.