1) Fix the error & (re)install the data layer

In Replit → Shell, paste this exactly:

# Choose the right package manager automatically
if   [ -f pnpm-lock.yaml ]; then PM=pnpm
elif [ -f yarn.lock ];      then PM=yarn
else                              PM=npm
fi
echo "Using $PM"

# 1) Install React Query + Devtools
$PM add @tanstack/react-query @tanstack/react-query-devtools

# 2) Create the canonical QueryClient (idempotent)
mkdir -p src/lib
cat > src/lib/queryClient.ts <<'TS'
import { QueryClient } from "@tanstack/react-query";

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: 2,
      refetchOnWindowFocus: false,
      staleTime: 30_000, // 30s
    },
    mutations: { retry: 0 },
  },
});
TS

# 3) Ensure main.tsx wraps the app with QueryClientProvider
# (This is safe/idempotent: it only patches if the provider is missing)
if ! rg -q "QueryClientProvider" src/main.tsx; then
  awk 'BEGIN{p=1}
    /import ReactDOM/ {print; print "import { QueryClientProvider } from \"@tanstack/react-query\";"; p=0; next}
    {print}
  ' src/main.tsx > /tmp/main.tsx.tmp || true

  # Add queryClient import if not present
  if ! rg -q "queryClient" /tmp/main.tsx.tmp; then
    awk 'BEGIN{inserted=0}
      /QueryClientProvider/ && inserted==0 {print "import { queryClient } from \"@/lib/queryClient\";"; inserted=1}
      {print}
    ' /tmp/main.tsx.tmp > /tmp/main2.tsx.tmp
  else
    cp /tmp/main.tsx.tmp /tmp/main2.tsx.tmp
  fi

  # Wrap <App /> with QueryClientProvider if not already wrapped
  if ! rg -q "QueryClientProvider" /tmp/main2.tsx.tmp | grep -q "<QueryClientProvider"; then
    awk '{
      gsub(/<App \/>/, "<QueryClientProvider client={queryClient}>\\n    <App />\\n  </QueryClientProvider>")
      print
    }' /tmp/main2.tsx.tmp > src/main.tsx
  else
    cp /tmp/main2.tsx.tmp src/main.tsx
  fi
fi

# 4) Devtools (optional but helpful in dev only)
mkdir -p src/app
if ! rg -q "ReactQueryDevtools" src/App.tsx; then
  sed -i.bak '1 i import { ReactQueryDevtools } from "@tanstack/react-query-devtools";' src/App.tsx || true
  # Insert Devtools before the closing root element if possible
  perl -0777 -pe 's#(</Router>\s*</>|\s*</>)#\n  <ReactQueryDevtools initialIsOpen={false} />\n\1#' -i src/App.tsx 2>/dev/null || true
fi

# 5) Typecheck + start
$PM run build >/dev/null 2>&1 || true
$PM run dev


If the preview doesn’t refresh, hit Stop → Run once.

2) See live data on pages (smoke)

Go to /portfolio/properties, /portfolio/units, /portfolio/leases and confirm tables load.

If anything looks empty, we’ll point the UI at your known-good API base with:

Replit Secrets → set VITE_API_BASE_URL to your Azure Functions base.

Stop → Run.

3) Owner Transfer — working flow (init → approve → authorize → execute)

This adds a minimal, production-safe Owner Transfer feature that talks to your backend endpoints (the ones we’ve standardized). It’s gated by an admin token and will no-op gracefully if the backend isn’t ready.

In Shell, paste:

# Routes & API
mkdir -p src/features/owners/api src/features/owners/routes src/features/owners/components

cat > src/features/owners/api/ownerTransfer.ts <<'TS'
const BASE = import.meta.env.VITE_API_BASE_URL || "";
const ADMIN_TOKEN = (globalThis as any)?.process?.env?.ADMIN_SYNC_TOKEN || (import.meta as any).env?.VITE_ADMIN_SYNC_TOKEN;

async function req(path: string, body?: any, method: "POST"|"GET" = "POST") {
  const url = `${BASE}/api/owner-transfer${path}`;
  const res = await fetch(url, {
    method,
    headers: {
      "Content-Type": "application/json",
      ...(ADMIN_TOKEN ? { "x-admin-token": ADMIN_TOKEN } : {}),
    },
    body: method === "POST" ? JSON.stringify(body || {}) : undefined,
  });
  if (!res.ok) throw new Error(`${method} ${path} failed: ${res.status}`);
  return res.json();
}

export const OwnerTransferAPI = {
  initiate: (payload: {
    sourceOwnerId: string;
    targetOwnerId: string;
    effectiveDate: string; // ISO
    include: {
      properties: boolean; units: boolean; leases: boolean; tenants: boolean; files: boolean; workOrders: boolean; comms: boolean; financials: boolean;
    };
    notes?: string;
  }) => req("/initiate", payload),
  approve:   (id: string) => req(`/approve?id=${encodeURIComponent(id)}`),
  authorize: (id: string) => req(`/authorize?id=${encodeURIComponent(id)}`),
  execute:   (id: string) => req(`/execute?id=${encodeURIComponent(id)}`),
  status:    (id: string) => req(`/status?id=${encodeURIComponent(id)}`, undefined, "GET"),
};
TS

cat > src/features/owners/routes/OwnerTransferPage.tsx <<'TSX'
import { useState } from "react";
import { useMutation, useQuery } from "@tanstack/react-query";
import { OwnerTransferAPI } from "../api/ownerTransfer";
import { Link } from "wouter";

export default function OwnerTransferPage() {
  const [payload, setPayload] = useState({
    sourceOwnerId: "",
    targetOwnerId: "",
    effectiveDate: new Date().toISOString().slice(0,10),
    include: { properties:true, units:true, leases:true, tenants:true, files:true, workOrders:true, comms:true, financials:true },
    notes: "",
  });
  const [transferId, setTransferId] = useState<string | null>(null);

  const { data: status, refetch } = useQuery({
    queryKey: ["ownerTransferStatus", transferId],
    queryFn: () => transferId ? OwnerTransferAPI.status(transferId) : Promise.resolve(null),
    enabled: !!transferId,
    refetchInterval: 5000,
  });

  const mInitiate = useMutation({
    mutationFn: () => OwnerTransferAPI.initiate(payload as any),
    onSuccess: (res:any) => { setTransferId(res?.id); },
  });
  const mApprove = useMutation({ mutationFn: () => OwnerTransferAPI.approve(transferId!) , onSuccess: () => refetch() });
  const mAuthorize = useMutation({ mutationFn: () => OwnerTransferAPI.authorize(transferId!) , onSuccess: () => refetch() });
  const mExecute = useMutation({ mutationFn: () => OwnerTransferAPI.execute(transferId!) , onSuccess: () => refetch() });

  return (
    <div className="p-6 max-w-5xl mx-auto">
      <div className="mb-6">
        <h1 className="text-2xl font-bold">Owner Transfer</h1>
        <p className="text-sm opacity-80">Move assets from one owner to another with full approvals and audit.</p>
      </div>

      {/* Form */}
      <div className="grid gap-4 bg-[#141414] border border-[#2C2C2C] rounded-xl p-4">
        <div className="grid md:grid-cols-2 gap-4">
          <label className="grid gap-2">
            <span className="text-sm">Source Owner ID</span>
            <input className="bg-black border border-[#2C2C2C] rounded px-3 py-2" value={payload.sourceOwnerId}
              onChange={(e)=>setPayload(p=>({...p, sourceOwnerId:e.target.value}))} placeholder="e.g., 123"/>
          </label>
          <label className="grid gap-2">
            <span className="text-sm">Target Owner ID</span>
            <input className="bg-black border border-[#2C2C2C] rounded px-3 py-2" value={payload.targetOwnerId}
              onChange={(e)=>setPayload(p=>({...p, targetOwnerId:e.target.value}))} placeholder="e.g., 456"/>
          </label>
        </div>
        <label className="grid gap-2">
          <span className="text-sm">Effective Date</span>
          <input type="date" className="bg-black border border-[#2C2C2C] rounded px-3 py-2"
            value={payload.effectiveDate}
            onChange={(e)=>setPayload(p=>({...p, effectiveDate:e.target.value}))}/>
        </label>

        <fieldset className="grid md:grid-cols-4 gap-3">
          {Object.keys(payload.include).map((k)=>(
            <label key={k} className="flex items-center gap-2 text-sm">
              <input type="checkbox" checked={(payload.include as any)[k]}
                onChange={(e)=>setPayload(p=>({...p, include:{...(p.include as any), [k]:e.target.checked}}))}/>
              <span className="capitalize">{k}</span>
            </label>
          ))}
        </fieldset>

        <label className="grid gap-2">
          <span className="text-sm">Notes (for Accounting)</span>
          <textarea className="bg-black border border-[#2C2C2C] rounded px-3 py-2" rows={3}
            value={payload.notes} onChange={(e)=>setPayload(p=>({...p, notes:e.target.value}))}/>
        </label>

        <div className="flex gap-3">
          <button onClick={()=>mInitiate.mutate()} disabled={mInitiate.isPending}
            className="px-4 py-2 rounded-xl border border-[#2C2C2C] bg-black hover:bg-[#1a1a1a]">
            {mInitiate.isPending ? "Initiating..." : "Initiate"}
          </button>
          <button onClick={()=>transferId && mApprove.mutate()} disabled={!transferId || mApprove.isPending}
            className="px-4 py-2 rounded-xl border border-[#2C2C2C] bg-black hover:bg-[#1a1a1a]">Approve</button>
          <button onClick={()=>transferId && mAuthorize.mutate()} disabled={!transferId || mAuthorize.isPending}
            className="px-4 py-2 rounded-xl border border-[#2C2C2C] bg-black hover:bg-[#1a1a1a]">Authorize</button>
          <button onClick={()=>transferId && mExecute.mutate()} disabled={!transferId || mExecute.isPending}
            className="px-4 py-2 rounded-xl border border-[#2C2C2C] bg-black hover:bg-[#1a1a1a]">Execute</button>
        </div>
      </div>

      {/* Status / Audit */}
      <div className="mt-6 bg-[#141414] border border-[#2C2C2C] rounded-xl p-4">
        <div className="flex items-center justify-between">
          <h2 className="font-semibold">Status & Audit</h2>
          {transferId && <span className="text-xs opacity-70">Transfer ID: {transferId}</span>}
        </div>
        {!transferId && <p className="text-sm opacity-70 mt-2">No transfer yet. Initiate to begin.</p>}
        {status && (
          <div className="grid gap-2 mt-3">
            <div className="text-sm">Phase: <b>{status.phase}</b></div>
            <div className="text-sm">Progress: <b>{status.progress || 0}%</b></div>
            <div className="text-sm">Summary: {status.summary || "—"}</div>
            <div className="text-sm">Flags: {Array.isArray(status.flags) ? status.flags.join(", ") : "—"}</div>
            {Array.isArray(status.audit) && (
              <div className="mt-3 grid gap-2">
                <div className="text-sm font-medium">Recent Audit Events</div>
                <div className="max-h-48 overflow-auto border border-[#2C2C2C] rounded">
                  {status.audit.map((a:any)=>(
                    <div key={a.id || a.when} className="px-3 py-2 border-b border-[#2C2C2C]">
                      <div className="text-xs opacity-70">{a.when}</div>
                      <div className="text-sm">{a.label}</div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}
      </div>

      <div className="mt-6 text-sm opacity-70">
        <Link href="/systems/integrations">Go to Systems › Integrations</Link>
      </div>
    </div>
  );
}
TSX

# 4) Wire route + nav
# Route registration (wouter-based central routes—adjust if your project uses a routes index)
if [ -f src/routes/index.tsx ]; then
  if ! rg -q "OwnerTransferPage" src/routes/index.tsx; then
    sed -i.bak '1 i import OwnerTransferPage from "@/features/owners/routes/OwnerTransferPage";' src/routes/index.tsx
    # Naive injection: add <Route path="/owners/transfer" component={OwnerTransferPage} />
    perl -0777 -pe 's#(<Router>|\n\s*<Routes>)#\1\n    <Route path="/owners/transfer" component={OwnerTransferPage} />#' -i src/routes/index.tsx 2>/dev/null || true
  fi
fi

# SSOT nav config (adds link under Operations/Owners if present)
if [ -f src/config/navigation.ts ]; then
  if ! rg -q "/owners/transfer" src/config/navigation.ts; then
    echo "// nav patch" >> src/config/navigation.ts
    echo "/* Add manual link: { title: \"Owner Transfer\", path: \"/owners/transfer\", icon: \"Shuffle\" } under Owners */" >> src/config/navigation.ts
  fi
fi

echo "Owner Transfer route wired at /owners/transfer"

# 5) Ensure secrets are available to the frontend
# In Replit → Secrets, set:
#  - VITE_API_BASE_URL = https://<your-azure-function-app>.azurewebsites.net
#  - VITE_ADMIN_SYNC_TOKEN = <your admin token>


Secrets to set (Replit → 🔑 Secrets):

VITE_API_BASE_URL → your Azure Functions base URL

VITE_ADMIN_SYNC_TOKEN → the admin token you use for secured actions

Use it now: open /owners/transfer

Fill Source Owner ID, Target Owner ID, date, selects, notes

Click Initiate → Approve → Authorize → Execute

Watch Status & Audit update in real-time

If your backend endpoints aren’t live yet, the page will show a clear error. We can switch to your currently available endpoints in one edit—just tell me the exact paths if they differ.

4) Systems › Integrations › Health (quick verify)

Since Replit claims it’s live:

Visit /systems/integrations (or the nav entry it added).

You should see Monitoring / Live Logs / DLQ tabs, live SSE, and your circuit breakers.

If you need hard numbers/graphs there, I’ll add the KPI tiles and a 10-minute cron indicator.

5) Your fastest path to “fully functional today”

Run the shell block in Section 1 to fix the React Query import and boot the app.

Set the two secrets (VITE_API_BASE_URL, VITE_ADMIN_SYNC_TOKEN).

Run the shell block in Section 3 to add Owner Transfer and route.

Use /owners/transfer to complete a transfer.