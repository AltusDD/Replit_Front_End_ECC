Execution Mode (paste to Replit first)
MODE: Contract Compliance Executor (CSP v2)
Rules:
- Only apply the edits and commands listed below.
- No “inline improvements” or refactors beyond this patch.
- After changes, run guardrail + proofs.

1) Remove the stragglers the audit flagged

Run these commands exactly:

# 1) Kill every backup/legacy artifact in the tree
git rm -rf --cached . 2>/dev/null || true
find src -type f -name "*.bak" -delete
rm -rf .attic 2>/dev/null || true

# 2) Pin any remaining legacy imports (alias or relative) — should print nothing
grep -RIn "components/Section\|features/ui/FieldGroup" src || echo "no legacy hits"


If the grep prints anything, don’t let Replit “fix inline.” We’ll apply the sanctioned replacements next.

2) Drop modern CardKit replacements (so those files compile without legacy)
2.1 New: src/components/cardkit/CardPanel.tsx
import { ReactNode } from "react";

/** Minimal, contract-safe replacement for legacy <Section>. */
export default function CardPanel({
  title,
  actions,
  children,
  testid = "card-panel",
}: {
  title?: ReactNode;
  actions?: ReactNode;
  children: ReactNode;
  testid?: string;
}) {
  return (
    <section className="ecc-object p-4 rounded-xl border border-neutral-800" data-testid={testid}>
      {(title || actions) && (
        <header className="mb-3 flex items-center justify-between">
          {title ? <h2 className="text-base font-semibold">{title}</h2> : <div />}
          {actions ?? null}
        </header>
      )}
      {children}
    </section>
  );
}

2.2 New: src/components/cardkit/FieldGroup.tsx
import { ReactNode } from "react";

/** Lightweight field group used by property side panels in a CardKit world. */
export default function FieldGroup({
  title,
  children,
}: {
  title?: string | ReactNode;
  children: ReactNode;
}) {
  return (
    <div className="mb-4">
      {title ? <div className="text-xs uppercase opacity-60 mb-1">{title}</div> : null}
      <div className="grid grid-cols-2 gap-3 text-sm">{children}</div>
    </div>
  );
}

3) Replace legacy imports/usages in the flagged files

Apply these surgical edits—do not let Replit rewrite anything else.

3.1 src/pages/card/property/Financials.tsx
- import Section from "@/components/Section";
+ import CardPanel from "@/components/cardkit/CardPanel";
- // ... inside JSX:
- <Section title="Financials">...</Section>
+ <CardPanel title="Financials">...</CardPanel>

3.2 src/pages/card/property/Legal.tsx
- import Section from "@/components/Section";
+ import CardPanel from "@/components/cardkit/CardPanel";
- <Section title="Legal">...</Section>
+ <CardPanel title="Legal">...</CardPanel>

3.3 src/pages/card/property/RightRail.tsx
- import Section from "@/components/Section";
- import FieldGroup from "@/features/ui/FieldGroup";
+ import CardPanel from "@/components/cardkit/CardPanel";
+ import FieldGroup from "@/components/cardkit/FieldGroup";
- <Section title="Details">...</Section>
+ <CardPanel title="Details">...</CardPanel>

3.4 If any other file imports the legacy Section/FieldGroup

Do the same replacement:

- import Section from ".../components/Section";
+ import CardPanel from "@/components/cardkit/CardPanel";

- import FieldGroup from ".../features/ui/FieldGroup";
+ import FieldGroup from "@/components/cardkit/FieldGroup";

4) Lock the door behind us (extend guardrail bans)

Append to scripts/guardrail-check.mjs:

// --- Legacy Section & FieldGroup ban (alias + relative) ---
import fs from "fs"; import path from "path"; import glob from "glob";
let failures = globalThis.failuresSum || 0;
for (const rel of glob.sync("src/**/*.{ts,tsx,js,jsx}", { cwd: process.cwd() })) {
  const s = fs.readFileSync(path.join(process.cwd(), rel), "utf8");
  if (s.includes("@/components/Section") || /components\/Section(\.|\/)/.test(s)) {
    console.error("[guardrail] forbidden legacy Section import in", rel); failures++;
  }
  if (s.includes("@/features/ui/FieldGroup") || /features\/ui\/FieldGroup(\.|\/)/.test(s)) {
    console.error("[guardrail] forbidden legacy FieldGroup import in", rel); failures++;
  }
}
// also fail if any .bak sneaks into src again
for (const bak of glob.sync("src/**/*.bak", { cwd: process.cwd() })) {
  console.error("[guardrail] .bak file present:", bak); failures++;
}
globalThis.failuresSum = failures;


You already have bans for features/portfolio/components/*, ecc-card-queries, etc. This closes the last loopholes.

5) Fix ESLint (so editors/Replit can’t auto-insert bad imports)
npm i -D eslint eslint-plugin-react @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint-plugin-react-hooks eslint-plugin-import


Update .eslintrc.cjs (or create it) with the import ban (if not present):

module.exports = {
  root: true,
  parser: "@typescript-eslint/parser",
  plugins: ["@typescript-eslint","react","react-hooks","import"],
  extends: [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:@typescript-eslint/recommended"
  ],
  rules: {
    "no-restricted-imports": ["error", {
      "paths": [
        { "name": "@/components/Section", "message": "Legacy Section is banned. Use CardPanel." },
        { "name": "@/features/ui/FieldGroup", "message": "Legacy FieldGroup is banned. Use CardKit FieldGroup." },
        { "name": "@/features/portfolio/components", "message": "Legacy portfolio components are banned. Use CardKit." }
      ],
      "patterns": [
        "@/features/portfolio/components/*",
        "**/features/portfolio/components/*",
        "**/components/Section*",
        "**/features/ui/FieldGroup*"
      ]
    }]
  },
  settings: { react: { version: "detect" } }
};

6) Clean rebuild + proofs
# purge build caches
rm -rf node_modules/.vite .vite dist .cache .parcel-cache 2>/dev/null || true

npm run guardrail   # must PASS
eslint . --max-warnings=0

npm run dev
# UI: http://localhost:5173/ (open portfolio + property card)
# API: http://localhost:8787/api/rpc/get_property_card?id=42

Why this keeps Replit from “finding bad places” again

Files removed and paths replaced → there’s nowhere legacy can resolve.

Guardrail bans alias + relative legacy imports and even .bak artifacts → dev won’t start if anything slips in.

ESLint bans at editor time → Replit/IDE autocomplete can’t re-suggest banned paths.

CardKit-only surface area → all new work funnels into @/components/cardkit/*.

If Replit proposes any change outside the patch above, reject it. If guardrail or ESLint complain about a path, paste the exact error and I’ll give you the 1-file micro-diff to correct it.