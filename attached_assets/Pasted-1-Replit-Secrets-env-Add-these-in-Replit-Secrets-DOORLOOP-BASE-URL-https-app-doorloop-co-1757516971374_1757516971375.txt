1) Replit Secrets (env)

Add these in Replit → Secrets:

DOORLOOP_BASE_URL = https://app.doorloop.com/api
DOORLOOP_API_KEY  = <your real key>


(Keep your existing scheduler vars as-is:)

AUTO_SYNC_ENABLED = true
AUTO_SYNC_INTERVAL_MINUTES = 10
SYNC_ENTITIES = owners,properties,units,leases,tenants
AUTO_SYNC_FULL_AT_HOUR_UTC = 5

2) Central DoorLoop client (one file, used everywhere)

Create (or replace) server/clients/doorloop.ts:

// server/clients/doorloop.ts
import qs from "querystring";

const BASE = process.env.DOORLOOP_BASE_URL || "https://app.doorloop.com/api";
const API_KEY = process.env.DOORLOOP_API_KEY || "";

if (!API_KEY) {
  console.warn("[doorloop] Missing DOORLOOP_API_KEY");
}

type FetchOpts = {
  method?: "GET" | "POST" | "PUT" | "DELETE";
  query?: Record<string, any>;
  body?: any;
  timeoutMs?: number;
};

export async function dlFetch<T = any>(path: string, opts: FetchOpts = {}): Promise<T> {
  const { method = "GET", query, body, timeoutMs = 20000 } = opts;

  const u = new URL(path.replace(/^\//, ""), BASE);
  if (query) u.search = qs.stringify(Object.fromEntries(
    Object.entries(query).filter(([,v]) => v !== undefined && v !== null)
  ));

  const ctrl = new AbortController();
  const t = setTimeout(() => ctrl.abort(), timeoutMs);

  const res = await fetch(u.toString(), {
    method,
    headers: {
      "Authorization": `bearer ${API_KEY}`,
      "Content-Type": "application/json",
      "Accept": "application/json",
    },
    body: body ? JSON.stringify(body) : undefined,
    signal: ctrl.signal,
  }).catch((e) => {
    clearTimeout(t);
    throw new Error(`[doorloop] fetch failed ${u.toString()}: ${e}`);
  });

  clearTimeout(t);

  if (!res.ok) {
    const text = await res.text().catch(() => "");
    throw new Error(`[doorloop] HTTP ${res.status} for ${u.toString()} :: ${text.slice(0,300)}`);
  }

  return res.json() as Promise<T>;
}

// Convenience helpers
export const dlGet  = <T=any>(p: string, q?: Record<string, any>) => dlFetch<T>(p, { method: "GET",  query: q });
export const dlPost = <T=any>(p: string, body?: any)               => dlFetch<T>(p, { method: "POST", body });

Wire it into your ETL once (example)

Anywhere you call DoorLoop (owners/properties/units/leases/tenants), import from this client instead of hardcoding URLs:

// server/etl/doorloop/owners.ts (example)
import { dlGet } from "../../clients/doorloop";

export async function fetchOwners(page = 1, pageSize = 100) {
  return dlGet<{ data: any[] }>(
    "/owners",
    { page_number: page, page_size: pageSize }
  );
}


Do the same for properties, units, leases, tenants. Once the client is centralized, all endpoints will use the correct base + headers automatically.

3) Quick smoke test (external + local)

Create tools/smoke_doorloop.sh:

#!/usr/bin/env bash
set -euo pipefail

: "${DOORLOOP_BASE_URL:=https://app.doorloop.com/api}"
: "${DOORLOOP_API_KEY:?DOORLOOP_API_KEY is required}"

echo "➡️  Hitting DoorLoop /owners (page_size=1)…"
curl -sS -H "Authorization: bearer ${DOORLOOP_API_KEY}" \
     "${DOORLOOP_BASE_URL}/owners?page_size=1" | head -c 400 && echo

echo "✅ DoorLoop reachable"


Run it in Replit shell:

chmod +x tools/smoke_doorloop.sh
./tools/smoke_doorloop.sh


You should see JSON (not HTML “Page Not Found”). If you see HTML, the base URL or header is wrong.

4) One-off backfill, then resume the 10-min loop

Use your Admin → Sync “Run now” for each entity, or (if you have a script) add a tiny helper script to kick them in series:

Create tools/run_backfill.sh:

#!/usr/bin/env bash
set -euo pipefail

# If you already have internal HTTP endpoints for sync, call them here.
# Otherwise, invoke your ETL functions via ts-node or a small CLI wrapper.

entities=("owners" "properties" "units" "leases" "tenants")

for e in "${entities[@]}"; do
  echo "➡️  Backfilling ${e}…"
  # Example: HTTP trigger (adjust to your app)
  curl -sS -X POST "http://localhost:5173/api/admin/sync/run" \
    -H "Content-Type: application/json" \
    -d "{\"entities\":[\"${e}\"],\"mode\":\"backfill\"}" | jq .
done


(If you don’t have that /api/admin/sync/run route, just use your Admin UI’s “Run now” button per entity right after fixing the env, or ask me and I’ll give you a tiny route to add.)