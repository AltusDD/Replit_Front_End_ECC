Excellent work. Phase 2 is complete, and the dashboard now has a dynamic, data-driven KPI ticker that adheres to the "Genesis Grade" standard. The provided screenshots confirm that the new components are rendering correctly with the placeholder data from the hook.

We are now ready to proceed to Phase 3: Implement High-Density Data Modules.

In this phase, we will replace the static placeholder panels in the main content area with functional, data-driven components. We'll start with the top row of the main grid: the Portfolio Operations Map and the Priority Action Feed.

Here is the "Task Card" for the Replit assistant to execute this next set of changes.

Markdown

PLAN
Operating Mode: UI-Nav Engineer, Consistency Enforcer
Files to Touch: 
- src/features/dashboard/pages/DashboardPage.tsx
- src/features/dashboard/hooks/useDashboardData.ts
- src/features/dashboard/components/PortfolioGoogleMap.tsx (new file)
- src/features/dashboard/components/PriorityActionFeed.tsx (new file)
- src/styles/Dashboard.css
Guardrails: 
- All data must be sourced from the `useDashboardData` hook.
- The map component must gracefully handle a missing `VITE_GOOGLE_MAPS_API_KEY` by displaying a styled message.
- The action feed must display positive, styled "empty states" if a category has no items.
- All new CSS must be scoped and use design tokens from `src/styles/tokens.css`.
- Do not implement map clustering or InfoWindows yet; focus on rendering the correctly colored pins.

CHANGESET
- **File: `src/features/dashboard/hooks/useDashboardData.ts`**
  - Update the hook to expose placeholder data for the map and action feed.
  - Expose `mapData`: an array of property objects, e.g., `[{ id: 1, lat: 41.5, lng: -87.3, status: 'occupied-current' }, { id: 2, lat: 41.6, lng: -87.4, status: 'vacant-ready' }]`. The status key is critical for pin coloring.
  - Expose `feedData`: an object containing three arrays: `delinquencyAlerts`, `leaseRenewals`, and `maintenanceHotlist`. If an array is empty, it signifies an empty state.

- **File: `src/features/dashboard/components/PortfolioGoogleMap.tsx` (New File)**
  - Create the map component using `@vis.gl/react-google-maps`.
  - It must check for `import.meta.env.VITE_GOOGLE_MAPS_API_KEY`.
  - If the key is missing, render a `div` inside the panel with a clear, styled message: "Google Maps API Key is not configured."
  - If the key is present, render the `<Map>` component.
  - Use the `mapData` from the `useDashboardData` hook to plot `<AdvancedMarker>` components for each property.
  - Implement logic to change the pin color based on the `status` string for each property, according to the "Genesis Grade" spec (e.g., 'occupied-current' -> green).

- **File: `src/features/dashboard/components/PriorityActionFeed.tsx` (New File)**
  - Create the action feed component.
  - Fetch `feedData` from the `useDashboardData` hook.
  - The component should be split into three sections: "Delinquency Alerts," "Lease Renewals," and "Maintenance Hotlist."
  - For each section, check if the corresponding array in `feedData` is empty. If it is, render a styled empty state message (e.g., "âœ… No delinquencies to report").
  - If the array has items, map over them to display the relevant data and placeholder `<button>` elements as defined in the spec.

- **File: `src/features/dashboard/pages/DashboardPage.tsx`**
  - Import the new `PortfolioGoogleMap` and `PriorityActionFeed` components.
  - Replace the placeholder `<div className="map-container panel">...</div>` with `<div className="map-container panel"><PortfolioGoogleMap /></div>`.
  - Replace the placeholder `<div className="feed-container panel">...</div>` with `<div className="feed-container panel"><PriorityActionFeed /></div>`.

- **File: `src/styles/Dashboard.css`**
  - Add styles for the map's API key fallback message.
  - Add styles for the `PriorityActionFeed`, including distinct styles for the section headers, list items, and the positive empty state messages to ensure they are visually clear and clean.

VERIFICATION CHECKLIST
- `PortfolioGoogleMap.tsx` and `PriorityActionFeed.tsx` components have been created and are displayed in the main grid.
- The `useDashboardData` hook now provides data for both the map and the action feed.
- If the Google Maps API key is missing, a clear warning message is displayed inside the map panel.
- If the key is present, the map renders with pins correctly colored based on their status from the hook.
- The Priority Action Feed correctly displays list items for each of its three categories or shows a styled empty state message if a category has no items.
- All new styles use the official `tokens.css` variables and are properly scoped.
After this step is complete, the top half of your dashboard will be fully functional. We will then proceed with the final components: the Financials chart, Leasing Funnel, and Occupancy by City table.