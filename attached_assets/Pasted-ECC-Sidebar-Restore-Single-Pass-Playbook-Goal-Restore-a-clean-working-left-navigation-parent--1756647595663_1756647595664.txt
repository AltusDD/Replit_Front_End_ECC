ECC Sidebar Restore — Single-Pass Playbook

Goal: Restore a clean, working left navigation (parent + child links, active highlighting, pin/collapse, independent hidden scroll) using wouter only, without disturbing the rest of the app.

Guardrails (follow strictly)

Only create/replace the files listed below.

Do not modify any other files (no edits to routes, pages, tables, data fetching, or theme tokens).

Do not add react-router-dom wrappers anywhere. We use wouter only.

Keep the current theme; the CSS here is scoped to .sidebar to avoid side effects.

If a file already exists, back it up as *.bak before replacing.

1) Ensure deps

If wouter isn’t in package.json, add it:

npm i wouter

2) Create/Replace: src/components/layout/navConfig.ts

This is the only source of truth for the sidebar items.
It exports both a named sections and a default export for flexibility.

// src/components/layout/navConfig.ts
export type Leaf = { label: string; to: string };
export type Group = { label: string; children: Leaf[] };
export type Item = Leaf | Group;
export type Section = { title?: string; items: Item[] };

const sections: Section[] = [
  {
    title: "Dashboard",
    items: [{ label: "Home", to: "/dashboard" }],
  },
  {
    title: "Portfolio V3",
    items: [
      { label: "Properties", to: "/portfolio/properties" },
      { label: "Units", to: "/portfolio/units" },
      { label: "Leases", to: "/portfolio/leases" },
      { label: "Tenants", to: "/portfolio/tenants" },
      { label: "Owners", to: "/portfolio/owners" },
    ],
  },
  {
    title: "Cards",
    items: [
      { label: "Overview", to: "/cards/overview" },
      { label: "Delinquencies", to: "/cards/delinquencies" },
      { label: "Vacancy", to: "/cards/vacancy" },
    ],
  },
  {
    title: "Operations",
    items: [
      { label: "Accounting", to: "/operations/accounting" },
      { label: "Leasing", to: "/operations/leasing" },
      { label: "Maintenance", to: "/operations/maintenance" },
      { label: "Marketing", to: "/operations/marketing" },
    ],
  },
];

export { sections };
export default sections;

3) Create/Replace: src/components/Sidebar.tsx

Uses wouter and is resilient to export shape.
Includes pin/unpin (collapsed state persisted), active-state highlighting, parent/child groups, and independent scroll.

// src/components/Sidebar.tsx
import React, { useEffect, useMemo, useState } from "react";
import { Link, useLocation } from "wouter";

/* ——— Types (kept local so this file is self-contained) ——— */
type Leaf = { label: string; to: string };
type Group = { label: string; children: Leaf[] };
type Item = Leaf | Group;
type Section = { title?: string; items: Item[] };

function isGroup(i: Item): i is Group {
  return (i as Group)?.children !== undefined;
}

/* ——— Import nav config (robust to different export shapes) ——— */
import * as Nav from "@/components/layout/navConfig";
const RAW: any =
  (Nav as any).sections ??
  (Nav as any).default ??
  (Array.isArray(Nav) ? Nav : []);

const DEFAULT_SECTIONS: Section[] = [
  { title: "Dashboard", items: [{ label: "Home", to: "/dashboard" }] },
];

const SECTIONS: Section[] = Array.isArray(RAW) && RAW.length ? RAW : DEFAULT_SECTIONS;

/* ——— Component ——— */
export default function Sidebar() {
  const [location] = useLocation();
  const current = location || "/";

  // Persist collapsed state
  const [collapsed, setCollapsed] = useState<boolean>(() => {
    try {
      return localStorage.getItem("ecc:nav:collapsed") === "1";
    } catch {
      return false;
    }
  });
  useEffect(() => {
    try {
      localStorage.setItem("ecc:nav:collapsed", collapsed ? "1" : "0");
    } catch {}
  }, [collapsed]);

  // Auto-open groups that contain the active child
  const initialExpanded = useMemo(() => {
    const map = new Map<string, boolean>();
    SECTIONS.forEach((section, sIdx) => {
      (section.items || []).forEach((it, iIdx) => {
        if (isGroup(it)) {
          const open = (it.children || []).some((c) => current.startsWith(c.to));
          map.set(`${sIdx}:${iIdx}`, open);
        }
      });
    });
    return map;
  }, [current]);

  const [expanded, setExpanded] = useState(initialExpanded);
  useEffect(() => setExpanded(initialExpanded), [initialExpanded]);

  const toggle = (key: string) =>
    setExpanded((prev) => new Map(prev).set(key, !prev.get(key)));

  return (
    <aside className={`sidebar ${collapsed ? "collapsed" : ""}`} data-role="sidebar" aria-label="Primary">
      {/* Brand + Pin */}
      <div className="brand">
        <img
          src="/logo.png"
          alt="Altus Realty Group"
          className="brand-logo"
          onError={(e) => { (e.currentTarget as HTMLImageElement).style.display = "none"; }}
        />
        <button className="pinBtn" onClick={() => setCollapsed(!collapsed)}>
          {collapsed ? "Unpin" : "Pin"}
        </button>
      </div>

      {/* Independent scroll (scrollbar hidden by CSS) */}
      <div className="sidebar-scroll">
        <nav role="navigation" data-nav aria-label="Main">
          {SECTIONS.map((section, sIdx) => (
            <div className="section" key={section.title || sIdx}>
              {section.title && <div className="section-title">{section.title}</div>}

              {(section.items || []).map((it, iIdx) => {
                const key = `${sIdx}:${iIdx}`;

                if (isGroup(it)) {
                  const open = expanded.get(key) ?? false;
                  return (
                    <div className="group" key={key}>
                      <button
                        type="button"
                        className="nav-row group-row"
                        aria-expanded={open}
                        onClick={() => toggle(key)}
                      >
                        <span className="icon">•</span>
                        <span className="label">{it.label}</span>
                        <span className="expand" aria-hidden>▾</span>
                      </button>

                      <div className="leafList" hidden={!open}>
                        {(it.children || []).map((ch) => {
                          const active = current.startsWith(ch.to);
                          return (
                            <Link
                              key={ch.to}
                              href={ch.to}
                              className={`nav-row leaf ${active ? "active" : ""}`}
                              aria-current={active ? "page" : undefined}
                            >
                              <span className="icon">•</span>
                              <span className="label">{ch.label}</span>
                              <span className="expand" />
                            </Link>
                          );
                        })}
                      </div>
                    </div>
                  );
                }

                // Leaf
                const leaf = it as Leaf;
                const active = current.startsWith(leaf.to);
                return (
                  <Link
                    key={leaf.to}
                    href={leaf.to}
                    className={`nav-row leaf ${active ? "active" : ""}`}
                    aria-current={active ? "page" : undefined}
                  >
                    <span className="icon">•</span>
                    <span className="label">{leaf.label}</span>
                    <span className="expand" />
                  </Link>
                );
              })}
            </div>
          ))}
        </nav>
      </div>
    </aside>
  );
}

4) Create/Replace: src/styles/_ecc-override.css

All styles are scoped to .sidebar so they won’t leak.
Scrollbar is hidden but scrolling works; collapsed state is icon-only with a clean fly-out.

/* src/styles/_ecc-override.css */
/* Local tokens (scoped to sidebar defaults if theme tokens missing) */
:root {
  --ecc-sidebar-w: 280px;
  --ecc-sidebar-w-collapsed: 76px;
  --ecc-bg: #0e0f11;
  --ecc-panel: #121316;
  --ecc-seam: #222428;
  --ecc-text: #d7d9dd;
  --ecc-dim: #a6a8ac;
  --ecc-gold: #ffd400;
}

.sidebar {
  width: var(--ecc-sidebar-w);
  background: var(--ecc-panel);
  color: var(--ecc-text);
  display: flex;
  flex-direction: column;
  border-right: 1px solid var(--ecc-seam);
}

.sidebar.collapsed { width: var(--ecc-sidebar-w-collapsed); }

/* Brand */
.sidebar .brand {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 14px 12px 8px;
}
.sidebar .brand-logo { height: 42px; width: auto; }
.sidebar .pinBtn {
  margin-left: auto;
  font-size: 12px;
  border: 1px solid var(--ecc-seam);
  background: transparent;
  color: var(--ecc-dim);
  border-radius: 10px;
  padding: 4px 10px;
}
.sidebar.collapsed .pinBtn { font-size: 10px; padding: 2px 8px; }

/* Scroll (hidden bar) */
.sidebar .sidebar-scroll {
  height: calc(100vh - 70px);
  overflow-y: auto;
  -webkit-overflow-scrolling: touch;
  overscroll-behavior: contain;
  scrollbar-width: none;
}
.sidebar .sidebar-scroll::-webkit-scrollbar { width: 0; height: 0; }

/* Section */
.sidebar .section { padding: 6px 8px; }
.sidebar .section-title {
  color: var(--ecc-dim);
  font-size: 12px;
  letter-spacing: .08em;
  padding: 8px 10px 6px;
}

/* Rows: icon | label | chevron */
.sidebar .nav-row {
  display: grid;
  grid-template-columns: 18px minmax(0,1fr) auto;
  align-items: center;
  column-gap: 10px;
  padding: 8px 10px;
  border-radius: 10px;
  text-decoration: none;
  color: inherit;
}
.sidebar .nav-row:hover { background: #17181b; }
.sidebar .leaf.active {
  background: #17181b;
  box-shadow: inset 0 0 0 2px var(--ecc-gold);
}
.sidebar .icon { width: 18px; min-width: 18px; text-align: center; color: var(--ecc-gold); }
.sidebar .label { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
.sidebar .expand { opacity: .5; }

/* Groups */
.sidebar .group-row { width: 100%; text-align: left; background: transparent; border: 0; color: inherit; }
.sidebar .leafList { padding-left: 20px; }

/* Collapsed: icon-only (no shifting) */
.sidebar.collapsed .nav-row {
  grid-template-columns: 18px;
  justify-items: center;
  padding-left: calc((var(--ecc-sidebar-w-collapsed) - 18px) / 2 - 2px);
  padding-right: 8px;
}
.sidebar.collapsed .label,
.sidebar.collapsed .expand,
.sidebar.collapsed .section-title { display: none; }
.sidebar.collapsed .leafList { display: none; }

5) Update (or Confirm) src/main.tsx

Make sure we’re not wrapping <App /> in BrowserRouter.
Import the override CSS after the two main CSS files.

// src/main.tsx
import "@/styles/theme.css";
import "@/styles/app.css";
import "@/styles/_ecc-override.css";

if (import.meta.env.DEV) {
  import("@/debug/crash-overlay"); // keep dev overlay if present
}

import React from "react";
import ReactDOM from "react-dom/client";
import App from "@/App";

document.documentElement.setAttribute("data-theme", "altus");

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


Do not add or reintroduce BrowserRouter anywhere.
App.tsx may keep using wouter’s <Switch/>, <Route/>, etc. — leave it alone.

6) Verification checklist

Dev server compiles without route/library errors.

Sidebar shows Dashboard, Portfolio V3, Cards, Operations with items.

Clicking links changes pages and highlights the active row.

Pin button toggles collapse; state persists after refresh.

Sidebar column scrolls independently; scrollbar is hidden but wheel/trackpad works.

No visual regressions outside the sidebar (all CSS was scoped under .sidebar).

7) If something still blocks styles

Ensure _ecc-override.css is actually loaded (import sits after theme.css and app.css in main.tsx).

If you have a global CSS reset forcing overflow rules, it must not target .sidebar or .sidebar-scroll.