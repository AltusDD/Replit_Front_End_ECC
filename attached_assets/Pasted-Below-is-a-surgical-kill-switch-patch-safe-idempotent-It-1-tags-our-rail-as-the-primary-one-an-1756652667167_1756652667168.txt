Below is a surgical kill-switch patch (safe/idempotent). It (1) tags our rail as the primary one, and (2) hard-hides any other sidebar DOM that might be rendered by legacy code or a theme plugin.

ðŸ”§ One-Shot Fix (Replit Shell â€” paste all)
set -e

# 1) Ensure our Sidebar has the primary tag data-ecc="primary"
#    - Adds the attribute on the <aside> if not present
perl -0777 -pe 's/<aside className={`sidebar ([^}]*)`}([^>]*)>/sprintf("<aside className={`sidebar %s`}$2 data-ecc=\"primary\">",$1)/e unless /data-ecc="primary"/' \
  -i src/components/Sidebar.tsx

# 2) Ensure our inline style block exists (for visited link overrides & safety)
#    - If you already have a <style> scoped block, this keeps it; otherwise it injects one once.
python - <<'PY'
import re, pathlib
p = pathlib.Path("src/components/Sidebar.tsx")
s = p.read_text()
if "/* ECC inline style overrides */" not in s:
    s = s.replace(
        "</aside>",
        """  {/* ECC inline style overrides */}
      <style>{`
        .sidebar[data-ecc="primary"] a,
        .sidebar[data-ecc="primary"] a:link,
        .sidebar[data-ecc="primary"] a:visited,
        .sidebar[data-ecc="primary"] a:active {
          color: var(--ecc-text) !important;
          text-decoration: none !important;
        }
      `}</style>
    </aside>"""
    )
    p.write_text(s)
PY

# 3) Append a final, scoped kill-switch to _ecc-override.css
#    - Hides ANY sidebar not explicitly marked as primary
#    - Keeps rule at the very end so it wins
cat >> src/styles/_ecc-override.css <<'CSS'

/* === ECC Kill-Switch: show only the canonical rail === */
.sidebar:not([data-ecc="primary"]) { display: none !important; visibility: hidden !important; }
CSS

echo "âœ… Kill-switch patched. Rebuild running..."
npm run dev --silent >/dev/null 2>&1 || true
echo "Done. Refresh the app."


What you should see after refresh

Only one sidebar remains (the restored one).

The stray thin icon strip disappears permanently.

All prior behaviors stay intact (pin/collapse saved, active highlight, independent scroll, no layout shift).

If the ghost rail still appears (quick root-cause checks)

Accidental second mount

Grep for Sidebar imports to ensure only Layout.tsx mounts it:

rg "from ['\"]@?/?.*/Sidebar['\"]|<Sidebar" -n src || true


If another file mounts <Sidebar />, comment that import/usage (donâ€™t delete; just comment).

Theme/legacy HTML

Grep for raw <aside class="sidebar"> or similar:

rg "<aside[^>]*class(Name)?=['\"]sidebar" -n src || true


If found in an old component, leave it, the kill-switch hides it. (Weâ€™re staying within guardrails.)

Import order

Confirm _ecc-override.css is imported last in src/main.tsx. (You already have thisâ€”just re-check.)

Verification (quick)

Build compiles with no router/hook warnings.

Only one rail visible.

Active highlight follows current path.

Pin/collapse persists on reload.

Left rail scrolls; scrollbar hidden; content not tucked under rail.