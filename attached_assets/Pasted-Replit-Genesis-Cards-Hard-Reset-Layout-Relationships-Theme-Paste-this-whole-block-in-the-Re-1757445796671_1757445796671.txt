Replit — Genesis Cards Hard Reset (Layout + Relationships + Theme)

Paste this whole block in the Replit Shell while in Build mode.

set -e
git checkout -b fix/genesis-cards-hard-reset || git checkout fix/genesis-cards-hard-reset

############################################
# 0) Base: design tokens + normalize app shell
############################################
mkdir -p src/styles src/components/genesis src/lib

cat > src/styles/genesis.css <<'CSS'
:root{
  --bg-0:#0b0c0f; --bg-1:#111318; --bg-2:#151821;
  --bd-0:#1b1f28; --bd-1:#232837; --bd-2:#2c3446;
  --tx-0:#f7f8fb; --tx-1:#dfe2ea; --tx-2:#aeb6c7; --tx-3:#8891a3;
  --gold:#f2c86a; --gold-600:#dbb153;
  --blue:#8fb7ff; --green:#64d2a3; --red:#f16a6a; --amber:#ffd479;
  --radius-xl:14px; --radius-lg:12px; --radius-md:10px; --radius-sm:8px;
  --shadow-0:0 0 0 1px var(--bd-1);
  --shadow-1:0 2px 24px rgba(0,0,0,.4);
}

html,body{background:var(--bg-0); color:var(--tx-1);}

.ecc-page{max-width:1200px;margin:18px auto;padding:0 20px;}
.ecc-grid{display:grid;grid-template-columns:1fr 340px;gap:18px;}
@media(max-width:1100px){.ecc-grid{grid-template-columns:1fr;}}

.card{background:var(--bg-1); border:1px solid var(--bd-1); border-radius:var(--radius-xl); box-shadow:var(--shadow-0);}
.card + .card{margin-top:14px;}
.card-head{padding:14px 16px;border-bottom:1px solid var(--bd-1);display:flex;align-items:center;justify-content:space-between;gap:10px;}
.card-body{padding:14px 16px;}
.h1{font-size:22px;line-height:1.2;font-weight:700;color:var(--tx-0);}
.meta{font-size:12px;color:var(--tx-3);}
.kpis{display:grid;grid-template-columns:repeat(4,minmax(0,1fr));gap:10px}
.kpi{background:var(--bg-2);border:1px solid var(--bd-2);border-radius:12px;padding:10px 12px}
.kpi .lbl{font-size:11px;color:var(--tx-3)}
.kpi .val{font-size:18px;font-weight:700;color:var(--tx-0)}

.btn{display:inline-flex;align-items:center;gap:8px;padding:8px 12px;border:1px solid var(--bd-2);border-radius:10px;background:#121620;color:var(--tx-1);font-size:12px}
.btn:hover{border-color:var(--bd-1)}
.btn-sm{padding:6px 10px;font-size:12px}
.btn-gold{background:linear-gradient(180deg,var(--gold),var(--gold-600));color:#1b1400;border-color:#8d6e31;font-weight:600}
.btn[disabled]{opacity:.5;cursor:not-allowed}

.badges{display:flex;gap:6px;flex-wrap:wrap}
.badge{font-size:11px;border:1px solid var(--bd-2);background:#151b27;padding:4px 8px;border-radius:999px;color:var(--tx-2)}

.list{display:flex;flex-direction:column;gap:8px}
.row{display:flex;align-items:center;justify-content:space-between;gap:10px;padding:10px 12px;border:1px solid var(--bd-2);border-radius:10px;background:#121724}
.row .title{color:var(--tx-0);font-weight:600}
.row small{color:var(--tx-3)}

.filter{padding:10px 14px;border-bottom:1px solid var(--bd-1);display:flex;gap:8px}
.input,.select{height:32px;padding:0 10px;background:#111520;color:var(--tx-1);border:1px solid var(--bd-2);border-radius:8px;font-size:12px}

.timeline{display:flex;flex-direction:column;gap:8px;padding:10px 14px}
.ev{display:flex;gap:10px;padding:10px 12px;border:1px solid var(--bd-2);border-radius:12px;background:#121724}
.ev .meta{margin-left:auto}

.skel{position:relative;overflow:hidden;border-radius:10px;background:#0f121a;height:46px}
.skel::after{content:"";position:absolute;inset:0;background:linear-gradient(90deg,transparent,rgba(255,255,255,.06),transparent);transform:translateX(-100%);animation:s 1.1s infinite}
@keyframes s{to{transform:translateX(100%)}}

.right-stack>*+*{margin-top:12px}
.hiddenDebug{display:none}

/* eliminate any legacy “DL” strings if printed */
.ecc-legacy-source-tag{display:none}
CSS

# make sure it’s imported once
if ! grep -q 'styles/genesis.css' src/main.tsx 2>/dev/null; then
  sed -i '1i import "./styles/genesis.css";' src/main.tsx
fi

############################################
# 1) tiny helpers for fetch + links
############################################
cat > src/lib/http.ts <<'TS'
export async function jget<T=any>(u:string):Promise<T|null>{
  try{const r=await fetch(u); if(!r.ok) return null; return await r.json();}catch{return null;}
}
export function fmtMoney(n:number|undefined|null){ if(n==null||isNaN(Number(n))) return "—"; return `$${Number(n).toLocaleString()}`;}
TS

cat > src/components/genesis/Badges.tsx <<'TSX'
import React from "react";
export default function Badges({doorloop,corelogic,m365,dropbox}:{doorloop?:boolean;corelogic?:boolean;m365?:boolean;dropbox?:boolean}){
  const items = [
    doorloop && {k:"DL", lbl:"DoorLoop"},
    corelogic && {k:"CL", lbl:"CoreLogic"},
    m365 && {k:"M365", lbl:"Microsoft 365"},
    dropbox && {k:"DBX", lbl:"Dropbox"},
  ].filter(Boolean) as any[];
  if(!items.length) return null;
  return <div className="badges">{items.map((b:any)=>(<span key={b.k} className="badge">{b.lbl}</span>))}</div>;
}
TSX

cat > src/components/genesis/CardLayout.tsx <<'TSX'
import React from "react";
export default function CardLayout({left, right}:{left:React.ReactNode; right?:React.ReactNode}){
  return (
    <div className="ecc-page">
      <div className="ecc-grid">
        <div>{left}</div>
        <aside className="right-stack">{right}</aside>
      </div>
    </div>
  );
}
TSX

cat > src/components/genesis/CardHero.tsx <<'TSX'
import React from "react";
import Badges from "./Badges";
export default function CardHero({title, subtitle, badges, actions}:{title:string; subtitle?:string; badges?:any; actions?:Array<{label:string;href?:string;disabled?:boolean}>}){
  return (
    <div className="card">
      <div className="card-head">
        <div>
          <div className="h1">{title}</div>
          {subtitle? <div className="meta" style={{marginTop:4}}>{subtitle}</div> : null}
          <div style={{marginTop:8}}><Badges {...badges}/></div>
        </div>
        {actions?.length ? (
          <div style={{display:"flex",gap:8,flexWrap:"wrap"}}>
            {actions.map((a,i)=> a.href
              ? <a key={i} className="btn btn-sm" href={a.disabled? undefined : a.href} aria-disabled={a.disabled}>{a.label}</a>
              : <button key={i} className="btn btn-sm" disabled>{a.label}</button>
            )}
          </div>
        ):null}
      </div>
    </div>
  );
}
TSX

cat > src/components/genesis/RightRail.tsx <<'TSX'
import React from "react";
export function Widget({title, children}:{title:string;children:React.ReactNode}){
  return (
    <div className="card">
      <div className="card-head"><div className="h2">{title}</div></div>
      <div className="card-body">{children}</div>
    </div>
  );
}
export default function RightRail({children}:{children:React.ReactNode}){ return <>{children}</>; }
TSX

cat > src/components/genesis/MiniList.tsx <<'TSX'
import React from "react";
export function MiniRow({title,meta,href}:{title:string;meta?:string;href?:string}){
  return (
    <a href={href||"#"} className="row">
      <div className="title">{title}</div>
      {meta? <small>{meta}</small> : <span/>}
    </a>
  );
}
export default function MiniList({items,empty}:{items:Array<{title:string;meta?:string;href:string}>; empty?:string}){
  if(!items?.length) return <div className="meta">{empty||"No linked records."}</div>;
  return <div className="list">{items.map((it,i)=><MiniRow key={i} {...it}/>)}</div>;
}
TSX

############################################
# 2) Relationship fetchers (calls our existing endpoints)
############################################
cat > src/lib/relations.ts <<'TS'
import { jget } from "./http";

export async function fetchProperty(id:number){
  const one = await jget<any>(`/api/entities/properties/${id}`);
  if(one && (one.item || one.data)) return one.item || one.data;
  return null;
}
export async function fetchUnitsByProperty(id:number){
  const list = await jget<any>(`/api/portfolio/units?property_id=${id}`) || {};
  return list.items || list.data || [];
}
export async function fetchLeasesByProperty(id:number){
  const list = await jget<any>(`/api/portfolio/leases?property_id=${id}`) || {};
  return list.items || list.data || [];
}
export async function fetchOwner(ownerId:number){
  const one = await jget<any>(`/api/entities/owners/${ownerId}`);
  return one?.item || one?.data || null;
}
export async function fetchUnit(id:number){
  const one = await jget<any>(`/api/entities/units/${id}`);
  return one?.item || one?.data || null;
}
export async function fetchLease(id:number){
  const one = await jget<any>(`/api/entities/leases/${id}`);
  return one?.item || one?.data || null;
}
export async function fetchTenantsByLease(leaseId:number){
  const list = await jget<any>(`/api/portfolio/tenants?lease_id=${leaseId}`) || {};
  return list.items || list.data || [];
}
export async function fetchLeasesByTenant(id:number){
  const list = await jget<any>(`/api/portfolio/leases?tenant_id=${id}`) || {};
  return list.items || list.data || [];
}
TS

############################################
# 3) Files + Activity (wrap in Genesis visuals without touching your logic)
############################################
applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/features/files/FilesTab.tsx
@@
-  return (
-    <div className="ecc-section">
+  return (
+    <div className="card">
       <div className="card-head">
         <div className="ecc-section-title">Files</div>
         <div className="flex items-center gap-2">
           <div className="ecc-tabs">
             <button className="ecc-tab" aria-selected={tab==="dl"} aria-disabled={!doorloop} onClick={()=> doorloop && setTab("dl")}>DoorLoop</button>
             <button className="ecc-tab" aria-selected={tab==="dbx"} aria-disabled={!dropbox} onClick={()=> dropbox && setTab("dbx")}>Dropbox</button>
           </div>
         </div>
       </div>
-      <div className="ecc-filter">
+      <div className="filter">
         <input className="input" placeholder="Search all files…" value={query} onChange={e=>setQuery(e.target.value)} />
       </div>
-      <div style="padding:10px 14px" className="stack-8">
+      <div style={{padding:"10px 14px"}} className="list">
*** End Patch
PATCH

applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/features/activity/ActivityFeed.tsx
@@
-  return (
-    <div className="ecc-section">
-      <div className="ecc-section-head">
+  return (
+    <div className="card">
+      <div className="card-head">
         <div className="ecc-section-title">Activity</div>
         <div style={{fontSize:12, color:"#9a9aa2"}}>{rows.length ? `${rows.length} events` : ""}</div>
       </div>
-      <div className="ecc-filter">
-        <select className="ecc-select" value={src} onChange={e=>setSrc(e.target.value)}>
+      <div className="filter">
+        <select className="select" value={src} onChange={e=>setSrc(e.target.value)}>
           <option value="all">All sources</option>
           <option value="doorloop">DoorLoop</option>
           <option value="system">System</option>
           <option value="m365">M365</option>
           <option value="corelogic">CoreLogic</option>
         </select>
-        <input className="ecc-input" type="date" value={from} onChange={e=>setFrom(e.target.value)} />
-        <input className="ecc-input" type="date" value={to} onChange={e=>setTo(e.target.value)} />
+        <input className="input" type="date" value={from} onChange={e=>setFrom(e.target.value)} />
+        <input className="input" type="date" value={to} onChange={e=>setTo(e.target.value)} />
       </div>
-      <div style="padding:10px 14px" className="stack-8">
+      <div className="timeline">
*** End Patch
PATCH

############################################
# 4) PROPERTY card — Genesis layout + relationships
############################################
applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/pages/card/property/index.tsx
@@
-import CardHero from "../../../components/ui/CardHero";
-import FilesTab from "../../../features/files/FilesTab";
-import ActivityFeed from "../../../features/activity/ActivityFeed";
-import {useIntegrations} from "../../../lib/useIntegrations";
+import CardLayout from "../../../components/genesis/CardLayout";
+import CardHero from "../../../components/genesis/CardHero";
+import FilesTab from "../../../features/files/FilesTab";
+import ActivityFeed from "../../../features/activity/ActivityFeed";
+import {useIntegrations} from "../../../lib/useIntegrations";
+import RightRail,{Widget} from "../../../components/genesis/RightRail";
+import MiniList from "../../../components/genesis/MiniList";
+import { fetchOwner, fetchUnitsByProperty, fetchLeasesByProperty } from "../../../lib/relations";
@@
-  return (
-    <div className="ecc-page">
-      <CardHero
+  const [owner, setOwner] = React.useState<any>(null);
+  const [units, setUnits] = React.useState<any[]>([]);
+  const [leases, setLeases] = React.useState<any[]>([]);
+  React.useEffect(()=>{ (async()=>{
+    if(prop?.owner_id) setOwner(await fetchOwner(Number(prop.owner_id)));
+    if(prop?.id){ setUnits(await fetchUnitsByProperty(prop.id)); setLeases(await fetchLeasesByProperty(prop.id)); }
+  })(); },[prop?.id,prop?.owner_id]);
+
+  const left = <>
+    <CardHero
         title={title || `Property #${prop.id}`}
         subtitle={`ID: ${prop.id}${(prop.city||prop.state||prop.postal_code)?` · ${[prop.city,prop.state].filter(Boolean).join(", ")} ${prop.postal_code||""}`:""}`}
         badges={{doorloop:!!integrations?.doorloop, corelogic:!!integrations?.corelogic, m365:!!integrations?.m365, dropbox:!!integrations?.dropbox}}
         actions={[
           {label:"Call", href: telHref, disabled: !telHref},
           {label:"Message (Teams)", href: (m365 && teamsHref) ? teamsHref : undefined, disabled: !(m365 && teamsHref)},
           {label:"Email", href: mailHref, disabled: !mailHref},
         ]}
       />
-      <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 fade-in">
+      <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
         <FilesTab
           doorloop={!!integrations?.doorloop}
           dropbox={!!integrations?.dropbox}
           entity="properties"
           refId={prop.id}
         />
         <ActivityFeed table="properties" refId={prop.id} />
       </div>
-    </div>
-  );
+      <div className="card">
+        <div className="card-head"><div className="h2">Linked</div></div>
+        <div className="card-body">
+          <div className="kpis" style={{marginBottom:10}}>
+            <div className="kpi"><div className="lbl">Units</div><div className="val">{units.length||0}</div></div>
+            <div className="kpi"><div className="lbl">Leases</div><div className="val">{leases.length||0}</div></div>
+            <div className="kpi"><div className="lbl">Owner</div><div className="val">{owner?.display_name ? 1 : 0}</div></div>
+            <div className="kpi"><div className="lbl">Files</div><div className="val">—</div></div>
+          </div>
+          <MiniList
+            items={[
+              owner? {title: owner.display_name || `Owner #${owner.id}`, meta:"Owner", href:`/card/owner/${owner.id}`} : null,
+              ...units.slice(0,5).map((u:any)=>({title: u.label? String(u.label) : `Unit #${u.id}`, meta: u.status||"", href:`/card/unit/${u.id}`})),
+              ...leases.slice(0,3).map((l:any)=>({title: l.start_date && l.end_date ? `${l.start_date} – ${l.end_date}` : `Lease #${l.id}`, meta:"Lease", href:`/card/lease/${l.id}`})),
+            ].filter(Boolean) as any}
+            empty="No linked records yet."
+          />
+        </div>
+      </div>
+  </>;
+
+  const right = <RightRail>
+    <Widget title="Key Dates">
+      <div className="list">
+        <div className="row"><div>Next Inspection</div><small>—</small></div>
+        <div className="row"><div>Earliest Lease End</div><small>—</small></div>
+      </div>
+    </Widget>
+    <Widget title="Pinned Files">
+      <div className="list"><div className="skel"></div><div className="skel"></div></div>
+    </Widget>
+  </RightRail>;
+
+  return <CardLayout left={left} right={right} />;
*** End Patch
PATCH

############################################
# 5) UNIT card — parent property + active lease/tenants
############################################
applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/pages/card/unit/index.tsx
@@
-import CardHero from "../../../components/ui/CardHero";
+import CardLayout from "../../../components/genesis/CardLayout";
+import CardHero from "../../../components/genesis/CardHero";
 import FilesTab from "../../../features/files/FilesTab";
 import ActivityFeed from "../../../features/activity/ActivityFeed";
-import SourceBadges from "../../../components/ui/SourceBadges";
+import RightRail,{Widget} from "../../../components/genesis/RightRail";
+import MiniList from "../../../components/genesis/MiniList";
+import { fetchProperty, fetchLease } from "../../../lib/relations";
@@
-  return (
-    <div className="ecc-page">
-      <CardHero
+  const [parent, setParent] = React.useState<any>(null);
+  const [activeLease, setActiveLease] = React.useState<any>(null);
+  React.useEffect(()=>{(async()=>{
+    if(rec?.property_id) setParent(await fetchProperty(Number(rec.property_id)));
+    if((rec as any)?.lease_id) setActiveLease(await fetchLease(Number((rec as any).lease_id)));
+  })();},[rec?.property_id,(rec as any)?.lease_id]);
+
+  const left = <>
+    <CardHero
         title={title||`Unit #${rec.id}`}
         subtitle={`ID: ${rec.id}${rec.status?` · ${rec.status}`:""}`}
         badges={{doorloop:!!integrations?.doorloop, corelogic:!!integrations?.corelogic, m365:!!integrations?.m365, dropbox:!!integrations?.dropbox}}
       />
       <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
         <FilesTab doorloop={!!integrations?.doorloop} dropbox={!!integrations?.dropbox} entity="units" refId={rec.id}/>
         <ActivityFeed table="units" refId={rec.id}/>
       </div>
+      <div className="card">
+        <div className="card-head"><div className="h2">Linked</div></div>
+        <div className="card-body">
+          <MiniList items={[
+            parent ? {title: parent.address ? parent.address : `Property #${parent.id}`, meta:"Property", href:`/card/property/${parent.id}`} : null,
+            activeLease ? {title: activeLease.start_date && activeLease.end_date ? `${activeLease.start_date} – ${activeLease.end_date}` : `Lease #${activeLease.id}`, meta:"Lease", href:`/card/lease/${activeLease.id}`} : null,
+          ].filter(Boolean) as any} empty="No links found."/>
+        </div>
+      </div>
+  </>;
+  const right = <RightRail>
+    <Widget title="Quick Stats">
+      <div className="kpis">
+        <div className="kpi"><div className="lbl">Status</div><div className="val">{rec.status||"—"}</div></div>
+        <div className="kpi"><div className="lbl">Market Rent</div><div className="val">{String((rec as any)?.market_rent||"—")}</div></div>
+        <div className="kpi"><div className="lbl">Current Rent</div><div className="val">{String((rec as any)?.current_rent||"—")}</div></div>
+        <div className="kpi"><div className="lbl">Active Lease</div><div className="val">{activeLease? "Yes":"No"}</div></div>
+      </div>
+    </Widget>
+  </RightRail>;
+  return <CardLayout left={left} right={right} />;
-    </div>
-  );
*** End Patch
PATCH

############################################
# 6) LEASE card — link property + tenants
############################################
applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/pages/card/lease/index.tsx
@@
-import CardHero from "../../../components/ui/CardHero";
+import CardLayout from "../../../components/genesis/CardLayout";
+import CardHero from "../../../components/genesis/CardHero";
 import FilesTab from "../../../features/files/FilesTab";
 import ActivityFeed from "../../../features/activity/ActivityFeed";
-import SourceBadges from "../../../components/ui/SourceBadges";
+import RightRail,{Widget} from "../../../components/genesis/RightRail";
+import MiniList from "../../../components/genesis/MiniList";
+import { fetchProperty, fetchTenantsByLease } from "../../../lib/relations";
+import { fmtMoney } from "../../../lib/http";
@@
-  return (
-    <div className="ecc-page">
-      <CardHero
+  const [prop, setProp] = React.useState<any>(null);
+  const [tenants, setTenants] = React.useState<any[]>([]);
+  React.useEffect(()=>{(async()=>{
+    if(rec?.property_id) setProp(await fetchProperty(Number(rec.property_id)));
+    if(rec?.id) setTenants(await fetchTenantsByLease(rec.id));
+  })();},[rec?.property_id,rec?.id]);
+
+  const left = <>
+    <CardHero
         title={title||`Lease #${rec.id}`}
         subtitle={`ID: ${rec.id}`}
         badges={{doorloop:!!integrations?.doorloop, corelogic:!!integrations?.corelogic, m365:!!integrations?.m365, dropbox:!!integrations?.dropbox}}
       />
       <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
         <FilesTab doorloop={!!integrations?.doorloop} dropbox={!!integrations?.dropbox} entity="leases" refId={rec.id}/>
         <ActivityFeed table="leases" refId={rec.id}/>
       </div>
+      <div className="card">
+        <div className="card-head"><div className="h2">Linked</div></div>
+        <div className="card-body">
+          <MiniList items={[
+            prop? {title: prop.address ? prop.address : `Property #${prop.id}`, meta:"Property", href:`/card/property/${prop.id}`} : null,
+            ...tenants.map((t:any)=>({title: t.display_name||`Tenant #${t.id}`, meta:t.email||"", href:`/card/tenant/${t.id}`})),
+          ].filter(Boolean) as any} empty="No linked records."/>
+        </div>
+      </div>
+  </>;
+  const right = <RightRail>
+    <Widget title="Financials">
+      <div className="kpis">
+        <div className="kpi"><div className="lbl">Rent</div><div className="val">{fmtMoney((rec as any)?.rent_amount)}</div></div>
+        <div className="kpi"><div className="lbl">Balance</div><div className="val">{fmtMoney((rec as any)?.balance_due)}</div></div>
+        <div className="kpi"><div className="lbl">Start</div><div className="val">{(rec as any)?.start_date||"—"}</div></div>
+        <div className="kpi"><div className="lbl">End</div><div className="val">{(rec as any)?.end_date||"—"}</div></div>
+      </div>
+    </Widget>
+  </RightRail>;
+  return <CardLayout left={left} right={right} />;
-    </div>
-  );
*** End Patch
PATCH

############################################
# 7) TENANT card — active leases list + actions
############################################
applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/pages/card/tenant/index.tsx
@@
-import CardHero from "../../../components/ui/CardHero";
+import CardLayout from "../../../components/genesis/CardLayout";
+import CardHero from "../../../components/genesis/CardHero";
 import FilesTab from "../../../features/files/FilesTab";
 import ActivityFeed from "../../../features/activity/ActivityFeed";
-import SourceBadges from "../../../components/ui/SourceBadges";
+import RightRail,{Widget} from "../../../components/genesis/RightRail";
+import MiniList from "../../../components/genesis/MiniList";
+import { fetchLeasesByTenant } from "../../../lib/relations";
@@
-  return (
-    <div className="ecc-page">
-      <CardHero
+  const [leases,setLeases]=React.useState<any[]>([]);
+  React.useEffect(()=>{(async()=>{ if(rec?.id) setLeases(await fetchLeasesByTenant(rec.id)); })();},[rec?.id]);
+  const left = <>
+    <CardHero
         title={title}
         subtitle={`ID: ${rec.id}`}
         badges={{doorloop:!!integrations?.doorloop, corelogic:!!integrations?.corelogic, m365:!!integrations?.m365, dropbox:!!integrations?.dropbox}}
         actions={[
           {label:"Call", href: telHref, disabled: !telHref},
           {label:"Message (Teams)", href: (m365 && teamsHref) ? teamsHref : undefined, disabled: !(m365 && teamsHref)},
           {label:"Email", href: mailHref, disabled: !mailHref},
         ]}
       />
       <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
         <FilesTab doorloop={!!integrations?.doorloop} dropbox={!!integrations?.dropbox} entity="tenants" refId={rec.id}/>
         <ActivityFeed table="tenants" refId={rec.id}/>
       </div>
+      <div className="card">
+        <div className="card-head"><div className="h2">Linked</div></div>
+        <div className="card-body">
+          <MiniList items={leases.map((l:any)=>({title: l.start_date && l.end_date ? `${l.start_date} – ${l.end_date}` : `Lease #${l.id}`, meta:"Lease", href:`/card/lease/${l.id}`}))} empty="No leases found."/>
+        </div>
+      </div>
+  </>;
+  const right = <RightRail>
+    <Widget title="Contact">
+      <div className="list">
+        <div className="row"><div>Email</div><small>{rec.email||"—"}</small></div>
+        <div className="row"><div>Phone</div><small>{rec.phone||"—"}</small></div>
+      </div>
+    </Widget>
+  </RightRail>;
+  return <CardLayout left={left} right={right} />;
-    </div>
-  );
*** End Patch
PATCH

git add -A
git commit -m "genesis(cards): proper layout, theme, and relationship panels across entity cards; right-rail widgets; unified visuals" || true
echo "✅ Genesis Cards Hard Reset applied. Restart the dev server and reload /card/property/42, /card/unit/45, /card/lease/1, /card/tenant/1."

What this fixes immediately

Layout: true Genesis two-column layout (main content + right rail). No more “card floating over a page”.

Theme: consistent tokens, cards, buttons, badges, filters, timelines.

Relationships on every card:

Property → Owner + Units + Leases mini-links.

Unit → Parent Property + Active Lease.

Lease → Property + Tenants.

Tenant → Leases.

Actionability: primary buttons are clear; disabled states read cleanly.

No stray “DL” text lines; provenance is via badges.

Structure: CardHero / CardLayout reusable across cards so we iterate quickly.

60-second validation checklist

Open /card/property/42. You should see:

Big title, city/zip subtitle, DL badge.

Files + Activity in the main column.

“Linked” section listing Owner, Units, Leases.

Right rail with Key Dates / Pinned Files.

Open /card/unit/45, /card/lease/1, /card/tenant/1.

Each shows a “Linked” section with correct cross-links.

No more tiny, cramped modules. Cards fill a centered content column with a distinct right rail.