Replit prompt ‚Äî Property: add Relationships + Files/Activity tabs (safe, local)

File: src/pages/card/property/index.tsx

1) Add imports (top of file)
import React, { useMemo, useState } from "react";


(Leave the rest of your imports as-is.)

2) Add a tiny local Tabs + relations hook (place above the default export)
/* ---------- Local, collision-proof Tabs ---------- */
function PTabs({
  tabs,
  defaultKey = "overview",
}: {
  tabs: { key: string; label: string; render: () => React.ReactNode }[];
  defaultKey?: string;
}) {
  const [active, setActive] = useState(defaultKey);
  const current = tabs.find((t) => t.key === active) ?? tabs[0];
  return (
    <div>
      <div role="tablist" aria-label="Property Tabs" className="ecc-object" style={{ padding: 8, marginBottom: 12 }}>
        {tabs.map((t) => (
          <button
            key={t.key}
            role="tab"
            aria-selected={t.key === active}
            onClick={() => setActive(t.key)}
            style={{ marginRight: 8 }}
          >
            {t.label}
          </button>
        ))}
      </div>
      <section className="ecc-object">{current?.render()}</section>
    </div>
  );
}

/* ---------- Relationships data (units + leases + tenants) ---------- */
function usePropertyRelations(p?: { id?: number | null; doorloop_id?: string | null }) {
  const enabled = !!p?.id;
  const base = useQuery({
    enabled,
    queryKey: ["prop-rel-base", p?.id, p?.doorloop_id],
    queryFn: async () => {
      const units = p?.doorloop_id
        ? await apiGet(`/api/entities/units?${qs({
            select: "id,unit_number,beds,baths,doorloop_property_id",
            doorloop_property_id: `eq.${p!.doorloop_id}`,
          })}`)
        : await apiGet(`/api/entities/units?${qs({
            select: "id,unit_number,beds,baths,property_id",
            property_id: `eq.${p!.id}`,
          })}`);

      const leases = await apiGet(`/api/entities/leases?${qs({
        select: "doorloop_id,unit_id,primary_tenant_id,status,property_id,start_date,end_date,rent_cents",
        property_id: `eq.${p!.id}`,
      })}`);

      return { units: units || [], leases: leases || [] };
    },
  });

  const tenantIds = useMemo(() => {
    if (!base.data) return [] as number[];
    const ids = (base.data.leases as any[])
      .map((l) => l?.primary_tenant_id)
      .filter((v) => typeof v === "number");
    return Array.from(new Set(ids));
  }, [base.data]);

  const tenants = useQuery({
    enabled: enabled && tenantIds.length > 0,
    queryKey: ["prop-rel-tenants", p?.id, tenantIds.join(",")],
    queryFn: async () =>
      await apiGet(`/api/entities/tenants?${qs({
        select: "id,display_name,primary_email,primary_phone",
        id: `in.(${tenantIds.join(",")})`,
      })}`),
  });

  // derive maps
  const derived = useMemo(() => {
    const u = (base.data?.units as any[]) || [];
    const l = (base.data?.leases as any[]) || [];
    const t = (tenants.data as any[]) || [];

    const leaseByUnit = new Map<number, any>();
    l.forEach((x) => {
      if ((x?.status || "").toLowerCase() === "active" && typeof x?.unit_id === "number") {
        leaseByUnit.set(x.unit_id, x);
      }
    });

    const tenantById = new Map<number, any>();
    t.forEach((x) => tenantById.set(x.id, x));

    const rows = u.map((unit) => {
      const lease = leaseByUnit.get(unit.id);
      const tenant = lease?.primary_tenant_id ? tenantById.get(lease.primary_tenant_id) : null;
      return { unit, lease, tenant };
    });

    return { rows, counts: { units: u.length, activeLeases: leaseByUnit.size, tenants: t.length } };
  }, [base.data, tenants.data]);

  return { base, tenants, derived };
}


‚úîÔ∏è This uses the existing qs helper already in your file. No duplicate declarations.

3) Replace the two sections you previously added (‚ÄúProperty Overview‚Äù and ‚ÄúRelated‚Äù) with a tab block

Find this block in your return (‚Ä¶) (left column):

<Section title="Property Overview"> ... </Section>
<Section title="Related"> ... </Section>


Delete just those two sections, and insert the tabs block below instead:

{/* === Tabs: Overview / Relationships / Files / Activity === */}
<PTabs
  defaultKey="overview"
  tabs={[
    {
      key: "overview",
      label: "Overview",
      render: () => (
        <div style={{ display: "grid", gap: 12 }}>
          <Section title="Property Overview">
            <FieldRows
              rows={[
                { label: "Address", value: addr },
                { label: "Type", value: type },
                { label: "Class", value: klass },
                { label: "Status", value: status },
                {
                  label: "IDs",
                  value: (
                    <>
                      #{p.id}
                      {p.doorloop_id ? <> ‚Ä¢ DL {p.doorloop_id}</> : null}
                    </>
                  ),
                },
              ]}
            />
          </Section>
        </div>
      ),
    },
    {
      key: "relationships",
      label: "Relationships",
      render: () => {
        const rel = usePropertyRelations(p);
        if (rel.base.isLoading) return <div style={{ padding: 12 }}><Block h={96} /></div>;

        return (
          <div style={{ display: "grid", gap: 12 }}>
            <Section title="Summary">
              <div style={{ display: "grid", gridTemplateColumns: "repeat(3, minmax(0,1fr))", gap: 12 }}>
                <div className="ecc-object" style={{ padding: 12 }}>
                  <div className="ecc-label">Units</div>
                  <div style={{ fontSize: 20, fontWeight: 700 }}>{rel.derived.counts.units}</div>
                </div>
                <div className="ecc-object" style={{ padding: 12 }}>
                  <div className="ecc-label">Active Leases</div>
                  <div style={{ fontSize: 20, fontWeight: 700 }}>{rel.derived.counts.activeLeases}</div>
                </div>
                <div className="ecc-object" style={{ padding: 12 }}>
                  <div className="ecc-label">Primary Tenants</div>
                  <div style={{ fontSize: 20, fontWeight: 700 }}>{rel.derived.counts.tenants}</div>
                </div>
              </div>
            </Section>

            <Section title="Units ‚Üí Active Lease ‚Üí Primary Tenant">
              {rel.derived.rows.length === 0 ? (
                <div style={{ opacity: 0.8 }}>No units found for this property.</div>
              ) : (
                <div style={{ display: "grid", gridTemplateColumns: "repeat(auto-fill, minmax(260px,1fr))", gap: 12 }}>
                  {rel.derived.rows.map(({ unit, lease, tenant }) => (
                    <div key={unit.id} className="ecc-object" style={{ padding: 12 }}>
                      <div style={{ fontWeight: 700, marginBottom: 6 }}>
                        Unit {unit.unit_number ?? unit.id}
                      </div>
                      <div style={{ fontSize: 12, opacity: 0.8, marginBottom: 8 }}>
                        {unit.beds ?? "‚Äî"} bd ‚Ä¢ {unit.baths ?? "‚Äî"} ba
                      </div>

                      <div style={{ display: "grid", gap: 6 }}>
                        <div><span className="ecc-label">Active Lease:</span> {lease ? `#${lease.doorloop_id ?? lease.unit_id}` : "None"}</div>
                        <div>
                          <span className="ecc-label">Primary Tenant:</span>{" "}
                          {tenant ? (
                            <Link href={`/card/tenant/${tenant.id}`}>
                              <a>{tenant.display_name ?? `Tenant #${tenant.id}`}</a>
                            </Link>
                          ) : (
                            "‚Äî"
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </Section>
          </div>
        );
      },
    },
    {
      key: "files",
      label: "Files",
      render: () => (
        <div style={{ display: "grid", gap: 12 }}>
          <Section title="DoorLoop">
            <div style={{ display: "flex", gap: 8, flexWrap: "wrap" }}>
              <button className="ecc-object" style={{ padding: "8px 12px" }} onClick={() => alert("Stub: Open DoorLoop asset files")}>
                Open in DoorLoop
              </button>
              <button className="ecc-object" style={{ padding: "8px 12px" }} onClick={() => alert("Stub: Sync DoorLoop ‚Üí ECC")}>
                Sync Files
              </button>
            </div>
          </Section>
          <Section title="Dropbox">
            <div style={{ display: "flex", gap: 8, flexWrap: "wrap" }}>
              <button className="ecc-object" style={{ padding: "8px 12px" }} onClick={() => alert("Stub: Open Dropbox folder")}>
                Open Folder
              </button>
              <button className="ecc-object" style={{ padding: "8px 12px" }} onClick={() => alert("Stub: Upload File")}>
                Upload
              </button>
            </div>
          </Section>
        </div>
      ),
    },
    {
      key: "activity",
      label: "Activity",
      render: () => (
        <div style={{ display: "grid", gap: 12 }}>
          <Section title="Timeline">
            <div style={{ opacity: 0.8 }}>No activity yet.</div>
          </Section>
        </div>
      ),
    },
  ]}
/>


üîí The tabs/relations are local to this file‚Äîno imports from a global Tabs system, so there‚Äôs zero risk of naming collisions and no route changes.

4) Quick smoke

Hard refresh.

Open /card/property/<real id>.
You should see a tab row above a boxed panel:

Overview: formatted overview details

Relationships: counts + grid of ‚ÄúUnit ‚Üí Active Lease ‚Üí Primary Tenant‚Äù mini-cards with links

Files: DoorLoop/Dropbox stubs (safe alerts)

Activity: timeline placeholder

If anything still looks off, tell me the exact file+line Replit points to and I‚Äôll give you a micro-patch for that spot only. Then we‚Äôll continue filling out Financials and the right-rail widgets.