You’re hitting Tailwind leftovers from the EstateCommand shell. Let’s purge Tailwind completely and replace the “vet” script with the ECC tripwire so predev stops insisting on Tailwind. Paste this single block in the Replit Shell:

# --- kill any running dev server
pkill -f vite >/dev/null 2>&1 || true

# --- 1) Remove Tailwind everywhere ------------------------------------------
npm rm -D tailwindcss @tailwindcss/postcss @tailwindcss/forms @tailwindcss/typography @tailwindcss/aspect-ratio 2>/dev/null || true
npm rm tailwindcss @tailwindcss/postcss 2>/dev/null || true
rm -f tailwind.config.* postcss.config.js 2>/dev/null || true
# strip accidental @tailwind directives if any slipped in
grep -RIl --include='*.css' '@tailwind' src 2>/dev/null | xargs -r sed -i -E 's/@tailwind\s+(base|components|utilities);\s*//g'

# minimal PostCSS (no Tailwind)
cat > postcss.config.cjs <<'CJS'
module.exports = { plugins: { autoprefixer: {} } };
CJS

# --- 2) ECC tripwire (replaces EstateCommand's validator) --------------------
mkdir -p scripts
cat > scripts/vet.cjs <<'JS'
const fs = require('fs');
const path = require('path');

const bad = [];
(function walk(dir) {
  for (const n of fs.readdirSync(dir)) {
    if (n === 'node_modules' || n.startsWith('.')) continue;
    const p = path.join(dir, n);
    const s = fs.statSync(p);
    if (s.isDirectory()) walk(p);
    else if (/\.(tsx?|jsx?)$/.test(n)) {
      const src = fs.readFileSync(p, 'utf8');
      if (/fetch\(['"`]\/api/.test(src) || /new URL\(['"`]\/api/.test(src)) {
        bad.push([p, 'Hardcoded /api (use @lib/ecc-api buildUrl/fetchJSON)']);
      }
      if (/from ['"]\/src\/lib\/ecc-api['"]/.test(src) || /from ['"]@\/lib\/ecc-api\.ts['"]/.test(src)) {
        bad.push([p, 'Wrong client import (use @lib/ecc-api)']);
      }
    }
  }
})('src');

if (bad.length) {
  console.error('❌ VET FAILED:\n' + bad.map(([p, m]) => ` - ${p}: ${m}`).join('\n'));
  process.exit(1);
} else {
  console.log('✅ Vet passed.');
}
JS

# ensure package.json points to the CJS tripwire
npm pkg set scripts.predev="node scripts/vet.cjs"
npm pkg set scripts.prebuild="node scripts/vet.cjs"

# --- 3) Vite config (no Tailwind, keep aliases & proxy) ----------------------
cat > vite.config.mjs <<'JS'
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

const allowed = (process.env.VITE_ALLOWED_HOST || '')
  .split(',')
  .map(s => s.trim())
  .filter(Boolean);

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      '@lib': path.resolve(__dirname, './src/lib'),
    },
  },
  // no Tailwind wired through PostCSS
  css: { postcss: { plugins: [] } },
  server: {
    host: '0.0.0.0',
    port: Number(process.env.PORT) || 5173,
    strictPort: false,
    allowedHosts: allowed.length ? allowed : true,
    proxy: {
      '/api': {
        target: 'https://empirecommandcenter-altus-staging.azurewebsites.net',
        changeOrigin: true,
        secure: true,
      },
    },
  },
});
JS

# --- 4) Clean vite caches & reinstall ---------------------------------------
rm -rf node_modules/.vite .vite 2>/dev/null || true
npm install

# --- 5) Start the frontend (use your Run button if you prefer)
npm run dev