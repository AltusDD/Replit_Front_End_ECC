Coding partner

Show thinking
Excellent. The Replit assistant has successfully executed Phase 1. The screenshot confirms that the foundational layout is in place, creating the perfect canvas for us to build upon.

Now, we will proceed to Phase 2: Build the Actionable "Hero" & KPI Row.

This is a critical step where we replace the top placeholder panel with a data-driven, scannable summary of the portfolio's health. We will create a new KpiTicker component that displays exactly four KPI cards, complete with skeleton loading states and data sourced directly from the useDashboardData hook, as mandated by the project brief.

Here is the next "Task Card" for your Replit assistant.

Markdown

PLAN
Operating Mode: UI-Nav Engineer, Consistency Enforcer
Files to Touch: 
- src/features/dashboard/pages/DashboardPage.tsx
- src/features/dashboard/hooks/useDashboardData.ts
- src/features/dashboard/components/KpiTicker.tsx (new file)
- src/features/dashboard/components/KpiCard.tsx (new file)
- src/styles/Dashboard.css
Guardrails: 
- All data must be sourced from the `useDashboardData` hook. No mock data in components.
- All numbers, percentages, and currencies must be formatted using helpers from `src/utils/format.ts` (e.g., `fmtPct`, `fmtMoney`).
- Implement skeleton loading states; do not show "0" or empty spaces while data is loading.
- All new CSS must be scoped and use design tokens from `src/styles/tokens.css`.

CHANGESET
- **File: `src/features/dashboard/hooks/useDashboardData.ts`**
  - Expose a `kpiData` object from the hook's return value. This object should contain the calculated values for the four primary KPIs. For now, you can use static values as placeholders within the hook, but the component must consume them from here.
  - Structure: `{ occupancy: 94.2, rentReady: { ready: 8, vacant: 15 }, collections: 98.7, criticalWOs: 2 }`
  - Also, expose a `isLoading` boolean from the hook that is `true` by default and becomes `false` after a delay (simulating a network request).

- **File: `src/features/dashboard/components/KpiCard.tsx` (New File)**
  - Create a reusable component for a single KPI metric.
  - It should accept props like `title`, `value`, `metric`, `isLoading`, and `icon`.
  - If `isLoading` is true, the component should render a skeleton placeholder with a shimmer animation.
  - If `isLoading` is false, it should display the title, the formatted main `value`, and the secondary `metric` text below it.
  - The component's root element should have a `className="kpi-card"`.

- **File: `src/features/dashboard/components/KpiTicker.tsx` (New File)**
  - Create the main component that will contain the four KPI cards.
  - This component must call the `useDashboardData` hook to get `kpiData` and `isLoading`.
  - It should render four instances of the `<KpiCard />` component.
  - Pass the `isLoading` state to each `KpiCard`.
  - When data is available, pass the corresponding values from `kpiData` to each card, ensuring they are correctly formatted (e.g., `fmtPct(kpiData.occupancy)`). The four cards should be:
    1. Occupancy %
    2. Rent Ready / Vacant
    3. Collections MTD %
    4. Critical WOs

- **File: `src/features/dashboard/pages/DashboardPage.tsx`**
  - Import the new `KpiTicker` component.
  - Replace the placeholder `<div className="kpi-ticker-container panel">...</div>` with `<div className="kpi-ticker-container"><KpiTicker /></div>`. Notice we are removing the `panel` class from the container itself.

- **File: `src/styles/Dashboard.css`**
  - Add styles for the `.kpi-ticker-container`, which should be a `display: grid` element with four equal columns.
  - Add styles for the `.kpi-card` component. It should use `var(--panel-bg)` and `var(--line)` and have internal padding and layout for the title, value, and metric text.
  - Add styles for the skeleton loading state, including a shimmer animation.

VERIFICATION CHECKLIST
- The `KpiTicker.tsx` and `KpiCard.tsx` components have been created.
- The `useDashboardData` hook now exposes a `kpiData` object and an `isLoading` state.
- When the page first loads, the dashboard correctly shows four skeleton cards in the top ticker area.
- After the simulated loading delay, the `KpiTicker` displays four distinct KPI cards with formatted values.
- All numbers are correctly formatted (e.g., "94.2%", "8 of 15", "98.7%", "2").
- The styles for the KPI cards use the official design tokens and match the "Genesis Grade" aesthetic.
- The rest of the dashboard layout (Map, Feed, etc.) remains unchanged.
Let me know when this is complete, and we'll move on to populating the map and action feed in Phase 3.