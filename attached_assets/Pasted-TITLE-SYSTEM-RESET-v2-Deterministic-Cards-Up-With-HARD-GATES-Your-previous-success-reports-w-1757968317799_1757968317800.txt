TITLE: SYSTEM RESET v2 — Deterministic “Cards Up” With HARD GATES

Your previous “success” reports were incorrect. The app still fails. You will now execute this plan exactly and stop after each step, posting the requested proof (commands + raw output). If any check fails, FIX IT before proceeding. Do not skip, summarize, or paraphrase outputs.

STEP 1 — Boot Hardening (no DOM hacks, no ghost pages)
Do this:

vite.config.ts
Ensure:

export default defineConfig({
  server: {
    allowedHosts: true,
    hmr: { overlay: true },
  },
})


src/components/EccErrorBoundary.tsx
Pure React class component only. No direct DOM manipulation. Render:

export default class EccErrorBoundary extends React.Component<{children: React.ReactNode},{error?: Error}> {
  state = { error: undefined as Error | undefined };
  static getDerivedStateFromError(error: Error){ return { error }; }
  render(){
    if (this.state.error) return <div style={{padding:16}}><h2>Contract violation</h2><pre>{this.state.error.message}</pre></div>;
    return this.props.children;
  }
}


src/main.tsx
Must use default import:

import EccErrorBoundary from "./components/EccErrorBoundary";


Use React.Fragment (not StrictMode) in dev to avoid HMR abort noise. StrictMode is fine for prod builds.

index.html
Single script only:

<script type="module" src="/src/main.tsx"></script>


Remove any overlay / “removeChild” scripts.

Move dev/demo pages (e.g. src/dev/AtomsGallery.tsx) to src/dev/_disabled/ and remove all imports/references to them.

PROVE it (post EXACT raw output):
# restart dev
npm run dev


Paste the Vite banner lines showing the URLs.

Paste the API line: [Dev API] Listening on :8787

Confirm in text: “App shell renders, no red overlay, no white screen.”

Stop here. If anything is off, FIX before Step 2.

STEP 2 — Fix API Contracts (eliminate “kpis.units undefined”)
Do this (in server/routes/rpc.ts):

Add helpers at top (if missing):

const pick = (o:any, keys:string[]) => Object.fromEntries(keys.map(k=>[k,o?.[k]]).filter(([,v])=>v!==undefined));
const toCents = (n:any) => (typeof n==='number' ? Math.round(n*100) : (n==null ? null : Number(n)));
const ok = (res:any, data:any)=>res.json(data);
const fail = (res:any, status:number, message:string)=>res.status(status).json({error:message});

// robust multi-key fetch (id → doorloop_id fallback)
async function fetchOneMulti(sb:any, table:string, id:string|number, altCols:string[]){
  let q = sb.from(table).select("*").eq("id", id).limit(1);
  let { data, error } = await q;
  if(error) throw error;
  if(Array.isArray(data) && data.length) return data[0];
  for(const col of altCols){
    const r = await sb.from(table).select("*").eq(col, id).limit(1);
    if(r.error) throw r.error;
    if(Array.isArray(r.data) && r.data.length) return r.data[0];
  }
  return null;
}

Replace /api/rpc/get_property_card handler with a guaranteed-contract version:

Rules:

kpis.units must be a number (0 if none).

kpis.activeLeases number (0 if none).

kpis.occupancyPct number (0..100).

kpis.avgRentCents number or null (never undefined).

No silent masking. If the root property is missing, return 404 JSON.

Implementation sketch:

rpc.get('/get_property_card', async (req, res) => {
  try {
    const id = String(req.query.id ?? "").trim();
    const property = await fetchOneMulti(supabase, "properties", id, ["doorloop_id"]);
    if(!property) return fail(res, 404, "property not found");

    const { data: unitsArr = [] } = await supabase.from("units").select("*").eq("property_id", property.id);
    const units = Array.isArray(unitsArr) ? unitsArr : [];

    const { data: leasesArr = [] } = await supabase.from("leases").select("*").eq("property_id", property.id);
    const leases = Array.isArray(leasesArr) ? leasesArr : [];

    const totalUnits = units.length;
    const activeLeases = leases.filter(l => String(l.status).toUpperCase()==="ACTIVE").length;
    const occupancyPct = totalUnits>0 ? Math.round((activeLeases/totalUnits)*100) : 0;

    const rents = leases
      .filter(l => l && (l.rent_cents!=null || l.rent!=null))
      .map(l => (typeof l.rent_cents==='number' ? l.rent_cents : toCents(l.rent)))
      .filter(v => typeof v==='number');

    const avgRentCents = rents.length ? Math.round(rents.reduce((a,b)=>a+b,0)/rents.length) : null;

    return ok(res, {
      property: pick(property, ["id","name","type","address","doorloop_id"]),
      kpis: {
        units: totalUnits,
        activeLeases,
        occupancyPct,
        avgRentCents
      }
    });
  } catch (e:any) {
    return fail(res, 500, e?.message || "server error");
  }
});

Apply the same robustness to the other RPCs:

/get_unit_card → return { unit, property, lease: lease || null }

/get_lease_card → return { lease, unit: unit||null, tenant: tenant||null, property: property||null }

/get_owner_card → { owner, properties: [] }

/get_tenant_card → { tenant, leases: [], activeLease: leaseOrNull }
All optional relations must be null/[], never undefined. Do not swallow Supabase errors; return 500 JSON with message.

PROVE it (post EXACT raw output):

Run in shell and paste outputs:

curl -s "http://localhost:8787/api/health" && echo
echo "== property =="
curl -s "http://localhost:8787/api/rpc/get_property_card?id=42" | jq .
echo "== unit =="
curl -s "http://localhost:8787/api/rpc/get_unit_card?id=45" | jq .
echo "== lease =="
curl -s "http://localhost:8787/api/rpc/get_lease_card?id=1" | jq .
echo "== owner =="
curl -s "http://localhost:8787/api/rpc/get_owner_card?id=1" | jq .
echo "== tenant =="
curl -s "http://localhost:8787/api/rpc/get_tenant_card?id=1" | jq .


Then run (must print OK):

curl -s "http://localhost:8787/api/rpc/get_property_card?id=42" \
| jq -e '(.kpis.units|type=="number") and (.kpis.activeLeases|type=="number") and (.kpis.occupancyPct|type=="number") and (has("avgRentCents"))' \
> /dev/null && echo "PROPERTY_KPIS: OK" || echo "PROPERTY_KPIS: FAIL"


Stop here. If PROPERTY_KPIS: OK is not printed, FIX the handler and re-run.

STEP 3 — Frontend CardKit alignment (remove legacy breakage)
Do this:

Replace all legacy <FieldRows> with CardKit <FieldGroup>:

Component: @/components/cardkit/FieldGroup

Ensure all 5 Overview tabs import paneling from @/components/cardkit/* (e.g., CardPanel, FieldGroup, KPI, RightRailPanel).

No imports from src/features/ui/FieldGroup or any old “Section” component.

PROVE it (post EXACT raw output):
# show any remaining legacy usage (should output NOTHING)
grep -R --line-number -E "<FieldRows|from .+FieldRows|components/Section" src || echo "NO_LEGACY: OK"


You must show NO_LEGACY: OK.

FINAL UI SMOKE

Visit:

/portfolio/properties

/card/property/42

/card/unit/45

/card/lease/1

/card/owner/1

/card/tenant/1

Report:

“All six routes render. No red overlay. No Zod contract violations.”

If any route fails, paste the exact error text shown by EccErrorBoundary and the exact RPC JSON from Step 2 for that ID.

NON-NEGOTIABLE RULES

Stop after each step and post proofs.

If a proof fails, FIX and re-prove before moving on.

Do not claim success without the exact outputs requested.

Do not reintroduce DOM overlays or dev/demo pages into the app entry.

Execute now.