“Make ECC Boot” — Replit Fix Script (copy-paste this to Replit)

Goal: no more white screen. Index is served by Vite, modules execute, React mounts, and any render error is visibly surfaced (never silently).

0) Sanity: ports and primary

.replit must mark 5173 as primary:

run = "npm run dev"

[env]
NODE_ENV = "dev"

[[ports]]
port = 5173
primary = true

1) Ensure Express does not serve the SPA in dev

Edit server/index.ts — dev = API only; prod serves dist:

// …existing imports…
import path from "node:path";
import express from "express";

const app = express();
const isDev = process.env.NODE_ENV !== "production";

// API routes go here (do NOT add SPA catch-all above them)

// Only in production serve built SPA; in dev Vite owns the page
if (!isDev) {
  app.use(express.static(path.resolve("dist")));
  app.get("*", (_req, res) => {
    res.sendFile(path.resolve("dist/index.html"));
  });
}

2) Vite server config = Replit-friendly + API proxy

Edit vite.config.ts:

import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "node:path";

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "src"),
    },
  },
  server: {
    host: true,        // bind 0.0.0.0 (Replit)
    port: 5173,
    strictPort: true,
    proxy: { "/api": "http://localhost:8787" },
    hmr: { clientPort: 443 },
  },
  // remove any deprecated optimizeDeps.disabled flags in your config
});

3) Make index.html explicitly Vite-driven + add visible boot catcher

Edit index.html (root):

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Empire Command Center</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <!-- Vite client for HMR -->
    <script type="module" src="/@vite/client"></script>
    <style>
      body { margin:0; background:#0b0b0d; }
      #root { min-height:100vh; }
    </style>
  </head>
  <body>
    <div id="root"></div>

    <!-- Boot sentinel -->
    <script>
      (function () {
        const r = document.getElementById('root');
        if (r) r.innerHTML = '<div style="padding:16px;font:14px system-ui;color:#b6b6b6">Booting ECC…</div>';
      })();
    </script>

    <!-- Global pre-mount error sink -->
    <script>
      (function () {
        function show(msg) {
          const r = document.getElementById('root');
          if (!r) return;
          r.innerHTML =
            '<div style="padding:24px;margin:24px;border-radius:16px;border:1px solid #7f1d1d;background:#450a0a;color:#fecaca;font:14px system-ui">' +
            '<div style="font-weight:600;font-size:16px;margin-bottom:8px">ECC boot error</div>' +
            '<div style="white-space:pre-wrap;color:#fecaca">' + msg + '</div>' +
            '<div style="margin-top:12px;color:#ddd"><a href="/portfolio/properties" style="color:#93c5fd">Go to Properties</a></div>' +
            '</div>';
        }
        window.addEventListener('error', e => show(String(e.error?.message || e.message || e)));
        window.addEventListener('unhandledrejection', e => show('Unhandled promise rejection: ' + String(e.reason)));
      })();
    </script>

    <!-- TEMP: load probe first to prove module exec -->
    <script type="module" src="/src/_probe.tsx"></script>
  </body>
</html>


If test.html exists at repo root, move it to dev/test.html so Vite doesn’t treat it as an entry.

4) Add a probe to prove React mounts

Create src/_probe.tsx:

import React from "react";
import ReactDOM from "react-dom/client";

console.log("[ECC] probe main loaded");

const root = document.getElementById("root")!;
ReactDOM.createRoot(root).render(
  <div style={{padding:24, color:"#d1fae5", fontFamily:"system-ui"}}>
    <div style={{fontWeight:600, fontSize:18, marginBottom:8}}>ECC Probe OK</div>
    <div>Vite modules are executing and React mounted successfully.</div>
    <div style={{marginTop:12}}><a href="/portfolio/properties" style={{color:"#93c5fd"}}>Go to Properties</a></div>
  </div>
);


Click Run.

If you see “ECC Probe OK”, modules are executing (the white screen problem is fixed).

If you still only see “Booting ECC…”, modules aren’t loading. Run these two checks in the Replit shell:

# Must be JavaScript content (200 + text/javascript)
curl -I http://localhost:5173/src/_probe.tsx

# Must be 404 (API should NOT serve modules)
curl -I http://localhost:8787/src/_probe.tsx


If 5173 returns HTML (e.g., <!doctype html>), Express is still intercepting; re-check Step 1.

If 8787 returns 200 for a TSX module, remove any dev-time static serving from Express.

5) Restore the real app once probe passes

Change the last script in index.html from:

<script type="module" src="/src/_probe.tsx"></script>


to:

<script type="module" src="/src/main.tsx"></script>


Ensure the error boundary can’t break imports:

src/components/EccErrorBoundary.tsx (dual export):

import React from "react";
type State = { hasError: boolean; msg?: string };

class EccErrorBoundary extends React.Component<React.PropsWithChildren, State> {
  state: State = { hasError: false };
  static getDerivedStateFromError(err: any) { return { hasError: true, msg: String(err?.message || err) }; }
  componentDidCatch(error: any, info: any) { console.error("[EccErrorBoundary]", error, info); (window as any).__ECC_LAST_ERROR__ = { error, info }; }
  render() { return this.state.hasError ? (
    <div className="p-8">
      <div className="rounded-2xl border border-red-600/40 bg-red-950/20 p-6">
        <h1 className="text-xl font-semibold text-red-300 mb-2">Something went wrong</h1>
        <p className="text-red-200/80 text-sm mb-4">{this.state.msg || "Unexpected render error."}</p>
        <div className="text-sm text-neutral-400"><a className="underline" href="/portfolio/properties">Go to Properties</a></div>
      </div>
    </div>
  ) : this.props.children; }
}
export default EccErrorBoundary;
export { EccErrorBoundary };


src/main.tsx (simple mount + log to surface errors ASAP):

import React from "react";
import ReactDOM from "react-dom/client";
import EccErrorBoundary from "./components/EccErrorBoundary";
import App from "./App";

console.log("[ECC] main.tsx loaded");

const root = document.getElementById("root")!;
ReactDOM.createRoot(root).render(
  <React.StrictMode>
    <EccErrorBoundary>
      <App />
    </EccErrorBoundary>
  </React.StrictMode>
);

6) Route to a real page from “/”

Use Wouter redirect to /portfolio/properties so we never land on a blank:

// src/App.tsx
import { Route, Switch, useLocation } from "wouter";
import { useEffect } from "react";
// …imports…

function HomeRedirect() {
  const [, setLocation] = useLocation();
  useEffect(() => { setLocation("/portfolio/properties"); }, [setLocation]);
  return null;
}

export default function App() {
  return (
    <Switch>
      <Route path="/" component={HomeRedirect} />
      {/* …your existing routes… */}
    </Switch>
  );
}

7) Acceptance checks (run these now)

Probe phase: “ECC Probe OK” is visible → ✅

After restore: App UI renders, Network tab shows /@vite/client and /src/main.tsx as JS (not HTML).

Shell checks:

curl -I http://localhost:5173/src/main.tsx   # 200 + text/javascript
curl -s http://localhost:8787/api/health     # should return your API health JSON

Why this fixes the white screen

The white screen persisted because index was served, but modules didn’t execute (the “Booting ECC…” sentinel stayed).

This plan forces Vite to own the page in dev, prevents Express from hijacking module URLs, and proves React can mount via a probe.

Then we restore main.tsx under a resilient error boundary so if anything inside React fails, you see a visible error card—not a blank page.

Run this now; you’ll either see the probe success immediately or a concrete 5173/8787 mismatch you can correct with Steps 1–2.