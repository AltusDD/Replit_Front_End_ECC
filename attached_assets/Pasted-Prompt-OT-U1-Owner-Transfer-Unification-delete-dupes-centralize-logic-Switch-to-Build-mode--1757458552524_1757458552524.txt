Prompt OT-U1 — Owner Transfer Unification (delete dupes, centralize logic)
Switch to **Build** mode.

GOAL
Unify the Owner Transfer feature. Delete the orphaned stepper, move all data I/O into the `useOwnerTransfer` hook, and standardize styling to Tailwind.

FILES TO TOUCH
- src/features/owners/pages/OwnerTransferPage.tsx
- src/features/owners/pages/OwnerTransferDetailPage.tsx
- src/features/ownerTransfer/hooks/useOwnerTransfer.ts
- src/features/ownerTransfer/components/TransferDryRun.tsx
- src/features/ownerTransfer/components/TransferPreflightCheck.tsx
- DELETE: src/features/ownerTransfer/components/TransferStepper.tsx

GUARDRAILS
- No direct `fetch` in pages. All owner-transfer API calls go through the hook.
- Use Tailwind classes only (no `.ecc-*` legacy classes).
- Preserve existing routes and server endpoints.

TASKS
1) Delete duplicate:
   - Remove `src/features/ownerTransfer/components/TransferStepper.tsx` and all imports.

2) Expand the hook `useOwnerTransfer.ts` to expose a single surface:
   export function useOwnerTransfer() {
     return {
       // reads
       getTransfer(id),
       listByOwner(ownerId, {status?}),
       // writes
       initiateTransfer({ old_owner_id, new_owner_id, property_ids, effective_date, notes }),
       approveAccounting(transfer_id),
       authorizeTransfer(transfer_id),   // admin token handled by server
       executeTransfer(transfer_id),     // admin token handled by server
       // utils
       computeDryRun(transfer_id),       // call /api/owner-transfer/:id then derive deltas client-side
       preflightCheck({ old_owner_id, new_owner_id, property_ids, effective_date }),
       // state
       isLoading, error, last
     }
   }

   Internally route to:
   - POST /api/owner-transfer/initiate
   - POST /api/owner-transfer/approve-accounting
   - POST /api/owner-transfer/authorize
   - POST /api/owner-transfer/execute
   - GET  /api/owner-transfer/:id
   - (Optional) GET /api/owner-transfer?ownerId=... for list (if missing, keep client filter as fallback)

3) Refactor pages:
   - In `OwnerTransferPage.tsx` replace any `fetch(...)` with calls to the hook.
   - In `OwnerTransferDetailPage.tsx` use the hook to load the transfer by id on mount and keep it in local state.

4) Styling pass:
   - Replace any residual legacy classnames with Tailwind:
     Container: `max-w-6xl mx-auto px-6 py-6`
     Panels: `bg-neutral-900/60 border border-neutral-800 rounded-2xl`
     Buttons: `btn btn-primary` or explicit `inline-flex items-center gap-2 px-3 py-2 rounded-xl bg-amber-500/10 text-amber-300 hover:bg-amber-500/20`

VERIFICATION
- `TransferStepper.tsx` no longer exists.
- Pages compile without direct `fetch` references.
- Navigating to `/owners/transfer/detail?id=<id>` shows content powered by the hook (check Network panel: only the hook’s endpoints fire).

Prompt OT-U2 — Wire Preflight + Dry-Run and surface results
GOAL
Make transfer detail show **Preflight Checks** and **Dry-Run** results before admin actions.

FILES
- src/features/owners/pages/OwnerTransferDetailPage.tsx
- src/features/ownerTransfer/components/TransferPreflightCheck.tsx
- src/features/ownerTransfer/components/TransferDryRun.tsx

TASKS
1) `TransferPreflightCheck.tsx`
   - Props: { issues: Array<{level:"error"|"warn"|"info", code:string, message:string, hint?:string}> }
   - Renders a list of chips with left-border color by level; show count summary.
   - Show green “All checks passed” state when no issues.

2) `TransferDryRun.tsx`
   - Props: { deltas: Array<{ entity:"property"|"unit"|"lease"|"tenant"; id:number; field:string; from:any; to:any }> }
   - Group by entity; render compact table. Empty state when no changes.

3) In `OwnerTransferDetailPage.tsx`
   - After loading transfer via the hook, call:
       const { preflight, dryRun } = await Promise.all([
         preflightCheck({ old_owner_id, new_owner_id, property_ids, effective_date }),
         computeDryRun(transfer_id)
       ])
   - Render:
       <Section title="Preflight Checks"><TransferPreflightCheck issues={preflight.issues}/></Section>
       <Section title="Dry Run"><TransferDryRun deltas={dryRun.deltas}/></Section>

4) UX
   - Add a small info banner when `effective_date` is in the future: “Authorized transfers execute on or after <date>.”

VERIFICATION
- Detail page shows checks + dry-run with consistent dark theme.
- If server has no special endpoints, the hook computes preflight locally (e.g., missing `new_owner_id`, empty properties array, future date OK).

Prompt OT-U3 — Admin buttons + state machine + RBAC gating
GOAL
Add **Approve Accounting**, **Authorize**, **Execute Now** buttons with role gating and status logic.

FILES
- src/features/owners/pages/OwnerTransferDetailPage.tsx
- src/features/ownerTransfer/hooks/useOwnerTransfer.ts (expose helpers)

TASKS
1) Define statuses (align with server):
   enum Status {
     PENDING_ACCOUNTING,
     READY_AUTHORIZATION,
     READY_EXECUTION,
     COMPLETE,
     CANCELED
   }

2) Button visibility logic:
   - Approve Accounting: visible when status === PENDING_ACCOUNTING
   - Authorize (admin): visible when status === READY_AUTHORIZATION
   - Execute Now (admin): visible when status === READY_EXECUTION

   Disable if:
   - Missing admin for admin-only buttons (use `useAuth()` or existing role context).
   - Effective date is future AND button is Execute → tooltip “Executes on or after <date>”.

3) Handlers (use hook):
   - onApprove → approveAccounting(id) → toast → refetch transfer
   - onAuthorize → authorizeTransfer(id) → toast → refetch
   - onExecute  → executeTransfer(id) → toast → refetch

4) UI
   - Right-aligned action bar:
     `flex gap-2 justify-end`
     Primary styles: amber for authorize/execute; slate for approve.

5) Audit toast
   - On success show “Action recorded. View audit in Activity tab.”

VERIFICATION
- Status drives button availability.
- Admin-only buttons show tooltip when user lacks role.
- Actions update the status and disable previous steps.

Prompt OT-U4 — Fix “double scrollbar” & “page on top of page” (layout hygiene)
GOAL
Eliminate nested scrolling and ensure a single, predictable scroll container.

FILES
- src/features/owners/pages/OwnerTransferPage.tsx
- src/features/owners/pages/OwnerTransferDetailPage.tsx
- src/styles/genesis.css (if needed)

TASKS
1) Page container
   - Wrap each page root in:
     <main className="min-h-[calc(100vh-64px)] overflow-y-auto px-6 py-6">
       <div className="max-w-6xl mx-auto space-y-6"> ... </div>
     </main>

2) Remove any `overflow-y-auto` from nested sections/panels unless they are virtualized lists.

3) Ensure the outer layout (shell) doesn’t also force overflow on content area. If a parent has `overflow-y-auto`, keep it; all children should be `overflow-visible`.

4) CSS safety net
   - In genesis.css add:
     .genesis-page { min-height: 100%; }
     .genesis-panel { overflow: visible; }

VERIFICATION
- Only the main content area scrolls. No inner scrollbars.
- Inspector overlay shows no full-screen fixed overlay covering content.

Prompt OT-U5 — Emit internal webhooks on transfer lifecycle (optional but recommended)
GOAL
Publish bus events when a transfer changes state for downstream automations.

ENV
- INTERNAL_WEBHOOK_URL=https://<your-bus-endpoint>/ecc/events
- INTERNAL_WEBHOOK_SECRET=<random-long-secret>
(leave unset in local if you don’t want to emit)

SERVER CHANGES
1) Create server/lib/internalBus.ts
   export async function emitBus(evt:{type:string; transfer_id:number; payload?:any}) {
     const url = process.env.INTERNAL_WEBHOOK_URL
     const secret = process.env.INTERNAL_WEBHOOK_SECRET
     if (!url || !secret) return
     await fetch(url, {
       method:"POST",
       headers:{ "Content-Type":"application/json", "X-Internal-Secret":secret },
       body: JSON.stringify({ app:"ecc", ts:new Date().toISOString(), ...evt })
     })
   }

2) In ownerTransfer service (approve/authorize/execute) call emitBus:
   - type: "owner_transfer.approved" | "owner_transfer.authorized" | "owner_transfer.executed"
   - include { old_owner_id, new_owner_id, property_ids, effective_date, status }

VERIFICATION
- With envs set, actions POST to bus; with envs unset, server is silent (no errors).

Prompt OT-U6 — Bulk Admin from list view (fast pass)
GOAL
Allow bulk approve/authorize/execute from the transfers list page with role gating.

FILES
- src/features/owners/pages/OwnerTransfersListPage.tsx (create if missing)

TASKS
1) Data: load list by optional filters (ownerId, status).
2) Table with checkboxes, sticky header.
3) Bulk actions bar appears when ≥1 selected:
   [Approve Accounting] [Authorize] [Execute Now]
   - Buttons disabled if selection contains ineligible statuses (show count tooltip).
4) Call hook methods sequentially; show progress toast.

VERIFICATION
- Selecting multiple rows enables bulk actions.
- Role gating respected for admin-only actions.

What I need back from you after OT-U3

Screenshot of Owner Transfer Detail with:

Preflight + Dry-Run sections

Action bar showing the correct button(s) for current status

A copy of any error from /api/owner-transfer/:id or the hook, if it appears.

If you want, we can then trigger Prompts A–F (Linked, Files, Activity, KPIs, Data tabs, etc.) right after this consolidation; they’ll slot in cleanly once Owner Transfer is unified and the layout hygiene is solved.