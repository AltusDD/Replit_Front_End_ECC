Coding partner

Show thinking
Excellent. I have reviewed the detailed "Gemini Onboarding Brief." It's incredibly thorough and provides the exact specifications needed to achieve the "Genesis Grade" standard. I will use this document as the authoritative source for all implementation details moving forward.

Let's begin Phase 1: Establish the 'Genesis' Layout & Style Foundation.

As per your instructions, I have prepared the first prompt for the Replit assistant. It is formatted as a "Task Card" according to the 

replit_assistant_playbook.md  to ensure the request is structured, consistent, and verifiable.

Please copy the entire block below and provide it to the Replit assistant.

Markdown

PLAN
Operating Mode: UI-Nav Engineer, Consistency Enforcer
Files to Touch: 
- src/features/dashboard/pages/DashboardPage.tsx
- src/styles/Dashboard.css
Guardrails: 
- wouter only
- Do not alter the left nav, shell layout, or route structure
- All new styles must be scoped to `.dashboard-page` in `Dashboard.css`
- Use design tokens from `src/styles/tokens.css` for all colors and spacing; no hardcoded hex/rgb values
- No data fetching or business logic in this step
- Create backups (`.bak`) of files before overwriting

CHANGESET
- **File: `src/features/dashboard/pages/DashboardPage.tsx`**
  - Create the root component structure for the dashboard.
  - The main container `div` must have a `className="dashboard-page"`.
  - Inside the main container, create the high-level layout using placeholder `divs` for each major widget defined in the spec:
    1. A `div` for the "KPI Ticker" with `className="kpi-ticker-container"`.
    2. A main grid `div` with `className="main-grid"`. This grid should contain:
       - A `div` for the "Portfolio Operations Map" with `className="map-container"`.
       - A `div` for the "Priority Action Feed" with `className="feed-container"`.
       - A `div` for "Financials" with `className="financials-container"`.
       - A `div` for the "Leasing Funnel" with `className="leasing-container"`.
    3. A final `div` for "Occupancy by City" with `className="city-occupancy-container"`.
  - Apply a generic `className="panel"` to each of the five placeholder `divs` to prepare for styling.
  - Import `src/styles/Dashboard.css` at the top of the file.

- **File: `src/styles/Dashboard.css`**
  - Define the base styles for `.dashboard-page` to set the overall container properties.
  - Create a `.panel` class that uses the official design tokens for styling:
    - `background-color: var(--panel-bg);`
    - `border: 1px solid var(--line);`
    - `border-radius: 8px;` /* A sensible default */
    - `padding: 16px;`
  - Implement the responsive CSS Grid layout for the dashboard components:
    - The `.kpi-ticker-container` should span the full width.
    - The `.main-grid` should be a `display: grid` container. On desktop, it should create a two-thirds (`2fr`) and one-third (`1fr`) column layout for the map and feed.
    - The `.financials-container` and `.leasing-container` should each take up half the width of a full row.
    - The `.city-occupancy-container` should span the full width.

VERIFICATION CHECKLIST
- The `DashboardPage.tsx` file renders the five specified container `divs`, each with the `.panel` class.
- The layout is controlled by CSS Grid defined in `Dashboard.css` and is responsive.
- All panels use the `var(--panel-bg)` and `var(--line)` variables from `tokens.css` for their appearance.
- No new hex codes or `rgb()` values have been added.
- The application compiles successfully, and the left navigation and overall application shell are completely untouched and functional.
Once the Replit assistant has completed this task, we will have a perfectly structured and styled canvas. We can then proceed to Phase 2, where we will build and populate the KPI ticker and other components with real data. Let me know how it goes!