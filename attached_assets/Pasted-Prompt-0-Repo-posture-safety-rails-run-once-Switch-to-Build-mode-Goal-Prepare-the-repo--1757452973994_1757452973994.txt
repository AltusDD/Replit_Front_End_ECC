Prompt 0 — Repo posture & safety rails (run once)
Switch to **Build** mode.

Goal: Prepare the repo for a controlled, SSOT-driven overhaul. Do NOT change server routes.

Do:
1) Create a working branch: feature/genesis-cards-v1
2) Add a “drift guard”:
   - Search the codebase for inline style objects on any asset card component; list files.
   - Add an ESLint rule locally: no-inline-styles on src/features/portfolio/** (warning now; error in Prompt 5).
3) Confirm these folders (create if missing):
   - src/features/portfolio/components/
   - src/features/portfolio/hooks/
   - src/styles/
4) Keep the UI Inspector `?debug=1` badge only (no overlays).
5) Post back: the branch name, the list of files with inline styles, and confirmation the inspector remains minimal.

Prompt 1 — Implement the 3-Layer Styling System (Gemini §1)
PHASE: Styling System (non-negotiable SSOT)

Single Source of Truth: “Asset Card Architecture Audit”. Follow class names & tokens exactly.

Tasks:
1) Create/replace the 3-layer CSS:
   - src/styles/tokens.css      // design tokens: color, space, radii, z, shadows, font-sizes
   - src/styles/genesis.css     // core components: .genesis-shell, .genesis-hero, .genesis-tabs, .genesis-rail, .kpi, .badge, .widget, skeletons
   - src/styles/theme.css       // dark theme bindings -> tokens
   Import order in src/main.tsx: tokens.css, theme.css, genesis.css

2) Refactor any asset card markup to use classes from genesis.css.
   - Remove ad-hoc inline styles from asset card components/pages.
   - Ensure the page background doesn’t “peek through”: .genesis-page container wraps content.

3) Visual invariants to enforce:
   - Card max-widths: 1200–1280px page container, 320px right rail.
   - Card surfaces use var(--surface-2), 1px var(--border-muted), radius var(--radius-xl).
   - Skeletons must reserve height in Hero KPI rows and Right Rail widgets.

Deliverables:
- CSS files added with audit-exact classes.
- All five /card/* pages no longer use inline styles.
- Screenshot: /card/property/42 showing the 3-column grid & right rail, no visual “page underneath”.

Prompt 2 — Refactor Core Components to SSOT Props (Gemini §2 + my Phase 1 shells)
PHASE: Core component refactor to SSOT prop contracts

Create/align components with EXACT prop interfaces from the audit:
- src/features/portfolio/components/AssetCardShell.tsx
  Props: { title, tabs, rightRail, hero, debugBadge? }
  - Renders the 3-column layout; tablist + panels; sticky hero.

- src/features/portfolio/components/HeroBlock.tsx
  type HeroBlockProps = {
    title: string; subtitle?: string;
    badges: { doorloop?: boolean; corelogic?: boolean; m365?: boolean; dropbox?: boolean };
    kpis: Array<{ label: string; value?: string|number|null; trend?: "up"|"down"|null; hint?: string; loading?: boolean }>;
    actions: Array<{ label: string; href?: string; onClick?: () => void; requires?: Array<"m365"|"doorloop"|"dropbox"|"corelogic">; disabledReason?: string }>;
  }

- src/features/portfolio/components/Kpi.tsx
- src/features/portfolio/components/BadgePills.tsx
- src/features/portfolio/components/RightRail.tsx
- src/features/portfolio/components/Widget.tsx

Refactor ALL five card pages to compose:
<AssetCardShell hero={<HeroBlock .../>} rightRail={<RightRail>…widgets…</RightRail>} tabs={…} />

Deliverables:
- TypeScript types compile with no “any”.
- All five pages render using AssetCardShell + HeroBlock + RightRail (empty content OK for now).
- Screenshot: each /card/* route with visible hero + empty right rail widgets.

Prompt 3 — Live KPIs, Data Provenance & Integration Gating (Gemini §3–§4 + my Phase 1 data)
PHASE: Wire data hooks + gating + provenance

Create/upgrade hooks (no inline fetches in components):
- useIntegrationStatus(): GET /api/config/integrations → { m365, doorloop, dropbox, corelogic }
- usePropertyData(id)
- useUnitData(id)
- useLeaseData(id)
- useTenantData(id)
- useOwnerData(id)

Hook contracts (return {loading, error, data}):
- Each returns primary entity and direct relationships needed to compute 4 KPIs.
- Include provenance per field (e.g., { value, source: "doorloop"|"corelogic"|"derived" }).
- Derive KPIs where needed:
  Property: occupancy%, delinquency$, avgRent$, openWOs
  Unit: status, marketRent, currentRent, daysVacant
  Lease: status, rent, balance, daysToExpiry
  Tenant: totalBalance, activeLeases, onTimePct, portalStatus
  Owner: propertiesOwned, totalUnits, portfolioOccupancy, estDistribution

Integration gating:
- Add requires[] on actions (HeroBlock).
- Disabled state with tooltip explaining which integration is missing.

Provenance:
- Pass provenance hint into KPI.hint (e.g., “DL @ 10:04”, “Derived”).
- For Right Rail field lists, render subtle `(CoreLogic)` etc.

Deliverables:
- Hero on all five pages shows 4 populated KPIs (skeletons → values).
- Action buttons visible; disabled with tooltips if integration missing.
- Screenshot set (5 pages) + paste JSON from /api/config/integrations used for gating.

Prompt 4 — Interactive Tabs: Linked, Files, Activity (Gemini Phase 2 + my details)
PHASE: Build interactive hubs (Linked, Files, Activity)

Components:
- MiniCards.tsx  // compact related-entity rows with chevron; hover prefetch
- UnifiedFilesExplorer.tsx
  - Header search input; sub-tabs: DoorLoop | Dropbox
  - DL: /api/files/doorloop/list?table={entity}&ref_id={id}
  - DB: show “Connect Dropbox to view files” if dropbox=false
  - Unified search: merge results; label with source chip
- ActivityTimeline.tsx
  - Slack-style chips; monochrome icons; left border color for high-signal
  - Filter bar: [Source▼] [From] [To]
  - GET /api/audit/by-ref?table={entities}&ref_id={id} (implement route if missing)
  - Empty state + pagination/lazy load

Wire tabs per entity:
- Linked:
  Property → Owner (1), Units (N), Leases (N)
  Unit → Property (1), Active Lease (0/1)
  Lease → Property (1), Tenants (N)
  Tenant → Leases (N)
  Owner → Properties (N)
- Files: UnifiedFilesExplorer
- Activity: ActivityTimeline

Deliverables:
- Each card: Linked tab shows correct relationships; mini-cards navigate.
- Files: DL tab lists files; DB tab gated/empty message if not configured.
- Activity: chips render; filters work; no layout shift.
- Screenshot trio for one entity showing the three tabs.

Prompt 5 — Details, Financials, Legal + Performance/A11y/E2E (Gemini Phase 3 & Phase 4)
PHASE: Data tabs + polish + tests

Components:
- FieldGroups.tsx  // labeled groups, shows provenance per field
- LedgerTable.tsx  // virtualized ledger; sticky header; empty state
- Charts.tsx       // recharts: Cash Flow (12m), Aging (current buckets)

Server (read-only if needed):
- GET /api/ledger/by-ref?table={leases|tenants|properties}&ref_id={id}
  -> { rows:[{id,date,type,amount,balance,source,notes}], summary:{ buckets, monthly } }
  If unavailable now, return empty rows; UI shows graceful empty states.

Wire tabs:
- Details: dense field groups; provenance tags inline
- Financials: LedgerTable + two charts + Action Panel (buttons can be disabled)
- Legal: legal table structure with empty state

Polish:
- Motion: tab fade 150ms; modal scale+fade 180ms; toasts on actions
- A11y: roles/labels on tabs & buttons; keyboard order; WCAG AA via tokens
- Performance: lazy-mount heavy tabs; memoize KPI derivations; no waterfalls

CI/Quality gates:
- Turn ESLint "no-inline-styles" to **error** for src/features/portfolio/**
- Playwright tests (tests/e2e/cards.spec.ts):
  - Load each /card/*; assert 4 KPIs visible
  - Switch tabs; rail remains stable (no layout shift)
  - Activity filter works; Files DL tab lists or empty states show
  - Owner: "Transfer Ownership" links to /owners/transfer?ownerId=:id

Deliverables:
- Screenshots: Financials tab with ledger + charts; Details with provenance; Legal table
- Test run output: Playwright passing
- Lint: zero inline-styles violations

Prompt 6 — Final Acceptance Pack
Create a final “Genesis Cards v1.0 Acceptance” markdown in /docs:
- Before/after screenshots (5 entities)
- /api/config/integrations JSON
- List of KPIs implemented + provenance source per KPI
- Known placeholders & next API hooks needed
- How to run: yarn dev, yarn test:e2e, lint rules

What I need back from Replit after each prompt

Screenshots of the five card pages (hero + rail visible).

One JSON of /api/config/integrations used for gating.

Notes on any KPI/field still placeholdered and why.

Errors or blocked endpoints (so I can give a micro-server patch prompt if needed).