PROMPT FOR REPLIT — “ECC App Startup Reliability (Replit Run Fix)”

You are the Build Agent. Make the ECC dev app start and stay up on Replit. Do only what’s listed. Stop on the first error and print it.

0) Guardrails

Keep ports: Vite on 5173, API on 8787.

Do not modify asset card logic or schemas.

No Workflows for long-lived servers; use the Run button.

1) Verify dev scripts and dependencies

Open package.json. Ensure:

{
  "scripts": {
    "guardrail": "node scripts/guardrail-check.mjs",
    "dev:web": "vite",
    "dev:api": "tsx server/index.ts",
    "dev": "npm run guardrail && concurrently -k -n WEB,API -c blue,magenta \"npm:dev:web\" \"npm:dev:api\""
  },
  "devDependencies": {
    "concurrently": "^9.0.0",
    "tsx": "^4.20.5",
    "vite": "^5.4.0"
  }
}


If concurrently, tsx, or vite are missing, add them and run:

npm i

2) Make the Run button start both servers (foreground)

Create or update .replit at repo root:

run = "bash -lc 'npm i --silent && npm run dev'"
entrypoint = "package.json"


This ensures Replit installs deps (if needed) and then runs our long-lived npm run dev (WEB+API). Replit keeps the process alive.

3) Ensure Vite binds correctly in Replit

Open vite.config.* and make sure the server block is:

export default defineConfig({
  server: {
    port: 5173,
    host: true,                     // bind 0.0.0.0 so Replit can expose it
    strictPort: false,              // allow fallback if 5173 is taken
    proxy: { "/api": "http://localhost:8787" }
  },
  // ...rest
});


We’re not changing ports or proxying behavior—just allowing Replit to bind and not crash if 5173 is taken once and then freed.

4) Ensure API binds correctly (you already did)

Open server/index.ts and verify:

const PORT = Number(process.env.API_PORT ?? 8787);
app.listen(PORT, "0.0.0.0", () => {
  console.log(`[Dev API] Listening on :${PORT}`);
});


…and the router is mounted:

import rpc from "./routes/rpc";
app.use("/api/rpc", rpc);

5) Kill strays, clear caches, start via Run

From the shell:

pkill -f "tsx server/index.ts" || true
pkill -f vite || true
rm -rf .vite node_modules/.vite dist .cache .parcel-cache 2>/dev/null || true


Now click Run (green button). Expect:

[EnvLock] { … }

[Dev API] Listening on :8787

VITE v5.x ready ➜ Local: http://localhost:5173/

If Run stops immediately or errors, print the last 50 lines of the Run console and STOP.

6) Smoke-test locally (while Run is active)
# API health
curl -s http://localhost:8787/api/health

# Env diag
curl -s http://localhost:8787/api/diag/env | jq .

# Discover existing IDs (one of these routes exists depending on where you added it)
curl -s http://localhost:8787/api/rpc/diag/ids | jq . || curl -s http://localhost:8787/api/diag/ids | jq .


Use the first IDs returned for each table and run the card RPC checks:

curl -s "http://localhost:8787/api/rpc/get_property_card?id=<P>" | jq '{ok:(.property!=null),kpis:.kpis}'
curl -s "http://localhost:8787/api/rpc/get_unit_card?id=<U>"      | jq '{ok:(.unit!=null),lease:.lease?.id,tenant:.tenant?.id}'
curl -s "http://localhost:8787/api/rpc/get_lease_card?id=<L>"     | jq '{ok:(.lease!=null),unit:.unit?.id,tenant:.tenant?.id}'
curl -s "http://localhost:8787/api/rpc/get_owner_card?id=<O>"     | jq '{ok:(.owner!=null),props:(.properties|length)}'
curl -s "http://localhost:8787/api/rpc/get_tenant_card?id=<T>"    | jq '{ok:(.tenant!=null),active:(.activeLease!=null)}'

7) Open the app

In the Replit web preview use paths (with those same IDs):

/card/property/<P>

/card/unit/<U>

/card/lease/<L>

/card/owner/<O>

/card/tenant/<T>

8) If it STILL won’t stay up

Run these and print outputs:

# Are ports actually bound?
ss -tulpn | grep -E ":(5173|8787)" || true

# Node & tsx versions
node -v && npx tsx --version

# Confirm .replit is being honored
grep -n 'run =' .replit || true


STOP after printing; do not change anything else.

End of prompt.