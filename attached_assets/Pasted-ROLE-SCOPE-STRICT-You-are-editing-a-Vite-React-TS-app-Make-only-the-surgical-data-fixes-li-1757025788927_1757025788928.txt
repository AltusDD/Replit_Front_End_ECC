ROLE & SCOPE (STRICT):
You are editing a Vite + React + TS app. Make only the surgical data fixes listed below.
Do NOT change styles, tokens, CSS classes, components, routes, DataTable API, column sets, props, or navigation. No “improvements”, no refactors, no renames. Keep all existing tables, headers, filters, pagination, and renderers exactly as-is.

GOAL: Resolve the last “missing data” problems across Portfolio V3 pages: ZIP on Properties, per-property Units & Occupancy, and Leases monthly revenue KPI (cents vs dollars). Preserve everything else exactly.

0) Pre-flight

Ensure the project builds cleanly: npm run dev and npm run build.

If the file src/utils/ids.ts does not exist, create it as below. If it exists, keep its API the same.

src/utils/ids.ts

export const normalizeId = (v: unknown): string => {
  if (v === null || v === undefined) return "";
  return String(v);
};

1) Properties table → ZIP column must read address_zip (first), then existing fallbacks

File: src/pages/portfolio/columns.tsx
Target: the mapProperty(...) mapper (only edit the zip line).
Action: add address_zip as the first checked path, keep all current fallbacks after it.

Replace just the zip mapping with:

zip: String(
  getPath(src, "address_zip") ??            // <-- new, first
  getPath(src, "address.zipCode") ??
  getPath(src, "zipcode") ??
  getPath(src, "postal_code") ??
  getPath(src, "address.zip") ??
  getPath(src, "zip") ??
  dash
),


Do not change any other property mapping lines in this file.

2) Properties page → compute Units and Occupancy from Units using normalized IDs

File: src/pages/portfolio/properties/index.tsx

Requirements:

Build unitsByProp (count of units per property) and occByProp (count of occupied units per property).

“Occupied” statuses: "occupied", "occ", or "active" (case-insensitive).

Use normalizeId() on both sides of joins (p.id, u.property_id).

Each property row must include units and occPct (rounded integer).

The KPI “TOTAL UNITS” must sum rows.units (not read from API).

Add/replace the enrichment block before building rows and KPIs:

import { normalizeId } from "../../../utils/ids";

const props = properties.data ?? [];
const unitsArr = units.data ?? [];

const unitsByProp = new Map<string, number>();
const occByProp   = new Map<string, number>();

for (const u of unitsArr) {
  const pid = normalizeId(u?.property_id ?? u?.propertyId ?? u?.property?.id);
  if (!pid) continue;
  const status = String(u?.status ?? "").toLowerCase();
  unitsByProp.set(pid, (unitsByProp.get(pid) ?? 0) + 1);
  if (status === "occupied" || status === "occ" || status === "active") {
    occByProp.set(pid, (occByProp.get(pid) ?? 0) + 1);
  }
}

const rows = (props || []).map((p: any) => {
  const pid = normalizeId(p?.id);
  const total = unitsByProp.get(pid) ?? 0;
  const occ   = occByProp.get(pid) ?? 0;
  const occPct = total > 0 ? Math.round((occ / total) * 100) : 0;
  // Keep your existing mapProperty(p) call; just override units/occPct:
  const base = mapProperty(p);
  return { ...base, units: total, occPct };
});

// KPIs: derive from rows (do NOT read units from API)
const totalUnitsKpi = rows.reduce((sum, r) => sum + (r.units ?? 0), 0);


Important: do not change how DataTable is rendered or how columns are imported. Only enrich the data and compute the KPI.

3) Leases page → fix monthly revenue KPI (rent_cents → dollars)

File: src/pages/portfolio/leases/index.tsx

Action: When computing the KPI monthly revenue, sum rent_cents (or rent if that’s what you have) but divide by 100 if it’s cents. Filter to status === "active" (case-insensitive).

Drop-in replacement for the KPI calc:

const monthlyRevenue = (leases.data ?? [])
  .filter(l => String(l?.status ?? "").toLowerCase() === "active")
  .reduce((sum, l) => {
    const cents = Number(l?.rent_cents ?? l?.rent ?? 0);
    return sum + (Number.isFinite(cents) ? cents : 0);
  }, 0) / 100;


Note: Do not alter row renderers; they already call money() correctly. This change is only for the KPI number at the top.

4) Leave Tenants/Owners contact blanks as-is (data is genuinely missing)

Do not attempt to synthesize phone/email. The current “—” fallback is correct. Do not modify renderers, badges, or KPIs.

5) Minimal debug hook (optional, behind query flag)

File: src/features/data/useCollection.ts
Add a safe console sample only when ?debug=1 is present (helps verify API fields without changing UI).

const debug = typeof location !== "undefined" &&
  new URLSearchParams(location.search).get("debug") === "1";
...
if (debug && Array.isArray(json) && json.length) {
  // eslint-disable-next-line no-console
  console.log(endpoint, "sample", json[0]);
}

6) Acceptance checks (you must run these and report results)

Properties → ZIP column now shows real ZIPs (e.g., “31216”) for the majority of rows.

Properties KPI “TOTAL UNITS” equals the count of Units in /api/portfolio/units (currently ~177) and each row’s Units matches the number of units for that property.

Properties Occupancy progresses per row and occPct reflects occupied/total units (% rounded).

Leases KPI “MONTHLY REVENUE” is now the cents-to-dollars sum of active leases only (realistic figure; not millions unless you actually have that).

No changes to styles, table structure, headers, filters, sorting, pagination, or routes. No new console errors/warnings. TypeScript and build both pass.

Provide a short report with: the final KPI numbers, one example property row (id, units, occPct), and confirmation that ZIPs populate.