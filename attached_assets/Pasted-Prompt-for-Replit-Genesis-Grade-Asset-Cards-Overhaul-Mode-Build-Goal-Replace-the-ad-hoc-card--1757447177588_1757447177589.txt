Prompt for Replit — “Genesis-Grade Asset Cards Overhaul”

Mode: Build
Goal: Replace the ad-hoc card pages with the standardized Genesis shell, hero, tabs, right-rail, and relationship-aware hooks across Property, Unit, Lease, Tenant, Owner.

Guardrails (must-haves):

Use the 3-column grid (main content + 320px read-only right rail).

Render the 7 canonical tabs on every card: overview | details | financials | legal | files | linked | activity.

Add the Hero Block (Title, Source Badges, KPIs, Role-gated Actions).

Wire relationships in data hooks (e.g., property → units, leases, owner).

Respect existing endpoints:

/api/config/integrations

/api/entities/{type}/{id}

/api/portfolio/{type} (with filters such as ?property_id=…, ?tenant_id=…, ?lease_id=…)

Match the dark theme using our tokens (no ad-hoc colors).

Keep Inspector ?debug=1 working, no overlays unless debug is on.

No regressions in existing routes (/card/property/:id, /card/unit/:id, etc.).

0) Plan of Work

Create reusable core under src/features/portfolio/components/:
AssetCardShell.tsx, HeroBlock.tsx, RightRail.tsx, Tabs.tsx, MiniCards.tsx, UnifiedFilesExplorer.tsx, ActivityTimeline.tsx.

Create relationship hooks under src/features/portfolio/hooks/:
usePropertyData.ts, useUnitData.ts, useLeaseData.ts, useTenantData.ts, useOwnerData.ts.

Refactor all 5 routes to the shell + hero + tabs structure.
Primary card routes live in one of these (pick what exists in the repo and make it consistent):

src/pages/card/{entity}/index.tsx (preferred if present today)

src/features/portfolio/routes/{entity}/CardPage.tsx

Use our design tokens. If src/styles/tokens.css exists, import it; otherwise create it and import it in src/main.tsx.

Validation: run the acceptance checks below and post screenshots.

1) Create/Ensure Design Tokens

File: src/styles/tokens.css (or reuse if already present).

Contents: base dark tokens (bg, border, text, brand gold/blue/green/red), spacing, radii, shadows, typography sizes.

Import once in src/main.tsx: import "@/styles/tokens.css";

Acceptance: all cards share the same look; no stray gray tones or mismatched borders.

2) Reusable Components (create these exact files)
src/features/portfolio/components/AssetCardShell.tsx

Renders the 3-column grid.

Top: HeroBlock.

Below: Tabs across full width (main area).

Right column (320px): RightRail (read-only widgets, reserved height with skeletons to avoid layout shift).

Props:

{
  hero: ReactNode; 
  tabs: { key: TabKey; label: string; panel: ReactNode }[];
  rightRail: ReactNode;
  activeTab?: TabKey;
}


TabKey union: "overview"|"details"|"financials"|"legal"|"files"|"linked"|"activity".

HeroBlock.tsx

Props: { title: string; subtitle?: string; badges: {doorloop?: boolean; corelogic?: boolean; m365?: boolean; dropbox?: boolean}; kpis: {label:string; value:string}[]; actions: {label: string; href?: string; disabled?: boolean; role?: string}[] }

Layout: title on left, badges beneath; compact KPI grid (4 up) below title; role-gated primary actions aligned right (disabled w/ tooltip text if not allowed).

Tabs.tsx

Canonical 7 tabs in fixed order; controlled component.

No routing changes required; local tab state is fine.

RightRail.tsx

Accepts children widgets; each widget sets min-height and shows a skeleton until data arrives.

Widgets planned:

Property: Risk Score (CoreLogic), Key Dates, Pinned Files

Unit: Quick Stats, Parent Property summary

Lease: Financial KPIs, Tenant snapshot

Tenant: Contact info, Payment History (last 5)

Owner: Contact, Portfolio quick stats, Pinned Files

MiniCards.tsx

Small clickable rows to render linked records (title + meta + chevron).

Used in the Linked tab across all cards.

UnifiedFilesExplorer.tsx

Thin shell that renders our existing DoorLoop/Dropbox file explorer:

DoorLoop tab → /api/files/doorloop/list?table={entity}&ref_id={id}

Dropbox tab → existing integration once token is present.

Reuse existing list/search logic; unify headers/styles to tokens.

ActivityTimeline.tsx

Wraps existing activity feed into Slack-style compact chips:

left icon (source), single-line text, right-aligned timestamp.

Filter bar: Source (All/DL/System/M365/CoreLogic), Date Range.

High-signal events use colored left border; others subtle.

3) Relationship Hooks (create these files)

All hooks return primary + relationships in a single object.
They call the stable endpoints we already have.

usePropertyData(id:number) →
{ property, owner, units, leases, integrations }
Calls:

/api/entities/properties/:id

/api/entities/owners/:ownerId

/api/portfolio/units?property_id=:id

/api/portfolio/leases?property_id=:id

/api/config/integrations

useUnitData(id:number) →
{ unit, property, activeLease, integrations }
Calls:

/api/entities/units/:id

/api/entities/properties/:propertyId

(optional) /api/entities/leases/:leaseId if present

/api/config/integrations

useLeaseData(id:number) →
{ lease, property, tenants, integrations }
Calls:

/api/entities/leases/:id

/api/entities/properties/:propertyId

/api/portfolio/tenants?lease_id=:id

/api/config/integrations

useTenantData(id:number) →
{ tenant, leases, integrations }
Calls:

/api/entities/tenants/:id

/api/portfolio/leases?tenant_id=:id

/api/config/integrations

useOwnerData(id:number) →
{ owner, properties, unitsCount, leasesCount, integrations }
Calls:

/api/entities/owners/:id

/api/portfolio/properties?owner_id=:id

(optional counts) /api/portfolio/units?owner_id=:id, /api/portfolio/leases?owner_id=:id

/api/config/integrations

All hooks handle nulls gracefully and expose a loading flag.

4) Refactor All Five Card Routes

Important: Keep existing routes working:

/card/property/:id

/card/unit/:id

/card/lease/:id

/card/tenant/:id

/card/owner/:id

In each route:

Grab id via the router hook in use (e.g., wouter’s useParams()).

Load with the new hook (e.g., usePropertyData(id)).

Compose:

HeroBlock:

Property KPIs: Units, Leases, Occupancy (if available), Delinquency (if available)

Actions: Call / Teams Message / Email (role-gated; disable if M365 not configured)

Tabs with 7 canonical tabs. Panels:

Overview: identity summary + top linked highlights (first 3).

Details: raw field list w/ provenance ((DoorLoop) subtle).

Financials: rent/balance charts (use placeholders if data not there yet).

Legal: status and key legal fields (placeholder OK if not wired).

Files: UnifiedFilesExplorer.

Linked: MiniCards list for relationships (see mapping below).

Activity: ActivityTimeline.

RightRail widgets (read-only).

Linked tab content mapping (minimum):

Property → Owner (1), Units (N), Leases (N)

Unit → Property (1), Active Lease (0/1)

Lease → Property (1), Tenants (N)

Tenant → Leases (N)

Owner → Properties (N)

5) Role-Gated Actions & Badges

Get integrations via /api/config/integrations.
If m365: false, disable Teams/Email actions and show tooltip reason.

Source Badges: DL, CoreLogic, M365, Dropbox (low-contrast pill chips).

Owner card “Transfer Ownership” → deep link /owners/transfer?ownerId=:id (ensure already wired).

6) Definition of Done (acceptance)

After restart, verify the following for each entity page:

A. Structure & Theme

The page clearly uses a 3-column layout.

A Hero Block appears with Title, Badges, KPIs, and Actions.

The 7 tabs are visible and switch panels:
overview | details | financials | legal | files | linked | activity.

A right rail shows read-only widgets and skeletons (no layout shift).

B. Relationships & Integrations

Linked tab shows the correct related mini-cards (clickable) per mapping.

Files tab shows two sub-tabs (DoorLoop/Dropbox). DoorLoop renders a list (even if empty).

Activity tab renders Slack-style chips, filterable by source & date.

Actions are enabled/disabled correctly based on /api/config/integrations.

C. Visual

Consistent dark theme, dense data layout; no “page underneath” look.

No “DL” stray text—use badges/provenance in labels/tooltips.

Tooltip copy on disabled actions explains why (role or integration).

D. QA URLs

/card/property/42

/card/unit/45

/card/lease/1

/card/tenant/1

/card/owner/1

Take screenshots of:

Each card on Overview tab showing hero + layout.

Each Linked tab showing relationship mini-cards.

One Files tab with DoorLoop active.

One Activity tab with filters visible.

7) Notes to Avoid Drift

Do not add ad-hoc CSS in card files. All styling comes from tokens and shared components.

Keep Inspector overlay off by default; ?debug=1 may show a small badge only.

No re-invented fetch layers; call the existing /api/* endpoints as listed.

8) If You Need to Touch Router

Keep the current URLs. If a new routes folder is introduced, export the same paths and update the existing router index accordingly.

When finished:

Post a diff of all new files under src/features/portfolio/components/ and src/features/portfolio/hooks/.

Confirm all 5 routes compile and load with the 3-column shell, hero, tabs, and right rail.

Share screenshots + the JSON from /api/config/integrations used to render badges and action gating.