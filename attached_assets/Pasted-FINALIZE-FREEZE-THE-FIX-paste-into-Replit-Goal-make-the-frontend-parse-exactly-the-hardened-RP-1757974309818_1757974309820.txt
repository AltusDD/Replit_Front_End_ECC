FINALIZE + FREEZE THE FIX (paste into Replit)

Goal: make the frontend parse exactly the hardened RPC shapes, prove all 6 routes render, and add guards that fail the build if the contract drifts.

1) Frontend schemas = API truth

Create/replace src/shared/card-contracts.ts with the exact Zod that matches the transformed RPCs (sane defaults so components never crash):

// src/shared/card-contracts.ts
import { z } from "zod";

export const Address = z.object({
  line1: z.string().default(""),
  city: z.string().default(""),
  state: z.string().default(""),
  zip: z.string().default(""),
});

export const PropertyCard = z.object({
  property: z.object({
    id: z.number(),
    name: z.string().optional().default(""),
    type: z.string().default("UNKNOWN"),
    address: Address,
  }),
  kpis: z.object({
    units: z.number().default(0),
    activeLeases: z.number().default(0),
    occupancyPct: z.number().default(0),
    avgRentCents: z.number().nullable().default(null),
  }),
});

export const UnitCard = z.object({
  unit: z.object({
    id: z.number(),
    unit_label: z.string().optional().default(""),
    status: z.string().optional().default("UNKNOWN"),
  }),
  property: z.object({ id: z.number() }).nullable().default(null),
  lease: z.object({ id: z.number(), status: z.string().default("UNKNOWN") }).nullable().default(null),
});

export const LeaseCard = z.object({
  lease: z.object({
    id: z.number(),
    status: z.string().default("UNKNOWN"),
    rent_cents: z.number().nullable().default(null),
  }),
  unit: z.object({ id: z.number() }).nullable().default(null),
  tenant: z.object({ id: z.number(), display_name: z.string().default("") }).nullable().default(null),
  property: z.object({ id: z.number() }).nullable().default(null),
});

export const OwnerCard = z.object({
  owner: z.object({
    id: z.number(),
    display_name: z.string().default(""),
  }),
  properties: z.array(z.object({ id: z.number(), name: z.string().default("") })).default([]),
});

export const TenantCard = z.object({
  tenant: z.object({
    id: z.number(),
    display_name: z.string().default(""),
  }),
  leases: z.array(z.object({ id: z.number(), status: z.string().default("UNKNOWN") })).default([]),
  activeLease: z.object({ id: z.number(), status: z.string().default("UNKNOWN") }).nullable().default(null),
});


Wire them in pages/hooks: wherever we fetch the card JSON, replace the old parse with:

import { PropertyCard /* or UnitCard, etc. */ } from "@/shared/card-contracts";

const json = await fetch("/api/rpc/get_property_card?id=" + id).then(r => r.json());
const data = PropertyCard.parse(json); // ← central truth


PROVE: show one diff where an Overview page switched to the new PropertyCard.parse(...).

2) One-shot smoke test that fails on regressions

Add scripts/smoke.mjs:

// scripts/smoke.mjs
import { execSync } from "node:child_process";

function j(cmd){ return JSON.parse(execSync(cmd, {stdio:["ignore","pipe","pipe"]}).toString()); }
function t(s){ console.log("\n== " + s + " =="); }

const ids = j(`curl -s http://localhost:8787/api/rpc/diag/ids`);
const { property:PID, unit:UID, lease:LID, owner:OID, tenant:TID } = ids;

const endpoints = [
  ["prop", `curl -s "http://localhost:8787/api/rpc/get_property_card?id=${PID}"`],
  ["unit", `curl -s "http://localhost:8787/api/rpc/get_unit_card?id=${UID}"`],
  ["lease",`curl -s "http://localhost:8787/api/rpc/get_lease_card?id=${LID}"`],
  ["owner",`curl -s "http://localhost:8787/api/rpc/get_owner_card?id=${OID}"`],
  ["tenant",`curl -s "http://localhost:8787/api/rpc/get_tenant_card?id=${TID}"`],
];

for (const [name, cmd] of endpoints) {
  t(name);
  const o = j(cmd);
  if (!o) throw new Error(name + " empty");
  // minimal invariants
  if (name==="prop"   && (typeof o.kpis.units !== "number" || typeof o.property.type !== "string")) throw new Error("prop invariant");
  if (name==="owner"  && !Array.isArray(o.properties)) throw new Error("owner invariant");
  if (name==="tenant" && !Array.isArray(o.leases)) throw new Error("tenant invariant");
  console.log("OK");
}

console.log("\nALL RPC invariants OK");


Add NPM scripts:

{
  "scripts": {
    "smoke": "node scripts/smoke.mjs"
  }
}


PROVE: run npm run smoke and paste ALL RPC invariants OK.

3) UI route proofs (no red overlay)

Open these in the browser (or curl to prove HTML renders):

/portfolio/properties
/card/property/<PID>
/card/unit/<UID>
/card/lease/<LID>
/card/owner/<OID>
/card/tenant/<TID>


PROVE: confirm all six render with no “Contract violation” text. If any page still throws, it’s a page-level parse still using the old schema—replace it with the new Zod from step 1.

4) Make it stick (guardrails)

Turn StrictMode back on (it’s fine now that cancel-safe fetch + stable schemas are in place).

Keep the dev-runner you added (dual process) as npm run dev.

Add a precommit hook (optional): "precommit": "npm run smoke" using Husky, so regressions can’t land.

If anything fails

It will be one of two things:

A page still parsing with the old schema (fix import to use src/shared/card-contracts.ts), or

A page computing KPIs client-side and assuming non-nulls (drop the calc or guard with defaults; the server already provides KPIs).

That’s it. Once you paste the three proofs (page diff showing new parse, npm run smoke output, and “no red overlay” confirmation), you’re done and the fix is future-proof.