PROMPT 1 — Add shared skeleton + field rows (reusable for all cards)

Create two small shared components. Do not change any other files.

src/components/Skeleton.tsx

import React from "react";

/** Single shimmering line */
export function Line({ w = "100%", h = 12 }: { w?: number | string; h?: number }) {
  return (
    <div
      className="ecc-object"
      style={{
        height: h,
        width: typeof w === "number" ? `${w}px` : w,
        background:
          "linear-gradient(90deg, rgba(255,255,255,0.06), rgba(255,255,255,0.14), rgba(255,255,255,0.06))",
        backgroundSize: "200% 100%",
        animation: "ecc-shimmer 1.2s linear infinite",
        opacity: 0.35,
      }}
    />
  );
}

/** Block placeholder */
export function Block({ h = 96 }: { h?: number }) {
  return <div className="ecc-object" style={{ height: h, opacity: 0.35 }} />;
}


src/components/FieldRows.tsx

import React from "react";

/** Label/value rows inside a Section */
export function FieldRows({ rows }: { rows: { label: string; value?: React.ReactNode }[] }) {
  return (
    <div style={{ display: "grid", gap: 8 }}>
      {rows.map((r, i) => (
        <div key={i} style={{ display: "grid", gridTemplateColumns: "160px 1fr", gap: 8 }}>
          <div className="ecc-label">{r.label}</div>
          <div>{r.value ?? "—"}</div>
        </div>
      ))}
    </div>
  );
}


(The animation keyframes already live in theme.css from earlier. No changes needed.)

PROMPT 2 — Patch the live Property Card to use boxes + skeletons

Open src/pages/card/property/index.tsx. We will only add imports, a small skeleton component, a helper, and mount a few boxed sections. Keep all existing logic and panels.

2A) Imports (add to the top; keep existing imports)
import Section from "../../../components/Section";
import { FieldRows } from "../../../components/FieldRows";
import { Line, Block } from "../../../components/Skeleton";

2B) Helpers + skeleton (paste above the default export)
function fmtAddress(p: any) {
  const parts = [p?.street_1, p?.city, p?.state, p?.zip].filter(Boolean);
  return parts.length ? parts.join(", ") : "—";
}

/** Lightweight page skeleton that uses the same boxed layout */
function PropertyCardSkeleton() {
  return (
    <div style={{ display: "grid", gap: 12 }}>
      <Section title={<Line w={260} />}>
        <div style={{ display: "grid", gap: 8 }}>
          <Line w="60%" />
          <Line w="40%" />
          <Line w="50%" />
        </div>
      </Section>

      <Section title={<Line w={200} />}>
        <Block h={120} />
      </Section>

      <Section title={<Line w={180} />}>
        <div style={{ display: "grid", gap: 8 }}>
          <Line w="70%" />
          <Line w="55%" />
        </div>
      </Section>
    </div>
  );
}

2C) Mount skeleton + standard boxes

Find the main component’s render (the default export). Do not remove existing content. Make two surgical edits:

Show skeleton while loading.
Locate the loading guard (often if (isLoading) return ...). Replace it with:

if (typeof isLoading !== "undefined" ? isLoading : !property) {
  return <PropertyCardSkeleton />;
}


If your file uses different names, use the same logic with its variables (e.g., data, p → set const property = data || p; right above this).

Add three boxed sections near the top of the main column (right under the page title/toolbar and above older content). Paste this block where the page starts rendering its details:

{/* === Genesis: Boxed Overview (labels/values) === */}
<Section title="Property Overview">
  <FieldRows
    rows={[
      { label: "Address", value: fmtAddress(property) },
      { label: "Type", value: property?.type || property?.property_type || "—" },
      { label: "Class", value: property?.class || property?.property_class || "—" },
      { label: "Status", value: property?.status || "—" },
      {
        label: "IDs",
        value: (
          <>
            #{property?.id ?? "—"}
            {property?.doorloop_id ? <> • DL {property.doorloop_id}</> : null}
          </>
        ),
      },
    ]}
  />
</Section>

{/* === Genesis: Relationship Snapshot (safe live counts) === */}
<Section title="Relationships">
  <div style={{ display: "grid", gridTemplateColumns: "repeat(3, minmax(0,1fr))", gap: 12 }}>
    <div className="ecc-object" style={{ padding: 12 }}>
      <div className="ecc-label">Units</div>
      <div style={{ fontSize: 20, fontWeight: 700 }}>{property?.units_count ?? "—"}</div>
    </div>
    <div className="ecc-object" style={{ padding: 12 }}>
      <div className="ecc-label">Active Leases</div>
      <div style={{ fontSize: 20, fontWeight: 700 }}>{property?.active_leases_count ?? "—"}</div>
    </div>
    <div className="ecc-object" style={{ padding: 12 }}>
      <div className="ecc-label">Primary Tenants</div>
      <div style={{ fontSize: 20, fontWeight: 700 }}>{property?.primary_tenants_count ?? "—"}</div>
    </div>
  </div>
</Section>

{/* === Genesis: Notes / Flags (use your existing data if available) === */}
<Section title="Operational Notes">
  <div style={{ opacity: 0.8 }}>No notes recorded.</div>
</Section>


Those counts (units_count, active_leases_count, primary_tenants_count) are non-breaking; if you don’t have them yet, they render “—”. Keep your existing lists/tables below—this block just standardizes the top boxes.

PROMPT 3 — Visual smoke (Property)

Hard refresh Replit preview.

Open /card/property/<a real id>. You should see:

Skeleton boxes during fetch.

Three light-grey boxed sections (Overview, Relationships, Operational Notes).

Your existing content remains below.

If any panel still renders on the dark surface, it means that element doesn’t use a card/section class—flag it and we’ll wrap just that piece in <Section> next.