# ------------------------------
# 1) NAV CONFIG + NAV COMPONENT
# ------------------------------
mkdir -p src/components/layout
cat > src/components/layout/navConfig.ts <<'TS'
export type NavItem = { label: string; path?: string; children?: NavItem[] };
export const NAV_SECTIONS: NavItem[] = [
  {
    label: 'PRIMARY',
    children: [{ label: 'Dashboard', path: '/dashboard' }],
  },
  {
    label: 'PORTFOLIO V3',
    children: [
      { label: 'Properties', path: '/portfolio/properties' },
      { label: 'Units',      path: '/portfolio/units' },
      { label: 'Leases',     path: '/portfolio/leases' },
      { label: 'Tenants',    path: '/portfolio/tenants' },
      { label: 'Owners',     path: '/portfolio/owners' },
    ],
  },
  {
    label: 'TOOLS',
    children: [{ label: 'API Probe', path: '/tools/probe' }],
  },
];
TS

cat > src/components/layout/Nav.tsx <<'TSX'
import React from 'react';
import { Link, useLocation } from 'wouter';
import { NAV_SECTIONS } from './navConfig';

export default function Nav(){
  const [loc] = useLocation();
  return (
    <nav className="nav">
      <div className="brand">Empire Command Center</div>
      {NAV_SECTIONS.map(sec => (
        <div key={sec.label} className="navSection">
          <div className="navSectionTitle">{sec.label}</div>
          <div className="navLinks">
            {sec.children?.map(it => it.path ? (
              <Link key={it.path} href={it.path}>
                <a className={'navLink' + (loc.startsWith(it.path) ? ' active' : '')}>
                  <span>{it.label}</span>
                </a>
              </Link>
            ) : null)}
          </div>
        </div>
      ))}
    </nav>
  );
}
TSX

cat > src/components/layout/Layout.tsx <<'TSX'
import React from 'react';
import Nav from './Nav';

export default function Layout({children}:{children:React.ReactNode}){
  return (
    <div className="app">
      <aside className="rail"><Nav/></aside>
      <main className="content">{children}</main>
    </div>
  );
}
TSX

# ------------------------------
# 2) THEME TOKENS & UTILITIES
# ------------------------------
mkdir -p src/styles
cat > src/styles/theme.css <<'CSS'
:root{
  --bg:#0b0d10;
  --surface:#0f1318;
  --panel:#11161c;
  --fg:#e7eaee;
  --muted-1:#b6c0cb;
  --muted-2:#8e99a6;
  --border-1:#25303b;
  --gold:#E6C15A;
  --gold-2:#F2D47A;
}
*{box-sizing:border-box}
html,body,#root{height:100%}
body{margin:0;background:var(--bg);color:var(--fg);font:14px/1.45 system-ui, Inter, Arial}

.app{display:grid;grid-template-columns:260px 1fr;min-height:100vh}
.rail{background:var(--surface);border-right:1px solid var(--border-1);padding:16px 12px}
.content{padding:24px 24px 48px}

.brand{font-weight:700;margin:4px 8px 16px 8px}
.navSection{margin:18px 0}
.navSectionTitle{font-size:11px;letter-spacing:.08em;color:var(--muted-2);margin:0 8px 8px}
.navLink{display:block;padding:10px 12px;border-radius:10px;color:var(--fg);text-decoration:none;border:1px solid transparent}
.navLink:hover{background:rgba(255,255,255,.02);border-color:var(--border-1)}
.navLink.active{background:var(--panel);border-color:var(--border-1)}

.h1{font-size:28px;font-weight:700;margin:6px 0 18px}
.panel{background:var(--panel);border:1px solid var(--border-1);border-radius:14px;padding:16px}
.grid-cards{display:grid;grid-template-columns:repeat(5, minmax(220px,1fr));gap:16px}
.stat h4{font-size:11px;letter-spacing:.06em;color:var(--muted-2);margin:0 0 8px}
.stat .number{font-size:28px;font-weight:700}
.badge{display:inline-block;padding:4px 8px;border-radius:10px;border:1px solid var(--border-1);color:var(--muted-1);font-size:12px}
.table{width:100%;border-collapse:separate;border-spacing:0}
.table th,.table td{padding:10px 12px;border-bottom:1px solid var(--border-1)}
.table th{position:sticky;top:0;background:var(--surface);text-align:left;color:var(--muted-1)}
.link{color:#8ab4ff;text-decoration:none}
.link:hover{text-decoration:underline}
CSS

# ------------------------------
# 3) DATA HOOKS (useApi.ts)
# ------------------------------
cat > src/lib/useApi.ts <<'TS'
import { useEffect, useMemo, useState } from 'react';

export const API_BASE = import.meta.env.VITE_API_BASE || '/api';
const KEY = import.meta.env.VITE_API_KEY || '';
const HEADERS: Record<string,string> = { Accept: 'application/json' };
if (KEY) HEADERS['x-api-key'] = KEY;

export function buildUrl(path: string, params?: Record<string, any>){
  let out = path;
  if (!/^https?:\/\//i.test(path)) if (!path.startsWith('/')) out = `${API_BASE.replace(/\/$/,'')}/${path}`;
  if (params && Object.keys(params).length){
    const q = new URLSearchParams();
    for (const [k,v] of Object.entries(params)) if (v!=null) q.set(k, String(v));
    const s = q.toString(); if (s) out += (out.includes('?')?'&':'?') + s;
  }
  return out;
}

export async function fetchJSON<T=any>(url:string, init:RequestInit={}):Promise<T>{
  const r = await fetch(url, { ...init, headers: { ...HEADERS, ...(init.headers||{}) }});
  if(!r.ok) throw new Error(`${r.status} ${r.statusText}`);
  return r.json();
}

/** Exported for pages that need a raw list. Tries reasonable collection shapes. */
export async function fetchCollection(col:string, qs=''){
  const base = API_BASE.replace(/\/$/,'');
  const paths = [
    `${base}/portfolio/${col}${qs}`,
    `${base}/${col}${qs}`,
  ];
  for (const u of paths){ try { return await fetchJSON(u); } catch{} }
  throw new Error(`No collection endpoint worked for "${col}"`);
}

export function useCollection(col:string, params:Record<string,any>={}){
  const qs = useMemo(()=>{
    const q = new URLSearchParams(); Object.entries(params).forEach(([k,v])=>v!=null && q.set(k,String(v)));
    const s = q.toString(); return s ? `?${s}` : '';
  }, [JSON.stringify(params)]);

  const [data,set] = useState<any[]>([]);
  const [loading,setL] = useState(true);
  const [error,setE] = useState<any>(null);

  useEffect(()=>{
    let ok = true; setL(true); setE(null);
    (async()=>{
      try{
        const json = await fetchCollection(col, qs);
        if(!ok) return;
        const rows = Array.isArray(json?.items)?json.items : Array.isArray(json?.data)?json.data : Array.isArray(json)?json : [];
        set(rows);
      }catch(e){ if(ok){ setE(e); set([]);} }
      finally{ if(ok) setL(false); }
    })();
    return ()=>{ ok=false };
  }, [col, qs]);

  return { data, loading, error };
}

export function useCounts(){
  const [data,set] = useState<any|null>(null);
  const [loading,setL] = useState(true);
  const [error,setE] = useState<any>(null);

  useEffect(()=>{
    let ok=true; setL(true); setE(null);
    (async()=>{
      const base = API_BASE.replace(/\/$/,'');
      const candidates = [
        `${base}/rpc/portfolio_counts`,
        `${base}/portfolio/counts`,
        `${base}/counts`,
      ];
      let res:any=null;
      for(const u of candidates){ try{ res = await fetchJSON(u); if(res) break; }catch{} }
      if(!res){ setE(new Error('Counts endpoint not found')); }
      set(res||null);
      if(ok) setL(false);
    })();
    return ()=>{ ok=false }
  }, []);

  return { data, loading, error };
}
TS

# ------------------------------
# 4) APP SHELL USING LAYOUT
# ------------------------------
cat > src/App.tsx <<'TSX'
import React from 'react';
import { Route, Switch, Redirect } from 'wouter';
import Layout from './components/layout/Layout';
import Dashboard from './pages/dashboard';
import ApiProbe from './pages/tools/ApiProbe';
import Properties from './pages/portfolio/properties';
import Units from './pages/portfolio/units';
import Leases from './pages/portfolio/leases';
import Tenants from './pages/portfolio/tenants';
import Owners from './pages/portfolio/owners';

export default function App(){
  return (
    <Layout>
      <Switch>
        <Route path="/"><Redirect to="/dashboard"/></Route>
        <Route path="/dashboard" component={Dashboard}/>
        <Route path="/portfolio/properties" component={Properties}/>
        <Route path="/portfolio/units" component={Units}/>
        <Route path="/portfolio/leases" component={Leases}/>
        <Route path="/portfolio/tenants" component={Tenants}/>
        <Route path="/portfolio/owners" component={Owners}/>
        <Route path="/tools/probe" component={ApiProbe}/>
        <Route> <div className="panel">Not found.</div> </Route>
      </Switch>
    </Layout>
  );
}
TSX

# ------------------------------
# 5) DASHBOARD TIDY (no tables; resilient counts)
# ------------------------------
mkdir -p src/pages/dashboard
cat > src/pages/dashboard/index.tsx <<'TSX'
import React from 'react';
import { useCounts } from '@lib/useApi';

function Stat({label, value}:{label:string; value:React.ReactNode}){
  return (
    <div className="panel stat">
      <h4>{label.toUpperCase()}</h4>
      <div className="number">{value}</div>
    </div>
  );
}

export default function Dashboard(){
  const { data, loading, error } = useCounts();
  const c = data || {};
  return (
    <div>
      <div className="h1">Dashboard</div>
      {error ? <div className="panel">API error: {String(error.message||error)}</div> : null}
      <div className="grid-cards">
        <Stat label="Properties" value={loading?'…':(c.properties ?? '…')}/>
        <Stat label="Units"      value={loading?'…':(c.units ?? '…')}/>
        <Stat label="Leases"     value={loading?'…':(c.leases ?? '…')}/>
        <Stat label="Tenants"    value={loading?'…':(c.tenants ?? '…')}/>
        <Stat label="Owners"     value={loading?'…':(c.owners ?? '…')}/>
      </div>

      <div className="panel" style={{marginTop:16}}>
        <span className="badge">Next Best Action</span>
        <span style={{marginLeft:8}} className="badge">Powered by RPC</span>
      </div>
    </div>
  );
}
TSX

# ------------------------------
# 6) MAIN ENTRY ENSURES THEME CSS
# ------------------------------
cat > src/main.tsx <<'TSX'
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './styles/theme.css';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode><App/></React.StrictMode>
);
TSX

# ------------------------------
# 7) RESTART DEV SERVER
# ------------------------------
pkill -f vite >/dev/null 2>&1 || true
npm run dev --silent &
sleep 1
echo "If preview doesn't auto-refresh, open the Dev URL again."
