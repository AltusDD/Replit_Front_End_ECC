set -e
git checkout -b fix/property-card-by-id || git checkout fix/property-card-by-id
mkdir -p server/routes src/pages/card/property tools

############################################
# 1) Server — universal entities lookup (idempotent)
############################################
if [ ! -f server/routes/entities.ts ]; then
cat > server/routes/entities.ts <<'TS'
import express from "express";
import { sbAdmin } from "../lib/supabaseAdmin";

const router = express.Router();

// allowlisted tables only
const TABLES = new Set(["properties","units","leases","tenants","owners"]);

router.get("/api/entities/:table/:id", async (req, res) => {
  try {
    const table = String(req.params.table||"").toLowerCase();
    const idNum = Number(req.params.id);
    if (!TABLES.has(table)) return res.status(400).json({ ok:false, error:"TABLE_NOT_ALLOWED" });
    if (!Number.isFinite(idNum)) return res.status(400).json({ ok:false, error:"BAD_ID" });

    const { data, error } = await sbAdmin.from(table).select("*").eq("id", idNum).limit(1).maybeSingle();
    if (error) return res.status(500).json({ ok:false, error:error.message });
    if (!data) return res.status(404).json({ ok:false, error:"NOT_FOUND" });

    return res.json({ ok:true, item:data });
  } catch (e:any) {
    return res.status(500).json({ ok:false, error:String(e?.message||e) });
  }
});

export default router;
TS

applypatch <<'PATCH'
*** Begin Patch
*** Update File: server/index.ts
@@
-import filesRouter from "./routes/files";
+import filesRouter from "./routes/files";
+import entitiesRouter from "./routes/entities";
@@
 app.use(filesRouter);
+app.use(entitiesRouter);
*** End Patch
PATCH
fi

############################################
# 2) Frontend — robust fetch by ID (with fallback)
############################################
# Create/replace the API helper for the property card
cat > src/pages/card/property/api.ts <<'TS'
export type PropertyRecord = {
  id: number;
  line1?: string; address?: string;
  city?: string; state?: string; postal_code?: string;
  owner_id?: number;
  lat?: number | null; lng?: number | null;
  [k:string]: any;
};

async function getJSON(url:string){
  const r = await fetch(url);
  if (!r.ok) return { ok:false, status:r.status };
  try { return await r.json(); } catch { return { ok:true, json:null }; }
}

export async function fetchPropertyById(rawId: string | number): Promise<PropertyRecord | null> {
  const idNum = Number(rawId);
  if (!Number.isFinite(idNum)) return null;

  // 1) Prefer direct-by-id route
  const byId = await getJSON(`/api/entities/properties/${idNum}`);
  if ((byId as any).ok && (byId as any).item) return (byId as any).item as PropertyRecord;
  if ((byId as any).status === 404) return null; // definitely missing

  // 2) Fallback: list endpoint → filter (coerce id types)
  const list = await getJSON(`/api/portfolio/properties`);
  const items: any[] =
    (list as any).items || (list as any).data || (Array.isArray(list) ? list : []);
  if (Array.isArray(items) && items.length) {
    const hit = items.find((p:any) => Number(p?.id) === idNum) || null;
    return hit;
  }

  return null;
}

export function propertyTitle(p: PropertyRecord | null): string {
  if (!p) return "";
  const line1 = p.line1 || p.address || "";
  const loc = [p.city, p.state].filter(Boolean).join(", ");
  return [line1, loc, p.postal_code].filter(Boolean).join(" · ");
}
TS

# Patch the page to use the new helper (no brittle ===)
applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/pages/card/property/index.tsx
@@
-import React from "react";
+import React, { useEffect, useState } from "react";
+import { fetchPropertyById, propertyTitle, PropertyRecord } from "./api";
 
 export default function PropertyCardPage(){
-  // existing page showed "Property Not Found"
-  // keep structure but make ID-robust and fetch directly by ID
-  return (
-    <div className="card">
-      <div className="card-header">
-        <h1>Property Not Found</h1>
-        <p>We couldn't find that property.</p>
-      </div>
-    </div>
-  );
+  const [prop, setProp] = useState<PropertyRecord|null>(null);
+  const [loading, setLoading] = useState<boolean>(true);
+
+  // derive id from URL (router-agnostic)
+  const idMatch = typeof window !== "undefined" ? window.location.pathname.match(/\/card\/property\/(\d+)/i) : null;
+  const id = idMatch?.[1] || null;
+
+  useEffect(()=>{ (async()=>{
+    if (!id) { setProp(null); setLoading(false); return; }
+    setLoading(true);
+    const rec = await fetchPropertyById(id);
+    setProp(rec);
+    setLoading(false);
+  })(); }, [id]);
+
+  if (loading) {
+    return (
+      <div className="card">
+        <div className="card-header"><h1>Loading property…</h1></div>
+      </div>
+    );
+  }
+
+  if (!prop) {
+    return (
+      <div className="card">
+        <div className="card-header">
+          <h1>Property Not Found</h1>
+          <p>We couldn't find that property.</p>
+        </div>
+      </div>
+    );
+  }
+
+  // BASIC hero until full card sections are complete
+  return (
+    <div className="card">
+      <div className="card-header">
+        <h1>{propertyTitle(prop)}</h1>
+      </div>
+      <div className="card-content p-4 text-sm text-neutral-300">
+        <div>ID: {prop.id}</div>
+        {prop.owner_id ? <div>Owner ID: {prop.owner_id}</div> : null}
+        {prop.city || prop.state || prop.postal_code ? (
+          <div>Location: {[prop.city, prop.state].filter(Boolean).join(", ")} {prop.postal_code||""}</div>
+        ) : null}
+      </div>
+    </div>
+  );
 }
*** End Patch
PATCH

############################################
# 3) Probe script — proves data for the ID you clicked
############################################
cat > tools/property_probe.sh <<'SH'
#!/usr/bin/env bash
set -e
id="${1:-42}"
echo "[ECC] Probing property id=$id"
echo -n "  /api/entities/properties/$id -> "
curl -s -o public/__audit/prop_by_id.json -w "%{http_code}\n" "http://localhost:3000/api/entities/properties/$id"
echo -n "  /api/portfolio/properties (filter) -> "
code=$(curl -s -o public/__audit/prop_list.json -w "%{http_code}" "http://localhost:3000/api/portfolio/properties")
echo "$code (saved)"
if [ -f public/__audit/prop_list.json ]; then
  echo "  match in list:"
  node - <<'NODE'
const fs = require('fs');
const id = Number(process.argv[2]||42);
try {
  const raw = fs.readFileSync('public/__audit/prop_list.json', 'utf8');
  const j = JSON.parse(raw);
  const items = j.items || j.data || (Array.isArray(j)?j:[]);
  const hit = (items||[]).find(p => Number(p?.id) === id);
  console.log(hit ? JSON.stringify(hit, null, 2) : '  (no match)');
} catch(e){ console.log('  (parse error)'); }
NODE
fi
SH
chmod +x tools/property_probe.sh

git add -A
git commit -m "fix(property-card): direct-by-id fetch, numeric id coercion, server entities route, probe script" || true

echo "✅ Patch applied. Restart server, then run: bash tools/property_probe.sh 42"
