1) Replit — Genesis Fix Pack α (paste as your next Replit prompt)
PLAN
Operating Mode: Consistency Enforcer + Surgical Fixer (no scope drift)

OBJECTIVES (from audit):
1) Owner Transfer uses mock data → wire to live APIs, remove mock fallbacks.
2) Asset Cards fail “Failed to load property” → fix fetch + base URL + error UI.
3) Systems › Integrations › Health not visible as hierarchy → correct nav structure.
4) Styling: Owner Transfer inner panels should be light grey per Altus theme.

GUARDRAILS
- Use wouter only; keep existing theme tokens/utilities; no new UI libs.
- Keep edits surgical; back up touched files as .bak.
- After patch, run verification commands and return a single, sectioned report with code excerpts.

CHANGESET
A) OWNER TRANSFER (remove mocks, wire live)
- Files: src/features/owners/routes/OwnerTransferPage.tsx, src/features/owners/components/OwnerTransferAudit.tsx, src/features/owners/components/OwnerTransferForm.tsx
- Remove mock objects and “|| mock” fallbacks:
  • OwnerTransferPage.tsx: remove `mockContext` and `const context = ownerContext || mockContext;`
  • Instead: fetch GET `${API_BASE}/api/owners/transferContext?id=<id>` on mount; show “No data yet” skeletons while loading; show inline error if non-200 with status code and body snippet.
  • Persist last-good context in component state to avoid flicker.
  • OwnerTransferAudit.tsx: remove `mockAuditEntries` fallback; fetch GET `${API_BASE}/api/audit/ownerTransfer?id=<id>` with polling (5s); render empty-state if 200 with empty array.

- OwnerTransferForm.tsx:
  • POST endpoints:
    - Initiate → `${API_BASE}/api/owners/initiateTransfer`
    - Approve → `${API_BASE}/api/owners/approveTransfer?id=<transferId>`
    - Authorize → `${API_BASE}/api/owners/authorizeTransfer?id=<transferId>`  // add if not present
    - Execute → `${API_BASE}/api/owners/executeTransfer?id=<transferId>`
  • Send header `x-admin-token: import.meta.env.VITE_ADMIN_SYNC_TOKEN ?? ""`.
  • Disable buttons if `!import.meta.env.VITE_ADMIN_SYNC_TOKEN`.
  • Show toast on success/error with HTTP status and short message.

- Create a tiny API helper `src/lib/api.ts`:
  ```ts
  const BASE = import.meta.env.VITE_API_BASE_URL || "";
  export async function api(path: string, init?: RequestInit) {
    const res = await fetch(BASE + path, init);
    const text = await res.text();
    let json: any = null; try { json = JSON.parse(text); } catch {}
    if (!res.ok) throw new Error(`${res.status} ${res.statusText} :: ${text.slice(0,200)}`);
    return json ?? {};
  }


Refactor OwnerTransfer files to use this helper.

B) ASSET CARDS (fix fetch + base URL + error UI)

Files likely: src/features/portfolio/hooks/usePropertyData.ts (and similar for units/leases if present).

Replace any relative fetch (/api/...) with BASE + "/api/..." using the same api() helper above.

Add explicit error capture: when non-200, surface the endpoint and id to the UI (“Could not load property #<id> from <endpoint> – <status>”).

If VITE_API_BASE_URL not set at runtime, show an inline warning in the card that backend base URL is missing.

C) NAV HIERARCHY (Systems › Integrations › Health)

File: src/config/navigation.ts

Under Systems group, ensure a parent “Integrations” section exists with a child item:

{
  title: "Integrations",
  icon: "Settings",
  children: [
    { title: "Health", path: "/systems/integrations", icon: "Shield" }
  ]
}


Ensure the single flat “Integrations” item is removed to avoid duplicates.

D) STYLING (Owner Transfer inner panels)

Scope: .owner-transfer-* panels on that page.

Set light grey panel background using our theme token (do not hardcode hex). If a token util like bg-ecc-gray-850 exists for light-grey panels, use that; else create a Tailwind class in the page: className="bg-[var(--ecc-gray-850)]" with border border-[var(--ecc-gray-700)].

Maintain dark page background; only the inner cards go light grey.

VERIFICATION (run and paste results)

Grep confirmations

rg -n "mockContext|mockAuditEntries" src/features/owners | sort || true
rg -n "VITE_API_BASE_URL" src | sort || true
rg -n "/systems/integrations" src/config/navigation.ts src/App.tsx | sort || true


Build-only check (no dev server)

jq '.dependencies["@tanstack/react-query"], .dependencies["wouter"]' package.json
npm run build || true


UI routes reachable (only if dev server already running from earlier; else skip)

Visit /owners/transfer?id=test123: form renders, no mock data visible; shows “No data yet” if backend dummy is active.

Visit /card/property/42: error UI, not a blank “Failed to load property”.

Return a single markdown report with:

Files changed (with line numbers).

Proof mock fallbacks removed.

Proof nav now shows Systems → Integrations → Health.

Screenshots (if your environment can capture).


---

# 2) Azure Cloud Shell — **Owner Transfer & Property APIs (secure stubs)**

Paste this in **Azure Cloud Shell (Bash)** to create secure, working endpoints the UI can hit immediately. It validates `x-admin-token` and fixes the property-by-id route.

```bash
# 0) Go to your Functions repo (adjust if different)
cd ~/altus-dealroom-backend || cd ~/empirecommand-backend || true

# 1) Create a tiny shared util for admin token
mkdir -p api/_lib
cat > api/_lib/admin.py <<'PY'
import os
from azure.functions import HttpRequest, HttpResponse

def require_admin(req: HttpRequest):
    expected = os.getenv("ADMIN_SYNC_TOKEN", "")
    got = req.headers.get("x-admin-token", "")
    if not expected or got != expected:
        return HttpResponse("unauthorized", status_code=401)
    return None
PY

# 2) Property by id endpoint (fixes 404s in cards)
mkdir -p api/entities/properties
cat > api/entities/properties/__init__.py <<'PY'
import json, os
import azure.functions as func

def main(req: func.HttpRequest) -> func.HttpResponse:
    # Expect path like /api/entities/properties?id=42  (or route mapped /api/entities/properties/42)
    pid = req.params.get("id") or req.route_params.get("id")
    if not pid:
        return func.HttpResponse("missing id", status_code=400)

    # TODO: replace with Supabase query
    # For now return a minimal JSON object so UI renders
    demo = {
        "id": pid,
        "name": f"Property #{pid}",
        "address": {"line1":"TBD","city":"TBD","state":"IN","zip":"TBD"},
        "units": [],
        "meta": {"source":"stub"}
    }
    return func.HttpResponse(json.dumps(demo), mimetype="application/json")
PY

# 3) Owner Transfer endpoints with admin header validation
mkdir -p api/owners
cat > api/owners/transferContext/__init__.py <<'PY'
import json
import azure.functions as func

def main(req: func.HttpRequest) -> func.HttpResponse:
    oid = req.params.get("id")
    # TODO: replace with Supabase query; return empty but valid shape for now
    ctx = {"ownerId": oid, "properties": [], "units": [], "leases": []}
    return func.HttpResponse(json.dumps(ctx), mimetype="application/json")
PY

cat > api/owners/initiateTransfer/__init__.py <<'PY'
import json
import azure.functions as func

def main(req: func.HttpRequest) -> func.HttpResponse:
    payload = req.get_json() if req.get_body() else {}
    # TODO insert DB row; return generated id
    return func.HttpResponse(json.dumps({"id":"ot-demo-1","status":"initiated"}), mimetype="application/json")
PY

cat > api/owners/approveTransfer/__init__.py <<'PY'
import azure.functions as func
from api._lib.admin import require_admin

def main(req: func.HttpRequest) -> func.HttpResponse:
    unauth = require_admin(req)
    if unauth: return unauth
    # TODO: update DB row to approved; add audit
    return func.HttpResponse("ok")
PY

cat > api/owners/authorizeTransfer/__init__.py <<'PY'
import azure.functions as func
from api._lib.admin import require_admin

def main(req: func.HttpRequest) -> func.HttpResponse:
    unauth = require_admin(req)
    if unauth: return unauth
    # TODO: update DB row to authorized; add audit
    return func.HttpResponse("ok")
PY

cat > api/owners/executeTransfer/__init__.py <<'PY'
import azure.functions as func
from api._lib.admin import require_admin

def main(req: func.HttpRequest) -> func.HttpResponse:
    unauth = require_admin(req)
    if unauth: return unauth
    # TODO: perform move + write audit
    return func.HttpResponse("ok")
PY

# 4) Commit and push (assumes GitHub Actions → Azure deploy already set up)
git add .
git commit -m "feat(api): secure owner-transfer endpoints + property-by-id stub"
git push

echo "=== Done. In Replit Secrets set VITE_API_BASE_URL and VITE_ADMIN_SYNC_TOKEN, then reload the UI. ==="