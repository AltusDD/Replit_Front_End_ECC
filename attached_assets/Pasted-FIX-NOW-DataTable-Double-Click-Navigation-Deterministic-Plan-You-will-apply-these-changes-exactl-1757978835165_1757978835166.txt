FIX NOW: DataTable Double-Click Navigation — Deterministic Plan

You will apply these changes exactly and stop on any error, printing the raw output. No improvisation.

Step 1 — Patch DataTable typing + navigation (no more silent failures)

Edit: src/components/DataTable.tsx

Extend the props interface to match how portfolio pages actually use the table:

// Top of file
export type DataTableProps<Row = any> = {
  columns: DataColumn<Row>[];
  rows: Row[];
  loading?: boolean;
  error?: string | null;

  getRowId?: (row: Row, idx: number) => string | number | undefined;

  // Navigation & actions
  rowHref?: (row: Row) => string;
  onRowDoubleClick?: (row: Row) => void;
  rowActions?: (row: Row) => React.ReactNode;

  // These are passed by portfolio pages; make them optional so TS stops complaining.
  csvName?: string;
  drawerTitle?: (row: Row) => string;
};


Harden row id + dbl-click handler so they cannot be undefined and cannot fail silently:

// Inside component body
import { useLocation } from "wouter"; // add at top
const [ , setLocation ] = useLocation();

const rowId = (row: Row, idx: number) =>
  (getRowId?.(row, idx)) ?? (row as any)?.id ?? idx;

function handleDbl(row: Row) {
  // Prefer SPA navigation; fall back to hard nav
  if (rowHref) {
    const href = rowHref(row);
    console.debug("[DT/DBL]", { href, row });
    if (typeof href === "string" && href.length > 0) {
      try { setLocation(href); }
      catch { window.location.assign(href); }
    } else {
      console.error("[DT/DBL] empty href for row", row);
    }
    return;
  }
  if (onRowDoubleClick) onRowDoubleClick(row);
  else setDrawerRow(row);
}


Bind the handler at the row level AND ensure clickability:

// Where you render rows
<tr
  key={rowId(row, idx)}
  data-testid="datatable-row"
  onDoubleClick={() => handleDbl(row)}
  className="ecc-row cursor-pointer hover:bg-white/5"
  role="button"
  tabIndex={0}
  onKeyDown={(e) => { if (e.key === "Enter") handleDbl(row); }}
>
  {/* …cells… */ }
</tr>


Add a tiny, accessible, always-present fallback link inside the first cell (this guarantees navigation even if dbl-click is blocked by the browser/OS):

<td className="min-w-[120px]">
  <div className="flex items-center gap-2">
    {rowHref && (
      <a
        data-testid="row-link"
        href={rowHref(row)}
        onClick={(e) => { e.preventDefault(); handleDbl(row); }}
        className="underline decoration-dotted underline-offset-4 opacity-70 hover:opacity-100"
        title="Open card"
      >
        Open
      </a>
    )}
    {/* existing cell content here */}
  </div>
</td>


CSS safety (ensure no element blocks pointer events on the row):

/* add to a global css like styles/app.css if needed */
.ecc-row * { pointer-events: auto; }


STOP & PRINT: TypeScript now reports no interface errors in DataTable and portfolio pages (show the Vite overlay cleared / terminal free of TS prop errors).

Step 2 — Normalize portfolio pages usage (make intent explicit)

For each portfolio page (src/pages/portfolio/*/index.tsx):

Keep rowHref={(row) => \/card/<entity>/${row.id}`}`.

Leave csvName and drawerTitle as-is (they’re now optional-typed).

Ensure the rows mapping sets id consistently (string is fine; routing converts to number on the card pages).

STOP & PRINT: one diff hunk per page confirming rowHref is present (Properties, Units, Leases, Tenants, Owners).

Step 3 — Instrumentation (prove dbl-click fires)

Add a one-time console when table mounts (top of component body):

useEffect(() => {
  console.debug("[DataTable] ready", { rows: rows?.length ?? 0 });
}, [rows?.length]);


Now run:

# dual-runner already exists in your repo
(timeout 120 node scripts/dev-runner.mjs >/tmp/dev.log 2>&1 &); sleep 10
echo "=== VITE PING ==="; curl -s http://localhost:5173/__vite_ping
echo "=== API HEALTH ==="; curl -s http://localhost:8787/api/health


Open /portfolio/properties, open DevTools Console, and double-click the first row.

Expected logs in console:

[DataTable] ready { rows: N }

[DT/DBL] { href: "/card/property/<id>", row: … }

STOP & PRINT: screenshot or raw console lines showing both logs and the location change to /card/property/<id>.

Step 4 — Automated smoke (no humans)

Create scripts/ui-nav-smoke.mjs:

import { chromium } from "playwright";

(async () => {
  const browser = await chromium.launch();
  const page = await browser.newPage();

  // 1) Properties table loads
  await page.goto("http://localhost:5173/portfolio/properties", { waitUntil: "networkidle" });
  await page.waitForSelector('[data-testid="datatable"]'); // your table testid

  // 2) Double-click first row
  const firstRow = (await page.$$('[data-testid="datatable-row"]'))[0];
  if (!firstRow) throw new Error("No rows rendered");
  await firstRow.dblclick();

  // 3) Assert we navigated to /card/property/<id>
  await page.waitForURL(/\/card\/property\/\d+/, { timeout: 5000 });
  console.log("NAV_OK", page.url());

  await browser.close();
})();


Run:

npx playwright install --with-deps chromium
node scripts/ui-nav-smoke.mjs


STOP & PRINT: must show NAV_OK http://localhost:5173/card/property/<id>.

Definition of Done (for this task)

No TypeScript prop errors for DataTable in Vite overlay/logs.

Console shows [DT/DBL] on double-click and navigates to the correct /card/<type>/<id>.

ui-nav-smoke.mjs prints NAV_OK …/card/property/<id>.

If any of these fail:

Re-check that rowHref is passed on that portfolio page.

Confirm <tr data-testid="datatable-row" … onDoubleClick={…}> is present in the compiled DOM (Elements tab).

Verify no overlaying element is blocking clicks (DevTools “pick element”, check box model and pointer-events).

Why this closes the loop

Typing fixed → No more TS/runtime mismatch and “silent prop drop”.

Navigation hardened → SPA route change with a hard-nav fallback.

Accessibility fallback link → Even if dbl-click fails, users can open.

Deterministic smoke → CI-friendly proof that double-click works.

Run this through Replit. When NAV_OK prints, your portfolio → card flow is unblocked and you can get back to contract/UI polish.