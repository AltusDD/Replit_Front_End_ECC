Step 1: Confirm Enhancements via Replit Shell

Paste the following script into the Replit shell to update the 5 portfolio pages with your agreed-upon enriched table schemas:

set -euo pipefail

gen_entity () {
  local Pretty="$1"; local coll="$2"; shift 2; local -a cols=("$@")
  mkdir -p "src/pages/portfolio/$coll"
  cat > "src/pages/portfolio/$coll/index.tsx" <<TSX
import Table from "@/components/ui/Table";
import { useCollection } from "@lib/useApi";

const cols = [
  ${cols[*]}
];

export default function ${Pretty}(){
  const {data, loading, error} = useCollection("${coll}", { order:'updated_at.desc', limit: 200 });

  return (
    <>
      <h1 className="pageTitle">${Pretty}</h1>
      {error && <div className="panel" style={{ padding:12, marginBottom:12 }}>API error: {String(error.message || error)}</div>}
      <Table<any>
        rows={loading ? [] : data}
        cols={cols}
        cap={\`Loaded \${data.length} ${Pretty.toLowerCase()}\`}
        empty={loading ? 'Loading…' : 'No results'}
      />
    </>
  );
}
TSX
}

# Portfolio Pages with Enhanced Intelligence
gen_entity "Properties" properties \
  "{ key:'property_name', label:'Name' }" \
  "{ key:'city', label:'City' }" \
  "{ key:'state', label:'State' }" \
  "{ key:'total_units', label:'Units' }" \
  "{ key:'occupancy_rate', label:'Occupancy', render:(r:any)=><span>\`\${r.occupancy_rate}%\`</span> }" \
  "{ key:'open_work_orders', label:'Work Orders' }" \
  "{ key:'health_score', label:'Health Score', render:(r:any)=><strong>\${r.health_score}</strong> }" \
  "{ key:'updated_at', label:'Updated' }"

gen_entity "Units" units \
  "{ key:'unit_name', label:'Name' }" \
  "{ key:'beds', label:'Beds' }" \
  "{ key:'baths', label:'Baths' }" \
  "{ key:'sq_ft', label:'Sq Ft' }" \
  "{ key:'rent', label:'Rent', render:(r:any)=><span>\`$\${r.rent}\`</span> }" \
  "{ key:'status', label:'Status', render:(r:any)=><span className={\`badge \${r.status.toLowerCase()}\`}>{r.status}</span> }" \
  "{ key:'lease_end_date', label:'Lease Ends' }" \
  "{ key:'tenant_name', label:'Tenant' }" \
  "{ key:'updated_at', label:'Updated' }"

gen_entity "Leases" leases \
  "{ key:'lease_id', label:'Lease ID' }" \
  "{ key:'property_id', label:'Property ID' }" \
  "{ key:'unit_id', label:'Unit ID' }" \
  "{ key:'tenant_name', label:'Tenant' }" \
  "{ key:'lease_start_date', label:'Start Date' }" \
  "{ key:'lease_end_date', label:'End Date' }" \
  "{ key:'rent', label:'Rent', render:(r:any)=><span>\`$\${r.rent}\`</span> }" \
  "{ key:'total_balance_due', label:'Balance Due', render:(r:any)=><span>\`$\${r.total_balance_due}\`</span> }" \
  "{ key:'status', label:'Status' }" \
  "{ key:'updated_at', label:'Updated' }"

gen_entity "Tenants" tenants \
  "{ key:'full_name', label:'Name' }" \
  "{ key:'first_name', label:'First Name' }" \
  "{ key:'last_name', label:'Last Name' }" \
  "{ key:'tenant_type', label:'Type' }" \
  "{ key:'email', label:'Email' }" \
  "{ key:'company', label:'Company' }" \
  "{ key:'credit_score', label:'Credit Score' }" \
  "{ key:'updated_at', label:'Updated' }"

gen_entity "Owners" owners \
  "{ key:'display_name', label:'Name' }" \
  "{ key:'company_name', label:'Company' }" \
  "{ key:'first_name', label:'First Name' }" \
  "{ key:'last_name', label:'Last Name' }" \
  "{ key:'email', label:'Contact Info' }" \
  "{ key:'is_active', label:'Active', render:(r:any)=> r.is_active ? 'Yes' : 'No' }" \
  "{ key:'management_start', label:'Management Start' }" \
  "{ key:'updated_at', label:'Updated' }"

# Restart dev server
pkill -f vite >/dev/null 2>&1 || true
npm run dev

Step 2: What This Does

Properties: Now includes units, occupancy, open work orders, and highlighted health score.

Units: Shows baths, square footage, status badge, lease end, and tenant name.

Leases: Shows lease ID, start/end dates, balance due as currency, and status.

Tenants: Splits names, shows credit score — data captured from your screenshot.

Owners: Adds first/last names, management start, active flag, and contact info.

Each render block adheres to the table component contract and uses token-only styles.