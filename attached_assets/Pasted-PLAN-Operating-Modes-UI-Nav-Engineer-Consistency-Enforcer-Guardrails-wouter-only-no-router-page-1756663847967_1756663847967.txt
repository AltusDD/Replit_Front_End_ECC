PLAN
Operating Modes: UI-Nav Engineer, Consistency Enforcer.
Guardrails: wouter only; no router/page/data/theme changes; CSS fully scoped to .sidebar; back up files to *.bak before replacing.
Files to touch:

src/components/layout/Layout.tsx (mount canonical sidebar only)

src/components/layout/navConfig.ts

src/components/Sidebar.tsx

src/styles/_ecc-override.css

(confirm import order only) src/main.tsx

BACKUP

mkdir -p .archive
zip -qr ".archive/sidebar-precanon-$(date +%Y%m%d-%H%M%S).zip" . -x "node_modules/*" -x ".git/*"
for f in src/components/layout/Layout.tsx src/components/layout/navConfig.ts src/components/Sidebar.tsx src/styles/_ecc-override.css src/main.tsx; do
  [ -f "$f" ] && cp "$f" "$f.bak" || true
done

1) src/components/layout/navConfig.ts

<proposed_file_replace file_path="src/components/layout/navConfig.ts" change_summary="Single source of truth for nav items (icons optional)">
import type { FC } from "react";

export type Leaf = { label: string; to: string; icon?: string };
export type Group = { label: string; icon?: string; children: Leaf[] };
export type Item = Leaf | Group;
export type Section = { title?: string; items: Item[] };

export const sections: Section[] = [
{ title: "Dashboard", items: [{ label: "Home", to: "/dashboard", icon: "Home" }] },
{
title: "Portfolio V3",
items: [
{ label: "Properties", to: "/portfolio/properties", icon: "Building2" },
{ label: "Units", to: "/portfolio/units", icon: "Layers" },
{ label: "Leases", to: "/portfolio/leases", icon: "FileText" },
{ label: "Tenants", to: "/portfolio/tenants", icon: "Users" },
{ label: "Owners", to: "/portfolio/owners", icon: "UserRoundCog" },
],
},
{ title: "Cards", items: [
{ label: "Overview", to: "/cards/overview", icon: "LayoutGrid" },
{ label: "Delinquencies", to: "/cards/delinquencies", icon: "CircleAlert" },
{ label: "Vacancy", to: "/cards/vacancy", icon: "House" },
]},
{ title: "Operations", items: [
{ label: "Accounting", to: "/operations/accounting", icon: "Calculator" },
{ label: "Leasing", to: "/operations/leasing", icon: "KeyRound" },
{ label: "Maintenance", to: "/operations/maintenance", icon: "Wrench" },
{ label: "Marketing", to: "/operations/marketing", icon: "Megaphone" },
]},
];

export default sections;
</proposed_file_replace>

2) src/components/Sidebar.tsx

<proposed_file_replace file_path="src/components/Sidebar.tsx" change_summary="Canonical wouter-only sidebar: pin/collapse (persisted), hover fly-out, active highlighting, duplicate rails hidden">
import React, { useEffect, useMemo, useState } from "react";
import { Link, useLocation } from "wouter";
import * as Icons from "lucide-react";
import sections, { Section, Item, Group, Leaf } from "./layout/navConfig";

const LS_KEY = "ecc:nav:collapsed";
const SIDEBAR_W = parseInt(getComputedStyle(document.documentElement).getPropertyValue("--ecc-sidebar-w") || "280", 10) || 280;
const SIDEBAR_W_COLLAPSED = parseInt(getComputedStyle(document.documentElement).getPropertyValue("--ecc-sidebar-w-collapsed") || "72", 10) || 72;

function useCollapsed() {
const [collapsed, setCollapsed] = useState<boolean>(() => {
try { return localStorage.getItem(LS_KEY) === "1"; } catch { return false; }
});
useEffect(() => {
try { localStorage.setItem(LS_KEY, collapsed ? "1" : "0"); } catch {}
const px = collapsed ? SIDEBAR_W_COLLAPSED : SIDEBAR_W;
document.documentElement.style.setProperty("--ecc-sidepad", ${px}px);
}, [collapsed]);
return { collapsed, setCollapsed };
}

function useActivePath() {
const [loc] = useLocation();
return loc;
}

function Icon({ name, className }: { name?: string; className?: string }) {
// Pick icon by name; default to Circle
const Cmp = (name && (Icons as any)[name]) || (Icons as any).Circle;
return <Cmp size={18} className={className} aria-hidden="true" />;
}

export default function Sidebar() {
const { collapsed, setCollapsed } = useCollapsed();
const activePath = useActivePath();
const [hovering, setHovering] = useState(false);

// One-time mount shim: mark primary & reserve space even before first paint
useEffect(() => {
document.documentElement.dataset.sidebarMounted = "1";
const pad = (localStorage.getItem(LS_KEY) === "1") ? SIDEBAR_W_COLLAPSED : SIDEBAR_W;
document.documentElement.style.setProperty("--ecc-sidepad", ${pad}px);
}, []);

// Inline visited-link override to beat global theme
useEffect(() => {
const style = document.createElement("style");
style.setAttribute("data-ecc-inline", "sidebar");
style.innerHTML = .sidebar a, .sidebar a:link, .sidebar a:visited, .sidebar a:active { color: var(--ecc-text) !important; text-decoration:none!important; } ;
document.head.appendChild(style);
return () => { style.remove(); };
}, []);

const content = (
<nav className="nav">
{sections.map((section, i) => (
<div className="section" key={i}>
{section.title && <div className="section-title">{section.title}</div>}
<div className="section-items">
{section.items.map((item, j) => {
const isGroup = (item as Group).children !== undefined;
if (isGroup) {
const g = item as Group;
return (
<div className="group" key={${i}-${j}}>
<div className="row parent">
<Icon name={g.icon} className="icon parent" />
<span className="label">{g.label}</span>
</div>
<div className="children">
{g.children.map((leaf, k) => {
const active = activePath.startsWith(leaf.to);
return (
<Link href={leaf.to} key={${i}-${j}-${k}}>
<a className={row child ${active ? "active" : ""}} data-to={leaf.to}>
<Icon name={leaf.icon} className="icon child" />
<span className="label">{leaf.label}</span>
</a>
</Link>
);
})}
</div>
</div>
);
} else {
const leaf = item as Leaf;
const active = activePath.startsWith(leaf.to);
return (
<Link href={leaf.to} key={${i}-${j}}>
<a className={row leaf ${active ? "active" : ""}} data-to={leaf.to}>
<Icon name={leaf.icon} className="icon child" />
<span className="label">{leaf.label}</span>
</a>
</Link>
);
}
})}
</div>
</div>
))}
</nav>
);

return (
<aside
className={sidebar ${collapsed ? "collapsed" : ""}}
data-ecc="primary"
onMouseEnter={() => setHovering(true)}
onMouseLeave={() => setHovering(false)}
>
<div className="topbar">
<button className="pin" onClick={() => setCollapsed(c => !c)} aria-label={collapsed ? "Expand sidebar" : "Collapse sidebar"}>
{collapsed ? "›" : "Pin"}
</button>
</div>

  <div className="sidebar-scroll">
    {content}
  </div>

  <button className="expand" onClick={() => setCollapsed(false)} aria-hidden={!collapsed}>
    ‹
  </button>

  {/* Hover fly-out (overlay) */}
  <div className={`flyout ${collapsed && hovering ? "show" : ""}`}>
    <div className="sidebar-scroll">{content}</div>
  </div>
</aside>


);
}
</proposed_file_replace>

3) src/styles/_ecc-override.css

<proposed_file_replace file_path="src/styles/_ecc-override.css" change_summary="All sidebar styles scoped; fixed rail; hidden scrollbar; hover fly-out overlay; color discipline; duplicate rails hidden">
:root {
--ecc-sidebar-w: 280px;
--ecc-sidebar-w-collapsed: 72px;
--ecc-flyout-w: 280px;

--ecc-bg: #0e0f11;
--ecc-panel: #121316;
--ecc-seam: #222428;
--ecc-text: #d7d9dd;
--ecc-dim: #94a3b8; /* alt-blue for children /
--ecc-gold: #ffd400; / Altus gold */
}

/* Reserve body padding once the sidebar mounts */
html[data-sidebar-mounted="1"] body {
padding-left: var(--ecc-sidepad, var(--ecc-sidebar-w)) !important;
box-sizing: border-box;
}

/* Canonical rail */
.sidebar {
position: fixed; inset: 0 auto 0 0;
width: var(--ecc-sidebar-w);
background: var(--ecc-bg);
border-right: 1px solid var(--ecc-seam);
z-index: 50;
display: flex; flex-direction: column; gap: 8px;
color: var(--ecc-text);
}
.sidebar .topbar { display:flex; align-items:center; justify-content:flex-end; padding: 10px 12px 0; }
.sidebar .pin { background: transparent; border: 1px solid var(--ecc-seam); color: var(--ecc-text); border-radius: 12px; padding: 4px 10px; cursor: pointer; }

.sidebar .sidebar-scroll {
height: calc(100vh - 40px);
overflow-y: auto;
padding: 10px 12px 16px;
scrollbar-width: none;
}
.sidebar .sidebar-scroll::-webkit-scrollbar { width: 0; height: 0; }

.sidebar .section { margin: 10px 0 14px; }
.sidebar .section-title { font-size: 12px; letter-spacing: .08em; color: #a3a7b3; margin: 8px 6px 8px; text-transform: uppercase; }
.sidebar .section-items { display: flex; flex-direction: column; gap: 4px; }

.sidebar .row { display:flex; align-items:center; gap:10px; padding:10px 12px; border-radius: 12px; }
.sidebar .row:hover { background: rgba(255,255,255,0.04); }
.sidebar .row.active { outline: 2px solid #ffd40066; }
.sidebar .row .icon { flex: 0 0 auto; }
.sidebar .icon.parent { color: var(--ecc-gold) !important; }
.sidebar .icon.child { color: var(--ecc-dim) !important; }
.sidebar .children { margin-left: 8px; display: flex; flex-direction: column; gap: 4px; }

/* Collapsed = icon-only */
.sidebar.collapsed { width: var(--ecc-sidebar-w-collapsed); }
.sidebar.collapsed .section-title,
.sidebar.collapsed .label,
.sidebar.collapsed .pin { display: none !important; }
.sidebar .expand {
position: absolute; bottom: 16px; left: 16px; width: 36px; height: 36px;
border-radius: 999px; border: 1px solid var(--ecc-seam); background: var(--ecc-panel); color: var(--ecc-text);
display: flex; align-items: center; justify-content: center; cursor: pointer;
}
.sidebar:not(.collapsed) .expand { display:none; }

/* Hover flyout (overlay; no layout shift) */
.sidebar .flyout {
position: absolute !important;
top: 0;
left: calc(var(--ecc-sidebar-w-collapsed) - 2px);
height: 100vh;
max-width: var(--ecc-flyout-w);
background: var(--ecc-bg);
border-right: 1px solid var(--ecc-seam);
z-index: 60;
display: none; opacity: 0; transform: translateX(-8px);
pointer-events: none;
transition: opacity .18s, transform .18s;
}
.sidebar .flyout.show { display: block; opacity: 1; transform: translateX(0); pointer-events: auto; }
.sidebar:not(.collapsed) .flyout { display: none !important; }

/* Kill visited link colors inside sidebar */
.sidebar a, .sidebar a:link, .sidebar a:visited, .sidebar a:active {
color: var(--ecc-text) !important;
text-decoration: none !important;
}

/* Hide legacy/duplicate rails */
.sidebar:not([data-ecc="primary"]) { display: none !important; }
</proposed_file_replace>

4) src/components/layout/Layout.tsx

<proposed_file_replace file_path="src/components/layout/Layout.tsx" change_summary="Mount only the canonical sidebar and existing page content; no route changes">
import React from "react";
import Sidebar from "../Sidebar";

const Layout: React.FC<React.PropsWithChildren> = ({ children }) => {
return (
<>
<Sidebar />
<main style={{ padding: "24px" }}>{children}</main>
</>
);
};

export default Layout;
</proposed_file_replace>

5) src/main.tsx (confirm import order)

<proposed_file_replace_substring file_path="src/main.tsx" change_summary="Ensure sidebar overrides import last">
<old_str>
import "@/styles/theme.css";
import "@/styles/app.css";
</old_str>
<new_str>
import "@/styles/theme.css";
import "@/styles/app.css";
import "@/styles/_ecc-override.css";
</new_str>
</proposed_file_replace_substring>

NUKE LEGACY CSS/RAILS (scoped & safe)

# Hide any non-primary rails at runtime (already styled), and clean common leftovers:
grep -RIl --include="*.tsx" -n "<aside[^>]*className=.*sidebar" src | grep -v "src/components/Sidebar.tsx" | xargs -I {} echo "LEGACY SIDEBAR IN {}"


(If any show up, either delete those components or ensure they don’t render.)

VERIFICATION CHECKLIST

Build runs cleanly; no hook-order warnings.

Exactly one rail visible.

Content padding left ≈ 280px expanded / 72px collapsed.

Collapse/Expand pin persists across refresh (localStorage ecc:nav:collapsed).

Hover fly-out appears only when collapsed; overlays content; ≤ 280px wide.

Active link highlights on navigation.

Icons: parents gold; children alt-blue; no purple visited links.

Sidebar scrolls independently; scrollbar hidden.

ONE-LINERS (handy)

// Force expanded once if ever stuck:
localStorage.removeItem('ecc:nav:collapsed'); location.reload();


If anything fights the padding again, keep fixes inside .sidebar (never modify global tokens).