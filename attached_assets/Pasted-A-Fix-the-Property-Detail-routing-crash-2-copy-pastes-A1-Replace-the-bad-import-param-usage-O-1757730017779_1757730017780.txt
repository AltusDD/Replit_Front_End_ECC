A) Fix the Property Detail routing crash (2 copy-pastes)
A1) Replace the bad import + param usage

Open src/features/portfolio/pages/PropertyDetailPage.tsx and do this exact replacement at the top:

// REMOVE this line:
// import { useParams } from "react-router-dom";

// ADD these lines:
import { useRoute } from "wouter";


Find where id is read (it likely says const { id } = useParams();) and replace with:

const [match, params] = useRoute("/portfolio/properties/:id");
const id = params?.id;


That‚Äôs it. The page will stop crashing.

B) Ship now (staging) and close the security hole (BFF proxy)

Right now the frontend sends VITE_ADMIN_SYNC_TOKEN in the browser. We‚Äôre moving that token server-side into a tiny proxy so the browser never sees it.

B1) Secrets (left sidebar ‚Äúüîí Secrets‚Äù in Replit)

Add these (not VITE_):

ADMIN_SYNC_TOKEN = your current admin token (the one that returned 200 in Cloud Shell)

API_BASE_URL = https://empirecommandcenter-altus-staging.azurewebsites.net

Then remove this one (delete it):

VITE_ADMIN_SYNC_TOKEN

B2) Create the BFF server routes (one file)

Create a new file server/bff.js with this content:

// server/bff.js
import express from "express";

const app = express();
app.use(express.json());

const BASE = (process.env.API_BASE_URL || "").replace(/\/$/, "");
const ADMIN = process.env.ADMIN_SYNC_TOKEN || "";

function forward(step) {
  return async (req, res) => {
    try {
      const r = await fetch(`${BASE}/api/owners/${step}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "x-admin-token": ADMIN,          // token never leaves the server
        },
        body: JSON.stringify(req.body || {}),
      });
      const text = await r.text();
      res.status(r.status);
      // try to keep content-type from the upstream
      const ct = r.headers.get("content-type") || "application/json";
      res.setHeader("content-type", ct);
      res.send(text);
    } catch (e) {
      res.status(500).json({ error: String(e) });
    }
  };
}

app.post("/bff/owners/approvetransfer",   forward("approvetransfer"));
app.post("/bff/owners/authorizetransfer", forward("authorizetransfer"));
app.post("/bff/owners/executetransfer",   forward("executetransfer"));

export default app;

B3) Register the BFF with your existing server

Open server/index.js (or server/index.ts). At the top add:

import bff from "./bff.js";


Then, after you create your Express app (usually const app = express()), add:

app.use(bff);


If you don‚Äôt have a server/index.js, create one with:

// server/index.js
import express from "express";
import bff from "./bff.js";

const app = express();
app.use(express.json());
app.use(bff);

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server ready on :${PORT}`);
});

B4) Point the frontend to the BFF (1 file)

Open src/lib/ecc-api.ts and replace the three admin calls to hit the BFF instead of Azure directly.

Find this block (or similar):

export const Owners = {
  // ...
  approve:   (transferId: string) => apiPost("/api/owners/approvetransfer",   { transferId }, true),
  authorize: (transferId: string) => apiPost("/api/owners/authorizetransfer", { transferId }, true),
  execute:   (transferId: string) => apiPost("/api/owners/executetransfer",   { transferId }, true),
};


Replace with:

export const Owners = {
  // ...
  approve:   (transferId: string) => apiPost("/bff/owners/approvetransfer",   { transferId }),
  authorize: (transferId: string) => apiPost("/bff/owners/authorizetransfer", { transferId }),
  execute:   (transferId: string) => apiPost("/bff/owners/executetransfer",   { transferId }),
};


Also: at the top of src/lib/ecc-api.ts, remove any code that reads VITE_ADMIN_SYNC_TOKEN, and remove the logic that conditionally adds x-admin-token in apiPost()‚Äîit is no longer needed.

A minimal safe header block is:

export async function apiPost<T = unknown>(path: string, body?: any) {
  const res = await fetch(`${BASE}${path}`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: body ? JSON.stringify(body) : undefined,
  });
  if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
  return (await res.json()) as T;
}

B5) Restart the Replit and test

Open /data and run the transfer buttons:

initiate ‚Üí should return a transferId

approve (now goes through /bff/owners/approvetransfer) ‚Üí 200

authorize ‚Üí 200

execute ‚Üí 200

Network tab will show calls to /bff/ only‚Äîno admin token in the browser anymore.

C) Quick backend sanity (optional, paste-and-run in Azure Cloud Shell)
RG="empirecommandcenter-altus-staging_group"
APP="empirecommandcenter-altus-staging"
BASE="https://$APP.azurewebsites.net"

echo "Host:" && curl -s -i "$BASE/admin/host/status" | head -n1
echo "Owners:" && curl -s -i "$BASE/api/entities/owners?select=id,display_name,primary_email,primary_phone&order=id.desc&limit=3" | head -n1
echo "Tenants:" && curl -s -i "$BASE/api/entities/tenants?select=id,display_name,primary_email,primary_phone&order=id.desc&limit=3" | head -n1
echo "Leases:" && curl -s -i "$BASE/api/entities/leases?select=doorloop_id,property_id,unit_id,primary_tenant_id,status&order=id.desc&limit=3" | head -n1


You should see HTTP/1.1 200 OK for all four.

D) What we just accomplished

‚úÖ Property details route fixed (no more crash)

‚úÖ Frontend still works with your live Azure Functions

‚úÖ Admin token removed from the browser (moved to server-side BFF)

‚úÖ Owner transfer workflow still 200/OK, now via /bff/*

If you want me to, I can also give you one paste-in to add a simple ‚ÄúTheme switcher‚Äù and a React Query wrapper for the DataHub next‚Äîbut the two blocks above get you stable, secure, and unblocked right now.