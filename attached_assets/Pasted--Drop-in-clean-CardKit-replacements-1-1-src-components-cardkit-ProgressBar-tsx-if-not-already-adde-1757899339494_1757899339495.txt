) Drop in clean CardKit replacements
1.1 src/components/cardkit/ProgressBar.tsx (if not already added)
export default function ProgressBar({
  percent,
  value,
  max = 100,
  testid = "progress",
  ariaLabel,
}: {
  percent?: number | null;
  value?: number | null;
  max?: number;
  testid?: string;
  ariaLabel?: string;
}) {
  let p = typeof percent === "number" ? percent : (Number(value ?? 0) / Number(max || 100)) * 100;
  if (!Number.isFinite(p)) p = 0;
  p = Math.max(0, Math.min(100, Math.round(p)));
  const gold = "var(--altus-gold, #C8A948)";
  return (
    <div className="w-full h-2 rounded bg-neutral-800 overflow-hidden" data-testid={testid} aria-label={ariaLabel || "progress"}>
      <div className="h-full" style={{ width: `${p}%`, backgroundColor: gold }} />
    </div>
  );
}

1.2 src/components/cardkit/StatusTag.tsx (new)
type Props = { status?: string | null; testid?: string };
export default function StatusTag({ status, testid = "status-tag" }: Props) {
  const s = String(status ?? "").toLowerCase();
  const variant =
    s === "active" || s === "current" || s === "occupied" ? "ok" :
    s === "pending" || s === "future" ? "warn" :
    s === "ended" || s === "terminated" || s === "closed" ? "bad" : "info";
  const cls =
    variant === "ok"   ? "bg-emerald-900/40 text-emerald-300 border-emerald-700" :
    variant === "warn" ? "bg-amber-900/40 text-amber-300 border-amber-700" :
    variant === "bad"  ? "bg-rose-900/40 text-rose-300 border-rose-700" :
                         "bg-neutral-800 text-neutral-200 border-neutral-700";
  return (
    <span data-testid={testid} className={`inline-flex items-center px-2 py-0.5 rounded border ${cls}`}>
      {status ?? "—"}
    </span>
  );
}

2) Fix the broken imports in portfolio tables

Edit src/pages/portfolio/columns.tsx and replace the legacy imports:

- import ProgressBar from "../../features/portfolio/components/ProgressBar";
- import StatusTag from "../../features/portfolio/components/StatusTag";
+ import ProgressBar from "@/components/cardkit/ProgressBar";
+ import StatusTag from "@/components/cardkit/StatusTag";


If any other portfolio files import from features/portfolio/components/*, switch them to the CardKit paths above.

Run a repo-wide sweep to catch all legacy table imports (alias or relative):

# show any remaining legacy imports (should print nothing after edits)
grep -RIn \
  -e "features/portfolio/components/" \
  -e "@/features/portfolio/components" \
  src || true


If anything shows up, change those imports to @/components/cardkit/* the same way.

3) Strengthen guardrail to catch relative legacy imports across the repo

Append this to scripts/guardrail-check.mjs (if not present already):

// Legacy imports anywhere in src (alias or relative)
import fs from "fs"; import path from "path"; import glob from "glob";
let failures = 0;
for (const rel of glob.sync("src/**/*.{ts,tsx,js,jsx}", { cwd: process.cwd() })) {
  const s = fs.readFileSync(path.join(process.cwd(), rel), "utf8");
  if (s.includes("@/features/portfolio/components") ||
      /features\/portfolio\/components\//.test(s)) {
    console.error("[guardrail] forbidden legacy import in", rel);
    failures++;
  }
}
if (failures) { process.exit(1); }


Run it:

npm run guardrail


It must PASS.

4) Clean rebuild (clear Vite/HMR drift)
# remove stale vite caches
rm -rf node_modules/.vite .vite dist .cache .parcel-cache 2>/dev/null || true

# (optional) silence Vite warning by removing optimizeDeps.disabled from vite config
# open vite.config.* and delete any 'optimizeDeps: { disabled: ... }' block

npm ci
npm run guardrail
npm run dev


You should now see Vite come up clean, with no “Failed to resolve import …/features/portfolio/components/ProgressBar” errors.

5) Runtime proofs (tables + cards)

Open http://localhost:5173/portfolio/properties
→ Table renders; any occupancy/health cells using ProgressBar display; no console import errors.

Open card pages (replace IDs with real ones):

/card/property/42

/card/unit/172

/card/lease/1

/card/tenant/1

/card/owner/1
→ Hero test IDs present; values render (non-blank when data exists).

API proofs:

curl -s "http://localhost:8787/api/rpc/get_property_card?id=42" | jq '{kpis:.kpis, city:.property.city}'
curl -s "http://localhost:8787/api/rpc/get_tenant_card?id=1" | jq '{hasActiveLease:(.activeLease!=null)}'
curl -s "http://localhost:8787/api/rpc/get_owner_card?id=1" | jq '{units:(.kpis.units), avg:(.kpis.avgRentCents)}'

Why it failed & why this holds

The vite error was caused by a relative import to a deleted legacy component inside src/pages/portfolio/columns.tsx. We replaced it with CardKit components and enforced an expanded guardrail that now scans the entire repo for both alias and relative legacy imports.

Clean rebuild clears stale HMR bundles so you’re running the code you just fixed.

If any other file still references features/portfolio/components, change it to @/components/cardkit/* and re-run npm run guardrail — it will now catch every instance.