PROMPT 1 — Shared shell + tabs (reusable, tiny)

File: src/components/AssetCardShell.tsx

import React from "react";

export default function AssetCardShell({
  title,
  actions,
  hero,
  tabs,
  rightRail,
}: {
  title: React.ReactNode;
  actions?: React.ReactNode;
  hero?: React.ReactNode;
  tabs: React.ReactNode;        // your <Tabs> with tab content
  rightRail?: React.ReactNode;  // stack of sections
}) {
  return (
    <div style={{ display: "grid", gridTemplateColumns: "1fr 340px", gap: 16, alignItems: "start" }}>
      <div>
        <section className="ecc-object" style={{ marginBottom: 12 }}>
          <div className="ecc-header">
            <div className="ecc-title">{title}</div>
            <div className="ecc-actions">{actions}</div>
          </div>
          {hero}
        </section>
        {tabs}
      </div>
      {rightRail ? <aside style={{ display: "grid", gap: 12 }}>{rightRail}</aside> : null}
    </div>
  );
}


File: src/components/Tabs.tsx

import React, { useState } from "react";
import { Block } from "./Skeleton";

export type Tab = { key: string; label: string; render: () => React.ReactNode };

export default function Tabs({ tabs, defaultKey }: { tabs: Tab[]; defaultKey?: string }) {
  const [active, setActive] = useState(defaultKey ?? tabs[0]?.key);
  const current = tabs.find(t => t.key === active);

  return (
    <div>
      <div role="tablist" aria-label="Card Tabs" className="ecc-object" style={{ padding: 8, marginBottom: 12 }}>
        {tabs.map(t => (
          <button key={t.key} role="tab" aria-selected={active === t.key} onClick={() => setActive(t.key)} style={{ marginRight: 8 }}>
            {t.label}
          </button>
        ))}
      </div>
      <section className="ecc-object">
        {current ? current.render() : <Block h={120} />}
      </section>
    </div>
  );
}

PROMPT 2 — Map box, field rows, skeletons (if not already present)

Create/verify these (leave them if they already exist from earlier steps).

src/components/GeoMap.tsx

import React from "react";
import Section from "./Section";
import { isFiniteNumber } from "../lib/format";

const mapsHref = (addr: string) => `https://www.google.com/maps?q=${encodeURIComponent(addr)}`;

export default function GeoMap({
  title = "Location",
  address,
  lat,
  lng,
}: {
  title?: string;
  address?: string;
  lat?: number | null;
  lng?: number | null;
}) {
  const hasAddr = !!address && address !== "—";
  const hasCoords = isFiniteNumber(lat) && isFiniteNumber(lng);
  let src: string | null = null;

  if (hasCoords) {
    const pad = 0.005;
    const bbox = [lng! - pad, lat! - pad, lng! + pad, lat! + pad].join(",");
    src = `https://www.openstreetmap.org/export/embed.html?bbox=${bbox}&layer=mapnik&marker=${lat},${lng}`;
  } else if (hasAddr) {
    src = `https://www.google.com/maps?q=${encodeURIComponent(address!)}&output=embed`;
  }

  return (
    <Section title={title} actions={hasAddr ? <a href={mapsHref(address!)} target="_blank" rel="noreferrer">Open in Maps</a> : null}>
      {src ? (
        <div style={{ borderRadius: 12, overflow: "hidden" }}>
          <iframe title="map" src={src} style={{ width: "100%", height: 260, border: 0 }} loading="lazy" />
        </div>
      ) : (
        <div style={{ opacity: 0.8 }}>No coordinates or address available.</div>
      )}
    </Section>
  );
}


src/components/FieldRows.tsx

import React from "react";
export function FieldRows({ rows }: { rows: { label: string; value?: React.ReactNode }[] }) {
  return (
    <div style={{ display: "grid", gap: 8 }}>
      {rows.map((r, i) => (
        <div key={i} style={{ display: "grid", gridTemplateColumns: "160px 1fr", gap: 8 }}>
          <div className="ecc-label" style={{ textTransform: "none" }}>{r.label}</div>
          <div style={{ textTransform: "none" }}>{r.value ?? "—"}</div>
        </div>
      ))}
    </div>
  );
}


src/components/Skeleton.tsx

import React from "react";
export function Line({ w = "100%", h = 12 }: { w?: number | string; h?: number }) {
  return (
    <div className="ecc-object" style={{
      height: h, width: typeof w === "number" ? `${w}px` : w,
      background: "linear-gradient(90deg, rgba(255,255,255,0.06), rgba(255,255,255,0.14), rgba(255,255,255,0.06))",
      backgroundSize: "200% 100%", animation: "ecc-shimmer 1.2s linear infinite", opacity: 0.35 }} />
  );
}
export function Block({ h = 96 }: { h?: number }) { return <div className="ecc-object" style={{ height: h, opacity: 0.35 }} />; }


src/lib/format.ts

export function titleCase(s?: string | null) {
  if (!s) return "—";
  return s.replace(/_/g, " ").toLowerCase().replace(/\b\w/g, c => c.toUpperCase());
}
export function humanize(s?: string | null) { return titleCase(s); }
export function joinAddress(parts: Array<string | null | undefined>) {
  const v = parts.filter(Boolean).join(", "); return v || "—";
}
export function isFiniteNumber(n: any): n is number { return typeof n === "number" && Number.isFinite(n); }
export function moneyCents(n?: number | null) {
  if (n == null) return "—"; const d = Math.round(n)/100;
  try { return d.toLocaleString(undefined,{style:"currency",currency:"USD",maximumFractionDigits:0}); }
  catch { return `$${Math.round(d)}`; }
}

PROMPT 3 — Property KPIs (live reads), Hero rail, Right Rail, Tabs

Edit only this file; keep all existing logic and lists/tables.

File: src/pages/card/property/index.tsx

3A) Add imports at the top
import AssetCardShell from "../../../components/AssetCardShell";
import Tabs, { Tab } from "../../../components/Tabs";
import Section from "../../../components/Section";
import GeoMap from "../../../components/GeoMap";
import { FieldRows } from "../../../components/FieldRows";
import { Line, Block } from "../../../components/Skeleton";
import { humanize, joinAddress, moneyCents } from "../../../lib/format";
import { apiGet } from "../../../lib/ecc-api";
import { useQuery } from "@tanstack/react-query";
import { Link } from "wouter";

3B) Add a small KPI hook & skeleton (place above the default export)
function usePropertyKpis(p: { id: number; doorloop_id?: string | null }) {
  return useQuery({
    queryKey: ["property-kpis", p.id, p.doorloop_id],
    queryFn: async () => {
      const units = p.doorloop_id
        ? await apiGet("/api/entities/units", { params: { select: "id,rent_cents", doorloop_property_id: `eq.${p.doorloop_id}` } })
        : [];
      const leases = await apiGet("/api/entities/leases", { params: { select: "status,rent_cents", property_id: `eq.${p.id}` } });

      const unitCount = Array.isArray(units) ? units.length : 0;
      const activeLeases = (leases || []).filter((l: any) => (l?.status || "").toLowerCase() === "active").length;
      const occupancyPct = unitCount ? Math.round((Math.min(activeLeases, unitCount) / unitCount) * 100) : null;

      const unitRents = (units || []).map((u: any) => u?.rent_cents).filter((v: any) => typeof v === "number");
      const leaseRents = (leases || []).map((l: any) => l?.rent_cents).filter((v: any) => typeof v === "number");
      const avgRentCents = unitRents.length
        ? Math.round(unitRents.reduce((a: number, b: number) => a + b, 0) / unitRents.length)
        : leaseRents.length
        ? Math.round(leaseRents.reduce((a: number, b: number) => a + b, 0) / leaseRents.length)
        : null;

      return { unitCount, activeLeases, occupancyPct, avgRentCents };
    },
  });
}

function PropertySkeleton() {
  return (
    <div style={{ display: "grid", gridTemplateColumns: "1fr 340px", gap: 16, alignItems: "start" }}>
      <section className="ecc-object"><div className="ecc-header"><Line w={260} /><div /></div><Block h={96} /></section>
      <aside><Section title={<Line w={180} />}><Block h={260} /></Section></aside>
    </div>
  );
}

3C) In the component render: derive clean values and assemble the shell

Find where property and isLoading are available. Replace the top-level return with the following block (adapt variable names if yours differ). Do not remove your existing details/lists later in the file—keep them; we’re just adding a proper shell up top.

// Guard: show boxed skeleton while loading
if (typeof isLoading !== "undefined" ? isLoading : !property) {
  return <PropertySkeleton />;
}

const addr = joinAddress([property?.street_1, property?.city, property?.state, property?.zip]);
const type = humanize(property?.type || property?.property_type);
const klass = humanize(property?.class || property?.property_class);
const status = humanize(property?.status);
const lat = (property as any)?.lat ?? (property as any)?.latitude ?? null;
const lng = (property as any)?.lng ?? (property as any)?.longitude ?? null;

// KPIs
const kpis = usePropertyKpis({ id: property.id, doorloop_id: property.doorloop_id });
const k = kpis.data;

const hero = (
  <div style={{ display: "grid", gridTemplateColumns: "repeat(4, minmax(0,1fr))", gap: 12 }}>
    <div className="ecc-object" style={{ padding: 12 }}>
      <div className="ecc-label">Units</div>
      <div style={{ fontSize: 20, fontWeight: 700 }}>{k?.unitCount ?? "—"}</div>
    </div>
    <div className="ecc-object" style={{ padding: 12 }}>
      <div className="ecc-label">Occupancy</div>
      <div style={{ fontSize: 20, fontWeight: 700 }}>{k?.occupancyPct == null ? "—" : `${k.occupancyPct}%`}</div>
    </div>
    <div className="ecc-object" style={{ padding: 12 }}>
      <div className="ecc-label">Active Leases</div>
      <div style={{ fontSize: 20, fontWeight: 700 }}>{k?.activeLeases ?? "—"}</div>
    </div>
    <div className="ecc-object" style={{ padding: 12 }}>
      <div className="ecc-label">Avg Rent</div>
      <div style={{ fontSize: 20, fontWeight: 700 }}>{moneyCents(k?.avgRentCents ?? null)}</div>
    </div>
  </div>
);

// Tabs
const tabs: Tab[] = [
  {
    key: "overview",
    label: "Overview",
    render: () => (
      <div style={{ display: "grid", gap: 12 }}>
        <Section title="Property Overview">
          <FieldRows rows={[
            { label: "Address", value: addr },
            { label: "Type", value: type },
            { label: "Class", value: klass },
            { label: "Status", value: status },
            { label: "IDs", value: <>#{property?.id}{property?.doorloop_id ? <> • DL {property.doorloop_id}</> : null}</> },
          ]}/>
        </Section>
        {/* Keep your legacy blocks below if desired */}
      </div>
    ),
  },
  {
    key: "details",
    label: "Details",
    render: () => (
      <div style={{ display: "grid", gap: 12 }}>
        <Section title="Address">
          <FieldRows rows={[
            { label: "Street", value: property?.street_1 || "—" },
            { label: "City/State/ZIP", value: `${property?.city ?? "—"}, ${property?.state ?? "—"} ${property?.zip ?? ""}` },
          ]}/>
        </Section>
        <Section title="System">
          <FieldRows rows={[
            { label: "DoorLoop ID", value: property?.doorloop_id || "—" },
            { label: "Internal ID", value: property?.id ?? "—" },
          ]}/>
        </Section>
      </div>
    ),
  },
  {
    key: "linked",
    label: "Linked",
    render: () => (
      <Section title="Relationships">
        <div style={{ display: "flex", flexWrap: "wrap", gap: 8 }}>
          {"owner_id" in (property || {}) && property?.owner_id ? (
            <Link href={`/card/owner/${property.owner_id}`}><a className="ecc-object" style={{ padding: 8 }}>Open Owner</a></Link>
          ) : null}
          <Link href="/portfolio"><a className="ecc-object" style={{ padding: 8 }}>Back to Properties</a></Link>
        </div>
      </Section>
    ),
  },
  {
    key: "files",
    label: "Files",
    render: () => <Section title="Files">No files listed.</Section>,
  },
  {
    key: "activity",
    label: "Activity",
    render: () => <Section title="Activity">No activity available.</Section>,
  },
];

const actions = (
  <div style={{ display: "flex", gap: 8 }}>
    <button className="ecc-object" style={{ padding: "8px 12px" }}>Edit</button>
    <button className="ecc-object" style={{ padding: "8px 12px" }}>Export PDF</button>
    <button className="ecc-object" style={{ padding: "8px 12px" }}>New Work Order</button>
  </div>
);

const rightRail = (
  <>
    <GeoMap address={addr} lat={lat as any} lng={lng as any} />
    <Section title="Risk Score">
      <div style={{ fontSize: 28, fontWeight: 800 }}>—</div>
      <div className="ecc-label">Key Factors</div>
      <div style={{ opacity: 0.8 }}>None listed.</div>
    </Section>
    <Section title="Key Dates">
      <div style={{ opacity: 0.8 }}>No upcoming events.</div>
    </Section>
  </>
);

return (
  <AssetCardShell
    title={<div style={{ fontSize: 20, fontWeight: 700 }}>{addr !== "—" ? addr : "Property"}</div>}
    actions={actions}
    hero={hero}
    tabs={<Tabs tabs={tabs} defaultKey="overview" />}
    rightRail={rightRail}
  />
);

PROMPT 4 — Typography guard (avoid accidental ALL-CAPS everywhere)

Append to: src/styles/card-enhancer.css

/* Keep text natural case in all boxed content */
.ecc-object, .ecc-object * { text-transform: none; }
.ecc-label { opacity: .75; font-size: 12px; }

Quick smoke (Property)

Hard refresh.

Go to /card/property/<real id>.
You should see:

A header with actions,

A 4-tile Hero KPI rail (Units / Occupancy / Active Leases / Avg Rent),

Tabs: Overview, Details, Linked, Files, Activity (clean labels; you can add more later),

A Right Rail with Map & Location, Risk Score, Key Dates,

All boxes in the light-grey surface, humanized text, no underscores, no ALL-CAPS, and skeletons while loading.