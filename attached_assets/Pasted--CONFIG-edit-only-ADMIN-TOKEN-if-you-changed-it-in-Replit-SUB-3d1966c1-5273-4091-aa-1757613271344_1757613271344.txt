# ===== CONFIG (edit only ADMIN_TOKEN if you changed it in Replit) =====
SUB="3d1966c1-5273-4091-aab4-07c125e7b96d"
RG="empirecommandcenter-altus-staging_group"
APP="empirecommandcenter-altus-staging"
LOC="centralus"
ADMIN_TOKEN='10R#$EoQLUfpMe^M'

set -euo pipefail
az account set --subscription "$SUB"

# Ensure a storage account exists
SA="$(az storage account list -g "$RG" --query "[0].name" -o tsv || true)"
if [ -z "${SA:-}" ] || [ "$SA" = "null" ]; then
  SA="eccstg$RANDOM$RANDOM"
  az storage account create -n "$SA" -g "$RG" -l "$LOC" --sku Standard_LRS 1>/dev/null
fi
CONN="$(az storage account show-connection-string -g "$RG" -n "$SA" -o tsv --query connectionString)"

# Tell Functions to build Python deps on deploy
az functionapp config appsettings set -g "$RG" -n "$APP" --settings \
  AzureWebJobsStorage="$CONN" \
  FUNCTIONS_WORKER_RUNTIME="python" \
  FUNCTIONS_EXTENSION_VERSION="~4" \
  WEBSITE_RUN_FROM_PACKAGE="1" \
  SCM_DO_BUILD_DURING_DEPLOYMENT="1" \
  ENABLE_ORYX_BUILD="true" \
  ADMIN_SYNC_TOKEN="$ADMIN_TOKEN" 1>/dev/null

# Build a fresh, minimal but working app bundle
WORKDIR="$(mktemp -d)"
cd "$WORKDIR"

# host.json
cat > host.json <<'JSON'
{"version":"2.0","extensionBundle":{"id":"Microsoft.Azure.Functions.ExtensionBundle","version":"[3.*, 4.0.0)"}}
JSON

# requirements.txt â€” let Kudu/Oryx install this
cat > requirements.txt <<'REQ'
azure-functions==1.21.3
REQ

mkfunc(){
  NAME="$1" ROUTE="$2" METHODS="$3"
  mkdir -p "$NAME"
  # function.json
  cat > "$NAME/function.json" <<JSON
{
  "scriptFile": "__init__.py",
  "bindings": [
    { "authLevel": "anonymous", "type": "httpTrigger", "direction": "in",
      "name": "req", "methods": $METHODS, "route": "$ROUTE" },
    { "type": "http", "direction": "out", "name": "res" }
  ]
}
JSON
}

# Simple helper __init__.py templates
stub_entity_py='
import json, azure.functions as func
def main(req: func.HttpRequest) -> func.HttpResponse:
    id_from_route = req.route_params.get("id")
    id_from_query = req.params.get("id")
    _id = id_from_route or id_from_query or "0"
    body = {
        "id": _id,
        "type": req.route_params.get("entity","entity"),
        "name": f"{req.route_params.get('entity','Entity').title()} #{_id}",
        "status": "ok",
        "updatedAt": "2025-09-11T00:00:00Z"
    }
    return func.HttpResponse(json.dumps(body), mimetype="application/json")
'

stub_ok_py='
import json, azure.functions as func
def main(req: func.HttpRequest) -> func.HttpResponse:
    return func.HttpResponse(json.dumps({"ok": True}), mimetype="application/json")
'

owners_search_py='
import json, azure.functions as func
def main(req: func.HttpRequest) -> func.HttpResponse:
    q = (req.params.get("q") or "").strip()
    items = [{"id":"1","name":"Altus Capital"}, {"id":"2","name":"Empire Holdings"}]
    if q: items = [i for i in items if q.lower() in i["name"].lower()]
    return func.HttpResponse(json.dumps({"items": items}), mimetype="application/json")
'

owners_transfer_ctx_py='
import json, azure.functions as func
def main(req: func.HttpRequest) -> func.HttpResponse:
    oid = req.params.get("id") or "1"
    ctx = {
      "owner": {"id": oid, "name": f"Owner #{oid}"},
      "properties": [{"id":"42","name":"Property #42"}],
      "units": [{"id":"45","name":"Unit #45"}],
      "leases": [{"id":"1","name":"Lease #1"}],
      "tenants": [{"id":"1","name":"Tenant #1"}]
    }
    return func.HttpResponse(json.dumps(ctx), mimetype="application/json")
'

owners_initiate_py='
import json, uuid, azure.functions as func
def main(req: func.HttpRequest) -> func.HttpResponse:
    try:
        data = req.get_json()
    except ValueError:
        data = {}
    tid = data.get("transferId") or f"T-{uuid.uuid4().hex[:8]}"
    return func.HttpResponse(json.dumps({"transferId": tid, "status":"initiated"}), mimetype="application/json")
'

owners_admin_step_py='
import json, os, azure.functions as func
def main(req: func.HttpRequest) -> func.HttpResponse:
    want = os.getenv("ADMIN_SYNC_TOKEN","")
    got = req.headers.get("x-admin-token","")
    if not want or got != want:
        return func.HttpResponse(status_code=401)
    try:
        body = req.get_json()
    except ValueError:
        body = {}
    return func.HttpResponse(json.dumps({"ok": True, "input": body}), mimetype="application/json")
'

# ----- Config endpoints -----
mkfunc config-integrations "config/integrations" '["get"]'
printf "%s" "$stub_ok_py" > config-integrations/__init__.py

# ----- Entities (path OR query id) -----
for E in properties units leases tenants owners; do
  mkfunc "entities-$E" "entities/$E/{id?}" '["get"]'
  printf "%s" "$stub_entity_py" > "entities-$E/__init__.py"
done

# ----- Owners search & transfer context -----
mkfunc owners-search "owners/search" '["get"]'
printf "%s" "$owners_search_py" > owners-search/__init__.py

mkfunc owners-transferContext "owners/transferContext" '["get"]'
printf "%s" "$owners_transfer_ctx_py" > owners-transferContext/__init__.py

# ----- Transfer workflow -----
mkfunc owners-initiateTransfer "owners/initiateTransfer" '["post"]'
printf "%s" "$owners_initiate_py" > owners-initiateTransfer/__init__.py

mkfunc owners-approveTransfer "owners/approveTransfer" '["post"]'
printf "%s" "$owners_admin_step_py" > owners-approveTransfer/__init__.py

mkfunc owners-authorizeTransfer "owners/authorizeTransfer" '["post"]'
printf "%s" "$owners_admin_step_py" > owners-authorizeTransfer/__init__.py

mkfunc owners-executeTransfer "owners/executeTransfer" '["post"]'
printf "%s" "$owners_admin_step_py" > owners-executeTransfer/__init__.py

# Zip and remote-build
ZIP="$WORKDIR/ecc_ok.zip"
zip -qr "$ZIP" .
az functionapp deployment source config-zip -g "$RG" -n "$APP" --src "$ZIP" 1>/dev/null
az functionapp restart -g "$RG" -n "$APP" 1>/dev/null

BASE="https://$APP.azurewebsites.net"
echo "BASE: $BASE"

# Smoke tests (should be HTTP/200 + JSON)
for u in \
  "$BASE/api/config/integrations" \
  "$BASE/api/entities/properties/42" \
  "$BASE/api/entities/units/45" \
  "$BASE/api/entities/leases/1" \
  "$BASE/api/entities/tenants/1" \
  "$BASE/api/entities/owners/1" \
  "$BASE/api/owners/search?q=Altus" \
  "$BASE/api/owners/transferContext?id=1"
do echo "GET $u"; curl -sS -i "$u" | sed -n '1,8p'; done

echo "POST initiate"
curl -sS -i -X POST "$BASE/api/owners/initiateTransfer" \
  -H "Content-Type: application/json" -d '{"transferId":"T-1"}' | sed -n '1,8p'

echo "POST approve (401 expected without token)"
curl -sS -i -X POST "$BASE/api/owners/approveTransfer" \
  -H "Content-Type: application/json" -d '{"transferId":"T-1"}' | sed -n '1,8p'

echo "POST approve (200 with token)"
curl -sS -i -X POST "$BASE/api/owners/approveTransfer" \
  -H "x-admin-token: '"$ADMIN_TOKEN"'" -H "Content-Type: application/json" \
  -d '{"transferId":"T-1"}' | sed -n '1,8p'
