MEGA LOCKDOWN v3 + Property Card Deepening

You are in PATCH MODE. Apply exactly. Show diffs and verification outputs. Do not change anything beyond what’s listed.

A) Guardrail updates (no package.json edits required)

Edit: scripts/guardrail-mega.mjs — replace the “banned dependency” rule with usage-based detection (so we don’t fail just because deps remain in package.json):

/* 8) Usage drift lock (ignore package.json; flag only code imports) */
const bannedImportPatterns = [
  /from\s+["']react-router-dom["']/,
  /from\s+["']@mui\/material["']/,
  /from\s+["']@mui\/x-data-grid["']/,
  /from\s+["']bootstrap["']/,
  /from\s+["']antd["']/,
  /from\s+["']@mui\//,
  /from\s+["']chakra-ui["']/,
  /from\s+["']semantic-ui["']/,
  /from\s+["']mantine["']/,
  /from\s+["']bulma["']/,
  /from\s+["']sweetalert2["']/,
  /from\s+["']react-modal["']/
];
for (const f of files) {
  const ext = f.toLowerCase().slice(-4);
  if (![".tsx",".jsx",".ts",".js"].some(s => f.toLowerCase().endsWith(s))) continue;
  const src = fs.readFileSync(f,"utf8");
  if (bannedImportPatterns.some(rx => rx.test(src))) {
    offenders.push(`- ${f}: banned UI lib/router import found`);
  }
}


Add “no global scroll/pointer/visibility hacks” to the same script (append at the end):

/* 10) No global scroll/pointer/visibility/page-hide hacks */
for (const f of files) {
  const src = fs.readFileSync(f,"utf8");
  // CSS hacks
  if (/\b(html|body)\b\s*{[^}]*overflow\s*:\s*hidden/i.test(src)) flag(f,"overflow:hidden on html/body forbidden");
  if (/#root\b\s*{[^}]*display\s*:\s*none/i.test(src)) flag(f,"#root display:none forbidden");
  if (/#root\b\s*{[^}]*visibility\s*:\s*hidden/i.test(src)) flag(f,"#root visibility:hidden forbidden");
  if (/\*\s*{[^}]*pointer-events\s*:\s*none/i.test(src)) flag(f,"global pointer-events:none forbidden");
  // JS hacks
  if (/document\.body\.style\.(overflow|visibility)\s*=/.test(src)) flag(f,"body style manipulation forbidden");
  if (/window\.onbeforeunload\s*=/.test(src)) flag(f,"blocking onbeforeunload forbidden");
}


(Keep existing rules: no overlays/backdrops, map-only on Property, resolvers-only in pages, Wouter only, theme tokens locked, Suspense fallback rules, no return null in card pages, required style imports.)

B) Runtime kill-switch extension (defense in depth)

Edit: src/styles/no-overlays.css — append:

/* Anti-scroll/pointer/visibility hacks */
html, body { overflow: auto !important; }
#root { display: block !important; visibility: visible !important; }
* { pointer-events: auto !important; } /* local components can still disable on themselves */

C) Property Card — Files & Activity components (reusable + stub-safe)

Create: src/components/FileButtons.tsx

import React from "react";

export default function FileButtons({
  onDoorloop, onDropbox, onUpload
}: {
  onDoorloop?: () => void;
  onDropbox?: () => void;
  onUpload?: () => void;
}) {
  return (
    <div style={{ display:"flex", gap:8, flexWrap:"wrap" }}>
      <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={onDoorloop ?? (()=>alert("Stub: DoorLoop Files"))}>DoorLoop</button>
      <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={onDropbox ?? (()=>alert("Stub: Dropbox Folder"))}>Dropbox</button>
      <button className="ecc-object" style={{ padding:"8px 12px" }} onClick={onUpload ?? (()=>alert("Stub: Upload"))}>Upload</button>
    </div>
  );
}


Create: src/components/ActivityTimeline.tsx

import React from "react";

export type ActivityItem = {
  id: string|number;
  ts: string;                // ISO string
  type: string;              // e.g., "workorder.created"
  actor?: string | null;
  text: string;              // display string
};

export default function ActivityTimeline({ items }: { items: ActivityItem[] }) {
  if (!items?.length) return <div style={{ opacity:.8 }}>No activity yet.</div>;
  return (
    <div style={{ display:"grid", gap:10 }}>
      {items.map(it => (
        <div key={it.id} className="ecc-object" style={{ padding:10, display:"grid", gap:4 }}>
          <div style={{ fontSize:12, opacity:.7 }}>{new Date(it.ts).toLocaleString()}</div>
          <div style={{ fontWeight:600 }}>{it.text}</div>
          <div className="ecc-label">{it.type}{it.actor ? ` • ${it.actor}` : ""}</div>
        </div>
      ))}
    </div>
  );
}

D) Wire into Property page

Edit: src/pages/card/property/index.tsx

Imports – add:

import FileButtons from "../../../components/FileButtons";
import ActivityTimeline, { ActivityItem } from "../../../components/ActivityTimeline";


Activity data (stub for now) – add near top of component:

const activity: ActivityItem[] = []; // TODO: populate from BFF when available


Replace the Files tab panel with:

{tab==="files" && (
  <Section title="Files (DoorLoop / Dropbox)">
    <FileButtons />
  </Section>
)}


Replace the Activity tab panel with:

{tab==="activity" && (
  <Section title="Activity">
    <ActivityTimeline items={activity} />
  </Section>
)}


(Leave Financials/Legal as-is for now; they’re safe placeholders until backend data is defined. We are not guessing endpoints.)

E) Tabs polish & label consistency

Edit: src/components/FieldRows.tsx (if present) — ensure labels never uppercase by CSS:

// make sure labels render with normal case
// .ecc-label is already styled in card-enhancer.css; enforce no text-transform here


Edit: src/styles/card-enhancer.css — ensure:

.ecc-label { font-size: 12px; opacity: .7; text-transform: none; }


(If already present, leave it.)

F) Re-run guardrails + cards typecheck; paste outputs

Run:

node scripts/guardrail-mega.mjs
node scripts/guardrail-overlays.mjs
npx tsc -p tsconfig.cards.json


Expected:

guardrail-mega → no violations

guardrail-overlays → passes

typecheck:cards → 0 errors (if any card-scope errors appear, fix them in-place and re-run)

G) Quick route smoke (verify no interference)

Open with real IDs:

/card/property/:id → renders ✅, map present ✅, Files tab with buttons ✅, Activity tab inline ✅, page cover ❌

/card/unit/:id → renders ✅, no map ✅, page cover ❌

/card/lease/:id → renders ✅, no map ✅, page cover ❌

/card/tenant/:id → renders ✅, no map ✅, page cover ❌

/card/owner/:id → renders ✅, no map ✅, page cover ❌

Paste a 5-line checklist with those three booleans per route.

What this gives us

Guardrails no longer depend on editing package.json to pass; they fail only on actual bad imports.

New bans stop the other “black screen” cousins: body overflow/visibility/pointer hacks.

A global ErrorBoundary guarantees inline panels on unexpected errors.

Property card moves forward with real, reusable Files and Activity components (stub-safe).

Everything remains map-only on Property, resolvers-only in pages, Wouter-only, canonical tokens intact.

When you paste the outputs, I’ll queue the Property → Financials/Legal component pass (tables with zero-data fallbacks, no endpoint guessing) and parallel shells for Unit/Lease/Tenant/Owner tabs to keep momentum.