Request: Audit + Fix Plan for Azure Functions backend & Replit frontend (Owner Transfer)

You are a senior cloud/FE debugger. I need decisive feedback to get our staging environment working end-to-end. Please read the full context and then produce exact diffs, shell commands, and verification steps.

Context (what we’re building)

Azure Functions (Python) backend that exposes:

Entity reads: /api/entities/{properties|units|leases|tenants|owners}/{id?}

Owner search: GET /api/owners/search?q=...

Owner transfer workflow:

POST /api/owners/initiatetransfer (no auth)

POST /api/owners/approvetransfer (admin header)

POST /api/owners/authorizetransfer (admin header)

POST /api/owners/executetransfer (admin header)

React frontend (Replit) calls these routes. We standardized on all-lowercase paths (Linux is case-sensitive).

Admin header: x-admin-token must match ADMIN_SYNC_TOKEN (and frontend VITE_ADMIN_SYNC_TOKEN).

Current Azure resources (don’t rename)

Resource Group: empirecommandcenter-altus-staging_group

Function App: empirecommandcenter-altus-staging

Region: centralus

API base: https://empirecommandcenter-altus-staging.azurewebsites.net

Observed symptoms (highlights)

Public routes return 404 or 500.

az functionapp function list shows function names, but Kudu VFS shows empty folders / missing files or only directories without function.json/__init__.py.

Several deploy attempts likely zipped the parent folder (host.json not at archive root).

Attempts to view logs via az functionapp log stream failed; az webapp log tail likely the right command for live logs.

Frontend: we fixed viewport/scroll issues and standardized routes to lowercase; now waiting on backend to become healthy.

Canonical fix we’re proposing

We’ve prepared a one-shot clean-room deploy script that:

Builds a minimal Functions app with correct structure (host.json at zip root).

Uses lowercase routes everywhere.

Sets required app settings in one shot (AzureWebJobsStorage, WEBSITE_RUN_FROM_PACKAGE=1, ADMIN_SYNC_TOKEN, etc.).

Deploys via az functionapp deployment source config-zip.

Post-deploy suite: curl checks for GET/POST (with/without admin header) + Kudu VFS file presence + host status.

⚠️ Please scrutinize these likely pitfalls

Zip structure — confirm the script zips from inside the root (so host.json is at / in the archive).

Python string templates — check and fix these:

f"Stub {entity_type.capitalize()} {entity_id or ""}" → this is invalid due to "" inside the f-string.

In owners-search stub: f"Owner result for ''{q}''" → extra quotes.

Extension bundle / runtime — confirm extensionBundle version range is correct for Python 3.12 on Linux Functions v4.

Route casing — ensure all routes in function.json are lowercase, and confirm they match the FE paths exactly.

App settings — verify AzureWebJobsStorage (connection string), FUNCTIONS_WORKER_RUNTIME=python, FUNCTIONS_EXTENSION_VERSION=~4, WEBSITE_RUN_FROM_PACKAGE=1, ADMIN_SYNC_TOKEN are set before or at deploy time.

Logging — provide the exact, working commands for:

Real-time log tail for this Linux Function App.

Enabling app logging if off (and the correct CLI for Functions on Linux).

Where to see Python exceptions for 500s.

Kudu VFS — confirm the correct admin key header (x-functions-key) and the exact URLs we should hit to see function.json/__init__.py after deploy.

Frontend alignment — verify our lowercase route diffs and the need to set VITE_ADMIN_SYNC_TOKEN to the same value as backend ADMIN_SYNC_TOKEN.

What I want from you (deliverables)
A) Corrections to the script (inline diffs)

Provide fixed versions of any broken Python stubs (__init__.py) and the function.json routes if needed.

If the zip step or pathing is wrong, give a corrected two-line zip recipe that guarantees host.json is at zip root.

If extensionBundle/requirements.txt needs changes (e.g., pinning azure-functions), give the exact content.

B) Exact Azure CLI for logs & config

The precise commands to:

Enable/confirm logging (Linux Functions).

Tail logs live for this app: empirecommandcenter-altus-staging in empirecommandcenter-altus-staging_group.

Query host status and list functions post-deploy.

If az functionapp log stream is wrong, specify the correct az webapp log ... invocations and any prerequisites.

C) Verification matrix (copy-paste runnable)

A block of curl/az commands that definitively proves:

Host ready: GET /admin/host/status → 200 with JSON.

Public GETs: GET /api/entities/properties/42, GET /api/owners/search?q=Altus, GET /api/owners/transfercontext?id=1 → 200 JSON.

Public POST: POST /api/owners/initiatetransfer → 200 JSON.

Admin POST: POST /api/owners/approvetransfer → 401 without header, 200 with x-admin-token.

Kudu VFS shows function.json content for entities-properties.

Please include expected response shape (short JSON examples) so we can assert sanity quickly.

D) Frontend diffs (minimal)

Confirm (or correct) our diffs to make FE call the lowercase routes:

/api/owners/initiatetransfer

/api/owners/approvetransfer

/api/owners/authorizetransfer

/api/owners/executetransfer

Remind to set VITE_ADMIN_SYNC_TOKEN in Replit equal to backend ADMIN_SYNC_TOKEN.

E) “If still broken” decision tree

A tight flowchart/checklist to isolate:

404 (route mismatch, casing, missing function.json).

500 (Python exception—what to look for in logs).

Host not mounting package (how to temporarily set WEBSITE_RUN_FROM_PACKAGE=0, wait, redeploy, and revert).

References you can assume

RG: empirecommandcenter-altus-staging_group

App: empirecommandcenter-altus-staging

Base URL: https://empirecommandcenter-altus-staging.azurewebsites.net

We will paste your corrected files directly into the script and run in Azure Cloud Shell.

Output format:
Please respond with five sections matching A–E above. Use fenced code blocks for diffs and commands. Keep everything copy-paste ready. Include short “why this works” notes where ambiguity is common (zip root, Linux casing, logging).