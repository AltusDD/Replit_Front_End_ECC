Replit Chat — ECC Full Audit (No-Drift, Genesis UI)

You are in AUDIT MODE. Do not modify files yet.
Report only. Follow every step exactly and return results in the requested format.

0) Ground Rules (must follow)

❌ Do not create/rename/delete files in this audit.

❌ Do not “helpfully” fix things during the audit.

✅ Only scan, compile, and print findings.

✅ Use /api/entities/ endpoints as the only canonical endpoints.

✅ Asset pages must only use lib/ecc-resolvers (not lib/ecc-api or raw /api/).

1) Inventory & Routing

List all card routes and their source files (Wouter):

Find definitions for: /card/property/:id, /card/unit/:id, /card/lease/:id, /card/tenant/:id, /card/owner/:id.

For each, print: Route → File path → Default export name.

Confirm these files exist (yes/no):
src/pages/card/property/index.tsx
src/pages/card/unit/index.tsx
src/pages/card/lease/index.tsx
src/pages/card/tenant/index.tsx
src/pages/card/owner/index.tsx

2) Contract & Endpoint Hygiene (No Drift)

Scan only files under src/pages/card/** and report violations:

Direct API usage (should be zero): any occurrence of "/api/", imports from lib/ecc-api, or apiGet( calls.

Resolver usage required: each card page must import from lib/ecc-resolvers. Flag any page that does not.

Endpoints: confirm no references to /api/portfolio/* anywhere in the repo. If found, list file + line.

Provide a table:

[Endpoint Hygiene]
File                                   | Violation
---------------------------------------|------------------------------
src/pages/card/property/index.tsx      | uses apiGet(...) [line X]
...

3) Relationship Contract Conformance

Using the code (not assumptions), verify these explicit joins are implemented:

Property → Units: units.doorloop_property_id === properties.doorloop_id

Property → Leases: leases.property_id === properties.id

Unit → Active Lease: leases.unit_id === units.id AND leases.status = 'active'

Lease → Primary Tenant: tenants.id === leases.primary_tenant_id

Owner → Properties: properties.owner_id === owners.id

For each asset page, state how relationships are currently fetched (endpoint + query string) and whether it matches the contract exactly (Yes/No). If No, show the mismatched field(s) and the exact line(s).

Output:

[Relationships]
Property page: Units (MATCH/NO), Leases (MATCH/NO), Tenants (MATCH/NO)
Unit page: Property (MATCH/NO), Active Lease (MATCH/NO), Tenant (MATCH/NO)
Lease page: Property (MATCH/NO), Unit (MATCH/NO), Tenant (MATCH/NO)
Owner page: Properties (MATCH/NO)

4) Genesis UI Compliance (Boxes, Typography, Map, Skeletons)

Check each asset page for these UI contract items:

Boxing: All major sections rendered inside .ecc-object surfaces.

Typography: No all-caps or underscores in labels; confirm use of humanize/titleCase (or zero transforms with proper data).

Map: A Map/Location box present in Right Rail using GeoMap.

Skeletons: Shows boxed skeletons for loading (Line/Block).

Header Actions: Edit / Export PDF / New Work Order buttons present on Property; reasonable set on others.

Tabs or Sections present: at minimum: Overview, Relationships; and stubs for Files, Activity on Property.

Provide a checklist per page:

[UI Contract]
Property: Boxes ✅ / Typography ✅ / Map ✅ / Skeletons ✅ / Header Actions ✅ / Tabs/Sections ✅
Unit:     Boxes ❌ (missing on Relationships), Typography ✅, Map ✅, Skeletons ✅, Header Actions ✅
...

5) Theme & Styles (Light Grey Contract)

Verify the theme + normalizer are active:

src/styles/theme.css has --ecc-object-bg: #2A2F38 and @keyframes ecc-shimmer.

src/styles/card-enhancer.css defines .ecc-object rules, .ecc-header, and text-transform: none.

src/main.tsx (or the app main entry) imports both theme.css and card-enhancer.css.

Output:

[Theme]
theme.css tokens: OK / MISSING (detail)
card-enhancer.css normalizer: OK / MISSING (detail)
main.tsx CSS imports: OK / MISSING (detail)

6) Build & Guardrail

Run npm run guardrail and paste the full output.

Run a type check (no emit): npx tsc --noEmit and paste any errors for src/pages/card/**.

If ESLint exists, run npm run lint and paste only issues under src/pages/card/**.

7) Data Fetch Keys & Hook Safety

Ensure every useQuery in card pages uses unique, stable keys (e.g., ["prop", id], ["unit-rel", id]) and no conditional hook calls.

Report duplicates or keys built with non-stable objects.

Flag any hook called conditionally based on fetched data (which can cause runtime blank screens).

Format:

[React Query]
File                               | Issue
-----------------------------------|-------------------------------
src/pages/card/property/index.tsx  | duplicate key "property" across two hooks [lines X,Y]
...

8) Final Deliverable — Action Plan

Provide a numbered, minimal patch plan (apply in this order), where each item is:

Scope: file(s)

Fix: one sentence

Change type: add/edit/remove

Risk: low/med/high

Time: XS/S/M (XS ≤ 5m, S ≤ 15m, M ≤ 30m)

Exact code block (the precise lines to add/replace for each fix)

Example entry:

1) Scope: src/pages/card/property/index.tsx
   Fix: Replace direct apiGet with usePropertyById & usePropertyRelations
   Change: edit
   Risk: low
   Time: S
   Patch:
   // REPLACE lines 123-178 with:
   ...code...

9) Success Criteria

Your audit is complete when you return a single message with these sections:

[Inventory & Routing]

[Endpoint Hygiene]

[Relationships]

[UI Contract]

[Theme]

[Build & Guardrail]

[React Query]

[Action Plan]

No file changes in this step. After I review your report, I’ll tell you which patches to apply.