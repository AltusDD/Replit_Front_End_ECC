Replit Chat Prompt ‚Äî ‚ÄúEmpire Command Center‚Äù Dashboard (Genesis Grade, Guardrailed)

You are in Read ‚Üí Plan ‚Üí Diff ‚Üí Surgical Write mode.

GUARDRAILS (DO NOT BREAK):

Do not modify Portfolio V3 pages or DataTable components.

Do not change global theme tokens already in use, except to add dashboard-specific tokens/classes.

Only add/modify files listed below and the minimal routing/nav needed to expose the Dashboard.

No mass refactors, no renames outside the scope.

All code TypeScript-strict, production-ready, and accessibility-conscious.

‚úÖ Deliverables (exact files to create/modify)

Create:

src/styles/Dashboard.css

src/features/dashboard/api/mock-data.ts

src/features/dashboard/hooks/useDashboardData.ts

src/features/dashboard/components/ChartContainer.tsx

src/features/dashboard/components/TrendIndicator.tsx

src/features/dashboard/components/ActionButton.tsx

src/features/dashboard/components/KpiBanner.tsx

src/features/dashboard/components/PortfolioMap.tsx

src/features/dashboard/components/ActionCenter.tsx

src/features/dashboard/components/FinancialSnapshot.tsx

src/features/dashboard/components/LeasingFunnel.tsx

src/features/dashboard/components/OccupancyBreakdown.tsx

src/features/dashboard/pages/DashboardPage.tsx

src/dev/auditDashboard.ts (dev-only, runs when ?debug=1 to verify data coverage)

Modify (minimal, surgical):

src/App.tsx (add route /dashboard and redirect / ‚Üí /dashboard)

Sidebar nav component (add Dashboard link only; reuse existing styles; do not restyle anything else)

package.json (add dependencies listed below)

üì¶ Dependencies to add

recharts (charts)

react-leaflet and leaflet (map)

date-fns (date utils)

zod (runtime schema guards for mock data)

(optional polish) framer-motion (subtle fades), @types/leaflet

Update package.json and install. Do not remove existing deps.

PHASE 0 ‚Äî Read-only audit (print summary, no writes yet)

Inspect routing (App.tsx), sidebar/nav, global style tokens, and confirm Inter font + Altus palette.

Output a short plan: where you‚Äôll add the route, nav link, CSS import, and how you‚Äôll ensure no clashes with existing styles. Stop and print plan.

PHASE 1 ‚Äî Data layer (DB-first mocks + hook)
1A) src/features/dashboard/api/mock-data.ts

Create rich mock data with types:

Property: { id: string; address1: string; city: string; state: string; zip: string; lat: number; lng: number; status: 'occupied'|'vacant'|'delinquent'; marketRent: number; currentRent: number; units: number; }

TenantSummary: { id: string; name: string; propertyId: string; balanceDue: number; isDelinquent: boolean }

Lease: { id: string; tenantId: string; propertyId: string; unitLabel: string; startDate: string; endDate: string; status: 'active'|'ended' }

WorkOrder: { id: string; propertyId: string; priority: 'high'|'normal'; createdAt: string; summary: string; assignedVendor?: string }

Time series for last 12 months:

income (cents), expenses (cents), occupancyPct (0-100), portfolioValue, portfolioDebt

Leasing funnel for last 90 days: { applications: number; screenings: number; leases: number }

Generate ‚â• 50 properties across 4‚Äì6 cities (IN/GA/IL) with plausible lat/lng. Include some delinquent and vacant. Create 10‚Äì20 leases expiring in the next 45 days, 10‚Äì15 delinquent tenants with balances, and 8‚Äì12 high-priority work orders.

1B) src/features/dashboard/hooks/useDashboardData.ts

Expose typed hook useDashboardData(range: '30d'|'90d'|'6m'|'12m')

Simulate API latency (300‚Äì600ms) with AbortController support.

Return { loading, error, data } with:

properties, tenants, leases, workOrders

series: { months: { label: string; income: number; expenses: number; occupancyPct: number }[]; quarters: { label: string; value: number; debt: number }[] }

funnel: { applications: number; screenings: number; leases: number }

KPIs precomputed in the mock (DB-first):
occupancyPct, avgTurnDays, collectionRatePct, highPriorityWorkOrders, noiMTD (cents)

Use zod to validate mock shapes at runtime (dev only; don‚Äôt crash UI‚Äîlog and continue with safe defaults).

PHASE 2 ‚Äî Reusable UI components
2A) ActionButton.tsx

Props: { children; onClick?; to?: string; variant?: 'primary'|'secondary'|'danger'; size?: 'sm'|'md'; }

If to provided, use wouter <Link>; else button.

Styles: primary = Altus Gold bg (#d6b36a, dark text); secondary = outline light-grey; danger = subtle red bg.

2B) TrendIndicator.tsx

Props: { value: number }

value > 0 green ‚ñ≤, < 0 red ‚ñº, 0 neutral ‚Ä¢

ARIA label e.g., ‚Äúup 5.2 percent‚Äù.

2C) ChartContainer.tsx

Props: { title: string; range?: '30d'|'90d'|'6m'|'12m'; onRangeChange?: (r)=>void; rightSlot?: ReactNode; children }

Frame: dark panel (#1a1d21), soft shadow, title left, range dropdown right. Include a slim divider.

Import Dashboard.css here (or in page).

PHASE 3 ‚Äî Widgets (actionable, not ornamental)
3A) KpiBanner.tsx

Display 5 KPIs (from hook):

Portfolio Occupancy % (+ TrendIndicator, small sparkline of occupancy)

Avg Turn Time (days) (+ trend)

Rent Collection Rate % (+ trend)

Open High-Priority WOs (int)

NOI (MTD) $ (+ trend)

Each card is clickable: deep links:

Occupancy ‚Üí /portfolio/units?status=vacant

Turn Time ‚Üí /reports/turns (placeholder route)

Collection Rate ‚Üí /portfolio/tenants?type=delinquent

WOs ‚Üí /construction?priority=high

NOI ‚Üí /reports/pnl?period=mtd

Sparkline: Recharts <AreaChart> muted, no axes, with focus ring on hover.

3B) PortfolioMap.tsx

Use react-leaflet. Lazy-load map to avoid SSR issues.

Base tiles: OpenStreetMap default.

Pins:

Green occupied+current

Yellow vacant

Red delinquent

Cluster markers if simple to add; otherwise render simple pins with 14px radius and hover tooltip.

Clicking a pin opens popup: address, status tag, current tenant (if any), View Details to=/portfolio/properties/{id}.

Map Controls: city filter dropdown; FitBounds to filtered markers.

3C) ActionCenter.tsx

Sections (max 3 items each):

Leases Expiring (Next 45 Days): tenant, property, end date (Mon D, YYYY) with buttons: Contact Tenant, Start Renewal.

Top Delinquent Tenants: tenant, property, balance in red; buttons: View Ledger, Send Reminder.

New High-Priority Work Orders: property, short summary; button: Assign Vendor.
All buttons navigate or console.info for now.

3D) FinancialSnapshot.tsx

Two charts side-by-side inside ChartContainer:

Income vs Expenses (Last 6 Months): Recharts <BarChart>, green (income), neutral grey (expenses), tooltips, legend.

Portfolio Value vs Debt (Quarterly): <LineChart>, two lines, shaded area under Value, reference lines for thresholds.

3E) LeasingFunnel.tsx

Recharts <FunnelChart> (or composited horizontal bars) for Applications ‚Üí Screenings ‚Üí Leases.

Each step clickable to deep link to filtered views.

3F) OccupancyBreakdown.tsx

Table grouped by city: columns: Location, # Properties, Occupied Units, Vacant Units, Occupancy % (with small progress bar).

Clicking a row navigates to /portfolio/properties?city={name}.

PHASE 4 ‚Äî Page layout and routing
4A) DashboardPage.tsx

Responsive CSS Grid:

Row 1: KpiBanner (full width)

Row 2: PortfolioMap (2/3) + ActionCenter (1/3)

Row 3: FinancialSnapshot (full width; two charts inside)

Row 4: LeasingFunnel (1/2) + OccupancyBreakdown (1/2)

Load data via useDashboardData(range). Pass onRangeChange down from a page-level control if needed.

Add skeleton loaders and empty states (do not block the rest of the page).

4B) Routing + Nav (surgical)

src/App.tsx:

Add <Route path="/dashboard" component={DashboardPage} />

Redirect / ‚Üí /dashboard (keep other routes intact).

Sidebar: add Dashboard top-level item using existing classnames; link to /dashboard. Do not change any styles/icons.

PHASE 5 ‚Äî Styling
src/styles/Dashboard.css

Use existing Altus tokens; add dashboard-only tokens if needed:

:root {
  --altus-black: #0b0e12;
  --altus-panel: #1a1d21;
  --altus-grey-600: #2a2d31; /* approved light grey background */
  --altus-grey-700: #2f353d;
  --altus-gold: #d6b36a;
  --altus-text: #d7dae0;
  --altus-muted: #a0a0a0;
  --altus-good: #1f6f4a;
  --altus-bad: #80343a;
}

.dash-card { background: var(--altus-grey-600); border: 1px solid rgba(255,255,255,.06); border-radius: 12px; box-shadow: 0 4px 14px rgba(0,0,0,.35); }
.dash-title { font-weight: 600; letter-spacing: .02em; color: var(--altus-text); }
.dash-subtle { color: var(--altus-muted); }
.dash-grid { display: grid; gap: 16px; }
@media (min-width: 1200px) {
  .dash-grid { grid-template-columns: 2fr 1fr; }
  .dash-row { grid-column: 1 / -1; }
}
.kpi-card { position: relative; padding: 16px 18px; display:flex; align-items:center; justify-content:space-between; }
.sparkline { position:absolute; inset:0; opacity:.12; }
.trend--up { color: #4ade80; }
.trend--down { color: #f87171; }
.progress { height:8px; background:#21262c; border-radius:999px; overflow:hidden; }
.progress__fill { height:100%; background: var(--altus-gold); }


Keep light grey panels (no brown tint); keep Altus Gold strictly for accents (sparklines fill, progress, primary CTAs).

PHASE 6 ‚Äî Dates, numbers, a11y

Use existing global helpers where available. If missing, extend without breaking others:

shortDate() ‚Üí Mon D, YYYY (e.g., Sep 4, 2025)

money(n, {decimals?:0|2}) (default 0; KPIs may use 2)

All interactive components must have aria-labels and keyboard focus styles.

Tooltips on charts.

PHASE 7 ‚Äî Dev auditor (non-prod)

Create src/dev/auditDashboard.ts:

On ?debug=1, compute and console.table() coverage:

% properties with lat/lng

counts by status (occupied, vacant, delinquent)

leases expiring ‚â§ 45d

delinquent tenants > $0

high-priority work orders unassigned

Log first 3 shaped objects for each entity (keys only). Must never throw; catch and continue.

Wire in DashboardPage mount:

if (new URLSearchParams(location.search).get('debug') === '1') {
  import('../../dev/auditDashboard').then(m => m.runDashboardAudit?.()).catch(()=>{});
}

PHASE 8 ‚Äî Verification & Deploy

Type-check & build.

Start dev server; open /dashboard.

Confirm:

KPIs render and are clickable to deep links.

Map loads, pins color-coded, popups link to details.

Action Center lists 3/3/3 with working buttons (navigate/log).

Financial charts render with tooltips + legends.

Funnel + Occupancy Breakdown render; rows clickable.

Panels use approved light grey, Altus Gold accents only.

Run /dashboard?debug=1 and paste console summary.

Output a concise diff of all files changed and a short summary.

Commit message:
feat(dashboard): Genesis-grade Dashboard with KPI banner, map, action center, financial charts, leasing funnel, occupancy breakdown, mock API, and audit mode

Notes / extras to include

Lazy-load react-leaflet components to avoid SSR warnings.

Memoize derived arrays (e.g., grouped occupancy by city).

No network calls besides tiles for Leaflet.

Keep bundle reasonable (tree-shake recharts imports).

Do not touch any other modules or themes beyond what‚Äôs specified above.