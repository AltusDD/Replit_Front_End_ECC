Replit Prompt — Overwrite the live Property page with a safe, self-contained version

File: src/pages/card/property/index.tsx

Replace the entire file with this:

import React from "react";
import { useParams, Link } from "wouter";
import { useQuery } from "@tanstack/react-query";
import { apiGet } from "../../../lib/ecc-api";

import Section from "../../../components/Section";
import { FieldRows } from "../../../components/FieldRows";
import GeoMap from "../../../components/GeoMap";
import { Line, Block } from "../../../components/Skeleton";
import { humanize, joinAddress, moneyCents, isFiniteNumber } from "../../../lib/format";

/* ----------------------------- Data Fetching ----------------------------- */

type PropertyRow = {
  id: number;
  doorloop_id?: string | null;
  street_1?: string | null;
  city?: string | null;
  state?: string | null;
  zip?: string | null;
  type?: string | null;
  class?: string | null;
  status?: string | null;
  // optional coords if present
  lat?: number | null;
  lng?: number | null;
  latitude?: number | null;
  longitude?: number | null;
  // optional relationship counts (if your API provides them)
  units_count?: number | null;
  active_leases_count?: number | null;
  primary_tenants_count?: number | null;
};

function useProperty(id: string) {
  return useQuery({
    queryKey: ["property", id],
    queryFn: async () => {
      const rows = await apiGet("/api/entities/properties", {
        params: { select: "*", id: `eq.${id}`, limit: 1 },
      });
      return (rows?.[0] ?? null) as PropertyRow | null;
    },
  });
}

function usePropertyKpis(p?: PropertyRow | null) {
  // Never call this unless we have a property row
  return useQuery({
    enabled: !!p?.id, // hook runs only when property exists
    queryKey: ["property-kpis", p?.id, p?.doorloop_id],
    queryFn: async () => {
      const units = p?.doorloop_id
        ? await apiGet("/api/entities/units", {
            params: {
              select: "id,rent_cents",
              doorloop_property_id: `eq.${p!.doorloop_id}`,
            },
          })
        : [];
      const leases = p?.id
        ? await apiGet("/api/entities/leases", {
            params: {
              select: "status,rent_cents",
              property_id: `eq.${p!.id}`,
            },
          })
        : [];

      const unitCount = Array.isArray(units) ? units.length : 0;
      const activeLeases = (leases || []).filter(
        (l: any) => (l?.status || "").toLowerCase() === "active"
      ).length;
      const occupancyPct =
        unitCount > 0 ? Math.round((Math.min(activeLeases, unitCount) / unitCount) * 100) : null;

      const unitRents = (units || [])
        .map((u: any) => u?.rent_cents)
        .filter((v: any) => typeof v === "number");
      const leaseRents = (leases || [])
        .map((l: any) => l?.rent_cents)
        .filter((v: any) => typeof v === "number");
      const avgRentCents = unitRents.length
        ? Math.round(unitRents.reduce((a: number, b: number) => a + b, 0) / unitRents.length)
        : leaseRents.length
        ? Math.round(leaseRents.reduce((a: number, b: number) => a + b, 0) / leaseRents.length)
        : null;

      return { unitCount, activeLeases, occupancyPct, avgRentCents };
    },
  });
}

/* ------------------------------ UI Helpers ------------------------------ */

function PropertySkeleton() {
  return (
    <div style={{ display: "grid", gridTemplateColumns: "1fr 340px", gap: 16, alignItems: "start" }}>
      <section className="ecc-object">
        <div className="ecc-header">
          <Line w={280} />
          <div />
        </div>
        <Block h={96} />
      </section>
      <aside style={{ display: "grid", gap: 12 }}>
        <Section title={<Line w={160} />}><Block h={260} /></Section>
        <Section title={<Line w={120} />}><Block h={96} /></Section>
      </aside>
    </div>
  );
}

/* ---------------------------- Page Component ---------------------------- */

export default function PropertyPage() {
  const { id } = useParams<{ id: string }>();
  const q = useProperty(id);

  if (q.isLoading) return <PropertySkeleton />;
  if (q.isError || !q.data) return <section className="ecc-object">Property not found.</section>;

  const p = q.data;

  // Clean values
  const addr = joinAddress([p.street_1, p.city, p.state, p.zip]);
  const type = humanize(p.type);
  const klass = humanize(p.class);
  const status = humanize(p.status);
  const lat = isFiniteNumber(p.lat) ? p.lat : isFiniteNumber(p.latitude) ? p.latitude! : null;
  const lng = isFiniteNumber(p.lng) ? p.lng : isFiniteNumber(p.longitude) ? p.longitude! : null;

  // KPIs (safe: enabled only when p exists)
  const k = usePropertyKpis(p).data;

  return (
    <div style={{ display: "grid", gridTemplateColumns: "1fr 340px", gap: 16, alignItems: "start" }}>
      {/* LEFT COLUMN */}
      <div>
        {/* Header + Actions */}
        <section className="ecc-object" style={{ marginBottom: 12 }}>
          <div className="ecc-header">
            <div className="ecc-title" style={{ fontSize: 20, fontWeight: 700 }}>
              {addr !== "—" ? addr : `Property #${p.id}`}
            </div>
            <div className="ecc-actions" style={{ display: "flex", gap: 8 }}>
              <button className="ecc-object" style={{ padding: "8px 12px" }}>Edit</button>
              <button className="ecc-object" style={{ padding: "8px 12px" }}>Export PDF</button>
              <button className="ecc-object" style={{ padding: "8px 12px" }}>New Work Order</button>
            </div>
          </div>

          {/* Hero KPI rail */}
          <div style={{ display: "grid", gridTemplateColumns: "repeat(4, minmax(0,1fr))", gap: 12 }}>
            <div className="ecc-object" style={{ padding: 12 }}>
              <div className="ecc-label">Units</div>
              <div style={{ fontSize: 20, fontWeight: 700 }}>{k?.unitCount ?? p.units_count ?? "—"}</div>
            </div>
            <div className="ecc-object" style={{ padding: 12 }}>
              <div className="ecc-label">Occupancy</div>
              <div style={{ fontSize: 20, fontWeight: 700 }}>
                {k?.occupancyPct == null ? "—" : `${k.occupancyPct}%`}
              </div>
            </div>
            <div className="ecc-object" style={{ padding: 12 }}>
              <div className="ecc-label">Active Leases</div>
              <div style={{ fontSize: 20, fontWeight: 700 }}>
                {k?.activeLeases ?? p.active_leases_count ?? "—"}
              </div>
            </div>
            <div className="ecc-object" style={{ padding: 12 }}>
              <div className="ecc-label">Avg Rent</div>
              <div style={{ fontSize: 20, fontWeight: 700 }}>{moneyCents(k?.avgRentCents ?? null)}</div>
            </div>
          </div>
        </section>

        {/* Overview box */}
        <Section title="Property Overview">
          <FieldRows
            rows={[
              { label: "Address", value: addr },
              { label: "Type", value: type },
              { label: "Class", value: klass },
              { label: "Status", value: status },
              {
                label: "IDs",
                value: (
                  <>
                    #{p.id}
                    {p.doorloop_id ? <> • DL {p.doorloop_id}</> : null}
                  </>
                ),
              },
            ]}
          />
        </Section>

        {/* Related (safe links only when present) */}
        <Section title="Related">
          <div style={{ display: "flex", flexWrap: "wrap", gap: 8 }}>
            {/* If your schema exposes owner_id / unit ids on property, they will show here */}
            {"owner_id" in (p as any) && (p as any).owner_id ? (
              <Link href={`/card/owner/${(p as any).owner_id}`}>
                <a className="ecc-object" style={{ padding: 8 }}>Open Owner</a>
              </Link>
            ) : null}
            <Link href="/portfolio">
              <a className="ecc-object" style={{ padding: 8 }}>Back to Properties</a>
            </Link>
          </div>
        </Section>
      </div>

      {/* RIGHT RAIL */}
      <aside style={{ display: "grid", gap: 12 }}>
        <GeoMap
          title="Location"
          address={addr}
          lat={lat}
          lng={lng}
        />
        <Section title="Risk Score">
          <div style={{ fontSize: 28, fontWeight: 800 }}>—</div>
          <div className="ecc-label">Key Factors</div>
          <div style={{ opacity: 0.8 }}>None listed.</div>
        </Section>
        <Section title="Key Dates">
          <div style={{ opacity: 0.8 }}>No upcoming events.</div>
        </Section>
      </aside>
    </div>
  );
}


Why this fixes the black screen

No more Tabs/Shell collisions or conditional hook calls.

The page fetches its own property by :id, so it doesn’t depend on any legacy variables.

All boxes use .ecc-object so your light-grey surface shows everywhere.

Humanized labels (no ALL-CAPS / underscores).

Map & links render safely with or without coords.