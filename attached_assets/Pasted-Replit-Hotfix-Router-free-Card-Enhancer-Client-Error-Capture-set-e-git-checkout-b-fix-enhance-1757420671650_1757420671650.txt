Replit — Hotfix: Router-free Card Enhancer + Client Error Capture
set -e
git checkout -b fix/enhancer-routerfree || git checkout fix/enhancer-routerfree

############################################
# 1) Frontend – Replace CardEnhancer to avoid router
############################################
applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/features/_enhancer/CardEnhancer.tsx
@@
-import React, { useMemo, useState, useEffect } from "react";
-import { useLocation } from "wouter";
+import React, { useMemo, useState, useEffect } from "react";
 import SourceBadges from "../../components/ui/SourceBadges";
 import { useIntegrations } from "../../lib/useIntegrations";
 import FilesTab from "../files/FilesTab";
 import ActivityFeed from "../activity/ActivityFeed";
 
+function parsePath(p: string){
+  // Expect: /card/<entity>/<id>
+  const m = p.match(/^\/card\/(property|unit|lease|tenant)\/([^\/\?]+)/i);
+  if (!m) return null;
+  return { entity: m[1].toLowerCase(), id: m[2] };
+}
+
+function ErrorBoundary(props: { children: React.ReactNode }) {
+  const [err, setErr] = useState<null | { message: string }>(null);
+  // simple classless boundary
+  // @ts-ignore
+  return err ? (
+    <div className="text-red-400 text-sm">
+      Enhancer error: {err.message}
+    </div>
+  ) : (
+    <Catch setErr={setErr}>{props.children}</Catch>
+  );
+}
+function Catch({ setErr, children }: any) {
+  useEffect(() => {
+    const onError = (e: any) => {
+      try { fetch('/__audit?name=client_errors', { method:'POST', headers:{'content-type':'application/json'}, body: JSON.stringify({ type:'enhancer_error', message:String(e?.message||e), stack:String(e?.error?.stack||'') , route: location.pathname+location.search, ts: new Date().toISOString() }) }); } catch {}
+    };
+    window.addEventListener('error', onError);
+    return () => window.removeEventListener('error', onError);
+  }, [setErr]);
+  return children;
+}
+
 export default function CardEnhancer(){
-  const [location] = useLocation();
   const integrations = useIntegrations();
-  const match = useMemo(()=>{
-    // Expect /card/<entity>/:id
-    const m = location?.match(/^\/card\/(property|unit|lease|tenant)\/([^\/]+)$/i);
-    if (!m) return null;
-    return { entity: m[1].toLowerCase(), id: m[2] };
-  }, [location]);
+  const [route, setRoute] = useState<string>(typeof window !== 'undefined' ? window.location.pathname + window.location.search : "");
+  useEffect(() => {
+    const onPop = () => setRoute(window.location.pathname + window.location.search);
+    window.addEventListener('popstate', onPop);
+    return () => window.removeEventListener('popstate', onPop);
+  }, []);
+  const match = useMemo(() => parsePath(route), [route]);
 
   // Never render on owner (prevents duplicates where we already injected UI)
   if (!match) return null;
 
-  const tableMap: Record<string,string> = { property:"properties", unit:"units", lease:"leases", tenant:"tenants" };
+  const tableMap: Record<string,string> = { property:"properties", unit:"units", lease:"leases", tenant:"tenants" };
   const refTable = match ? (tableMap[match.entity] || (match.entity + "s")) : "";
 
   // ---- Load entity details for hero/actions (phone/email/title)
   const [item, setItem] = useState<any>(null);
   const [loading, setLoading] = useState<boolean>(false);
   useEffect(()=>{ (async()=>{
     if (!refTable) return;
     setLoading(true);
     try{
       const r = await fetch(`/api/entities/${refTable}/${encodeURIComponent(match.id)}`);
       if (r.ok){ const j = await r.json(); setItem(j.item); } else { setItem(null); }
     }catch{ setItem(null); }
     finally{ setLoading(false); }
   })(); },[refTable, match?.id]);
 
   // Derive title + comms
   function pick(...keys:string[]){
     for (const k of keys){ if (item && item[k]) return String(item[k]); }
     return "";
   }
   const title = (() => {
     if (refTable==="properties") {
       const line1 = pick("line1","address"); const city = pick("city"); const st = pick("state"); const zip = pick("postal_code");
       return [line1, [city,st].filter(Boolean).join(", "), zip].filter(Boolean).join(" · ");
     }
     if (refTable==="units") return pick("label") || `Unit #${match.id}`;
     if (refTable==="leases") return `Lease #${match.id}`;
     if (refTable==="tenants") return pick("display_name","name") || `Tenant #${match.id}`;
     return `${match.entity} #${match.id}`;
   })();
   const phone = pick("phone","contact_phone","manager_phone","primary_phone");
   const email = pick("email","contact_email","manager_email","primary_email");
   const telHref = phone ? `tel:${phone}` : undefined;
-  const teamsMsgHref = email ? `https://teams.microsoft.com/l/chat/0/0?users=${encodeURIComponent(email)}` : undefined;
+  const teamsMsgHref = email ? `https://teams.microsoft.com/l/chat/0/0?users=${encodeURIComponent(email)}` : undefined;
   const outlookMailHref = email ? `mailto:${email}` : undefined;
   const m365 = !!integrations?.m365;
 
-  return (
-    <div className="p-6">
+  return (
+    <ErrorBoundary>
+    <div className="p-6">
       {/* Hero strip: title + source badges + quick actions */}
       <div className="mb-3 flex items-center justify-between">
         <div className="flex items-center gap-3">
           <div>
             <div className="text-base font-semibold">{title || `Card #${match.id}`}</div>
             <div className="text-xs text-neutral-500 mt-0.5 capitalize">{match.entity}</div>
           </div>
           <SourceBadges
             doorloop={!!integrations?.doorloop}
             corelogic={!!integrations?.corelogic}
             m365={!!integrations?.m365}
             dropbox={!!integrations?.dropbox}
           />
         </div>
         <div className="flex items-center gap-2">
           <a className={`btn btn-sm ${telHref?'':'opacity-50 cursor-not-allowed'}`} href={telHref} title={telHref? 'Call via system dialer' : (loading?'Loading…':'No phone on file')}>Call</a>
           <a className={`btn btn-sm ${m365 && teamsMsgHref?'':'opacity-50 cursor-not-allowed'}`} href={m365 && teamsMsgHref ? teamsMsgHref : undefined} title={m365? (teamsMsgHref?'Open Teams chat':'No email on file') : 'Microsoft 365 not configured'}>Message (Teams)</a>
           <a className={`btn btn-sm ${outlookMailHref?'':'opacity-50 cursor-not-allowed'}`} href={outlookMailHref} title={outlookMailHref?'Compose email':'No email on file'}>Email</a>
+          {/* Mounted beacon (visible only when debug=1) */}
+          {new URLSearchParams(location.search).get('debug')==='1' ? (
+            <span className="text-[10px] text-neutral-400 ml-2">enhancer✓</span>
+          ) : null}
         </div>
       </div>
 
       {/* Files + Activity (always useful; they work off global integrations/audit) */}
       <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
         <div className="card bg-neutral-900 border border-neutral-800">
           <div className="card-header px-4 py-3 border-b border-neutral-800">
             <div className="text-sm font-semibold">Files</div>
           </div>
           <div className="card-content p-4">
             {integrations ? (
               <FilesTab
                 doorloop={integrations.doorloop}
                 dropbox={integrations.dropbox}
                 sharepoint={integrations.sharepoint}
                 dlFiles={[]}
                 dbxFiles={[]}
                 spFiles={[]}
               />
             ) : (
               <div className="text-sm text-neutral-400">Loading integrations…</div>
             )}
           </div>
         </div>
 
         <div className="card bg-neutral-900 border border-neutral-800">
           <div className="card-header px-4 py-3 border-b border-neutral-800">
             <div className="text-sm font-semibold">Activity</div>
           </div>
           <div className="card-content p-4">
             <ActivityFeed table={refTable} refId={String(match.id)} />
           </div>
         </div>
       </div>
     </div>
+    </ErrorBoundary>
   );
 }
*** End Patch
PATCH

############################################
# 2) Frontend – Capture client errors globally (dev index)
############################################
applypatch <<'PATCH'
*** Begin Patch
*** Update File: src/dev/index.ts
@@
 export async function enableInspector() {
   const url = new URL(location.href);
   if (url.searchParams.get('debug') !== '1') return;
+  // global error capture
+  try{
+    window.addEventListener('error', (e) => {
+      try { fetch('/__audit?name=client_errors', { method:'POST', headers:{'content-type':'application/json'}, body: JSON.stringify({ type:'window_error', message:String(e?.message||e), stack:String(e?.error?.stack||''), route: location.pathname+location.search, ts: new Date().toISOString() }) }); } catch {}
+    });
+    window.addEventListener('unhandledrejection', (e:any) => {
+      try { fetch('/__audit?name=client_errors', { method:'POST', headers:{'content-type':'application/json'}, body: JSON.stringify({ type:'unhandledrejection', reason:String(e?.reason||''), route: location.pathname+location.search, ts: new Date().toISOString() }) }); } catch {}
+    });
+  }catch{}
   const { UiInspector } = await import('./UiInspector');
   // mount immediately after app root
   const root = document.createElement('div');
   root.id = 'ecc-ui-inspector-root';
   document.body.appendChild(root);
   UiInspector.mount('#ecc-ui-inspector-root');
 }
 enableInspector();
*** End Patch
PATCH

git add -A
git commit -m "fix(enhancer): router-free, error boundary, client error capture & mounted beacon" || true

What to do next (fast)

Ask Replit to apply the patch, restart, and open /card/property/42?debug=1 again.

In the inspector calls list, you should now see requests like:

/api/entities/properties/42

/api/files/... (if configured)

/api/audit... for Activity feed

Confirm you see the tiny enhancer✓ beacon in the hero actions row (only when ?debug=1).

If you still see no entity calls:

Ask Replit to paste the contents of public/__audit/client_errors.json (our global capture), plus any console errors. That will pinpoint exactly which import or component is failing.

Why this fixes your symptom

Your inspector showed only /api/config/integrations; that means our enhancer didn’t run.

The most common reason: router context mismatch. We removed it.

Now the enhancer uses window.location and cannot be blocked by router providers.

Any runtime error in the enhancer is posted to /__audit?name=client_errors, so we no longer fly blin