Replit Agent Prompt — “Genesis Portfolio V3: Reconcile + Polish (no drift)”

ROLE
You are a senior React + TypeScript engineer. You will fix data mapping and columns for the 5 Portfolio V3 pages (Properties, Units, Leases, Tenants, Owners), add small visual components (status tag, progress bar, actions menu), and keep all existing styling and structure intact.

ABSOLUTE GUARDRAILS (do not violate):

Do not change global theme, CSS tokens, Tailwind config, or sidebar/nav styles.

Do not alter routes, feature folder layout, or DataTable’s public API.

Do not remove existing features (search, filters, pagination, CSV export).

Do not swap to mock data. Use the existing collection hooks already wired up.

Keep pagination selector at the bottom. Keep sticky headers, zebra banding.

Keep all named exports expected by the pages (e.g., PROPERTY_COLUMNS, mapProperty, etc.).

Files you may edit (and only these)

src/pages/portfolio/columns.tsx ← mappers + column definitions

src/pages/portfolio/properties/index.tsx

src/pages/portfolio/units/index.tsx

src/pages/portfolio/leases/index.tsx

src/pages/portfolio/tenants/index.tsx

src/pages/portfolio/owners/index.tsx

src/utils/format.ts ← add missing safe helpers only (don’t break existing exports)

src/features/portfolio/components/StatusTag.tsx ← new

src/features/portfolio/components/ProgressBar.tsx ← new

src/features/portfolio/components/ActionMenu.tsx ← new

If any file doesn’t exist, create it. Do not touch other files.

What’s broken today (fix all)

Wrong/Missing fields on each table:

Properties: missing ZIP, occupancy sometimes as raw numbers (make visual), “Active” must be a badge.

Units: missing/incorrect Beds, Baths, SQFT, Status, Market Rent.

Leases: must show Tenant(s), Start, End, Rent, and Status with badge.

Tenants: must show Type (primary|secondary|prospect) with badge; balance right-aligned; include Property and Unit.

Owners: must show Company, Email, Phone, Active; remove property list column.

Double-click on rows should navigate to the entity’s asset card route.

Numeric alignment: all numerics right-aligned.

Filters: text contains; number min/max; select where specified.

Step 1 — Audit the live data shape (temporary logs)

For each page, immediately after rows load, log the first row so we can confirm key paths (remove logs before commit).

if (rows && rows.length) {
  console.debug("AUDIT/<entity>", rows[0], JSON.parse(JSON.stringify(rows[0])));
}


Entities: properties, units, leases, tenants, owners.

Step 2 — Add safe helpers (only if missing)

In src/utils/format.ts ensure these exist (add without breaking current exports):

export const dash = "—";

// Safe deep getter
export function getPath<T = any>(obj: any, path: string, d?: T): T | undefined {
  try {
    return path.split(".").reduce<any>((v, k) => (v == null ? v : v[k]), obj) ?? d;
  } catch { return d; }
}

// Keep existing money/percent/shortDate/boolBadge if present; add only if missing:
export function money(n?: number | null) {
  const v = typeof n === "number" ? n : 0;
  return v.toLocaleString(undefined, { style: "currency", currency: "USD", maximumFractionDigits: 0 });
}
export function percent(n?: number | null) {
  if (n == null || Number.isNaN(n)) return "0%";
  return `${Math.round(n)}%`;
}
export function shortDate(iso?: string | null) {
  if (!iso) return dash;
  const d = new Date(iso);
  return Number.isNaN(+d) ? dash : d.toISOString().slice(0,10);
}

Step 3 — New “Genesis” micro-components (reusable, brand-aware)

Create these in src/features/portfolio/components/ and use existing CSS tokens (no theme changes). Keep styles minimal; rely on current .ecc-badge and table styles.

3.1 StatusTag.tsx
import React from "react";

type Props = { value?: string | null };

export default function StatusTag({ value }: Props) {
  const v = (value ?? "").toString().toLowerCase();
  let cls = "ecc-badge";
  if (["active","occupied","ok","true","yes"].includes(v)) cls += " ecc-badge--ok";
  else if (["ended","vacant","unknown","inactive","false","no"].includes(v)) cls += " ecc-badge--muted";
  else if (["litigation","past_due","delinquent"].includes(v)) cls += " ecc-badge--bad";
  else cls += " ecc-badge--warn";
  return <span className={cls}>{(value ?? "").toString().toUpperCase() || "—"}</span>;
}

3.2 ProgressBar.tsx
import React from "react";

export default function ProgressBar({ value = 0 }: { value?: number }) {
  const pct = Math.max(0, Math.min(100, Math.round(value)));
  return (
    <div className="ecc-occ">
      <div className="ecc-occ-bar"><div style={{ width: `${pct}%` }} /></div>
      <span className="ecc-occ-label">{pct}%</span>
    </div>
  );
}

3.3 ActionMenu.tsx
import React, { useState, useRef, useEffect } from "react";

export default function ActionMenu({ onSelect }: { onSelect?: (key:string)=>void }) {
  const [open, setOpen] = useState(false);
  const ref = useRef<HTMLDivElement>(null);
  useEffect(()=>{
    const h = (e:MouseEvent)=>{ if(!ref.current?.contains(e.target as Node)) setOpen(false); };
    document.addEventListener("mousedown", h); return ()=>document.removeEventListener("mousedown", h);
  },[]);
  const click = (key:string)=>{ onSelect?.(key); setOpen(false); };

  return (
    <div className="relative" ref={ref}>
      <button className="ecc-btn" aria-label="Row actions" onClick={()=>setOpen(v=>!v)}>⋯</button>
      {open && (
        <div className="ecc-menu">
          <button onClick={()=>click("view")}>View Details</button>
          <button onClick={()=>click("edit")}>Edit</button>
          <button onClick={()=>click("report")}>Generate Report</button>
        </div>
      )}
    </div>
  );
}


If .ecc-menu doesn’t exist, add minimal styles inline or reuse existing dropdown styles.

Step 4 — Reconcile mappers + columns in src/pages/portfolio/columns.tsx

Important: Use the actual key paths from Step 1 audit. Below are target shapes; replace getPath paths to match your payloads.

4.1 Properties
import React from "react";
import { getPath, money, percent, shortDate, dash } from "../../utils/format";
import ProgressBar from "../../features/portfolio/components/ProgressBar";
import StatusTag from "../../features/portfolio/components/StatusTag";

export type PropertyRow = {
  id: string;
  name: string;
  type: string;
  class: string;
  state: string;
  city: string;
  zip: string;
  units: number;
  occPct: number;
  active: string | boolean; // keep as-is for tag
};

export function mapProperty(src:any): PropertyRow {
  const units = Number(getPath(src,"units.total", getPath(src,"units",0))) || 0;
  const occupied = Number(getPath(src,"units.occupied", 0)) || 0;
  const occPctRaw = Number(getPath(src,"occupancyPct", NaN));
  const occPct = Number.isFinite(occPctRaw) ? occPctRaw : (units ? Math.round((occupied/units)*100) : 0);
  return {
    id: String(getPath(src,"id") ?? getPath(src,"_id")),
    name: String(getPath(src,"displayName") ?? getPath(src,"address.line1") ?? getPath(src,"name") ?? dash),
    type: String(getPath(src,"type") ?? dash),
    class: String(getPath(src,"class") ?? dash),
    state: String(getPath(src,"address.state") ?? getPath(src,"state") ?? dash),
    city: String(getPath(src,"address.city") ?? getPath(src,"city") ?? dash),
    zip: String(getPath(src,"address.zip") ?? getPath(src,"zip") ?? dash),
    units,
    occPct: Math.max(0, Math.min(100, occPct)),
    active: getPath(src,"active") ?? dash,
  };
}

export const PROPERTY_COLUMNS = [
  { key:"name",  header:"PROPERTY", filter:"text", minWidth:260, render:(r:PropertyRow)=><strong>{r.name}</strong> },
  { key:"type",  header:"TYPE", filter:"text" },
  { key:"class", header:"CLASS", filter:"text" },
  { key:"state", header:"STATE", filter:"text", width:80 },
  { key:"city",  header:"CITY", filter:"text" },
  { key:"zip",   header:"ZIP",  filter:"text", width:100 },
  { key:"units", header:"UNITS", align:"right", sort:"numeric", filter:"numberRange", width:90 },
  { key:"occPct", header:"OCCUPANCY", sort:"numeric", render:(r:PropertyRow)=><ProgressBar value={r.occPct} /> },
  { key:"active", header:"ACTIVE",
    filter:{ type:"select", options:["All","Active","Inactive"] },
    render:(r:PropertyRow)=><StatusTag value={String(r.active)} /> },
];

4.2 Units
export type UnitRow = {
  id: string;
  property: string;
  unit: string;
  beds: number;
  baths: number;
  sqft: number;
  status: string;
  marketRent: number;
};

export function mapUnit(src:any): UnitRow {
  return {
    id: String(getPath(src,"id") ?? getPath(src,"_id")),
    property: String(getPath(src,"property.displayName") ?? getPath(src,"property.name") ?? dash),
    unit: String(getPath(src,"label") ?? getPath(src,"unit") ?? dash),
    beds: Number(getPath(src,"beds",0)),
    baths: Number(getPath(src,"baths",0)),
    sqft: Number(getPath(src,"sqft",0)),
    status: String(getPath(src,"status") ?? dash),
    marketRent: Number(getPath(src,"marketRent",0)),
  };
}

export const UNIT_COLUMNS = [
  { key:"property", header:"PROPERTY", filter:"text", minWidth:260 },
  { key:"unit", header:"UNIT", filter:"text", width:120 },
  { key:"beds", header:"BEDS", align:"right", sort:"numeric", filter:"numberRange", width:80 },
  { key:"baths", header:"BATHS", align:"right", sort:"numeric", filter:"numberRange", width:90 },
  { key:"sqft", header:"SQFT", align:"right", sort:"numeric", filter:"numberRange" },
  { key:"status", header:"STATUS", filter:{type:"select", options:["All","Occupied","Vacant","Make-Ready","Down"]},
    render:(r:UnitRow)=><StatusTag value={r.status} /> },
  { key:"marketRent", header:"MARKET RENT", align:"right", sort:"numeric", filter:"numberRange",
    render:(r:UnitRow)=>money(r.marketRent) },
];

4.3 Leases
export type LeaseRow = {
  id: string;
  property: string;
  unit: string;
  tenants: string;
  status: string;
  start: string;
  end: string;
  rent: number;
};

export function mapLease(src:any): LeaseRow {
  const names = (getPath<any[]>(src,"tenants") ?? [])
    .map(t=> String(getPath(t,"fullName") ?? getPath(t,"name") ?? "")).filter(Boolean).join(", ");
  return {
    id: String(getPath(src,"id") ?? getPath(src,"_id")),
    property: String(getPath(src,"property.displayName") ?? getPath(src,"property.name") ?? dash),
    unit: String(getPath(src,"unit.label") ?? getPath(src,"unit") ?? dash),
    tenants: names || dash,
    status: String(getPath(src,"status") ?? dash),
    start: String(getPath(src,"startDate") ?? getPath(src,"start") ?? ""),
    end: String(getPath(src,"endDate") ?? getPath(src,"end") ?? ""),
    rent: Number(getPath(src,"rent",0)),
  };
}

export const LEASE_COLUMNS = [
  { key:"property", header:"PROPERTY", filter:"text", minWidth:260 },
  { key:"unit", header:"UNIT", filter:"text", width:120 },
  { key:"tenants", header:"TENANT(S)", filter:"text", minWidth:220, render:(r:LeaseRow)=><strong>{r.tenants}</strong> },
  { key:"status", header:"STATUS", filter:{type:"select", options:["All","active","ended","pending"]},
    render:(r:LeaseRow)=><StatusTag value={r.status} /> },
  { key:"start", header:"START", sort:"text", render:(r:LeaseRow)=>shortDate(r.start) },
  { key:"end", header:"END", sort:"text", render:(r:LeaseRow)=>shortDate(r.end) },
  { key:"rent", header:"RENT", align:"right", sort:"numeric", filter:"numberRange", render:(r:LeaseRow)=>money(r.rent) },
];

4.4 Tenants
export type TenantRow = {
  id: string;
  name: string;
  email: string;
  phone: string;
  property: string;
  unit: string;
  type: string; // primary | secondary | prospect
  balance: number;
};

export function mapTenant(src:any): TenantRow {
  const type =
    (getPath(src,"type") ?? getPath(src,"role") ?? "").toString().toLowerCase()
    || (!getPath(src,"leaseId") ? "prospect" : "primary");
  return {
    id: String(getPath(src,"id") ?? getPath(src,"_id")),
    name: String(getPath(src,"fullName") ?? getPath(src,"name") ?? dash),
    email: String(getPath(src,"email") ?? dash),
    phone: String(getPath(src,"phone") ?? getPath(src,"phoneNumber") ?? dash),
    property: String(getPath(src,"property.displayName") ?? getPath(src,"property.name") ?? dash),
    unit: String(getPath(src,"unit.label") ?? getPath(src,"unit") ?? dash),
    type,
    balance: Number(getPath(src,"balance",0)),
  };
}

export const TENANT_COLUMNS = [
  { key:"name", header:"TENANT", filter:"text", minWidth:200 },
  { key:"email", header:"EMAIL", filter:"text" },
  { key:"phone", header:"PHONE", filter:"text" },
  { key:"property", header:"PROPERTY", filter:"text", minWidth:220 },
  { key:"unit", header:"UNIT", filter:"text", width:120 },
  { key:"type", header:"TYPE", filter:{type:"select", options:["All","primary","secondary","prospect"]},
    render:(r:TenantRow)=><StatusTag value={r.type === "prospect" ? "prospect_tenant" : "lease_tenant"} /> },
  { key:"balance", header:"BALANCE", align:"right", sort:"numeric", filter:"numberRange",
    render:(r:TenantRow)=> {
      const val = money(r.balance);
      return <span style={{color: r.balance < 0 ? "#e5484d" : undefined}}>{val}</span>;
    }},
];

4.5 Owners
export type OwnerRow = {
  id: string;
  company: string;
  email: string;
  phone: string;
  active: string | boolean;
};

export function mapOwner(src:any): OwnerRow {
  const company = String(
    getPath(src,"company") ?? getPath(src,"companyName") ?? getPath(src,"name") ?? getPath(src,"ownerName") ?? dash
  );
  return {
    id: String(getPath(src,"id") ?? getPath(src,"_id")),
    company,
    email: String(getPath(src,"email") ?? dash),
    phone: String(getPath(src,"phone") ?? getPath(src,"phoneNumber") ?? dash),
    active: getPath(src,"active") ?? dash,
  };
}

export const OWNER_COLUMNS = [
  { key:"company", header:"COMPANY", filter:"text", minWidth:240, render:(r:OwnerRow)=><strong>{r.company}</strong> },
  { key:"email", header:"EMAIL", filter:"text" },
  { key:"phone", header:"PHONE", filter:"text" },
  { key:"active", header:"ACTIVE", filter:{type:"select", options:["All","Active","Inactive"]}, render:(r:OwnerRow)=><StatusTag value={String(r.active)} /> },
];

Step 5 — Row double-click → asset card

In each index.tsx, pass onRowDoubleClick or rowHref (whichever the table supports). Do not change layout.

// properties/index.tsx
<DataTable
  rows={rows.map(mapProperty)}
  columns={PROPERTY_COLUMNS}
  getRowId={(r)=>r.id}
  onRowDoubleClick={(r)=>navigate(`/portfolio/properties/${r.id}`)}
/>


Repeat for Units/Leases/Tenants/Owners with their respective routes.

Also add a trailing actions cell if the table supports rowActions:

rowActions={(r)=> <ActionMenu onSelect={(key)=>console.log("row action", key, r)} />}

Step 6 — Alignment & filters verification

All numeric columns: align:"right", sort:"numeric", filter:"numberRange".

Text: filter:"text".

Select: { type:"select", options:[...] } as defined above.

Verify on each page that filters/sorts affect results.

Step 7 — Clean up and final checks

Remove temporary console.debug audit logs.

Confirm no TS errors / runtime errors.

Confirm >0 results on all five tables with the correct columns populated.

Confirm double-click navigates to asset card.

Confirm owners no longer shows properties list column.

Commit message:

feat(portfolio): reconcile data mappers & columns for properties/units/leases/tenants/owners; add StatusTag/ProgressBar/ActionMenu; enable row double-click; right-align numerics; keep theme and layout unchanged


End of prompt.