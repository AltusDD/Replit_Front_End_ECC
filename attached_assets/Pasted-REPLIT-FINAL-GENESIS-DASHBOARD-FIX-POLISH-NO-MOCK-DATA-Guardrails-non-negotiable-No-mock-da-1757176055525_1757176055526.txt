REPLIT — FINAL GENESIS DASHBOARD FIX & POLISH (NO MOCK DATA)
Guardrails (non-negotiable)

No mock data anywhere. If an API field is missing, show a clear empty-state and log it in the QA overlay; never synthesize.

Date format: Mon D, YYYY everywhere (tooltips, tables, labels).

Genesis palette: replace any brown/tan with our cool neutrals; high contrast only.

Actionability: every KPI and feed item deep-links to a pre-filtered view.

Silence AbortError: React StrictMode double-invocation must not print DOMException noise.

Maps: Google Maps only; plot real lat/lng; cluster; never jitter.

0) Theme tokens — remove brown tint, raise contrast

Edit: src/styles/tokens.css

:root{
  --altus-black:#0b0e12;
  --altus-gold:#d6b36a;

  /* cool neutrals (light grey panels, better contrast) */
  --panel-bg:#171a1f;
  --panel-elev:#1c2026;
  --line:#2a2f36;

  --text:#e8eaf0;
  --text-dim:#a6adbb;

  --good:#2cc38a;
  --warn:#f3c969;
  --bad:#ef5953;
  --neutral:#8b93a3;
}


Edit: src/styles/Dashboard.css

.ecc-panel: background:var(--panel-bg); border:1px solid var(--line); border-radius:12px; box-shadow:0 8px 24px rgba(0,0,0,.35);

KPI value 24px/600; labels 12px uppercase var(--text-dim).

Map container heights: 520px (xl), 440px (lg), 360px (sm).

Gridline/axis color = var(--line); label color = var(--text-dim).

Shimmer skeleton class; no layout shift.

1) Global formatters (single source of truth)

Edit: src/utils/format.ts

Ensure only these are used in dashboard components:

export const fmtDate = (iso?: string|null) =>
  !iso ? "—" : new Date(iso).toLocaleDateString(undefined,{month:"short",day:"numeric",year:"numeric"});
export const fmtMoney = (n?: number|null) => (n==null||Number.isNaN(n)) ? "—"
  : (n===0 ? "$0" : n.toLocaleString(undefined,{style:"currency",currency:"USD"}));
export const fmtPct = (n?: number|null, dp=1) => (n==null||Number.isNaN(n)) ? "—"
  : `${(n*100).toFixed(dp)}%`;
export const fmtCompact = (n?: number|null) => (n==null||Number.isNaN(n)) ? "—"
  : Intl.NumberFormat(undefined,{notation:"compact"}).format(n);


Replace any inline date/money/pct logic in dashboard files with these.

2) Network & AbortError hygiene

Edit: src/utils/net.ts

export const isAbortError = (e: unknown) =>
  e instanceof DOMException && e.name === "AbortError";

export async function fetchJSON<T>(url: string, signal?: AbortSignal): Promise<T> {
  const res = await fetch(url,{signal,credentials:"include"});
  if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
  return res.json() as Promise<T>;
}


Patch all dashboard effects to:

create const ac = new AbortController(); const s = ac.signal;

try { const [a,b,c] = await Promise.all([...]) } catch(e){ if(!isAbortError(e)) setError(e as Error) } finally { if(!s.aborted) setLoading(false) }

return () => ac.abort();

Do not call setState if s.aborted === true.

Dev filter (optional, dev-only):

if (import.meta.env.DEV) {
  window.addEventListener("unhandledrejection",(ev)=>{
    if (isAbortError(ev.reason)) ev.preventDefault();
  });
}

3) Centralize portfolio math (avoid zero KPIs)

Add: src/features/shared/portfolioMath.ts

export const OCCUPIED = new Set(["occupied","OCCUPIED"]);
export const VACANT   = new Set(["vacant","VACANT"]);
export const READY    = (u:any) => !!(u.rent_ready || u.turn_status==="ready");

export function occupancy(units:any[]){
  const total = units.filter(u => !u.model && !u.down).length;
  const occ   = units.filter(u => OCCUPIED.has(String(u.status))).length;
  return { occ, total, ratio: total ? occ/total : 0 };
}

export function rentReadyVacant(units:any[]){
  const vac = units.filter(u => VACANT.has(String(u.status)));
  const ready = vac.filter(READY);
  return { ready: ready.length, vac: vac.length };
}

export function collectionsMTD(tx:any[], today=new Date()){
  const y=today.getFullYear(), m=today.getMonth();
  const inMonth = (d:string) => { const dt=new Date(d); return dt.getFullYear()===y && dt.getMonth()===m; };
  const billed   = tx.filter(t => t.kind==="rent_charge" && inMonth(t.date))
                     .reduce((s,t)=>s+(t.amount_cents||0),0);
  const receipts = tx.filter(t => t.kind==="rent_payment" && inMonth(t.date))
                     .reduce((s,t)=>s+(t.amount_cents||0),0);
  return { billed_cents:billed, receipts_cents:receipts, ratio: billed ? receipts/billed : 0 };
}

export function noiMTD(tx:any[], excludeCapex=true){
  const isIncome = (t:any)=> ["rent_payment","other_income"].includes(t.kind);
  const isExpense= (t:any)=> ["opex","repair","utility","tax","insurance","capex"].includes(t.kind);
  const m = new Date().getMonth(), y=new Date().getFullYear();
  const inMonth = (d:string)=>{ const dt=new Date(d); return dt.getFullYear()===y && dt.getMonth()===m; };
  const inc = tx.filter(t => inMonth(t.date) && isIncome(t))
                .reduce((s,t)=>s+(t.amount_cents||0),0);
  const exp = tx.filter(t => inMonth(t.date) && isExpense(t) && (!excludeCapex || t.kind!=="capex"))
                .reduce((s,t)=>s+(t.amount_cents||0),0);
  return { inc_cents:inc, exp_cents:exp, noi_cents:inc-exp };
}


Refactor KPI code to use these helpers so we stop getting 0.0% when the API is fine.

4) Live data hook (one source of truth)

Edit: src/features/dashboard/hooks/useDashboardData.ts

Fetch in parallel:

/api/portfolio/properties

/api/portfolio/units

/api/portfolio/leases

/api/portfolio/tenants

/api/maintenance/workorders

/api/accounting/transactions?range=90d

Compute:

kpis.occupancy via occupancy(units)

kpis.rentReadyVacant via rentReadyVacant(units)

kpis.collections via collectionsMTD(transactions) (+ return numerator/denominator for tooltip)

kpis.noi via noiMTD(transactions)

Map dataset: only include properties with lat && lng; count missingGeo.

QA overlay payload:

qa:{
  counts:{properties:props.length, units:units.length, leases:leases.length, tenants:tenants.length, workorders:wos.length, transactions:tx.length},
  missing:{ geo: missingGeo, tenantNames: tenants.filter(t=>!t.display_name && !t.full_name).length, woPriority: wos.filter(w=>!w.priority).length },
  lastUpdated: new Date().toISOString()
}


Never setState if aborted. Ignore AbortErrors.

5) KPI cards — readable & clickable

Edit: src/features/dashboard/components/KpiTicker.tsx

4 cards:

Occupancy — donut + %; click → /portfolio/units?status=occupied

Rent Ready / Vacant — ready / vac ratio; click → /portfolio/units?status=vacant&rent_ready=true

Collections (MTD) — % + tooltip showing receipts/billed; click → /accounting?range=mtd&type=rent

Critical WOs — count; click → /maintenance?priority=high,critical&status=open

Values 24px; label 12px uppercase; trend (if available) 12px.

6) Google Map — cluster & info actions

Edit: src/features/dashboard/components/PortfolioGoogleMap.tsx

Use @vis.gl/react-google-maps, key VITE_GOOGLE_MAPS_API_KEY.

Fit bounds to markers; cluster with @googlemaps/markerclusterer.

Pin colors:

green = occupied & current

yellow = vacant & rent-ready

orange = vacant & not ready

red = occupied & delinquent

InfoWindow actions:

View Details → /card/property/{id}

Open WOs → /maintenance?property_id={id}&status=open

View Tenants → /portfolio/tenants?property_id={id}

If qa.missing.geo > 0, show a gold pill “Missing geo: N”; when ?debug=1, clicking shows a drawer listing the properties missing coordinates.

7) Priority Action Feed — clear CTAs

Edit: src/features/dashboard/components/PriorityActionFeed.tsx

Delinquency Alerts: tenant → property, balance (red), days overdue; buttons:

Send Reminder → /communication?tenant_id={id}&template=late_notice

Start Eviction → /legal?tenant_id={id}&action=eviction

Lease Renewals (≤45d): tenant → property, expires {fmtDate}; buttons:

Prepare Renewal → /leases?expiring=45

Do Not Renew → /leases?decision=non_renew

Maintenance Hotlist: property, priority, age days; button:

Assign Vendor → /maintenance?assign=1&workorder_id={id}

Positive empty states (no blank slabs).

8) Cashflow+NOI & Leasing Funnel — actionable, not pretty-only

Edit: src/features/dashboard/components/FinancialsAndLeasing.tsx

Cash Flow (90d) ComposedChart: green bars (income), neutral bars (expense), gold line (NOI).

Tooltip: income, expenses, NOI, variance vs prior period.

Legend toggles series.

Leasing Funnel (30d): Leads → Tours → Applications → Approved → Signed, conversion % on each step.

CTAs: View Vacants → /portfolio/units?status=vacant, View Applications → /leases?status=pending

9) Occupancy by City — sortable & drillable

Edit: src/features/dashboard/components/OccupancyByCity.tsx

Columns: City, # Properties, Occupied Units, Vacant Units, Occupancy % (gold progress).

Right-align numerics; column sorting; search; Top 10 + “Show all”.

Row click → /portfolio/properties?city={name}.

10) Page assembly & QA overlay

Edit: src/features/dashboard/pages/DashboardPage.tsx

Grid:

Row 1: KPIs (full)

Row 2: Map (2/3) + Action Feed (1/3)

Row 3: Cashflow (1/2) + Leasing (1/2)

Row 4: Occupancy by City (full)

Skeletons for each section.

?debug=1 shows a right-side QA drawer dumping qa JSON and counts. Add “Copy JSON” button.

11) Deep-link verification (block if broken)

KPI and feed clicks must open filtered routes:

/portfolio/units?status=vacant&rent_ready=true

/maintenance?priority=high,critical&status=open

/accounting?range=mtd&type=rent, etc.

12) Acceptance criteria (must PASS before commit)

No mock data strings or Math.random in dashboard files.

No console errors/warnings in dev. AbortErrors suppressed.

All dates are Mon D, YYYY.

Occupancy > 0% when there are occupied units; matches Portfolio V3 math.

Collections MTD tooltip totals match Accounting MTD screen.

NOI equals income-expenses for MTD; matches Accounting.

Leasing funnel counts line up with filtered lists.

Map clusters correctly; missing-geo pill count matches QA.

Contrast AA for text on panels and axis labels.

Responsive: desktop/tablet/mobile with no overlaps or collapsed sections.

Return: screenshots (desktop & mobile), QA JSON (?debug=1), one-paragraph diff per file.

Commit message:

feat(dashboard): Genesis final — live KPI math, AbortError hygiene, clustered Google Map, action feed CTAs, cashflow+NOI, leasing funnel, occupancy table, high-contrast tokens, global date format, QA overlay

Why this fixes what you’re seeing

AbortError spam is suppressed and guarded, so StrictMode doesn’t pollute the console.

KPI math is centralized (no more zeroed percentages from field mismatches).

Dates & colors are consistent and legible, with high-contrast panels (no brown tint).

Every widget is actionable with deep links that carry the user to the exact work queue.

The QA overlay makes gaps explicit (e.g., missing geo or priorities), turning “it looks wrong” into concrete upstream tickets.