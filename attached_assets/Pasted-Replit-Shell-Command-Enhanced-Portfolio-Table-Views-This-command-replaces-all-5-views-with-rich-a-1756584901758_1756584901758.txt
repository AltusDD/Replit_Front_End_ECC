Replit Shell Command: Enhanced Portfolio Table Views

This command replaces all 5 views with rich, actionable tables, including dynamic rendering, status formatting, and intelligent visual cues.

⚠️ Assumes your API already returns the new fields (occupancy_rate, status, tenant_name, etc). If not, backend/API patching is needed — I can help generate those too.

📜 Paste this full block into the Replit shell:
set -euo pipefail

gen_entity () {
  local Pretty="$1"; local coll="$2"; shift 2; local -a cols=("$@")
  mkdir -p "src/pages/portfolio/$coll"
  cat > "src/pages/portfolio/$coll/index.tsx" <<TSX
import Table from "@/components/ui/Table";
import { useCollection } from "@lib/useApi";

const cols = [
  ${cols[*]}
];

export default function ${Pretty}(){
  const {data, loading, error} = useCollection("${coll}", { order:'updated_at.desc', limit: 200 });

  return (
    <>
      <h1 className="pageTitle">${Pretty}</h1>
      {error ? <div className="panel" style={{padding:12,marginBottom:12}}>API error: {String(error.message||error)}</div> : null}
      <Table<any>
        rows={loading ? [] : data}
        cols={cols}
        cap={\`Loaded \${data.length} ${Pretty.toLowerCase()}\`}
        empty={loading ? 'Loading…' : 'No results'}
      />
    </>
  );
}
TSX
}

# Properties
gen_entity "Properties" properties \
  "{ key:'property_name', label:'Name' }" \
  "{ key:'city', label:'City' }" \
  "{ key:'state', label:'State' }" \
  "{ key:'total_units', label:'Units' }" \
  "{ key:'occupancy_rate', label:'Occupancy', render:(r:any)=> \`\${r.occupancy_rate}%\` }" \
  "{ key:'open_work_orders', label:'Work Orders' }" \
  "{ key:'health_score', label:'Health Score' }" \
  "{ key:'updated_at', label:'Updated' }"

# Units
gen_entity "Units" units \
  "{ key:'unit_name', label:'Name' }" \
  "{ key:'beds', label:'Beds' }" \
  "{ key:'rent', label:'Rent', render:(r:any)=> \`$\${r.rent}\` }" \
  "{ key:'status', label:'Status', render:(r:any)=> <span className={\`badge \${r.status}\`}>{r.status}</span> }" \
  "{ key:'lease_end_date', label:'Lease Ends' }" \
  "{ key:'tenant_name', label:'Tenant' }" \
  "{ key:'updated_at', label:'Updated' }"

# Leases
gen_entity "Leases" leases \
  "{ key:'property_id', label:'Property ID' }" \
  "{ key:'unit_id', label:'Unit ID' }" \
  "{ key:'tenant_name', label:'Tenant' }" \
  "{ key:'lease_start_date', label:'Start Date' }" \
  "{ key:'rent', label:'Rent', render:(r:any)=> \`$\${r.rent}\` }" \
  "{ key:'total_balance_due', label:'Balance Due', render:(r:any)=> \`$\${r.total_balance_due}\` }" \
  "{ key:'status', label:'Status' }" \
  "{ key:'updated_at', label:'Updated' }"

# Tenants
gen_entity "Tenants" tenants \
  "{ key:'full_name', label:'Name' }" \
  "{ key:'tenant_type', label:'Type' }" \
  "{ key:'email', label:'Email' }" \
  "{ key:'property_name', label:'Property' }" \
  "{ key:'unit_name', label:'Unit' }" \
  "{ key:'lease_status', label:'Lease Status' }" \
  "{ key:'total_balance_due', label:'Balance Due', render:(r:any)=> \`$\${r.total_balance_due}\` }" \
  "{ key:'updated_at', label:'Updated' }"

# Owners
gen_entity "Owners" owners \
  "{ key:'display_name', label:'Name' }" \
  "{ key:'company_name', label:'Company' }" \
  "{ key:'email', label:'Contact' }" \
  "{ key:'properties_count', label:'Properties' }" \
  "{ key:'units_count', label:'Units' }" \
  "{ key:'is_active', label:'Active', render:(r:any)=> r.is_active ? 'Yes' : 'No' }" \
  "{ key:'updated_at', label:'Updated' }"

# Restart dev server
pkill -f vite >/dev/null 2>&1 || true
npm run dev

🧠 Next-Level Enhancements (Optional Follow-ups)

Once this is deployed and fields are confirmed to load:

Visual Score Indicators: Convert health_score into colored icons or gauges.

Status Tags: Enhance status, lease_status with colored pill badges.

Quick Filters & Actions: Add filter toggles for "At-Risk Tenants", "Vacant Units", etc.

Mobile Responsiveness: Wrap rows intelligently for smaller screens.