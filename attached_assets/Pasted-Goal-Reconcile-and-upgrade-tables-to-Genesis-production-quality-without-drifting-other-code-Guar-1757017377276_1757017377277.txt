Goal: Reconcile and upgrade tables to “Genesis” production quality without drifting other code.
Guardrails: Only touch the three files listed below. Do not rename, move, or edit any other file. Keep all existing page imports as-is (they import DataTable default). Keep data mappers and column configs unchanged.

Overwrite /src/features/data/useCollection.ts with exactly this content:

/* /src/features/data/useCollection.ts
   Robust collection fetch hook (named + default export).
   - Handles abort on unmount/navigation
   - Accepts either a URL string or null/undefined (returns empty)
   - Normalizes { data: [...] } or raw [] payloads
*/
import { useEffect, useRef, useState } from "react";

export type UseCollectionResult<T = any> = {
  data: T[];
  loading: boolean;
  error: string | null;
  reload: () => void;
};

export function useCollection<T = any>(url?: string | null): UseCollectionResult<T> {
  const [data, setData] = useState<T[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const abortRef = useRef<AbortController | null>(null);
  const bumpRef = useRef(0);

  const reload = () => {
    bumpRef.current++;
    setError(null);
  };

  useEffect(() => {
    if (!url) {
      setData([]);
      setLoading(false);
      setError(null);
      return;
    }

    const ctrl = new AbortController();
    abortRef.current?.abort();
    abortRef.current = ctrl;

    setLoading(true);

    (async () => {
      try {
        const res = await fetch(url, { signal: ctrl.signal });
        if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
        const json = await res.json();

        // Normalize array payloads
        const arr: any[] = Array.isArray(json)
          ? json
          : Array.isArray(json?.data)
          ? json.data
          : [];

        setData(arr as T[]);
        setError(null);
      } catch (e: any) {
        if (e?.name === "AbortError") return; // ignore aborted navigations
        setError(e?.message || "Failed to load");
        setData([]);
      } finally {
        if (!ctrl.signal.aborted) setLoading(false);
      }
    })();

    return () => ctrl.abort();
  }, [url, bumpRef.current]);

  return { data, loading, error, reload };
}

export default useCollection;


Overwrite /src/components/DataTable.tsx with exactly this content:

/* /src/components/DataTable.tsx
   Genesis-grade table:
   - Sticky header + sticky filter row
   - Banded rows, better contrast (see table.css)
   - Per-column filters (text / enum / number range)
   - Multi-sort (click for primary, Shift+click to add/toggle)
   - Right-align numerics automatically
   - Pagination footer with page-size selector at bottom (25..200)
   - CSV export of current filtered set
   - Row hover + double-click opens Drawer
   - Optional row actions menu
   - Loading skeletons & empty/error states

   ZERO external deps; works with existing column configs & mappers.
*/
import React, { useEffect, useMemo, useState } from "react";
import "../styles/table.css";

type Align = "left" | "right";
type SortDir = "asc" | "desc";
type ColType = "text" | "enum" | "number" | "date";

export type DataColumn<Row = any> = {
  key: string;
  header: string;
  align?: Align;
  type?: ColType;                // optional hint; otherwise inferred
  enumValues?: Array<string | number | boolean>;
  render?: (value: any, row: Row) => React.ReactNode;
};

type SortState = { key: string; dir: SortDir };

type DataTableProps<Row = any> = {
  columns: DataColumn<Row>[];
  rows: Row[];
  loading?: boolean;
  error?: string | null;

  // Row identity / behavior
  getRowId?: (row: Row, idx: number) => string | number | undefined;
  onRowDoubleClick?: (row: Row) => void;
  rowHref?: (row: Row) => string; // if provided, double-click navigates

  // Optional row actions cell (rendered at far right)
  rowActions?: (row: Row) => React.ReactNode;

  // Initial sort
  initialSort?: SortState[];
};

const PAGE_OPTIONS = [25, 50, 100, 200];

/* ---------- helpers ---------- */
const isNumber = (v: any) => typeof v === "number" && Number.isFinite(v);
const isBool = (v: any) => typeof v === "boolean";
const isDateish = (v: any) =>
  typeof v === "string" && !Number.isNaN(Date.parse(v));

function inferType(values: any[]): ColType {
  const sample = values.find((v) => v !== null && v !== undefined);
  if (sample == null) return "text";
  if (isNumber(sample)) return "number";
  if (isBool(sample)) return "enum";
  if (isDateish(sample)) return "date";
  return "text";
}

function compare(a: any, b: any, type: ColType): number {
  if (a == null && b == null) return 0;
  if (a == null) return -1;
  if (b == null) return 1;

  if (type === "number") return (a as number) - (b as number);
  if (type === "date") return Date.parse(a) - Date.parse(b);
  return String(a).localeCompare(String(b), undefined, { sensitivity: "base" });
}

function downloadCSV(filename: string, rows: any[], columns: DataColumn[]) {
  const headers = columns.map((c) => c.header);
  const lines = [headers.join(",")];

  for (const r of rows) {
    const line = columns
      .map((c) => {
        const v = (r as any)[c.key];
        const text =
          v == null
            ? ""
            : typeof v === "string"
            ? v
            : typeof v === "number"
            ? String(v)
            : typeof v === "boolean"
            ? (v ? "true" : "false")
            : String(v);
        // simple CSV escape
        const needsQuote = /[",\n]/.test(text);
        return needsQuote ? `"${text.replace(/"/g, '""')}"` : text;
      })
      .join(",");
    lines.push(line);
  }

  const blob = new Blob([lines.join("\n")], { type: "text/csv;charset=utf-8" });
  const a = document.createElement("a");
  a.href = URL.createObjectURL(blob);
  a.download = filename;
  a.click();
  URL.revokeObjectURL(a.href);
}

/* ---------- component ---------- */
export default function DataTable<Row = any>(props: DataTableProps<Row>) {
  const {
    columns,
    rows,
    loading,
    error,
    getRowId,
    onRowDoubleClick,
    rowHref,
    rowActions,
    initialSort = [],
  } = props;

  // derive column types & enums
  const colMeta = useMemo(() => {
    return columns.map((c) => {
      const raw = rows.map((r: any) => r?.[c.key]);
      const type = c.type || inferType(raw);
      let enums: Array<string | number | boolean> | undefined = c.enumValues;

      if (!enums && (type === "enum" || isBool(raw.find((v) => v !== null)))) {
        const uniq = new Set(raw.filter((v) => v !== null && v !== undefined));
        // keep the set small & stable
        enums = Array.from(uniq).slice(0, 50);
      }
      return { ...c, type, enumValues: enums };
    });
  }, [columns, rows]);

  // filters
  type TextFilter = { kind: "text"; value: string };
  type EnumFilter = { kind: "enum"; value: string | number | boolean | "__ALL__" };
  type NumFilter = { kind: "number"; min?: number | ""; max?: number | "" };

  type AnyFilter = TextFilter | EnumFilter | NumFilter;

  const [filters, setFilters] = useState<Record<string, AnyFilter>>({});
  const [q, setQ] = useState(""); // global search

  // sorting
  const [sort, setSort] = useState<SortState[]>(initialSort);

  function toggleSort(colKey: string, additive: boolean) {
    setSort((prev) => {
      const idx = prev.findIndex((s) => s.key === colKey);
      if (idx === -1) {
        // add new
        return additive ? [...prev, { key: colKey, dir: "asc" }] : [{ key: colKey, dir: "asc" }];
      }
      // flip dir or remove if already desc
      const next = [...prev];
      const current = next[idx];
      const newDir: SortDir = current.dir === "asc" ? "desc" : "asc";
      next[idx] = { key: current.key, dir: newDir };
      if (!additive) return [next[idx]]; // single sort
      return next;
    });
  }

  // pagination
  const [pageSize, setPageSize] = useState<number>(25);
  const [page, setPage] = useState<number>(0);

  useEffect(() => {
    // whenever filters or sort changes, reset to page 0
    setPage(0);
  }, [filters, q, sort, pageSize]);

  // apply filters & search
  const filtered = useMemo(() => {
    const textIncludes = (text: string, needle: string) =>
      text.toLowerCase().includes(needle.toLowerCase());

    const passes = (row: any): boolean => {
      // quick global search
      if (q.trim()) {
        const big = colMeta
          .map((c) => {
            const v = row[c.key];
            return v == null ? "" : String(v);
          })
          .join(" • ");
        if (!textIncludes(big, q.trim())) return false;
      }

      // per-column filters
      for (const meta of colMeta) {
        const f = filters[meta.key];
        if (!f) continue;
        const v = row[meta.key];

        if (f.kind === "text") {
          if (!textIncludes(String(v ?? ""), f.value)) return false;
        } else if (f.kind === "enum") {
          if (f.value !== "__ALL__" && v !== f.value) return false;
        } else if (f.kind === "number") {
          const n = v == null ? NaN : Number(v);
          if (f.min !== undefined && f.min !== "" && !(n >= Number(f.min))) return false;
          if (f.max !== undefined && f.max !== "" && !(n <= Number(f.max))) return false;
        }
      }
      return true;
    };

    return rows.filter(passes);
  }, [rows, q, filters, colMeta]);

  // sort
  const sorted = useMemo(() => {
    if (!sort.length) return filtered;
    const withType = (key: string) =>
      colMeta.find((c) => c.key === key)?.type || "text";
    const copy = [...filtered];
    copy.sort((a, b) => {
      for (const s of sort) {
        const t = withType(s.key);
        const cmp = compare((a as any)[s.key], (b as any)[s.key], t);
        if (cmp !== 0) return s.dir === "asc" ? cmp : -cmp;
      }
      return 0;
    });
    return copy;
  }, [filtered, sort, colMeta]);

  // paginate
  const pageCount = Math.max(1, Math.ceil(sorted.length / pageSize));
  const current = sorted.slice(page * pageSize, page * pageSize + pageSize);

  // Drawer (double-click)
  const [drawerRow, setDrawerRow] = useState<Row | null>(null);
  const closeDrawer = () => setDrawerRow(null);

  function handleDbl(row: Row) {
    if (rowHref) {
      const href = rowHref(row);
      if (href) window.location.assign(href);
      return;
    }
    if (onRowDoubleClick) onRowDoubleClick(row);
    else setDrawerRow(row);
  }

  // filter setters
  function setTextFilter(key: string, value: string) {
    setFilters((f) => ({ ...f, [key]: { kind: "text", value } }));
  }
  function setEnumFilter(key: string, value: any) {
    setFilters((f) => ({ ...f, [key]: { kind: "enum", value } }));
  }
  function setNumFilter(key: string, min?: number | "", max?: number | "") {
    setFilters((f) => ({ ...f, [key]: { kind: "number", min, max } }));
  }

  // row id
  function rowId(r: Row, idx: number) {
    return (getRowId?.(r, idx) ??
      (r as any)?.id ??
      (r as any)?.uuid ??
      idx) as React.Key;
  }

  /* ---------- render ---------- */
  return (
    <div className="ecc-table-wrap">
      {/* Toolbar */}
      <div className="ecc-table-toolbar">
        <input
          className="ecc-input"
          placeholder="Search…"
          value={q}
          onChange={(e) => setQ(e.target.value)}
        />
        <div className="ecc-toolbar-spacer" />
        <button
          className="ecc-btn"
          onClick={() =>
            downloadCSV(
              `export_${Date.now()}.csv`,
              sorted,
              colMeta as DataColumn[]
            )
          }
        >
          Export CSV
        </button>
      </div>

      {/* Table */}
      <table className="ecc-table">
        <thead>
          <tr>
            {colMeta.map((c) => {
              const active = sort.find((s) => s.key === c.key);
              const cls =
                "is-clickable" +
                (active ? " " + active.dir : "");
              return (
                <th
                  key={c.key}
                  className={cls}
                  onClick={(e) => toggleSort(c.key, e.shiftKey)}
                  title="Click to sort, Shift+Click to multi-sort"
                >
                  {c.header}
                </th>
              );
            })}
            {rowActions && <th />}
          </tr>

          {/* Sticky filter row */}
          <tr className="ecc-filter-row">
            {colMeta.map((c) => {
              const f = filters[c.key];
              if (c.type === "number") {
                const nf = (f as any)?.kind === "number" ? (f as NumFilter) : undefined;
                return (
                  <th key={c.key}>
                    <div className="ecc-range">
                      <input
                        className="ecc-input ecc-input--min"
                        placeholder="Min"
                        inputMode="numeric"
                        value={nf?.min ?? ""}
                        onChange={(e) =>
                          setNumFilter(c.key, e.target.value === "" ? "" : Number(e.target.value), nf?.max)
                        }
                      />
                      <input
                        className="ecc-input ecc-input--max"
                        placeholder="Max"
                        inputMode="numeric"
                        value={nf?.max ?? ""}
                        onChange={(e) =>
                          setNumFilter(c.key, nf?.min, e.target.value === "" ? "" : Number(e.target.value))
                        }
                      />
                    </div>
                  </th>
                );
              }

              if (c.type === "enum" && c.enumValues && c.enumValues.length) {
                const ef = (f as any)?.kind === "enum" ? (f as EnumFilter) : undefined;
                const val = ef?.value ?? "__ALL__";
                return (
                  <th key={c.key}>
                    <select
                      className="ecc-select"
                      value={String(val)}
                      onChange={(e) =>
                        setEnumFilter(
                          c.key,
                          e.target.value === "__ALL__" ? "__ALL__" : (e.target.value as any)
                        )
                      }
                    >
                      <option value="__ALL__">All</option>
                      {c.enumValues.map((v) => (
                        <option key={String(v)} value={String(v)}>
                          {String(v)}
                        </option>
                      ))}
                    </select>
                  </th>
                );
              }

              // default: text filter
              const tf = (f as any)?.kind === "text" ? (f as TextFilter) : undefined;
              return (
                <th key={c.key}>
                  <input
                    className="ecc-input"
                    placeholder="Filter…"
                    value={tf?.value ?? ""}
                    onChange={(e) => setTextFilter(c.key, e.target.value)}
                  />
                </th>
              );
            })}
            {rowActions && <th />}
          </tr>
        </thead>

        <tbody>
          {/* loading skeleton */}
          {loading &&
            Array.from({ length: 8 }).map((_, i) => (
              <tr key={`sk_${i}`} className="ecc-skel-row">
                {colMeta.map((c) => (
                  <td key={c.key}>
                    <div className="ecc-skel" />
                  </td>
                ))}
                {rowActions && <td />}
              </tr>
            ))}

          {/* error / empty */}
          {!loading && error && (
            <tr>
              <td className="is-empty" colSpan={colMeta.length + (rowActions ? 1 : 0)}>
                {error}
              </td>
            </tr>
          )}
          {!loading && !error && current.length === 0 && (
            <tr>
              <td className="is-empty" colSpan={colMeta.length + (rowActions ? 1 : 0)}>
                No results.
              </td>
            </tr>
          )}

          {/* rows */}
          {!loading &&
            !error &&
            current.map((row, idx) => (
              <tr
                key={rowId(row, idx)}
                onDoubleClick={() => handleDbl(row)}
                className="ecc-row"
              >
                {colMeta.map((c) => {
                  const v = (row as any)[c.key];
                  const content =
                    c.render ? c.render(v, row) : v == null ? "—" : (v as any);
                  const isRight = c.align === "right" || c.type === "number";
                  return (
                    <td key={c.key} className={isRight ? "is-right" : undefined}>
                      {content}
                    </td>
                  );
                })}
                {rowActions && <td className="is-right">{rowActions(row)}</td>}
              </tr>
            ))}
        </tbody>
      </table>

      {/* Footer */}
      <div className="ecc-table-footer">
        <div className="ecc-page">
          {sorted.length.toLocaleString()} result{sorted.length === 1 ? "" : "s"}
        </div>
        <div className="ecc-pager">
          <button
            className="ecc-btn"
            disabled={page <= 0}
            onClick={() => setPage((p) => Math.max(0, p - 1))}
          >
            Prev
          </button>
          <span className="ecc-page"> {page + 1} / {pageCount} </span>
          <button
            className="ecc-btn"
            disabled={page >= pageCount - 1}
            onClick={() => setPage((p) => Math.min(pageCount - 1, p + 1))}
          >
            Next
          </button>

          <select
            className="ecc-select"
            value={pageSize}
            onChange={(e) => setPageSize(Number(e.target.value))}
          >
            {PAGE_OPTIONS.map((n) => (
              <option key={n} value={n}>
                {n}/page
              </option>
            ))}
          </select>
        </div>
      </div>

      {/* Drawer (simple, standards-friendly) */}
      {drawerRow && (
        <div className="ecc-drawer">
          <div className="ecc-drawer__panel">
            <div className="ecc-drawer__head">
              <div className="ecc-drawer__title">Details</div>
              <button className="ecc-btn" onClick={closeDrawer}>Close</button>
            </div>
            <div className="ecc-drawer__body">
              <div className="ecc-grid">
                {colMeta.map((c) => {
                  const v = (drawerRow as any)[c.key];
                  return (
                    <div className="ecc-field" key={c.key}>
                      <div className="ecc-field__label">{c.header}</div>
                      <div className="ecc-field__value">
                        {c.render ? c.render(v, drawerRow) : v == null ? "—" : String(v)}
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
          <div className="ecc-drawer__backdrop" onClick={closeDrawer} />
        </div>
      )}
    </div>
  );
}


Overwrite /src/styles/table.css with exactly this content:

/* /src/styles/table.css
   Genesis dark: higher contrast, banded rows, sticky header+filters, right-aligned numbers,
   polished paddings, hover cues, skeletons, and drawer.
*/

:root{
  /* Ink */
  --ink-1: #e8e8ea;
  --ink-2: #c9cbd0;
  --ink-3: #9aa0a6;

  /* Surfaces */
  --surface-0: #0b0e12; /* page */
  --surface-1: #12151b; /* table shell */
  --surface-2: #171b22; /* row */
  --surface-3: #1d222b; /* alt row */

  /* Lines/accents */
  --line-1: #2b313b;
  --accent: #d6b36a;

  /* Status */
  --ok: #17c28a;
  --warn: #f5a524;
  --bad: #e5484d;
}

/* ---------- Toolbar ---------- */
.ecc-table-toolbar{
  display:flex; align-items:center; gap:12px;
  margin: 10px 0 14px;
}
.ecc-input, .ecc-select{
  background: var(--surface-2); color: var(--ink-1);
  border: 1px solid var(--line-1); border-radius: 10px;
  padding: 8px 10px; min-width: 220px; outline:none;
}
.ecc-input::placeholder{ color: var(--ink-3); }
.ecc-select{ min-width: 120px; }
.ecc-btn{
  background: var(--surface-2); color: var(--ink-1);
  border: 1px solid var(--line-1); border-radius: 10px; padding: 8px 12px;
}
.ecc-btn:disabled{ opacity: .5; cursor: not-allowed; }
.ecc-toolbar-spacer{ flex:1; }

/* ---------- Table shell ---------- */
.ecc-table-wrap{ width:100%; }
.ecc-table{
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
  background: var(--surface-1);
  border: 1px solid var(--line-1);
  border-radius: 14px;
  overflow: hidden;
}

/* ---------- Header ---------- */
.ecc-table thead th{
  top: 0;
  position: sticky;
  z-index: 2;
  background: var(--surface-1);
  color: var(--ink-2);
  font-weight: 700;
  text-align: left;
  padding: 12px 14px;
  border-bottom: 1px solid var(--line-1);
  white-space: nowrap;
}
.ecc-table thead th.is-clickable{ cursor: pointer; }
.ecc-table thead th.asc::after{ content: " ▲"; color: var(--ink-3); }
.ecc-table thead th.desc::after{ content: " ▼"; color: var(--ink-3); }

/* Sticky filter row under header */
.ecc-filter-row th{
  position: sticky;
  top: 44px; /* header height */
  z-index: 1;
  background: var(--surface-1);
  border-bottom: 1px solid var(--line-1);
  padding: 8px 14px;
}
.ecc-range{ display:flex; gap:8px; }
.ecc-input--min, .ecc-input--max{ width: 90px; min-width: 90px; }

/* ---------- Body ---------- */
.ecc-table tbody tr:nth-child(odd){ background: var(--surface-2); }
.ecc-table tbody tr:nth-child(even){ background: var(--surface-3); }
.ecc-table tbody tr:hover{ background: #202633; }
.ecc-table td{
  padding: 12px 14px;
  border-bottom: 1px solid var(--line-1);
  color: var(--ink-1);
  vertical-align: middle;
}
.ecc-table td.is-right{ text-align:right; }
.ecc-table td.is-empty{ text-align:center; color: var(--ink-3); padding: 24px; }

/* ---------- Footer ---------- */
.ecc-table-footer{
  display:flex; align-items:center; justify-content:space-between;
  padding: 12px 8px; color: var(--ink-3);
}
.ecc-page{ padding: 0 10px; }
.ecc-pager{ display:flex; align-items:center; gap:10px; }

/* ---------- Badges (for your renderers if needed) ---------- */
.ecc-badge{
  display:inline-block; font-size: 12px; line-height: 1;
  padding: 6px 8px; border-radius: 999px; border: 1px solid var(--line-1);
  background: var(--surface-2); color: var(--ink-1);
}
.ecc-badge--ok{ background: color-mix(in oklab, var(--ok) 25%, black); }
.ecc-badge--warn{ background: color-mix(in oklab, var(--warn) 25%, black); }
.ecc-badge--bad{ background: color-mix(in oklab, var(--bad) 25%, black); }

/* ---------- Skeletons ---------- */
.ecc-skel-row .ecc-skel{
  height: 12px; border-radius: 6px; width: 100%;
  background: linear-gradient(90deg, #20242d 25%, #2a2f3b 37%, #20242d 63%);
  background-size: 400% 100%;
  animation: eccShimmer 1.2s ease-in-out infinite;
}
@keyframes eccShimmer {
  0% { background-position: 100% 0; }
  100% { background-position: 0 0; }
}

/* ---------- Drawer ---------- */
.ecc-drawer{
  position: fixed; inset: 0; display:flex; justify-content:flex-end; z-index: 50;
}
.ecc-drawer__backdrop{
  position:absolute; inset:0; background: rgba(0,0,0,.5);
}
.ecc-drawer__panel{
  position:relative; width: 520px; max-width: 90vw; background: var(--surface-1);
  border-left:1px solid var(--line-1); height: 100%;
  display:flex; flex-direction:column;
}
.ecc-drawer__head{
  display:flex; align-items:center; justify-content:space-between;
  padding: 14px; border-bottom:1px solid var(--line-1);
}
.ecc-drawer__title{ font-weight:800; color:var(--ink-1); }
.ecc-drawer__body{ padding: 14px; overflow:auto; }
.ecc-grid{ display:grid; grid-template-columns: repeat(2, minmax(0,1fr)); gap: 12px; }
.ecc-field__label{ color: var(--ink-3); font-size: 12px; margin-bottom: 4px; }
.ecc-field__value{ color: var(--ink-1); font-weight: 600; }


After writing the 3 files: do not change any page code. Just run dev server.
The pages still import DataTable (default) and call it with rows + your existing column configs/mappers. You now have:

Banded rows, right-aligned numeral columns, sticky header + filter row

Inline column filters (text/enum/number range)

Click to sort / Shift+Click to multi-sort

Footer page size (25/50/100/200) with navigation

CSV export of filtered rows

Double-click a row to open the Drawer (or pass rowHref to navigate)

Optional rowActions={(r)=>…} to display per-row buttons (kept off unless you add it)

Loading skeletons if you pass loading

Graceful empty/error states

Notes you don’t have to wire right now (but are available)

If you want the Drawer instead to navigate, pass rowHref={(r)=>"/portfolio/properties/"+r.id}.

If you want an actions column, pass rowActions={(r)=> <button className="ecc-btn" onClick={()=>console.log("actions", r)}>⋯</button>}.

If a page tracks loading/error, pass them to <DataTable loading={loading} error={error} …/> for skeletons and banners.