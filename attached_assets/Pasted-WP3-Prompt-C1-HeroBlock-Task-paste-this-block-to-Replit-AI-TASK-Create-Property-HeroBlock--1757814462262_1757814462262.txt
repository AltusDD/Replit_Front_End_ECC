WP3 — Prompt C1 (HeroBlock)

Task (paste this block to Replit AI):

TASK: Create Property HeroBlock composed from atoms (KPI, ActionButton). No data fetching inside the component.

FILES
1) src/pages/card/property/HeroBlock.tsx  (new)
2) src/pages/card/property/index.tsx       (will import/use later in C4)

RULES
- No overlays/modals. All inline on .ecc-object surfaces.
- No admin tokens in client. For "New Work Order" call lib/bff.createWorkOrder.
- Pure presentational; receives data via props (property, units, leases).
- Compute KPIs locally: units count, active leases count, average rent (from leases[].rent_cents), occupancy % = active leases / units (guard divide-by-zero).
- Buttons: Edit (secondary), Export PDF (ghost), New Work Order (primary) → calls BFF; respect window.__FEATURES__?.workOrders.

CODE: src/pages/card/property/HeroBlock.tsx
-------------------------------------------
import React from 'react';
import { KPI, KPIRow } from '@/features/portfolio/components/KPI';
import ActionButton from '@/features/portfolio/components/ActionButton';
import Section from '@/components/Section';
import { fmtMoneyCents } from '@/lib/format'; // if missing, keep string fallback
import { createWorkOrder } from '@/lib/bff';

type Lease = { rent_cents?: number | null; status?: string | null };
type Unit = Record<string, any>;
type Property = { id: number | string; display_name?: string | null; street_1?: string|null; city?: string|null; state?: string|null; zip?: string|null };

function titleFor(p?: Property | null) {
  if (!p) return 'Property';
  return p.display_name || [p.street_1, p.city, p.state, p.zip].filter(Boolean).join(', ') || `Property #${p.id}`;
}

export default function HeroBlock({
  property,
  units = [],
  leases = [],
}: {
  property?: Property | null;
  units?: Unit[];
  leases?: Lease[];
}) {
  const unitsCount = Array.isArray(units) ? units.length : 0;
  const activeLeases = Array.isArray(leases) ? leases.filter(l => String(l?.status ?? '').toLowerCase() === 'active').length : 0;
  const occupancyPct = unitsCount > 0 ? (activeLeases / unitsCount) * 100 : 0;
  const avgRentCents = (Array.isArray(leases) && leases.length > 0)
    ? Math.round(leases.reduce((sum, l) => sum + (Number(l?.rent_cents ?? 0) || 0), 0) / leases.length)
    : null;

  const [woBusy, setWoBusy] = React.useState(false);
  const canWO = (window as any).__FEATURES__?.workOrders === true;

  async function handleNewWO() {
    if (!property?.id) return;
    try {
      setWoBusy(true);
      const r = await createWorkOrder({ propertyId: String(property.id), summary: `WO from Property #${property.id}`, priority: 'normal' });
      (window as any).toast?.success?.('Work order created') ?? alert('Work order created');
      console.log(r);
    } catch (e) {
      (window as any).toast?.error?.('Failed to create work order') ?? alert('Failed to create work order');
      console.error(e);
    } finally {
      setWoBusy(false);
    }
  }

  return (
    <Section title={titleFor(property)} actions={
      <div className="flex gap-2">
        <ActionButton label="Edit" icon="✏️" variant="secondary" />
        <ActionButton label="Export PDF" icon="📄" variant="ghost" />
        <ActionButton
          label={woBusy ? 'Creating…' : 'New Work Order'}
          icon="🛠️"
          onClick={handleNewWO}
          disabled={woBusy}
          comingSoon={!canWO}
        />
      </div>
    }>
      <KPIRow>
        <KPI label="Units" value={String(unitsCount)} />
        <KPI label="Active Leases" value={String(activeLeases)} />
        <KPI label="Occupancy" value={`${occupancyPct.toFixed(1)}%`} />
        <KPI label="Avg Rent" value={avgRentCents != null ? (fmtMoneyCents ? fmtMoneyCents(avgRentCents) : `$${(avgRentCents/100).toFixed(0)}`) : '—'} />
      </KPIRow>
    </Section>
  );
}

DOD / VERIFICATION
- npx tsc -p tsconfig.cards.json → 0 errors.
- No fetches inside HeroBlock; only pure props.
- No overlays. Buttons render inline.
- We’ll wire it into the page in C4.

WP3 — Prompt C2 (RightRail)

Task (paste this block to Replit AI):

TASK: Create Property RightRail composed from atoms and GeoMap (map ONLY on Property).

FILES
1) src/pages/card/property/RightRail.tsx  (new)

RULES
- No fetches here; props-only.
- Sections: Map & Location, Key Dates (placeholder), Pinned Files (placeholder).
- Use existing GeoMap (src/components/GeoMap.tsx). If missing, render a simple link to maps via googleMapsHref().
- No overlays/backdrops. Pure .ecc-object sections.

CODE: src/pages/card/property/RightRail.tsx
-------------------------------------------
import React from 'react';
import Section from '@/components/Section';
import GeoMap from '@/components/GeoMap';
import { joinAddress, googleMapsHref, isFiniteNumber } from '@/lib/format';

type Property = {
  street_1?: string|null; city?: string|null; state?: string|null; zip?: string|null;
  lat?: number|null; lng?: number|null;
};

export default function RightRail({ property }: { property?: Property | null }) {
  const address = property ? joinAddress?.([property.street_1, property.city, property.state, property.zip]) : undefined;
  const lat = isFiniteNumber?.(property?.lat ?? null) ? (property!.lat as number) : null;
  const lng = isFiniteNumber?.(property?.lng ?? null) ? (property!.lng as number) : null;
  const mapsHref = address ? googleMapsHref?.(address) : undefined;

  return (
    <div className="space-y-3">
      <Section title="Map & Location" hint={address || 'Address unavailable'}>
        {GeoMap ? (
          <GeoMap title="Location" address={address} lat={lat} lng={lng} />
        ) : (
          <div>
            {address ? <a href={mapsHref} className="underline">Open in Maps</a> : <div className="opacity-60">No location</div>}
          </div>
        )}
      </Section>

      <Section title="Key Dates">
        <div className="text-sm opacity-70">Upcoming inspections, renewals, notices will appear here.</div>
      </Section>

      <Section title="Pinned Files">
        <ul className="text-sm list-disc pl-5">
          <li><span className="opacity-70">Insurance policy.pdf</span> (placeholder)</li>
          <li><span className="opacity-70">Mortgage_note.pdf</span> (placeholder)</li>
        </ul>
      </Section>
    </div>
  );
}

DOD / VERIFICATION
- Typecheck clean.
- No overlays; three .ecc-object sections render when used.
- We’ll wire it into the page in C4.

WP3 — Prompt C3 (Tabs: 7-tab shell)

Task (paste this block to Replit AI):

TASK: Create a simple Tabs shell for Property page. No Suspense overlays; lightweight internal state.

FILES
1) src/pages/card/property/Tabs.tsx  (new)
2) src/pages/card/property/Overview.tsx (new)
3) src/pages/card/property/Details.tsx  (new)
4) src/pages/card/property/Financials.tsx (new)
5) src/pages/card/property/Legal.tsx   (new)
6) src/pages/card/property/Files.tsx   (new)
7) src/pages/card/property/Linked.tsx  (new)
8) src/pages/card/property/Activity.tsx (new)

RULES
- No fetching inside tab components; props-only structures.
- Use atoms: FieldRows, MiniCard, ActivityList.
- Files tab shows stub action buttons section; if FileButtons exists at src/components/FileButtons.tsx, render it; else render stub buttons inline.
- No overlays. Do not import Suspense/modals.
- Never return null at page-level.

CODE: src/pages/card/property/Tabs.tsx
--------------------------------------
import React from 'react';

export type TabKey = 'overview'|'details'|'financials'|'legal'|'files'|'linked'|'activity';

export interface TabDef {
  key: TabKey;
  label: string;
  content: React.ReactNode;
}

export default function PropertyTabs({
  tabs,
  defaultKey = 'overview',
}: {
  tabs: TabDef[];
  defaultKey?: TabKey;
}) {
  const [active, setActive] = React.useState<TabKey>(defaultKey);
  return (
    <div className="ecc-object ecc-section">
      <nav className="flex flex-wrap gap-2 mb-3">
        {tabs.map(t => (
          <button
            key={t.key}
            className={`px-3 py-1.5 rounded ${active === t.key ? 'bg-white/10' : 'hover:bg-white/5'}`}
            onClick={() => setActive(t.key)}
            aria-current={active === t.key ? 'page' : undefined}
          >
            {t.label}
          </button>
        ))}
      </nav>
      <div className="ecc-divider" />
      <div>{tabs.find(t => t.key === active)?.content}</div>
    </div>
  );
}

CODE: src/pages/card/property/Overview.tsx
------------------------------------------
import React from 'react';
import { FieldRows } from '@/features/portfolio/components/FieldRows';

type Property = { id: number|string; doorloop_id?: string|null; street_1?: string|null; city?: string|null; state?: string|null; zip?: string|null; type?: string|null; class?: string|null; status?: string|null; };
type OwnerLite = { id: number|string; display_name?: string|null } | null;
type RelCounts = { units: number; activeLeases: number; };

export default function Overview({ property, owner, counts }: { property?: Property|null; owner?: OwnerLite; counts: RelCounts; }) {
  const rows = [
    { label: 'DoorLoop ID', value: property?.doorloop_id ?? '—', copy: !!property?.doorloop_id },
    { label: 'Address', value: [property?.street_1, property?.city, property?.state, property?.zip].filter(Boolean).join(', ') || '—' },
    { label: 'Type', value: property?.type || '—' },
    { label: 'Class', value: property?.class || '—' },
    { label: 'Status', value: property?.status || '—' },
    { label: 'Owner', value: owner?.display_name || '—', href: owner ? `/card/owner/${owner.id}` : undefined },
    { label: 'Units', value: String(counts.units) },
    { label: 'Active Leases', value: String(counts.activeLeases) },
  ];
  return <FieldRows rows={rows} columns={2} />;
}

CODE: src/pages/card/property/Details.tsx
-----------------------------------------
import React from 'react';
import { FieldRows } from '@/features/portfolio/components/FieldRows';
export default function Details({ fields }: { fields: {label:string; value:any}[] }) {
  return <FieldRows rows={fields} columns={2} />;
}

CODE: src/pages/card/property/Financials.tsx
--------------------------------------------
import React from 'react';
import Section from '@/components/Section';

export default function Financials() {
  return (
    <div className="space-y-3">
      <Section title="Delinquency Summary">
        <div className="text-sm opacity-70">Balances and aging will appear here.</div>
      </Section>
      <Section title="Transactions">
        <div className="text-sm opacity-70">Ledger table (BFF endpoint) will render here.</div>
      </Section>
    </div>
  );
}

CODE: src/pages/card/property/Legal.tsx
---------------------------------------
import React from 'react';
import Section from '@/components/Section';
export default function Legal() {
  return (
    <div className="space-y-3">
      <Section title="Assessor & APN"><div className="text-sm opacity-70">APN & GIS links (CoreLogic) will appear here.</div></Section>
      <Section title="Linked Cases"><div className="text-sm opacity-70">No cases linked.</div></Section>
    </div>
  );
}

CODE: src/pages/card/property/Files.tsx
---------------------------------------
import React from 'react';
import Section from '@/components/Section';
let FileButtons: any;
try { FileButtons = require('@/components/FileButtons').default; } catch {}

export default function Files() {
  return (
    <div className="space-y-3">
      <Section title="Files">
        {FileButtons ? (
          <FileButtons />
        ) : (
          <div className="flex flex-wrap gap-8">
            <div className="space-y-2">
              <div className="text-sm opacity-70">DoorLoop</div>
              <button className="border rounded px-3 py-2">Open Folder</button>
            </div>
            <div className="space-y-2">
              <div className="text-sm opacity-70">Dropbox</div>
              <button className="border rounded px-3 py-2">Open Folder</button>
              <button className="border rounded px-3 py-2">Upload</button>
            </div>
          </div>
        )}
      </Section>
    </div>
  );
}

CODE: src/pages/card/property/Linked.tsx
----------------------------------------
import React from 'react';
import MiniCard from '@/features/portfolio/components/MiniCard';
export default function Linked({ units }: { units: Array<{ id: number|string; unit_number?: string|null; beds?: number|null; baths?: number|null; }> }) {
  if (!Array.isArray(units) || units.length === 0) {
    return <div className="ecc-object ecc-section opacity-70">No units associated.</div>;
  }
  return (
    <div className="grid md:grid-cols-2 gap-3">
      {units.map(u => (
        <MiniCard
          key={String(u.id)}
          title={u.unit_number ? `Unit ${u.unit_number}` : `Unit #${u.id}`}
          subtitle={[u.beds ? `${u.beds} bd` : '', u.baths ? `${u.baths} ba` : ''].filter(Boolean).join(' • ') || undefined}
          href={`/card/unit/${u.id}`}
        />
      ))}
    </div>
  );
}

CODE: src/pages/card/property/Activity.tsx
------------------------------------------
import React from 'react';
import { ActivityList, ActivityItem } from '@/features/portfolio/components/ActivityChip';
export default function Activity({ items }: { items: ActivityItem[] }) {
  return <ActivityList items={items} />;
}

DOD / VERIFICATION
- Typecheck clean.
- No network calls in any of the tab components.
- Pure .ecc-object surfaces; no overlays; no Suspense.
- We’ll wire the tabs into the page in C4.

WP3 — Prompt C4 (Page Assembly + Resolver wiring)

Task (paste this block to Replit AI):

TASK: Assemble PropertyCardPage by composing HeroBlock, Tabs, RightRail and using a SINGLE resolver hook. Never return null.

FILES
1) src/pages/card/property/index.tsx   (update)
2) src/lib/ecc-card-queries.ts         (ONLY IF usePropertyCard hook missing — then create as specified)

RULES
- Import resolver: usePropertyCard(id) from '@/lib/ecc-card-queries'.
- If the hook does not exist, create it exactly as below (DTO-first with /api/rpc/get_property_card?id=..., fallback to /api/entities/…).
- The page must render a 3-column layout: Hero on top, then Tabs (main) + RightRail (320px) below.
- No overlays; never return null; show safe “Not found” panel if base property missing.

CHECK (ONLY CREATE IF MISSING): src/lib/ecc-card-queries.ts
-----------------------------------------------------------
import { useQuery } from '@tanstack/react-query';

type Id = string | number;
type Property = any; type Unit = any; type Lease = any; type Owner = any;

async function getJson<T>(url: string): Promise<T> {
  const res = await fetch(url, { credentials: 'include' });
  if (!res.ok) throw new Error(`HTTP ${res.status}`);
  return res.json();
}

async function fetchPropertyCard(id: Id) {
  // DTO-first
  try {
    return await getJson<{ property: Property|null; units: Unit[]; leases: Lease[]; owner: Owner|null }>(`/api/rpc/get_property_card?id=${id}`);
  } catch {
    // Entities fallback
    const property = await getJson<Property>(`/api/entities/properties/${id}`);
    const units = property?.doorloop_id ? await getJson<Unit[]>(`/api/entities/units?doorloop_property_id=eq.${property.doorloop_id}`) : [];
    const leases = property?.id != null ? await getJson<Lease[]>(`/api/entities/leases?property_id=eq.${property.id}`) : [];
    const owner = null as Owner|null; // fill when modeled
    return { property, units, leases, owner };
  }
}

export function usePropertyCard(id: Id) {
  return useQuery({
    queryKey: ['property-card', id],
    queryFn: () => fetchPropertyCard(id),
    staleTime: 60_000,
  });
}

PATCH: src/pages/card/property/index.tsx
----------------------------------------
import React from 'react';
import { useParams } from 'wouter';
import Section from '@/components/Section';
import HeroBlock from './HeroBlock';
import PropertyTabs, { TabDef } from './Tabs';
import Overview from './Overview';
import Details from './Details';
import Financials from './Financials';
import Legal from './Legal';
import Files from './Files';
import Linked from './Linked';
import Activity from './Activity';
import RightRail from './RightRail';
import { usePropertyCard } from '@/lib/ecc-card-queries';

export default function PropertyCardPage() {
  const { id } = useParams<{ id: string }>();
  const { data, isLoading, error } = usePropertyCard(id!);

  const property = data?.property ?? null;
  const units = data?.units ?? [];
  const leases = data?.leases ?? [];
  const owner = data?.owner ?? null;

  const counts = {
    units: Array.isArray(units) ? units.length : 0,
    activeLeases: Array.isArray(leases) ? leases.filter(l => String(l?.status ?? '').toLowerCase() === 'active').length : 0,
  };

  // Top hero always renders
  const hero = <HeroBlock property={property} units={units} leases={leases} />;

  // Tabs content (safe defaults)
  const tabs: TabDef[] = [
    { key: 'overview', label: 'Overview', content: <Overview property={property} owner={owner} counts={counts} /> },
    { key: 'details', label: 'Details', content: <Details fields={[
      { label:'Type', value: property?.type ?? '—' },
      { label:'Class', value: property?.class ?? '—' },
      { label:'Status', value: property?.status ?? '—' },
    ]} /> },
    { key: 'financials', label: 'Financials', content: <Financials /> },
    { key: 'legal', label: 'Legal', content: <Legal /> },
    { key: 'files', label: 'Files', content: <Files /> },
    { key: 'linked', label: 'Linked', content: <Linked units={units} /> },
    { key: 'activity', label: 'Activity', content: <Activity items={[]} /> },
  ];

  if (error) {
    console.error(error);
  }

  // Layout
  return (
    <div className="p-4 space-y-3">
      {hero}
      {!property && !isLoading && (
        <Section title="Property not found">
          <div className="opacity-70">We couldn’t load this property. Check the ID and try again.</div>
        </Section>
      )}
      <div className="grid grid-cols-1 lg:grid-cols-[1fr_320px] gap-3">
        <div className="space-y-3">
          <PropertyTabs tabs={tabs} />
        </div>
        <div className="space-y-3">
          <RightRail property={property} />
        </div>
      </div>
    </div>
  );
}

DOD / VERIFICATION
- npx tsc -p tsconfig.cards.json → 0 errors.
- No Suspense/overlay usage.
- Visit /card/property/42 and /card/property/57:
  - Hero shows KPIs (Units, Active Leases, Occupancy, Avg Rent)
  - Tabs bar with 7 tabs; Overview shows Owner link when present
  - Right rail shows Map & Location + placeholders
  - If relations fail, page still renders; only "Property not found" shows when base is missing

WP3 — Prompt C5 (Wire atoms into Overview/Files/Activity + Light the stubs)

Task (paste this block to Replit AI):

TASK: Ensure Property Overview uses FieldRows, Linked uses MiniCard, Files shows FileButtons (or stubs), Activity uses ActivityList. Add stub integration buttons ("Light the stubs") in Hero actions row (optional Part 2 block below).

FILES
- Reuse files from C1–C4; apply small patches only.

PART 1 — VERIFY + SMALL POLISH
- Overview already uses FieldRows.
- Linked already uses MiniCard.
- Files already tries FileButtons with try/require fallback.
- Activity uses ActivityList with empty array.
- Add a quick polish: in Overview, title-case labels are already clean; ensure no uppercase transforms via CSS (keep ecc.css).

PART 2 — LIGHT THE STUBS (add three small buttons to HeroBlock actions)
- Add disabled buttons for: CoreLogic AVM, Dropbox Files, Deal Room.
- Coming soon tooltips only (no overlays). No network calls.

PATCH: src/pages/card/property/HeroBlock.tsx (append inside actions div)
-------------------------------------------------------------------------
{/* Stubs: show but disabled until wired */}
<ActionButton label="CoreLogic AVM" icon="📈" variant="ghost" comingSoon />
<ActionButton label="Dropbox" icon="🗂️" variant="ghost" comingSoon />
<ActionButton label="Deal Room" icon="🤝" variant="ghost" comingSoon />

DOD / VERIFICATION
- Typecheck clean.
- /card/property/42 and /card/property/57:
  - Hero now shows 3 stub buttons (disabled with native title tooltips).
  - Overview shows proper FieldRows on .ecc-object.
  - Files tab shows FileButtons if present, else stub DoorLoop/Dropbox buttons.
  - Activity tab renders (empty list is fine).
- No overlays; never returns null.

What to expect after C1–C5

The Property card will be visibly structured and interactive:

Hero KPIs + action buttons (including New Work Order → BFF).

Right rail with map only on Property and placeholders for key dates & pinned files.

7 tabs rendering content (Overview/Details/Financials/Legal/Files/Linked/Activity).

All components are props-only (no rogue fetches), and the page uses one resolver hook.

Guardrails should pass; TypeScript should be clean.