Prompt 1 — Wire API + env + helpers (one shot)
Make the following exact changes to connect our app to the Altus staging backend.

A) Create/replace .env
VITE_API_BASE_URL=https://empirecommandcenter-altus-staging.azurewebsites.net
VITE_ADMIN_SYNC_TOKEN=675c4ffeee67b43b4b348f7f3a5946cc5578a4b58e7cc8c7ebaa7ab1492375b8

B) Create/replace src/lib/ecc-api.ts
export const API_BASE = import.meta.env.VITE_API_BASE_URL || "";
const ADMIN = import.meta.env.VITE_ADMIN_SYNC_TOKEN || "";

function asJsonOk(res: Response) {
  if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
  return res.json();
}
export const apiGet = (path: string) =>
  fetch(`${API_BASE}${path}`, { credentials: "omit" }).then(asJsonOk);

export const apiPost = (
  path: string,
  body: unknown,
  { admin = false }: { admin?: boolean } = {}
) => {
  const headers: Record<string, string> = { "Content-Type": "application/json" };
  if (admin) headers["x-admin-token"] = ADMIN;
  return fetch(`${API_BASE}${path}`, {
    method: "POST",
    headers,
    body: JSON.stringify(body),
  }).then(asJsonOk);
};

C) (Optional) Create src/components/Section.tsx for tidy panels
export default function Section({ title, children }:{ title:string; children:any }) {
  return (
    <div className="rounded-xl border border-neutral-200 dark:border-neutral-800 p-4 space-y-2">
      <div className="text-sm font-semibold opacity-80">{title}</div>
      {children}
    </div>
  );
}

D) Ensure Tailwind is available; if not, add to index.css:
@tailwind base;
@tailwind components;
@tailwind utilities;

Prompt 2 — Asset Cards + Owner Transfer UI (one shot)
Create/replace the following files to light up Assets and Owner Transfer with the live staging backend.

A) src/features/assets/AssetCard.tsx
import { useEffect, useState } from "react";
import { apiGet } from "@/lib/ecc-api";
type Row = Record<string, any>;

export default function AssetCard({ propertyId }:{ propertyId: string|number }) {
  const [loading, setLoading] = useState(true);
  const [property, setProperty] = useState<Row|null>(null);
  const [units, setUnits] = useState<Row[]>([]);
  const [leases, setLeases] = useState<Row[]>([]);
  const [tenants, setTenants] = useState<Row[]>([]);
  const [error, setError] = useState<string|null>(null);

  useEffect(() => { (async () => {
    setLoading(true); setError(null);
    try {
      const p = await apiGet(`/api/entities/properties/${propertyId}?select=id,name,owner_id,address_line1,city,state`);
      setProperty(p);
      const pid = p?.id, owner = p?.owner_id;
      const [u, l, t] = await Promise.all([
        apiGet(`/api/entities/units?select=id,unit_number,property_id&property_id=eq.${pid}`),
        apiGet(`/api/entities/leases?select=id,status,unit_id,property_id&property_id=eq.${pid}`),
        apiGet(`/api/entities/tenants?select=id,primary_email,owner_id&owner_id=eq.${owner}`)
      ]);
      setUnits(Array.isArray(u)?u:[]); setLeases(Array.isArray(l)?l:[]); setTenants(Array.isArray(t)?t:[]);
    } catch (e:any) { setError(e.message || "Failed to load asset"); }
    finally { setLoading(false); }
  })(); }, [propertyId]);

  if (loading) return <div className="p-4">Loading…</div>;
  if (error) return <div className="p-4 text-red-600">Error: {error}</div>;
  if (!property) return <div className="p-4">Property not found.</div>;

  const title = property.name || property.address_line1 || `Property #${property.id}`;
  const address = [property.address_line1, property.city, property.state].filter(Boolean).join(", ");

  return (
    <div className="grid gap-3 p-4 bg-black text-white rounded-2xl">
      <div className="flex items-baseline justify-between">
        <h2 className="text-2xl font-bold">{title}</h2>
        <span className="text-sm opacity-70">Owner #{property.owner_id ?? "—"}</span>
      </div>
      <div className="grid md:grid-cols-3 gap-3">
        <div className="p-3 rounded-xl bg-neutral-900"><div className="text-xs opacity-70">Units</div><div className="text-3xl font-extrabold">{units.length}</div></div>
        <div className="p-3 rounded-xl bg-neutral-900"><div className="text-xs opacity-70">Active Leases</div><div className="text-3xl font-extrabold">{leases.filter(x=>x.status==='active').length}</div></div>
        <div className="p-3 rounded-xl bg-neutral-900"><div className="text-xs opacity-70">Tenants</div><div className="text-3xl font-extrabold">{tenants.length}</div></div>
      </div>
      <div className="p-3 rounded-xl bg-neutral-900">
        <div className="text-sm font-semibold mb-1">Address</div>
        <div className="text-sm opacity-90">{address || "—"}</div>
      </div>
    </div>
  );
}

B) src/features/ownerTransfer/hooks/useOwnerTransfer.ts
import { useState } from "react";
import { apiGet, apiPost } from "@/lib/ecc-api";

export function useOwnerTransfer(){
  const [loading,setLoading]=useState(false);
  const [error,setError]=useState<string|null>(null);
  const [last,setLast]=useState<any>(null);
  const call = async <T,>(fn:()=>Promise<T>) => {
    setLoading(true); setError(null);
    try { const r = await fn(); setLast(r); return r; }
    catch(e:any){ setError(e.message||"Request failed"); throw e; }
    finally { setLoading(false); }
  };
  return {
    loading,error,last,
    searchOwners:(q:string)=>apiGet(`/api/owners/search?q=${encodeURIComponent(q)}`),
    getContext:(ownerId:number|string)=>apiGet(`/api/owners/transfercontext?sourceOwnerId=${ownerId}`),
    initiate:(payload:any)=>call(()=>apiPost("/api/owners/initiatetransfer", payload)),
    approve:(payload:any)=>call(()=>apiPost("/api/owners/approvetransfer", payload, {admin:true})),
    authorize:(payload:any)=>call(()=>apiPost("/api/owners/authorizetransfer", payload, {admin:true})),
    executeNow:(payload:any)=>call(()=>apiPost("/api/owners/executetransfer", payload, {admin:true})),
  };
}

C) src/features/ownerTransfer/OwnerTransferPage.tsx
import { useState } from "react";
import { useOwnerTransfer } from "./hooks/useOwnerTransfer";
import Section from "@/components/Section";

type Opt = { id:number|string; name?:string };

export default function OwnerTransferPage(){
  const {loading,error,searchOwners,getContext,initiate,approve,authorize,executeNow} = useOwnerTransfer();
  const [source,setSource]=useState<Opt|null>(null);
  const [target,setTarget]=useState<Opt|null>(null);
  const [context,setContext]=useState<any>(null);
  const [tid,setTid]=useState<string>("");

  async function pick(term:string, set:(v:Opt)=>void, withCtx=false) {
    const r = await searchOwners(term);
    const first = r?.results?.[0] || r?.[0] || null;
    if (first) {
      set(first);
      if (withCtx) setContext(await getContext(first.id));
    }
  }

  return (
    <div className="p-4 space-y-4">
      <h1 className="text-xl font-bold">Owner Transfer</h1>

      <Section title="Select Owners">
        <div className="grid md:grid-cols-2 gap-3">
          <div className="space-y-2">
            <label className="text-sm">Source Owner (type & press Enter)</label>
            <input className="border rounded px-3 py-2 w-full" placeholder="Search source owner…" onKeyDown={async e=>{ if(e.key==="Enter"){ await pick((e.target as HTMLInputElement).value, setSource, true); } }} />
            <div className="text-sm opacity-80">Selected: {source?.name || source?.id || "—"}</div>
          </div>
          <div className="space-y-2">
            <label className="text-sm">Target Owner (type & press Enter)</label>
            <input className="border rounded px-3 py-2 w-full" placeholder="Search target owner…" onKeyDown={async e=>{ if(e.key==="Enter"){ await pick((e.target as HTMLInputElement).value, setTarget, false); } }} />
            <div className="text-sm opacity-80">Selected: {target?.name || target?.id || "—"}</div>
          </div>
        </div>
      </Section>

      {context && (
        <Section title="Transfer Context">
          <div className="text-sm font-semibold">{context.owner?.name || context.owner?.full_name || `Owner #${source?.id}`}</div>
          <div className="text-sm opacity-80">
            Properties: {context.properties?.length||0} • Units: {context.units?.length||0} • Leases: {context.leases?.length||0}
          </div>
        </Section>
      )}

      <Section title="Actions">
        <div className="flex flex-wrap gap-2">
          <button disabled={!source||!target||loading}
            className="px-3 py-2 rounded bg-yellow-400 text-black font-semibold"
            onClick={async ()=>{
              const r = await initiate({ source_owner_id: source!.id, target_owner_id: target!.id, notes: "UI" });
              setTid(String(r.transferId || r.id || ""));
            }}>Initiate</button>

          <button disabled={!tid||loading} className="px-3 py-2 rounded bg-gray-200" onClick={()=>approve({ transferId: tid })}>Approve</button>
          <button disabled={!tid||loading} className="px-3 py-2 rounded bg-gray-200" onClick={()=>authorize({ transferId: tid })}>Authorize</button>
          <button disabled={!tid||loading} className="px-3 py-2 rounded bg-green-600 text-white" onClick={()=>executeNow({ transferId: tid })}>Execute</button>
        </div>
        {error && <div className="text-red-600 mt-2">{error}</div>}
      </Section>
    </div>
  );
}

D) src/pages/PropertyDetailPage.tsx
import { useParams } from "react-router-dom";
import AssetCard from "@/features/assets/AssetCard";
export default function PropertyDetailPage(){
  const { id } = useParams();
  return <div className="p-4"><AssetCard propertyId={id!} /></div>;
}

E) Router – add routes (adjust to your router file)
- If using App.tsx:
  import { BrowserRouter, Routes, Route } from "react-router-dom";
  import PropertyDetailPage from "@/pages/PropertyDetailPage";
  import OwnerTransferPage from "@/features/ownerTransfer/OwnerTransferPage";
  // add:
  <Route path="/portfolio/properties/:id" element={<PropertyDetailPage/>} />
  <Route path="/owners/transfer" element={<OwnerTransferPage/>} />

- Add a nav link/button to /owners/transfer

F) (Optional) On your Properties table, navigate on row click:
navigate(`/portfolio/properties/${row.id}`);

Quick acceptance test (copy to your browser console or Shell)
# GETs should be 200 OK:
curl -s -i "https://empirecommandcenter-altus-staging.azurewebsites.net/api/entities/properties?select=id,name&limit=1" | head -n1
curl -s -i "https://empirecommandcenter-altus-staging.azurewebsites.net/api/owners/search?q=a" | head -n1
curl -s -i "https://empirecommandcenter-altus-staging.azurewebsites.net/api/owners/transfercontext?sourceOwnerId=1" | head -n1


Then in the app:

Visit any property detail route like /portfolio/properties/101 (or a real id) → Asset Card shows counts & address.

Go to /owners/transfer → search owners, Initiate → Approve → Authorize → Execute (Approve/Authorize/Execute require the admin token already set in .env).

If anything doesn’t behave, paste the exact error text shown in the UI (and the failing network call from the browser DevTools). I’ll give you the one-liner fix.