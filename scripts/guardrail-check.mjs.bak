#!/usr/bin/env node

import fs from "fs";
import path from "path";
import pkg from "glob";
const { glob } = pkg;

const ROOT = process.cwd();
let failures = 0;

console.log("[guardrail] checking ECC contract compliance...");

// Check for legacy imports in card pages
const cardFiles = [
  "src/pages/card/property/index.tsx",
  "src/pages/card/unit/index.tsx", 
  "src/pages/card/lease/index.tsx",
  "src/pages/card/tenant/index.tsx",
  "src/pages/card/owner/index.tsx"
];

const bannedImports = [
  "@/features/portfolio/components",
  "@/components/Section",
  "@/lib/ecc-card-queries"  // Must use ecc-resolvers directly
];

for (const file of cardFiles) {
  if (!fs.existsSync(path.join(ROOT, file))) {
    console.log(`[guardrail] missing card file: ${file}`);
    failures++;
    continue;
  }
  
  const content = fs.readFileSync(path.join(ROOT, file), "utf8");
  
  // Check for banned legacy imports
  for (const banned of bannedImports) {
    if (content.includes(banned)) {
      console.log(`[guardrail] legacy resolver import in ${file}`);
      failures++;
    }
  }
  
  // Check for required routing pattern: useRoute + Number(params?.id)
  if (!content.includes("useRoute") || !content.includes("Number(params?.id)")) {
    console.log(`[guardrail] missing route+Number pattern in ${file}`);
    failures++;
  }
}

// Check required test IDs in hero blocks
const heroFiles = [
  { file: "src/pages/card/property/HeroBlock.tsx", testIds: ["kpi-units", "kpi-active", "kpi-occupancy", "kpi-avgrent", "address"] },
  { file: "src/pages/card/unit/HeroBlock.tsx", testIds: ["kpi-lease-status", "kpi-rent", "kpi-bedbath", "kpi-sqft"] },
  { file: "src/pages/card/lease/HeroBlock.tsx", testIds: ["kpi-lease-status", "kpi-rent", "kpi-term", "kpi-balance"] },
  { file: "src/pages/card/tenant/HeroBlock.tsx", testIds: ["kpi-active-leases", "kpi-current-balance", "kpi-on-time-rate", "kpi-open-workorders"] },
  { file: "src/pages/card/owner/HeroBlock.tsx", testIds: ["kpi-portfolio-units", "kpi-active-leases", "kpi-occupancy", "kpi-avg-rent"] }
];

for (const { file, testIds } of heroFiles) {
  if (!fs.existsSync(path.join(ROOT, file))) {
    console.log(`[guardrail] missing hero file: ${file}`);
    failures++;
    continue;
  }
  
  const content = fs.readFileSync(path.join(ROOT, file), "utf8");
  
  for (const testId of testIds) {
    // Handle both testid="..." and data-testid="..." patterns
    if (!content.includes(`testid="${testId}"`) && !content.includes(`data-testid="${testId}"`)) {
      console.log(`[guardrail] missing test-id "${testId}" in ${file}`);
      failures++;
    }
  }
}

// === Legacy Purge Enforcement ===
const forbiddenDirs = [
  "src/features/portfolio/components",
  "src/components/Section",
];
for (const d of forbiddenDirs) {
  if (fs.existsSync(path.join(ROOT, d))) {
    console.error("[guardrail] forbidden directory present:", d); 
    failures++;
  }
}

// --- Repo-wide legacy import ban (alias or relative) ---
let legacyFailures = 0;
for (const rel of glob.sync("src/**/*.{ts,tsx,js,jsx}", { cwd: ROOT })) {
  const s = fs.readFileSync(path.join(ROOT, rel), "utf8");
  if (s.includes("features/portfolio/components/") || s.includes("@/features/portfolio/components")) {
    console.error("[guardrail] forbidden legacy import in", rel);
    legacyFailures++;
  }
}
if (legacyFailures) process.exit(1);

if (typeof globalThis.failuresSum === "number") globalThis.failuresSum += failures;
else globalThis.failuresSum = failures;

if (failures > 0) {
  console.log(`[guardrail] FAILED with ${failures} issue(s)`);
  process.exit(1);
} else {
  console.log("[guardrail] PASS");
}