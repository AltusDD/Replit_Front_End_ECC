// server/routes/rpc.ts
import { Router } from 'express';
import { getServerClient } from '../db';
import { mapAddress, normalizeStatus, orByPropIdOrDoorLoop } from '../lib/mapping';

export const rpc = Router();

// PROPERTY CARD
rpc.get('/get_property_card', async (req, res) => {
  const id = Number(req.query.id);
  if (!id) return res.status(400).json({ error: 'missing id' });
  const supa = getServerClient();

  const { data: property, error: pErr } = await supa.from('properties').select('*').eq('id', id).single();
  if (pErr || !property) return res.status(404).json({ error: 'not found' });

  const or = orByPropIdOrDoorLoop(property.id, (property as any).doorloop_id ?? null);
  const { data: units = [] } = await supa.from('units').select('*').or(or);
  let { data: leases = [] } = await supa.from('leases').select('*').or(or);
  leases = (leases || []).map(l => ({ ...l, status: normalizeStatus(l.status) }));

  const activeLeases = leases.filter(l => l.status === 'active');
  const safeUnits = units || [];
  const occupancyPct = safeUnits.length ? Math.round((activeLeases.length / safeUnits.length) * 1000) / 10 : 0;
  const rentNums = activeLeases.map(l => Number((l as any).rent_cents ?? (l as any).rent ?? 0)).filter(n => Number.isFinite(n));
  const avgRentCents = rentNums.length ? Math.round(rentNums.reduce((a,b)=>a+b,0)/rentNums.length) : null;

  // Owner (by PK)
  let owner = null as any;
  if ((property as any).owner_id) {
    const r = await supa.from('owners').select('*').eq('id', (property as any).owner_id).single();
    owner = r.data || null;
  }

  const addr = mapAddress(property as any);
  return res.json({ property: { ...property, ...addr }, units: safeUnits, leases, owner, kpis: { units: safeUnits.length, activeLeases: activeLeases.length, occupancyPct, avgRentCents } });
});

// UNIT CARD
rpc.get('/get_unit_card', async (req, res) => {
  const id = Number(req.query.id);
  if (!id) return res.status(400).json({ error: 'missing id' });
  const supa = getServerClient();

  const { data: unit, error } = await supa.from('units').select('*').eq('id', id).single();
  if (error || !unit) return res.status(404).json({ error: 'not found' });

  // Property by PK or DoorLoop fallback
  let property = null as any;
  if ((unit as any).property_id) {
    const r = await supa.from('properties').select('*').eq('id', (unit as any).property_id).single();
    property = r.data || null;
  }
  if (!property && (unit as any).doorloop_property_id) {
    const r = await supa.from('properties').select('*').eq('doorloop_id', (unit as any).doorloop_property_id).single();
    property = r.data || null;
  }
  const propAddr = property ? mapAddress(property) : {};

  let { data: leases = [] } = await supa.from('leases').select('*').or(orByPropIdOrDoorLoop((unit as any).property_id ?? null, (unit as any).doorloop_property_id ?? null));
  leases = (leases || []).map(l => ({ ...l, status: normalizeStatus(l.status) }));
  const current = leases.find(l => l.status === 'active') || leases[0] || null;

  let tenant = null as any;
  if (current?.tenant_id) {
    const r = await supa.from('tenants').select('*').eq('id', current.tenant_id).single();
    tenant = r.data || null;
  }

  return res.json({ unit, property: property ? { ...property, ...propAddr } : null, lease: current, tenant });
});

// LEASE CARD
rpc.get('/get_lease_card', async (req, res) => {
  const id = Number(req.query.id);
  if (!id) return res.status(400).json({ error: 'missing id' });
  const supa = getServerClient();

  const { data: lease, error } = await supa.from('leases').select('*').eq('id', id).single();
  if (error || !lease) return res.status(404).json({ error: 'not found' });
  const norm = { ...lease, status: normalizeStatus((lease as any).status) };

  let property = null as any;
  if ((lease as any).property_id) {
    const r = await supa.from('properties').select('*').eq('id', (lease as any).property_id).single();
    property = r.data || null;
  }
  if (!property && (lease as any).doorloop_property_id) {
    const r = await supa.from('properties').select('*').eq('doorloop_id', (lease as any).doorloop_property_id).single();
    property = r.data || null;
  }
  const propAddr = property ? mapAddress(property) : {};

  const { data: unit } = await supa.from('units').select('*').eq('id', (lease as any).unit_id).single();
  const { data: tenant } = await supa.from('tenants').select('*').eq('id', (lease as any).tenant_id).single();

  return res.json({ lease: norm, unit: unit || null, property: property ? { ...property, ...propAddr } : null, tenant: tenant || null });
});

// TENANT CARD
rpc.get('/get_tenant_card', async (req, res) => {
  const id = Number(req.query.id);
  if (!id) return res.status(400).json({ error: 'missing id' });
  const supa = getServerClient();

  const { data: tenant, error } = await supa.from('tenants').select('*').eq('id', id).single();
  if (error || !tenant) return res.status(404).json({ error: 'not found' });

  let { data: leases = [] } = await supa.from('leases').select('*').eq('tenant_id', id);
  leases = (leases || []).map(l => ({ ...l, status: normalizeStatus(l.status) }));

  const propIds = Array.from(new Set(leases.map(l => (l as any).property_id).filter(Boolean)));
  const dlIds = Array.from(new Set(leases.map(l => (l as any).doorloop_property_id).filter(Boolean)));

  let properties: any[] = [];
  if (propIds.length) {
    const r = await supa.from('properties').select('*').in('id', propIds);
    properties = properties.concat(r.data || []);
  }
  if (dlIds.length) {
    const r = await supa.from('properties').select('*').in('doorloop_id', dlIds);
    properties = properties.concat(r.data || []);
  }

  // deâ€‘dupe by PK id
  const seen = new Set<number>();
  properties = properties.filter(p => (p?.id && !seen.has(p.id) && seen.add(p.id)) || false).map(p => ({ ...p, ...mapAddress(p) }));

  return res.json({ tenant, leases, properties });
});

// OWNER CARD
rpc.get('/get_owner_card', async (req, res) => {
  const id = Number(req.query.id);
  if (!id) return res.status(400).json({ error: 'missing id' });
  const supa = getServerClient();

  const { data: owner, error } = await supa.from('owners').select('*').eq('id', id).single();
  if (error || !owner) return res.status(404).json({ error: 'not found' });

  const { data: properties = [] } = await supa.from('properties').select('*').eq('owner_id', id);
  const pids = (properties || []).map(p => p.id);
  const { data: units = [] } = pids.length ? await supa.from('units').select('*').in('property_id', pids) : { data: [] } as any;
  const { data: leasesRaw = [] } = pids.length ? await supa.from('leases').select('*').in('property_id', pids) : { data: [] } as any;
  const leases = (leasesRaw || []).map(l => ({ ...l, status: normalizeStatus(l.status) }));

  const active = leases.filter(l => l.status === 'active').length;
  const occPct = units.length ? Math.round((active / units.length) * 1000) / 10 : 0;

  return res.json({ owner, properties: (properties || []).map(p => ({ ...p, ...mapAddress(p) })), kpis: { units: units.length, activeLeases: active, occupancyPct: occPct } });
});

export default rpc;